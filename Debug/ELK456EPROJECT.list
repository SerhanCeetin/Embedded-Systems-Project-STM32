
ELK456EPROJECT.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000000bc  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000a2ac  080000bc  080000bc  000100bc  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000554  0800a368  0800a368  0001a368  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800a8bc  0800a8bc  000201e4  2**0
                  CONTENTS
  4 .ARM          00000008  0800a8bc  0800a8bc  0001a8bc  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800a8c4  0800a8c4  000201e4  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800a8c4  0800a8c4  0001a8c4  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800a8c8  0800a8c8  0001a8c8  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         000001e4  20000000  0800a8cc  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000001d4  200001e4  0800aab0  000201e4  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  200003b8  0800aab0  000203b8  2**0
                  ALLOC
 11 .ARM.attributes 00000028  00000000  00000000  000201e4  2**0
                  CONTENTS, READONLY
 12 .debug_info   0001586a  00000000  00000000  0002020c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 000028a4  00000000  00000000  00035a76  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 000013e8  00000000  00000000  00038320  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 000012e0  00000000  00000000  00039708  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00019262  00000000  00000000  0003a9e8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00016b4c  00000000  00000000  00053c4a  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000a1592  00000000  00000000  0006a796  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000050  00000000  00000000  0010bd28  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00005b7c  00000000  00000000  0010bd78  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080000bc <__do_global_dtors_aux>:
 80000bc:	b510      	push	{r4, lr}
 80000be:	4c06      	ldr	r4, [pc, #24]	; (80000d8 <__do_global_dtors_aux+0x1c>)
 80000c0:	7823      	ldrb	r3, [r4, #0]
 80000c2:	2b00      	cmp	r3, #0
 80000c4:	d107      	bne.n	80000d6 <__do_global_dtors_aux+0x1a>
 80000c6:	4b05      	ldr	r3, [pc, #20]	; (80000dc <__do_global_dtors_aux+0x20>)
 80000c8:	2b00      	cmp	r3, #0
 80000ca:	d002      	beq.n	80000d2 <__do_global_dtors_aux+0x16>
 80000cc:	4804      	ldr	r0, [pc, #16]	; (80000e0 <__do_global_dtors_aux+0x24>)
 80000ce:	e000      	b.n	80000d2 <__do_global_dtors_aux+0x16>
 80000d0:	bf00      	nop
 80000d2:	2301      	movs	r3, #1
 80000d4:	7023      	strb	r3, [r4, #0]
 80000d6:	bd10      	pop	{r4, pc}
 80000d8:	200001e4 	.word	0x200001e4
 80000dc:	00000000 	.word	0x00000000
 80000e0:	0800a350 	.word	0x0800a350

080000e4 <frame_dummy>:
 80000e4:	4b04      	ldr	r3, [pc, #16]	; (80000f8 <frame_dummy+0x14>)
 80000e6:	b510      	push	{r4, lr}
 80000e8:	2b00      	cmp	r3, #0
 80000ea:	d003      	beq.n	80000f4 <frame_dummy+0x10>
 80000ec:	4903      	ldr	r1, [pc, #12]	; (80000fc <frame_dummy+0x18>)
 80000ee:	4804      	ldr	r0, [pc, #16]	; (8000100 <frame_dummy+0x1c>)
 80000f0:	e000      	b.n	80000f4 <frame_dummy+0x10>
 80000f2:	bf00      	nop
 80000f4:	bd10      	pop	{r4, pc}
 80000f6:	46c0      	nop			; (mov r8, r8)
 80000f8:	00000000 	.word	0x00000000
 80000fc:	200001e8 	.word	0x200001e8
 8000100:	0800a350 	.word	0x0800a350

08000104 <strlen>:
 8000104:	2300      	movs	r3, #0
 8000106:	5cc2      	ldrb	r2, [r0, r3]
 8000108:	3301      	adds	r3, #1
 800010a:	2a00      	cmp	r2, #0
 800010c:	d1fb      	bne.n	8000106 <strlen+0x2>
 800010e:	1e58      	subs	r0, r3, #1
 8000110:	4770      	bx	lr
	...

08000114 <__gnu_thumb1_case_uqi>:
 8000114:	b402      	push	{r1}
 8000116:	4671      	mov	r1, lr
 8000118:	0849      	lsrs	r1, r1, #1
 800011a:	0049      	lsls	r1, r1, #1
 800011c:	5c09      	ldrb	r1, [r1, r0]
 800011e:	0049      	lsls	r1, r1, #1
 8000120:	448e      	add	lr, r1
 8000122:	bc02      	pop	{r1}
 8000124:	4770      	bx	lr
 8000126:	46c0      	nop			; (mov r8, r8)

08000128 <__gnu_thumb1_case_shi>:
 8000128:	b403      	push	{r0, r1}
 800012a:	4671      	mov	r1, lr
 800012c:	0849      	lsrs	r1, r1, #1
 800012e:	0040      	lsls	r0, r0, #1
 8000130:	0049      	lsls	r1, r1, #1
 8000132:	5e09      	ldrsh	r1, [r1, r0]
 8000134:	0049      	lsls	r1, r1, #1
 8000136:	448e      	add	lr, r1
 8000138:	bc03      	pop	{r0, r1}
 800013a:	4770      	bx	lr

0800013c <__udivsi3>:
 800013c:	2200      	movs	r2, #0
 800013e:	0843      	lsrs	r3, r0, #1
 8000140:	428b      	cmp	r3, r1
 8000142:	d374      	bcc.n	800022e <__udivsi3+0xf2>
 8000144:	0903      	lsrs	r3, r0, #4
 8000146:	428b      	cmp	r3, r1
 8000148:	d35f      	bcc.n	800020a <__udivsi3+0xce>
 800014a:	0a03      	lsrs	r3, r0, #8
 800014c:	428b      	cmp	r3, r1
 800014e:	d344      	bcc.n	80001da <__udivsi3+0x9e>
 8000150:	0b03      	lsrs	r3, r0, #12
 8000152:	428b      	cmp	r3, r1
 8000154:	d328      	bcc.n	80001a8 <__udivsi3+0x6c>
 8000156:	0c03      	lsrs	r3, r0, #16
 8000158:	428b      	cmp	r3, r1
 800015a:	d30d      	bcc.n	8000178 <__udivsi3+0x3c>
 800015c:	22ff      	movs	r2, #255	; 0xff
 800015e:	0209      	lsls	r1, r1, #8
 8000160:	ba12      	rev	r2, r2
 8000162:	0c03      	lsrs	r3, r0, #16
 8000164:	428b      	cmp	r3, r1
 8000166:	d302      	bcc.n	800016e <__udivsi3+0x32>
 8000168:	1212      	asrs	r2, r2, #8
 800016a:	0209      	lsls	r1, r1, #8
 800016c:	d065      	beq.n	800023a <__udivsi3+0xfe>
 800016e:	0b03      	lsrs	r3, r0, #12
 8000170:	428b      	cmp	r3, r1
 8000172:	d319      	bcc.n	80001a8 <__udivsi3+0x6c>
 8000174:	e000      	b.n	8000178 <__udivsi3+0x3c>
 8000176:	0a09      	lsrs	r1, r1, #8
 8000178:	0bc3      	lsrs	r3, r0, #15
 800017a:	428b      	cmp	r3, r1
 800017c:	d301      	bcc.n	8000182 <__udivsi3+0x46>
 800017e:	03cb      	lsls	r3, r1, #15
 8000180:	1ac0      	subs	r0, r0, r3
 8000182:	4152      	adcs	r2, r2
 8000184:	0b83      	lsrs	r3, r0, #14
 8000186:	428b      	cmp	r3, r1
 8000188:	d301      	bcc.n	800018e <__udivsi3+0x52>
 800018a:	038b      	lsls	r3, r1, #14
 800018c:	1ac0      	subs	r0, r0, r3
 800018e:	4152      	adcs	r2, r2
 8000190:	0b43      	lsrs	r3, r0, #13
 8000192:	428b      	cmp	r3, r1
 8000194:	d301      	bcc.n	800019a <__udivsi3+0x5e>
 8000196:	034b      	lsls	r3, r1, #13
 8000198:	1ac0      	subs	r0, r0, r3
 800019a:	4152      	adcs	r2, r2
 800019c:	0b03      	lsrs	r3, r0, #12
 800019e:	428b      	cmp	r3, r1
 80001a0:	d301      	bcc.n	80001a6 <__udivsi3+0x6a>
 80001a2:	030b      	lsls	r3, r1, #12
 80001a4:	1ac0      	subs	r0, r0, r3
 80001a6:	4152      	adcs	r2, r2
 80001a8:	0ac3      	lsrs	r3, r0, #11
 80001aa:	428b      	cmp	r3, r1
 80001ac:	d301      	bcc.n	80001b2 <__udivsi3+0x76>
 80001ae:	02cb      	lsls	r3, r1, #11
 80001b0:	1ac0      	subs	r0, r0, r3
 80001b2:	4152      	adcs	r2, r2
 80001b4:	0a83      	lsrs	r3, r0, #10
 80001b6:	428b      	cmp	r3, r1
 80001b8:	d301      	bcc.n	80001be <__udivsi3+0x82>
 80001ba:	028b      	lsls	r3, r1, #10
 80001bc:	1ac0      	subs	r0, r0, r3
 80001be:	4152      	adcs	r2, r2
 80001c0:	0a43      	lsrs	r3, r0, #9
 80001c2:	428b      	cmp	r3, r1
 80001c4:	d301      	bcc.n	80001ca <__udivsi3+0x8e>
 80001c6:	024b      	lsls	r3, r1, #9
 80001c8:	1ac0      	subs	r0, r0, r3
 80001ca:	4152      	adcs	r2, r2
 80001cc:	0a03      	lsrs	r3, r0, #8
 80001ce:	428b      	cmp	r3, r1
 80001d0:	d301      	bcc.n	80001d6 <__udivsi3+0x9a>
 80001d2:	020b      	lsls	r3, r1, #8
 80001d4:	1ac0      	subs	r0, r0, r3
 80001d6:	4152      	adcs	r2, r2
 80001d8:	d2cd      	bcs.n	8000176 <__udivsi3+0x3a>
 80001da:	09c3      	lsrs	r3, r0, #7
 80001dc:	428b      	cmp	r3, r1
 80001de:	d301      	bcc.n	80001e4 <__udivsi3+0xa8>
 80001e0:	01cb      	lsls	r3, r1, #7
 80001e2:	1ac0      	subs	r0, r0, r3
 80001e4:	4152      	adcs	r2, r2
 80001e6:	0983      	lsrs	r3, r0, #6
 80001e8:	428b      	cmp	r3, r1
 80001ea:	d301      	bcc.n	80001f0 <__udivsi3+0xb4>
 80001ec:	018b      	lsls	r3, r1, #6
 80001ee:	1ac0      	subs	r0, r0, r3
 80001f0:	4152      	adcs	r2, r2
 80001f2:	0943      	lsrs	r3, r0, #5
 80001f4:	428b      	cmp	r3, r1
 80001f6:	d301      	bcc.n	80001fc <__udivsi3+0xc0>
 80001f8:	014b      	lsls	r3, r1, #5
 80001fa:	1ac0      	subs	r0, r0, r3
 80001fc:	4152      	adcs	r2, r2
 80001fe:	0903      	lsrs	r3, r0, #4
 8000200:	428b      	cmp	r3, r1
 8000202:	d301      	bcc.n	8000208 <__udivsi3+0xcc>
 8000204:	010b      	lsls	r3, r1, #4
 8000206:	1ac0      	subs	r0, r0, r3
 8000208:	4152      	adcs	r2, r2
 800020a:	08c3      	lsrs	r3, r0, #3
 800020c:	428b      	cmp	r3, r1
 800020e:	d301      	bcc.n	8000214 <__udivsi3+0xd8>
 8000210:	00cb      	lsls	r3, r1, #3
 8000212:	1ac0      	subs	r0, r0, r3
 8000214:	4152      	adcs	r2, r2
 8000216:	0883      	lsrs	r3, r0, #2
 8000218:	428b      	cmp	r3, r1
 800021a:	d301      	bcc.n	8000220 <__udivsi3+0xe4>
 800021c:	008b      	lsls	r3, r1, #2
 800021e:	1ac0      	subs	r0, r0, r3
 8000220:	4152      	adcs	r2, r2
 8000222:	0843      	lsrs	r3, r0, #1
 8000224:	428b      	cmp	r3, r1
 8000226:	d301      	bcc.n	800022c <__udivsi3+0xf0>
 8000228:	004b      	lsls	r3, r1, #1
 800022a:	1ac0      	subs	r0, r0, r3
 800022c:	4152      	adcs	r2, r2
 800022e:	1a41      	subs	r1, r0, r1
 8000230:	d200      	bcs.n	8000234 <__udivsi3+0xf8>
 8000232:	4601      	mov	r1, r0
 8000234:	4152      	adcs	r2, r2
 8000236:	4610      	mov	r0, r2
 8000238:	4770      	bx	lr
 800023a:	e7ff      	b.n	800023c <__udivsi3+0x100>
 800023c:	b501      	push	{r0, lr}
 800023e:	2000      	movs	r0, #0
 8000240:	f000 f8f0 	bl	8000424 <__aeabi_idiv0>
 8000244:	bd02      	pop	{r1, pc}
 8000246:	46c0      	nop			; (mov r8, r8)

08000248 <__aeabi_uidivmod>:
 8000248:	2900      	cmp	r1, #0
 800024a:	d0f7      	beq.n	800023c <__udivsi3+0x100>
 800024c:	e776      	b.n	800013c <__udivsi3>
 800024e:	4770      	bx	lr

08000250 <__divsi3>:
 8000250:	4603      	mov	r3, r0
 8000252:	430b      	orrs	r3, r1
 8000254:	d47f      	bmi.n	8000356 <__divsi3+0x106>
 8000256:	2200      	movs	r2, #0
 8000258:	0843      	lsrs	r3, r0, #1
 800025a:	428b      	cmp	r3, r1
 800025c:	d374      	bcc.n	8000348 <__divsi3+0xf8>
 800025e:	0903      	lsrs	r3, r0, #4
 8000260:	428b      	cmp	r3, r1
 8000262:	d35f      	bcc.n	8000324 <__divsi3+0xd4>
 8000264:	0a03      	lsrs	r3, r0, #8
 8000266:	428b      	cmp	r3, r1
 8000268:	d344      	bcc.n	80002f4 <__divsi3+0xa4>
 800026a:	0b03      	lsrs	r3, r0, #12
 800026c:	428b      	cmp	r3, r1
 800026e:	d328      	bcc.n	80002c2 <__divsi3+0x72>
 8000270:	0c03      	lsrs	r3, r0, #16
 8000272:	428b      	cmp	r3, r1
 8000274:	d30d      	bcc.n	8000292 <__divsi3+0x42>
 8000276:	22ff      	movs	r2, #255	; 0xff
 8000278:	0209      	lsls	r1, r1, #8
 800027a:	ba12      	rev	r2, r2
 800027c:	0c03      	lsrs	r3, r0, #16
 800027e:	428b      	cmp	r3, r1
 8000280:	d302      	bcc.n	8000288 <__divsi3+0x38>
 8000282:	1212      	asrs	r2, r2, #8
 8000284:	0209      	lsls	r1, r1, #8
 8000286:	d065      	beq.n	8000354 <__divsi3+0x104>
 8000288:	0b03      	lsrs	r3, r0, #12
 800028a:	428b      	cmp	r3, r1
 800028c:	d319      	bcc.n	80002c2 <__divsi3+0x72>
 800028e:	e000      	b.n	8000292 <__divsi3+0x42>
 8000290:	0a09      	lsrs	r1, r1, #8
 8000292:	0bc3      	lsrs	r3, r0, #15
 8000294:	428b      	cmp	r3, r1
 8000296:	d301      	bcc.n	800029c <__divsi3+0x4c>
 8000298:	03cb      	lsls	r3, r1, #15
 800029a:	1ac0      	subs	r0, r0, r3
 800029c:	4152      	adcs	r2, r2
 800029e:	0b83      	lsrs	r3, r0, #14
 80002a0:	428b      	cmp	r3, r1
 80002a2:	d301      	bcc.n	80002a8 <__divsi3+0x58>
 80002a4:	038b      	lsls	r3, r1, #14
 80002a6:	1ac0      	subs	r0, r0, r3
 80002a8:	4152      	adcs	r2, r2
 80002aa:	0b43      	lsrs	r3, r0, #13
 80002ac:	428b      	cmp	r3, r1
 80002ae:	d301      	bcc.n	80002b4 <__divsi3+0x64>
 80002b0:	034b      	lsls	r3, r1, #13
 80002b2:	1ac0      	subs	r0, r0, r3
 80002b4:	4152      	adcs	r2, r2
 80002b6:	0b03      	lsrs	r3, r0, #12
 80002b8:	428b      	cmp	r3, r1
 80002ba:	d301      	bcc.n	80002c0 <__divsi3+0x70>
 80002bc:	030b      	lsls	r3, r1, #12
 80002be:	1ac0      	subs	r0, r0, r3
 80002c0:	4152      	adcs	r2, r2
 80002c2:	0ac3      	lsrs	r3, r0, #11
 80002c4:	428b      	cmp	r3, r1
 80002c6:	d301      	bcc.n	80002cc <__divsi3+0x7c>
 80002c8:	02cb      	lsls	r3, r1, #11
 80002ca:	1ac0      	subs	r0, r0, r3
 80002cc:	4152      	adcs	r2, r2
 80002ce:	0a83      	lsrs	r3, r0, #10
 80002d0:	428b      	cmp	r3, r1
 80002d2:	d301      	bcc.n	80002d8 <__divsi3+0x88>
 80002d4:	028b      	lsls	r3, r1, #10
 80002d6:	1ac0      	subs	r0, r0, r3
 80002d8:	4152      	adcs	r2, r2
 80002da:	0a43      	lsrs	r3, r0, #9
 80002dc:	428b      	cmp	r3, r1
 80002de:	d301      	bcc.n	80002e4 <__divsi3+0x94>
 80002e0:	024b      	lsls	r3, r1, #9
 80002e2:	1ac0      	subs	r0, r0, r3
 80002e4:	4152      	adcs	r2, r2
 80002e6:	0a03      	lsrs	r3, r0, #8
 80002e8:	428b      	cmp	r3, r1
 80002ea:	d301      	bcc.n	80002f0 <__divsi3+0xa0>
 80002ec:	020b      	lsls	r3, r1, #8
 80002ee:	1ac0      	subs	r0, r0, r3
 80002f0:	4152      	adcs	r2, r2
 80002f2:	d2cd      	bcs.n	8000290 <__divsi3+0x40>
 80002f4:	09c3      	lsrs	r3, r0, #7
 80002f6:	428b      	cmp	r3, r1
 80002f8:	d301      	bcc.n	80002fe <__divsi3+0xae>
 80002fa:	01cb      	lsls	r3, r1, #7
 80002fc:	1ac0      	subs	r0, r0, r3
 80002fe:	4152      	adcs	r2, r2
 8000300:	0983      	lsrs	r3, r0, #6
 8000302:	428b      	cmp	r3, r1
 8000304:	d301      	bcc.n	800030a <__divsi3+0xba>
 8000306:	018b      	lsls	r3, r1, #6
 8000308:	1ac0      	subs	r0, r0, r3
 800030a:	4152      	adcs	r2, r2
 800030c:	0943      	lsrs	r3, r0, #5
 800030e:	428b      	cmp	r3, r1
 8000310:	d301      	bcc.n	8000316 <__divsi3+0xc6>
 8000312:	014b      	lsls	r3, r1, #5
 8000314:	1ac0      	subs	r0, r0, r3
 8000316:	4152      	adcs	r2, r2
 8000318:	0903      	lsrs	r3, r0, #4
 800031a:	428b      	cmp	r3, r1
 800031c:	d301      	bcc.n	8000322 <__divsi3+0xd2>
 800031e:	010b      	lsls	r3, r1, #4
 8000320:	1ac0      	subs	r0, r0, r3
 8000322:	4152      	adcs	r2, r2
 8000324:	08c3      	lsrs	r3, r0, #3
 8000326:	428b      	cmp	r3, r1
 8000328:	d301      	bcc.n	800032e <__divsi3+0xde>
 800032a:	00cb      	lsls	r3, r1, #3
 800032c:	1ac0      	subs	r0, r0, r3
 800032e:	4152      	adcs	r2, r2
 8000330:	0883      	lsrs	r3, r0, #2
 8000332:	428b      	cmp	r3, r1
 8000334:	d301      	bcc.n	800033a <__divsi3+0xea>
 8000336:	008b      	lsls	r3, r1, #2
 8000338:	1ac0      	subs	r0, r0, r3
 800033a:	4152      	adcs	r2, r2
 800033c:	0843      	lsrs	r3, r0, #1
 800033e:	428b      	cmp	r3, r1
 8000340:	d301      	bcc.n	8000346 <__divsi3+0xf6>
 8000342:	004b      	lsls	r3, r1, #1
 8000344:	1ac0      	subs	r0, r0, r3
 8000346:	4152      	adcs	r2, r2
 8000348:	1a41      	subs	r1, r0, r1
 800034a:	d200      	bcs.n	800034e <__divsi3+0xfe>
 800034c:	4601      	mov	r1, r0
 800034e:	4152      	adcs	r2, r2
 8000350:	4610      	mov	r0, r2
 8000352:	4770      	bx	lr
 8000354:	e05d      	b.n	8000412 <__divsi3+0x1c2>
 8000356:	0fca      	lsrs	r2, r1, #31
 8000358:	d000      	beq.n	800035c <__divsi3+0x10c>
 800035a:	4249      	negs	r1, r1
 800035c:	1003      	asrs	r3, r0, #32
 800035e:	d300      	bcc.n	8000362 <__divsi3+0x112>
 8000360:	4240      	negs	r0, r0
 8000362:	4053      	eors	r3, r2
 8000364:	2200      	movs	r2, #0
 8000366:	469c      	mov	ip, r3
 8000368:	0903      	lsrs	r3, r0, #4
 800036a:	428b      	cmp	r3, r1
 800036c:	d32d      	bcc.n	80003ca <__divsi3+0x17a>
 800036e:	0a03      	lsrs	r3, r0, #8
 8000370:	428b      	cmp	r3, r1
 8000372:	d312      	bcc.n	800039a <__divsi3+0x14a>
 8000374:	22fc      	movs	r2, #252	; 0xfc
 8000376:	0189      	lsls	r1, r1, #6
 8000378:	ba12      	rev	r2, r2
 800037a:	0a03      	lsrs	r3, r0, #8
 800037c:	428b      	cmp	r3, r1
 800037e:	d30c      	bcc.n	800039a <__divsi3+0x14a>
 8000380:	0189      	lsls	r1, r1, #6
 8000382:	1192      	asrs	r2, r2, #6
 8000384:	428b      	cmp	r3, r1
 8000386:	d308      	bcc.n	800039a <__divsi3+0x14a>
 8000388:	0189      	lsls	r1, r1, #6
 800038a:	1192      	asrs	r2, r2, #6
 800038c:	428b      	cmp	r3, r1
 800038e:	d304      	bcc.n	800039a <__divsi3+0x14a>
 8000390:	0189      	lsls	r1, r1, #6
 8000392:	d03a      	beq.n	800040a <__divsi3+0x1ba>
 8000394:	1192      	asrs	r2, r2, #6
 8000396:	e000      	b.n	800039a <__divsi3+0x14a>
 8000398:	0989      	lsrs	r1, r1, #6
 800039a:	09c3      	lsrs	r3, r0, #7
 800039c:	428b      	cmp	r3, r1
 800039e:	d301      	bcc.n	80003a4 <__divsi3+0x154>
 80003a0:	01cb      	lsls	r3, r1, #7
 80003a2:	1ac0      	subs	r0, r0, r3
 80003a4:	4152      	adcs	r2, r2
 80003a6:	0983      	lsrs	r3, r0, #6
 80003a8:	428b      	cmp	r3, r1
 80003aa:	d301      	bcc.n	80003b0 <__divsi3+0x160>
 80003ac:	018b      	lsls	r3, r1, #6
 80003ae:	1ac0      	subs	r0, r0, r3
 80003b0:	4152      	adcs	r2, r2
 80003b2:	0943      	lsrs	r3, r0, #5
 80003b4:	428b      	cmp	r3, r1
 80003b6:	d301      	bcc.n	80003bc <__divsi3+0x16c>
 80003b8:	014b      	lsls	r3, r1, #5
 80003ba:	1ac0      	subs	r0, r0, r3
 80003bc:	4152      	adcs	r2, r2
 80003be:	0903      	lsrs	r3, r0, #4
 80003c0:	428b      	cmp	r3, r1
 80003c2:	d301      	bcc.n	80003c8 <__divsi3+0x178>
 80003c4:	010b      	lsls	r3, r1, #4
 80003c6:	1ac0      	subs	r0, r0, r3
 80003c8:	4152      	adcs	r2, r2
 80003ca:	08c3      	lsrs	r3, r0, #3
 80003cc:	428b      	cmp	r3, r1
 80003ce:	d301      	bcc.n	80003d4 <__divsi3+0x184>
 80003d0:	00cb      	lsls	r3, r1, #3
 80003d2:	1ac0      	subs	r0, r0, r3
 80003d4:	4152      	adcs	r2, r2
 80003d6:	0883      	lsrs	r3, r0, #2
 80003d8:	428b      	cmp	r3, r1
 80003da:	d301      	bcc.n	80003e0 <__divsi3+0x190>
 80003dc:	008b      	lsls	r3, r1, #2
 80003de:	1ac0      	subs	r0, r0, r3
 80003e0:	4152      	adcs	r2, r2
 80003e2:	d2d9      	bcs.n	8000398 <__divsi3+0x148>
 80003e4:	0843      	lsrs	r3, r0, #1
 80003e6:	428b      	cmp	r3, r1
 80003e8:	d301      	bcc.n	80003ee <__divsi3+0x19e>
 80003ea:	004b      	lsls	r3, r1, #1
 80003ec:	1ac0      	subs	r0, r0, r3
 80003ee:	4152      	adcs	r2, r2
 80003f0:	1a41      	subs	r1, r0, r1
 80003f2:	d200      	bcs.n	80003f6 <__divsi3+0x1a6>
 80003f4:	4601      	mov	r1, r0
 80003f6:	4663      	mov	r3, ip
 80003f8:	4152      	adcs	r2, r2
 80003fa:	105b      	asrs	r3, r3, #1
 80003fc:	4610      	mov	r0, r2
 80003fe:	d301      	bcc.n	8000404 <__divsi3+0x1b4>
 8000400:	4240      	negs	r0, r0
 8000402:	2b00      	cmp	r3, #0
 8000404:	d500      	bpl.n	8000408 <__divsi3+0x1b8>
 8000406:	4249      	negs	r1, r1
 8000408:	4770      	bx	lr
 800040a:	4663      	mov	r3, ip
 800040c:	105b      	asrs	r3, r3, #1
 800040e:	d300      	bcc.n	8000412 <__divsi3+0x1c2>
 8000410:	4240      	negs	r0, r0
 8000412:	b501      	push	{r0, lr}
 8000414:	2000      	movs	r0, #0
 8000416:	f000 f805 	bl	8000424 <__aeabi_idiv0>
 800041a:	bd02      	pop	{r1, pc}

0800041c <__aeabi_idivmod>:
 800041c:	2900      	cmp	r1, #0
 800041e:	d0f8      	beq.n	8000412 <__divsi3+0x1c2>
 8000420:	e716      	b.n	8000250 <__divsi3>
 8000422:	4770      	bx	lr

08000424 <__aeabi_idiv0>:
 8000424:	4770      	bx	lr
 8000426:	46c0      	nop			; (mov r8, r8)

08000428 <__aeabi_cdrcmple>:
 8000428:	4684      	mov	ip, r0
 800042a:	0010      	movs	r0, r2
 800042c:	4662      	mov	r2, ip
 800042e:	468c      	mov	ip, r1
 8000430:	0019      	movs	r1, r3
 8000432:	4663      	mov	r3, ip
 8000434:	e000      	b.n	8000438 <__aeabi_cdcmpeq>
 8000436:	46c0      	nop			; (mov r8, r8)

08000438 <__aeabi_cdcmpeq>:
 8000438:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 800043a:	f001 f8e3 	bl	8001604 <__ledf2>
 800043e:	2800      	cmp	r0, #0
 8000440:	d401      	bmi.n	8000446 <__aeabi_cdcmpeq+0xe>
 8000442:	2100      	movs	r1, #0
 8000444:	42c8      	cmn	r0, r1
 8000446:	bd1f      	pop	{r0, r1, r2, r3, r4, pc}

08000448 <__aeabi_dcmpeq>:
 8000448:	b510      	push	{r4, lr}
 800044a:	f001 f833 	bl	80014b4 <__eqdf2>
 800044e:	4240      	negs	r0, r0
 8000450:	3001      	adds	r0, #1
 8000452:	bd10      	pop	{r4, pc}

08000454 <__aeabi_dcmplt>:
 8000454:	b510      	push	{r4, lr}
 8000456:	f001 f8d5 	bl	8001604 <__ledf2>
 800045a:	2800      	cmp	r0, #0
 800045c:	db01      	blt.n	8000462 <__aeabi_dcmplt+0xe>
 800045e:	2000      	movs	r0, #0
 8000460:	bd10      	pop	{r4, pc}
 8000462:	2001      	movs	r0, #1
 8000464:	bd10      	pop	{r4, pc}
 8000466:	46c0      	nop			; (mov r8, r8)

08000468 <__aeabi_dcmple>:
 8000468:	b510      	push	{r4, lr}
 800046a:	f001 f8cb 	bl	8001604 <__ledf2>
 800046e:	2800      	cmp	r0, #0
 8000470:	dd01      	ble.n	8000476 <__aeabi_dcmple+0xe>
 8000472:	2000      	movs	r0, #0
 8000474:	bd10      	pop	{r4, pc}
 8000476:	2001      	movs	r0, #1
 8000478:	bd10      	pop	{r4, pc}
 800047a:	46c0      	nop			; (mov r8, r8)

0800047c <__aeabi_dcmpgt>:
 800047c:	b510      	push	{r4, lr}
 800047e:	f001 f85b 	bl	8001538 <__gedf2>
 8000482:	2800      	cmp	r0, #0
 8000484:	dc01      	bgt.n	800048a <__aeabi_dcmpgt+0xe>
 8000486:	2000      	movs	r0, #0
 8000488:	bd10      	pop	{r4, pc}
 800048a:	2001      	movs	r0, #1
 800048c:	bd10      	pop	{r4, pc}
 800048e:	46c0      	nop			; (mov r8, r8)

08000490 <__aeabi_dcmpge>:
 8000490:	b510      	push	{r4, lr}
 8000492:	f001 f851 	bl	8001538 <__gedf2>
 8000496:	2800      	cmp	r0, #0
 8000498:	da01      	bge.n	800049e <__aeabi_dcmpge+0xe>
 800049a:	2000      	movs	r0, #0
 800049c:	bd10      	pop	{r4, pc}
 800049e:	2001      	movs	r0, #1
 80004a0:	bd10      	pop	{r4, pc}
 80004a2:	46c0      	nop			; (mov r8, r8)

080004a4 <__aeabi_cfrcmple>:
 80004a4:	4684      	mov	ip, r0
 80004a6:	0008      	movs	r0, r1
 80004a8:	4661      	mov	r1, ip
 80004aa:	e7ff      	b.n	80004ac <__aeabi_cfcmpeq>

080004ac <__aeabi_cfcmpeq>:
 80004ac:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 80004ae:	f000 f98b 	bl	80007c8 <__lesf2>
 80004b2:	2800      	cmp	r0, #0
 80004b4:	d401      	bmi.n	80004ba <__aeabi_cfcmpeq+0xe>
 80004b6:	2100      	movs	r1, #0
 80004b8:	42c8      	cmn	r0, r1
 80004ba:	bd1f      	pop	{r0, r1, r2, r3, r4, pc}

080004bc <__aeabi_fcmpeq>:
 80004bc:	b510      	push	{r4, lr}
 80004be:	f000 f917 	bl	80006f0 <__eqsf2>
 80004c2:	4240      	negs	r0, r0
 80004c4:	3001      	adds	r0, #1
 80004c6:	bd10      	pop	{r4, pc}

080004c8 <__aeabi_fcmplt>:
 80004c8:	b510      	push	{r4, lr}
 80004ca:	f000 f97d 	bl	80007c8 <__lesf2>
 80004ce:	2800      	cmp	r0, #0
 80004d0:	db01      	blt.n	80004d6 <__aeabi_fcmplt+0xe>
 80004d2:	2000      	movs	r0, #0
 80004d4:	bd10      	pop	{r4, pc}
 80004d6:	2001      	movs	r0, #1
 80004d8:	bd10      	pop	{r4, pc}
 80004da:	46c0      	nop			; (mov r8, r8)

080004dc <__aeabi_fcmple>:
 80004dc:	b510      	push	{r4, lr}
 80004de:	f000 f973 	bl	80007c8 <__lesf2>
 80004e2:	2800      	cmp	r0, #0
 80004e4:	dd01      	ble.n	80004ea <__aeabi_fcmple+0xe>
 80004e6:	2000      	movs	r0, #0
 80004e8:	bd10      	pop	{r4, pc}
 80004ea:	2001      	movs	r0, #1
 80004ec:	bd10      	pop	{r4, pc}
 80004ee:	46c0      	nop			; (mov r8, r8)

080004f0 <__aeabi_fcmpgt>:
 80004f0:	b510      	push	{r4, lr}
 80004f2:	f000 f923 	bl	800073c <__gesf2>
 80004f6:	2800      	cmp	r0, #0
 80004f8:	dc01      	bgt.n	80004fe <__aeabi_fcmpgt+0xe>
 80004fa:	2000      	movs	r0, #0
 80004fc:	bd10      	pop	{r4, pc}
 80004fe:	2001      	movs	r0, #1
 8000500:	bd10      	pop	{r4, pc}
 8000502:	46c0      	nop			; (mov r8, r8)

08000504 <__aeabi_fcmpge>:
 8000504:	b510      	push	{r4, lr}
 8000506:	f000 f919 	bl	800073c <__gesf2>
 800050a:	2800      	cmp	r0, #0
 800050c:	da01      	bge.n	8000512 <__aeabi_fcmpge+0xe>
 800050e:	2000      	movs	r0, #0
 8000510:	bd10      	pop	{r4, pc}
 8000512:	2001      	movs	r0, #1
 8000514:	bd10      	pop	{r4, pc}
 8000516:	46c0      	nop			; (mov r8, r8)

08000518 <__aeabi_uldivmod>:
 8000518:	2b00      	cmp	r3, #0
 800051a:	d111      	bne.n	8000540 <__aeabi_uldivmod+0x28>
 800051c:	2a00      	cmp	r2, #0
 800051e:	d10f      	bne.n	8000540 <__aeabi_uldivmod+0x28>
 8000520:	2900      	cmp	r1, #0
 8000522:	d100      	bne.n	8000526 <__aeabi_uldivmod+0xe>
 8000524:	2800      	cmp	r0, #0
 8000526:	d002      	beq.n	800052e <__aeabi_uldivmod+0x16>
 8000528:	2100      	movs	r1, #0
 800052a:	43c9      	mvns	r1, r1
 800052c:	0008      	movs	r0, r1
 800052e:	b407      	push	{r0, r1, r2}
 8000530:	4802      	ldr	r0, [pc, #8]	; (800053c <__aeabi_uldivmod+0x24>)
 8000532:	a102      	add	r1, pc, #8	; (adr r1, 800053c <__aeabi_uldivmod+0x24>)
 8000534:	1840      	adds	r0, r0, r1
 8000536:	9002      	str	r0, [sp, #8]
 8000538:	bd03      	pop	{r0, r1, pc}
 800053a:	46c0      	nop			; (mov r8, r8)
 800053c:	fffffee9 	.word	0xfffffee9
 8000540:	b403      	push	{r0, r1}
 8000542:	4668      	mov	r0, sp
 8000544:	b501      	push	{r0, lr}
 8000546:	9802      	ldr	r0, [sp, #8]
 8000548:	f000 f806 	bl	8000558 <__udivmoddi4>
 800054c:	9b01      	ldr	r3, [sp, #4]
 800054e:	469e      	mov	lr, r3
 8000550:	b002      	add	sp, #8
 8000552:	bc0c      	pop	{r2, r3}
 8000554:	4770      	bx	lr
 8000556:	46c0      	nop			; (mov r8, r8)

08000558 <__udivmoddi4>:
 8000558:	b5f0      	push	{r4, r5, r6, r7, lr}
 800055a:	4657      	mov	r7, sl
 800055c:	464e      	mov	r6, r9
 800055e:	4645      	mov	r5, r8
 8000560:	46de      	mov	lr, fp
 8000562:	b5e0      	push	{r5, r6, r7, lr}
 8000564:	0004      	movs	r4, r0
 8000566:	000d      	movs	r5, r1
 8000568:	4692      	mov	sl, r2
 800056a:	4699      	mov	r9, r3
 800056c:	b083      	sub	sp, #12
 800056e:	428b      	cmp	r3, r1
 8000570:	d830      	bhi.n	80005d4 <__udivmoddi4+0x7c>
 8000572:	d02d      	beq.n	80005d0 <__udivmoddi4+0x78>
 8000574:	4649      	mov	r1, r9
 8000576:	4650      	mov	r0, sl
 8000578:	f002 f83e 	bl	80025f8 <__clzdi2>
 800057c:	0029      	movs	r1, r5
 800057e:	0006      	movs	r6, r0
 8000580:	0020      	movs	r0, r4
 8000582:	f002 f839 	bl	80025f8 <__clzdi2>
 8000586:	1a33      	subs	r3, r6, r0
 8000588:	4698      	mov	r8, r3
 800058a:	3b20      	subs	r3, #32
 800058c:	469b      	mov	fp, r3
 800058e:	d433      	bmi.n	80005f8 <__udivmoddi4+0xa0>
 8000590:	465a      	mov	r2, fp
 8000592:	4653      	mov	r3, sl
 8000594:	4093      	lsls	r3, r2
 8000596:	4642      	mov	r2, r8
 8000598:	001f      	movs	r7, r3
 800059a:	4653      	mov	r3, sl
 800059c:	4093      	lsls	r3, r2
 800059e:	001e      	movs	r6, r3
 80005a0:	42af      	cmp	r7, r5
 80005a2:	d83a      	bhi.n	800061a <__udivmoddi4+0xc2>
 80005a4:	42af      	cmp	r7, r5
 80005a6:	d100      	bne.n	80005aa <__udivmoddi4+0x52>
 80005a8:	e078      	b.n	800069c <__udivmoddi4+0x144>
 80005aa:	465b      	mov	r3, fp
 80005ac:	1ba4      	subs	r4, r4, r6
 80005ae:	41bd      	sbcs	r5, r7
 80005b0:	2b00      	cmp	r3, #0
 80005b2:	da00      	bge.n	80005b6 <__udivmoddi4+0x5e>
 80005b4:	e075      	b.n	80006a2 <__udivmoddi4+0x14a>
 80005b6:	2200      	movs	r2, #0
 80005b8:	2300      	movs	r3, #0
 80005ba:	9200      	str	r2, [sp, #0]
 80005bc:	9301      	str	r3, [sp, #4]
 80005be:	2301      	movs	r3, #1
 80005c0:	465a      	mov	r2, fp
 80005c2:	4093      	lsls	r3, r2
 80005c4:	9301      	str	r3, [sp, #4]
 80005c6:	2301      	movs	r3, #1
 80005c8:	4642      	mov	r2, r8
 80005ca:	4093      	lsls	r3, r2
 80005cc:	9300      	str	r3, [sp, #0]
 80005ce:	e028      	b.n	8000622 <__udivmoddi4+0xca>
 80005d0:	4282      	cmp	r2, r0
 80005d2:	d9cf      	bls.n	8000574 <__udivmoddi4+0x1c>
 80005d4:	2200      	movs	r2, #0
 80005d6:	2300      	movs	r3, #0
 80005d8:	9200      	str	r2, [sp, #0]
 80005da:	9301      	str	r3, [sp, #4]
 80005dc:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 80005de:	2b00      	cmp	r3, #0
 80005e0:	d001      	beq.n	80005e6 <__udivmoddi4+0x8e>
 80005e2:	601c      	str	r4, [r3, #0]
 80005e4:	605d      	str	r5, [r3, #4]
 80005e6:	9800      	ldr	r0, [sp, #0]
 80005e8:	9901      	ldr	r1, [sp, #4]
 80005ea:	b003      	add	sp, #12
 80005ec:	bcf0      	pop	{r4, r5, r6, r7}
 80005ee:	46bb      	mov	fp, r7
 80005f0:	46b2      	mov	sl, r6
 80005f2:	46a9      	mov	r9, r5
 80005f4:	46a0      	mov	r8, r4
 80005f6:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80005f8:	4642      	mov	r2, r8
 80005fa:	2320      	movs	r3, #32
 80005fc:	1a9b      	subs	r3, r3, r2
 80005fe:	4652      	mov	r2, sl
 8000600:	40da      	lsrs	r2, r3
 8000602:	4641      	mov	r1, r8
 8000604:	0013      	movs	r3, r2
 8000606:	464a      	mov	r2, r9
 8000608:	408a      	lsls	r2, r1
 800060a:	0017      	movs	r7, r2
 800060c:	4642      	mov	r2, r8
 800060e:	431f      	orrs	r7, r3
 8000610:	4653      	mov	r3, sl
 8000612:	4093      	lsls	r3, r2
 8000614:	001e      	movs	r6, r3
 8000616:	42af      	cmp	r7, r5
 8000618:	d9c4      	bls.n	80005a4 <__udivmoddi4+0x4c>
 800061a:	2200      	movs	r2, #0
 800061c:	2300      	movs	r3, #0
 800061e:	9200      	str	r2, [sp, #0]
 8000620:	9301      	str	r3, [sp, #4]
 8000622:	4643      	mov	r3, r8
 8000624:	2b00      	cmp	r3, #0
 8000626:	d0d9      	beq.n	80005dc <__udivmoddi4+0x84>
 8000628:	07fb      	lsls	r3, r7, #31
 800062a:	0872      	lsrs	r2, r6, #1
 800062c:	431a      	orrs	r2, r3
 800062e:	4646      	mov	r6, r8
 8000630:	087b      	lsrs	r3, r7, #1
 8000632:	e00e      	b.n	8000652 <__udivmoddi4+0xfa>
 8000634:	42ab      	cmp	r3, r5
 8000636:	d101      	bne.n	800063c <__udivmoddi4+0xe4>
 8000638:	42a2      	cmp	r2, r4
 800063a:	d80c      	bhi.n	8000656 <__udivmoddi4+0xfe>
 800063c:	1aa4      	subs	r4, r4, r2
 800063e:	419d      	sbcs	r5, r3
 8000640:	2001      	movs	r0, #1
 8000642:	1924      	adds	r4, r4, r4
 8000644:	416d      	adcs	r5, r5
 8000646:	2100      	movs	r1, #0
 8000648:	3e01      	subs	r6, #1
 800064a:	1824      	adds	r4, r4, r0
 800064c:	414d      	adcs	r5, r1
 800064e:	2e00      	cmp	r6, #0
 8000650:	d006      	beq.n	8000660 <__udivmoddi4+0x108>
 8000652:	42ab      	cmp	r3, r5
 8000654:	d9ee      	bls.n	8000634 <__udivmoddi4+0xdc>
 8000656:	3e01      	subs	r6, #1
 8000658:	1924      	adds	r4, r4, r4
 800065a:	416d      	adcs	r5, r5
 800065c:	2e00      	cmp	r6, #0
 800065e:	d1f8      	bne.n	8000652 <__udivmoddi4+0xfa>
 8000660:	9800      	ldr	r0, [sp, #0]
 8000662:	9901      	ldr	r1, [sp, #4]
 8000664:	465b      	mov	r3, fp
 8000666:	1900      	adds	r0, r0, r4
 8000668:	4169      	adcs	r1, r5
 800066a:	2b00      	cmp	r3, #0
 800066c:	db24      	blt.n	80006b8 <__udivmoddi4+0x160>
 800066e:	002b      	movs	r3, r5
 8000670:	465a      	mov	r2, fp
 8000672:	4644      	mov	r4, r8
 8000674:	40d3      	lsrs	r3, r2
 8000676:	002a      	movs	r2, r5
 8000678:	40e2      	lsrs	r2, r4
 800067a:	001c      	movs	r4, r3
 800067c:	465b      	mov	r3, fp
 800067e:	0015      	movs	r5, r2
 8000680:	2b00      	cmp	r3, #0
 8000682:	db2a      	blt.n	80006da <__udivmoddi4+0x182>
 8000684:	0026      	movs	r6, r4
 8000686:	409e      	lsls	r6, r3
 8000688:	0033      	movs	r3, r6
 800068a:	0026      	movs	r6, r4
 800068c:	4647      	mov	r7, r8
 800068e:	40be      	lsls	r6, r7
 8000690:	0032      	movs	r2, r6
 8000692:	1a80      	subs	r0, r0, r2
 8000694:	4199      	sbcs	r1, r3
 8000696:	9000      	str	r0, [sp, #0]
 8000698:	9101      	str	r1, [sp, #4]
 800069a:	e79f      	b.n	80005dc <__udivmoddi4+0x84>
 800069c:	42a3      	cmp	r3, r4
 800069e:	d8bc      	bhi.n	800061a <__udivmoddi4+0xc2>
 80006a0:	e783      	b.n	80005aa <__udivmoddi4+0x52>
 80006a2:	4642      	mov	r2, r8
 80006a4:	2320      	movs	r3, #32
 80006a6:	2100      	movs	r1, #0
 80006a8:	1a9b      	subs	r3, r3, r2
 80006aa:	2200      	movs	r2, #0
 80006ac:	9100      	str	r1, [sp, #0]
 80006ae:	9201      	str	r2, [sp, #4]
 80006b0:	2201      	movs	r2, #1
 80006b2:	40da      	lsrs	r2, r3
 80006b4:	9201      	str	r2, [sp, #4]
 80006b6:	e786      	b.n	80005c6 <__udivmoddi4+0x6e>
 80006b8:	4642      	mov	r2, r8
 80006ba:	2320      	movs	r3, #32
 80006bc:	1a9b      	subs	r3, r3, r2
 80006be:	002a      	movs	r2, r5
 80006c0:	4646      	mov	r6, r8
 80006c2:	409a      	lsls	r2, r3
 80006c4:	0023      	movs	r3, r4
 80006c6:	40f3      	lsrs	r3, r6
 80006c8:	4644      	mov	r4, r8
 80006ca:	4313      	orrs	r3, r2
 80006cc:	002a      	movs	r2, r5
 80006ce:	40e2      	lsrs	r2, r4
 80006d0:	001c      	movs	r4, r3
 80006d2:	465b      	mov	r3, fp
 80006d4:	0015      	movs	r5, r2
 80006d6:	2b00      	cmp	r3, #0
 80006d8:	dad4      	bge.n	8000684 <__udivmoddi4+0x12c>
 80006da:	4642      	mov	r2, r8
 80006dc:	002f      	movs	r7, r5
 80006de:	2320      	movs	r3, #32
 80006e0:	0026      	movs	r6, r4
 80006e2:	4097      	lsls	r7, r2
 80006e4:	1a9b      	subs	r3, r3, r2
 80006e6:	40de      	lsrs	r6, r3
 80006e8:	003b      	movs	r3, r7
 80006ea:	4333      	orrs	r3, r6
 80006ec:	e7cd      	b.n	800068a <__udivmoddi4+0x132>
 80006ee:	46c0      	nop			; (mov r8, r8)

080006f0 <__eqsf2>:
 80006f0:	b570      	push	{r4, r5, r6, lr}
 80006f2:	0042      	lsls	r2, r0, #1
 80006f4:	0245      	lsls	r5, r0, #9
 80006f6:	024e      	lsls	r6, r1, #9
 80006f8:	004c      	lsls	r4, r1, #1
 80006fa:	0fc3      	lsrs	r3, r0, #31
 80006fc:	0a6d      	lsrs	r5, r5, #9
 80006fe:	2001      	movs	r0, #1
 8000700:	0e12      	lsrs	r2, r2, #24
 8000702:	0a76      	lsrs	r6, r6, #9
 8000704:	0e24      	lsrs	r4, r4, #24
 8000706:	0fc9      	lsrs	r1, r1, #31
 8000708:	2aff      	cmp	r2, #255	; 0xff
 800070a:	d006      	beq.n	800071a <__eqsf2+0x2a>
 800070c:	2cff      	cmp	r4, #255	; 0xff
 800070e:	d003      	beq.n	8000718 <__eqsf2+0x28>
 8000710:	42a2      	cmp	r2, r4
 8000712:	d101      	bne.n	8000718 <__eqsf2+0x28>
 8000714:	42b5      	cmp	r5, r6
 8000716:	d006      	beq.n	8000726 <__eqsf2+0x36>
 8000718:	bd70      	pop	{r4, r5, r6, pc}
 800071a:	2d00      	cmp	r5, #0
 800071c:	d1fc      	bne.n	8000718 <__eqsf2+0x28>
 800071e:	2cff      	cmp	r4, #255	; 0xff
 8000720:	d1fa      	bne.n	8000718 <__eqsf2+0x28>
 8000722:	2e00      	cmp	r6, #0
 8000724:	d1f8      	bne.n	8000718 <__eqsf2+0x28>
 8000726:	428b      	cmp	r3, r1
 8000728:	d006      	beq.n	8000738 <__eqsf2+0x48>
 800072a:	2001      	movs	r0, #1
 800072c:	2a00      	cmp	r2, #0
 800072e:	d1f3      	bne.n	8000718 <__eqsf2+0x28>
 8000730:	0028      	movs	r0, r5
 8000732:	1e43      	subs	r3, r0, #1
 8000734:	4198      	sbcs	r0, r3
 8000736:	e7ef      	b.n	8000718 <__eqsf2+0x28>
 8000738:	2000      	movs	r0, #0
 800073a:	e7ed      	b.n	8000718 <__eqsf2+0x28>

0800073c <__gesf2>:
 800073c:	b570      	push	{r4, r5, r6, lr}
 800073e:	0042      	lsls	r2, r0, #1
 8000740:	0245      	lsls	r5, r0, #9
 8000742:	024e      	lsls	r6, r1, #9
 8000744:	004c      	lsls	r4, r1, #1
 8000746:	0fc3      	lsrs	r3, r0, #31
 8000748:	0a6d      	lsrs	r5, r5, #9
 800074a:	0e12      	lsrs	r2, r2, #24
 800074c:	0a76      	lsrs	r6, r6, #9
 800074e:	0e24      	lsrs	r4, r4, #24
 8000750:	0fc8      	lsrs	r0, r1, #31
 8000752:	2aff      	cmp	r2, #255	; 0xff
 8000754:	d01b      	beq.n	800078e <__gesf2+0x52>
 8000756:	2cff      	cmp	r4, #255	; 0xff
 8000758:	d00e      	beq.n	8000778 <__gesf2+0x3c>
 800075a:	2a00      	cmp	r2, #0
 800075c:	d11b      	bne.n	8000796 <__gesf2+0x5a>
 800075e:	2c00      	cmp	r4, #0
 8000760:	d101      	bne.n	8000766 <__gesf2+0x2a>
 8000762:	2e00      	cmp	r6, #0
 8000764:	d01c      	beq.n	80007a0 <__gesf2+0x64>
 8000766:	2d00      	cmp	r5, #0
 8000768:	d00c      	beq.n	8000784 <__gesf2+0x48>
 800076a:	4283      	cmp	r3, r0
 800076c:	d01c      	beq.n	80007a8 <__gesf2+0x6c>
 800076e:	2102      	movs	r1, #2
 8000770:	1e58      	subs	r0, r3, #1
 8000772:	4008      	ands	r0, r1
 8000774:	3801      	subs	r0, #1
 8000776:	bd70      	pop	{r4, r5, r6, pc}
 8000778:	2e00      	cmp	r6, #0
 800077a:	d122      	bne.n	80007c2 <__gesf2+0x86>
 800077c:	2a00      	cmp	r2, #0
 800077e:	d1f4      	bne.n	800076a <__gesf2+0x2e>
 8000780:	2d00      	cmp	r5, #0
 8000782:	d1f2      	bne.n	800076a <__gesf2+0x2e>
 8000784:	2800      	cmp	r0, #0
 8000786:	d1f6      	bne.n	8000776 <__gesf2+0x3a>
 8000788:	2001      	movs	r0, #1
 800078a:	4240      	negs	r0, r0
 800078c:	e7f3      	b.n	8000776 <__gesf2+0x3a>
 800078e:	2d00      	cmp	r5, #0
 8000790:	d117      	bne.n	80007c2 <__gesf2+0x86>
 8000792:	2cff      	cmp	r4, #255	; 0xff
 8000794:	d0f0      	beq.n	8000778 <__gesf2+0x3c>
 8000796:	2c00      	cmp	r4, #0
 8000798:	d1e7      	bne.n	800076a <__gesf2+0x2e>
 800079a:	2e00      	cmp	r6, #0
 800079c:	d1e5      	bne.n	800076a <__gesf2+0x2e>
 800079e:	e7e6      	b.n	800076e <__gesf2+0x32>
 80007a0:	2000      	movs	r0, #0
 80007a2:	2d00      	cmp	r5, #0
 80007a4:	d0e7      	beq.n	8000776 <__gesf2+0x3a>
 80007a6:	e7e2      	b.n	800076e <__gesf2+0x32>
 80007a8:	42a2      	cmp	r2, r4
 80007aa:	dc05      	bgt.n	80007b8 <__gesf2+0x7c>
 80007ac:	dbea      	blt.n	8000784 <__gesf2+0x48>
 80007ae:	42b5      	cmp	r5, r6
 80007b0:	d802      	bhi.n	80007b8 <__gesf2+0x7c>
 80007b2:	d3e7      	bcc.n	8000784 <__gesf2+0x48>
 80007b4:	2000      	movs	r0, #0
 80007b6:	e7de      	b.n	8000776 <__gesf2+0x3a>
 80007b8:	4243      	negs	r3, r0
 80007ba:	4158      	adcs	r0, r3
 80007bc:	0040      	lsls	r0, r0, #1
 80007be:	3801      	subs	r0, #1
 80007c0:	e7d9      	b.n	8000776 <__gesf2+0x3a>
 80007c2:	2002      	movs	r0, #2
 80007c4:	4240      	negs	r0, r0
 80007c6:	e7d6      	b.n	8000776 <__gesf2+0x3a>

080007c8 <__lesf2>:
 80007c8:	b570      	push	{r4, r5, r6, lr}
 80007ca:	0042      	lsls	r2, r0, #1
 80007cc:	0245      	lsls	r5, r0, #9
 80007ce:	024e      	lsls	r6, r1, #9
 80007d0:	004c      	lsls	r4, r1, #1
 80007d2:	0fc3      	lsrs	r3, r0, #31
 80007d4:	0a6d      	lsrs	r5, r5, #9
 80007d6:	0e12      	lsrs	r2, r2, #24
 80007d8:	0a76      	lsrs	r6, r6, #9
 80007da:	0e24      	lsrs	r4, r4, #24
 80007dc:	0fc8      	lsrs	r0, r1, #31
 80007de:	2aff      	cmp	r2, #255	; 0xff
 80007e0:	d00b      	beq.n	80007fa <__lesf2+0x32>
 80007e2:	2cff      	cmp	r4, #255	; 0xff
 80007e4:	d00d      	beq.n	8000802 <__lesf2+0x3a>
 80007e6:	2a00      	cmp	r2, #0
 80007e8:	d11f      	bne.n	800082a <__lesf2+0x62>
 80007ea:	2c00      	cmp	r4, #0
 80007ec:	d116      	bne.n	800081c <__lesf2+0x54>
 80007ee:	2e00      	cmp	r6, #0
 80007f0:	d114      	bne.n	800081c <__lesf2+0x54>
 80007f2:	2000      	movs	r0, #0
 80007f4:	2d00      	cmp	r5, #0
 80007f6:	d010      	beq.n	800081a <__lesf2+0x52>
 80007f8:	e009      	b.n	800080e <__lesf2+0x46>
 80007fa:	2d00      	cmp	r5, #0
 80007fc:	d10c      	bne.n	8000818 <__lesf2+0x50>
 80007fe:	2cff      	cmp	r4, #255	; 0xff
 8000800:	d113      	bne.n	800082a <__lesf2+0x62>
 8000802:	2e00      	cmp	r6, #0
 8000804:	d108      	bne.n	8000818 <__lesf2+0x50>
 8000806:	2a00      	cmp	r2, #0
 8000808:	d008      	beq.n	800081c <__lesf2+0x54>
 800080a:	4283      	cmp	r3, r0
 800080c:	d012      	beq.n	8000834 <__lesf2+0x6c>
 800080e:	2102      	movs	r1, #2
 8000810:	1e58      	subs	r0, r3, #1
 8000812:	4008      	ands	r0, r1
 8000814:	3801      	subs	r0, #1
 8000816:	e000      	b.n	800081a <__lesf2+0x52>
 8000818:	2002      	movs	r0, #2
 800081a:	bd70      	pop	{r4, r5, r6, pc}
 800081c:	2d00      	cmp	r5, #0
 800081e:	d1f4      	bne.n	800080a <__lesf2+0x42>
 8000820:	2800      	cmp	r0, #0
 8000822:	d1fa      	bne.n	800081a <__lesf2+0x52>
 8000824:	2001      	movs	r0, #1
 8000826:	4240      	negs	r0, r0
 8000828:	e7f7      	b.n	800081a <__lesf2+0x52>
 800082a:	2c00      	cmp	r4, #0
 800082c:	d1ed      	bne.n	800080a <__lesf2+0x42>
 800082e:	2e00      	cmp	r6, #0
 8000830:	d1eb      	bne.n	800080a <__lesf2+0x42>
 8000832:	e7ec      	b.n	800080e <__lesf2+0x46>
 8000834:	42a2      	cmp	r2, r4
 8000836:	dc05      	bgt.n	8000844 <__lesf2+0x7c>
 8000838:	dbf2      	blt.n	8000820 <__lesf2+0x58>
 800083a:	42b5      	cmp	r5, r6
 800083c:	d802      	bhi.n	8000844 <__lesf2+0x7c>
 800083e:	d3ef      	bcc.n	8000820 <__lesf2+0x58>
 8000840:	2000      	movs	r0, #0
 8000842:	e7ea      	b.n	800081a <__lesf2+0x52>
 8000844:	4243      	negs	r3, r0
 8000846:	4158      	adcs	r0, r3
 8000848:	0040      	lsls	r0, r0, #1
 800084a:	3801      	subs	r0, #1
 800084c:	e7e5      	b.n	800081a <__lesf2+0x52>
 800084e:	46c0      	nop			; (mov r8, r8)

08000850 <__aeabi_dadd>:
 8000850:	b5f0      	push	{r4, r5, r6, r7, lr}
 8000852:	464f      	mov	r7, r9
 8000854:	4646      	mov	r6, r8
 8000856:	46d6      	mov	lr, sl
 8000858:	000d      	movs	r5, r1
 800085a:	0004      	movs	r4, r0
 800085c:	b5c0      	push	{r6, r7, lr}
 800085e:	001f      	movs	r7, r3
 8000860:	0011      	movs	r1, r2
 8000862:	0328      	lsls	r0, r5, #12
 8000864:	0f62      	lsrs	r2, r4, #29
 8000866:	0a40      	lsrs	r0, r0, #9
 8000868:	4310      	orrs	r0, r2
 800086a:	007a      	lsls	r2, r7, #1
 800086c:	0d52      	lsrs	r2, r2, #21
 800086e:	00e3      	lsls	r3, r4, #3
 8000870:	033c      	lsls	r4, r7, #12
 8000872:	4691      	mov	r9, r2
 8000874:	0a64      	lsrs	r4, r4, #9
 8000876:	0ffa      	lsrs	r2, r7, #31
 8000878:	0f4f      	lsrs	r7, r1, #29
 800087a:	006e      	lsls	r6, r5, #1
 800087c:	4327      	orrs	r7, r4
 800087e:	4692      	mov	sl, r2
 8000880:	46b8      	mov	r8, r7
 8000882:	0d76      	lsrs	r6, r6, #21
 8000884:	0fed      	lsrs	r5, r5, #31
 8000886:	00c9      	lsls	r1, r1, #3
 8000888:	4295      	cmp	r5, r2
 800088a:	d100      	bne.n	800088e <__aeabi_dadd+0x3e>
 800088c:	e099      	b.n	80009c2 <__aeabi_dadd+0x172>
 800088e:	464c      	mov	r4, r9
 8000890:	1b34      	subs	r4, r6, r4
 8000892:	46a4      	mov	ip, r4
 8000894:	2c00      	cmp	r4, #0
 8000896:	dc00      	bgt.n	800089a <__aeabi_dadd+0x4a>
 8000898:	e07c      	b.n	8000994 <__aeabi_dadd+0x144>
 800089a:	464a      	mov	r2, r9
 800089c:	2a00      	cmp	r2, #0
 800089e:	d100      	bne.n	80008a2 <__aeabi_dadd+0x52>
 80008a0:	e0b8      	b.n	8000a14 <__aeabi_dadd+0x1c4>
 80008a2:	4ac5      	ldr	r2, [pc, #788]	; (8000bb8 <__aeabi_dadd+0x368>)
 80008a4:	4296      	cmp	r6, r2
 80008a6:	d100      	bne.n	80008aa <__aeabi_dadd+0x5a>
 80008a8:	e11c      	b.n	8000ae4 <__aeabi_dadd+0x294>
 80008aa:	2280      	movs	r2, #128	; 0x80
 80008ac:	003c      	movs	r4, r7
 80008ae:	0412      	lsls	r2, r2, #16
 80008b0:	4314      	orrs	r4, r2
 80008b2:	46a0      	mov	r8, r4
 80008b4:	4662      	mov	r2, ip
 80008b6:	2a38      	cmp	r2, #56	; 0x38
 80008b8:	dd00      	ble.n	80008bc <__aeabi_dadd+0x6c>
 80008ba:	e161      	b.n	8000b80 <__aeabi_dadd+0x330>
 80008bc:	2a1f      	cmp	r2, #31
 80008be:	dd00      	ble.n	80008c2 <__aeabi_dadd+0x72>
 80008c0:	e1cc      	b.n	8000c5c <__aeabi_dadd+0x40c>
 80008c2:	4664      	mov	r4, ip
 80008c4:	2220      	movs	r2, #32
 80008c6:	1b12      	subs	r2, r2, r4
 80008c8:	4644      	mov	r4, r8
 80008ca:	4094      	lsls	r4, r2
 80008cc:	000f      	movs	r7, r1
 80008ce:	46a1      	mov	r9, r4
 80008d0:	4664      	mov	r4, ip
 80008d2:	4091      	lsls	r1, r2
 80008d4:	40e7      	lsrs	r7, r4
 80008d6:	464c      	mov	r4, r9
 80008d8:	1e4a      	subs	r2, r1, #1
 80008da:	4191      	sbcs	r1, r2
 80008dc:	433c      	orrs	r4, r7
 80008de:	4642      	mov	r2, r8
 80008e0:	4321      	orrs	r1, r4
 80008e2:	4664      	mov	r4, ip
 80008e4:	40e2      	lsrs	r2, r4
 80008e6:	1a80      	subs	r0, r0, r2
 80008e8:	1a5c      	subs	r4, r3, r1
 80008ea:	42a3      	cmp	r3, r4
 80008ec:	419b      	sbcs	r3, r3
 80008ee:	425f      	negs	r7, r3
 80008f0:	1bc7      	subs	r7, r0, r7
 80008f2:	023b      	lsls	r3, r7, #8
 80008f4:	d400      	bmi.n	80008f8 <__aeabi_dadd+0xa8>
 80008f6:	e0d0      	b.n	8000a9a <__aeabi_dadd+0x24a>
 80008f8:	027f      	lsls	r7, r7, #9
 80008fa:	0a7f      	lsrs	r7, r7, #9
 80008fc:	2f00      	cmp	r7, #0
 80008fe:	d100      	bne.n	8000902 <__aeabi_dadd+0xb2>
 8000900:	e0ff      	b.n	8000b02 <__aeabi_dadd+0x2b2>
 8000902:	0038      	movs	r0, r7
 8000904:	f001 fe5a 	bl	80025bc <__clzsi2>
 8000908:	0001      	movs	r1, r0
 800090a:	3908      	subs	r1, #8
 800090c:	2320      	movs	r3, #32
 800090e:	0022      	movs	r2, r4
 8000910:	1a5b      	subs	r3, r3, r1
 8000912:	408f      	lsls	r7, r1
 8000914:	40da      	lsrs	r2, r3
 8000916:	408c      	lsls	r4, r1
 8000918:	4317      	orrs	r7, r2
 800091a:	42b1      	cmp	r1, r6
 800091c:	da00      	bge.n	8000920 <__aeabi_dadd+0xd0>
 800091e:	e0ff      	b.n	8000b20 <__aeabi_dadd+0x2d0>
 8000920:	1b89      	subs	r1, r1, r6
 8000922:	1c4b      	adds	r3, r1, #1
 8000924:	2b1f      	cmp	r3, #31
 8000926:	dd00      	ble.n	800092a <__aeabi_dadd+0xda>
 8000928:	e0a8      	b.n	8000a7c <__aeabi_dadd+0x22c>
 800092a:	2220      	movs	r2, #32
 800092c:	0039      	movs	r1, r7
 800092e:	1ad2      	subs	r2, r2, r3
 8000930:	0020      	movs	r0, r4
 8000932:	4094      	lsls	r4, r2
 8000934:	4091      	lsls	r1, r2
 8000936:	40d8      	lsrs	r0, r3
 8000938:	1e62      	subs	r2, r4, #1
 800093a:	4194      	sbcs	r4, r2
 800093c:	40df      	lsrs	r7, r3
 800093e:	2600      	movs	r6, #0
 8000940:	4301      	orrs	r1, r0
 8000942:	430c      	orrs	r4, r1
 8000944:	0763      	lsls	r3, r4, #29
 8000946:	d009      	beq.n	800095c <__aeabi_dadd+0x10c>
 8000948:	230f      	movs	r3, #15
 800094a:	4023      	ands	r3, r4
 800094c:	2b04      	cmp	r3, #4
 800094e:	d005      	beq.n	800095c <__aeabi_dadd+0x10c>
 8000950:	1d23      	adds	r3, r4, #4
 8000952:	42a3      	cmp	r3, r4
 8000954:	41a4      	sbcs	r4, r4
 8000956:	4264      	negs	r4, r4
 8000958:	193f      	adds	r7, r7, r4
 800095a:	001c      	movs	r4, r3
 800095c:	023b      	lsls	r3, r7, #8
 800095e:	d400      	bmi.n	8000962 <__aeabi_dadd+0x112>
 8000960:	e09e      	b.n	8000aa0 <__aeabi_dadd+0x250>
 8000962:	4b95      	ldr	r3, [pc, #596]	; (8000bb8 <__aeabi_dadd+0x368>)
 8000964:	3601      	adds	r6, #1
 8000966:	429e      	cmp	r6, r3
 8000968:	d100      	bne.n	800096c <__aeabi_dadd+0x11c>
 800096a:	e0b7      	b.n	8000adc <__aeabi_dadd+0x28c>
 800096c:	4a93      	ldr	r2, [pc, #588]	; (8000bbc <__aeabi_dadd+0x36c>)
 800096e:	08e4      	lsrs	r4, r4, #3
 8000970:	4017      	ands	r7, r2
 8000972:	077b      	lsls	r3, r7, #29
 8000974:	0571      	lsls	r1, r6, #21
 8000976:	027f      	lsls	r7, r7, #9
 8000978:	4323      	orrs	r3, r4
 800097a:	0b3f      	lsrs	r7, r7, #12
 800097c:	0d4a      	lsrs	r2, r1, #21
 800097e:	0512      	lsls	r2, r2, #20
 8000980:	433a      	orrs	r2, r7
 8000982:	07ed      	lsls	r5, r5, #31
 8000984:	432a      	orrs	r2, r5
 8000986:	0018      	movs	r0, r3
 8000988:	0011      	movs	r1, r2
 800098a:	bce0      	pop	{r5, r6, r7}
 800098c:	46ba      	mov	sl, r7
 800098e:	46b1      	mov	r9, r6
 8000990:	46a8      	mov	r8, r5
 8000992:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8000994:	2c00      	cmp	r4, #0
 8000996:	d04b      	beq.n	8000a30 <__aeabi_dadd+0x1e0>
 8000998:	464c      	mov	r4, r9
 800099a:	1ba4      	subs	r4, r4, r6
 800099c:	46a4      	mov	ip, r4
 800099e:	2e00      	cmp	r6, #0
 80009a0:	d000      	beq.n	80009a4 <__aeabi_dadd+0x154>
 80009a2:	e123      	b.n	8000bec <__aeabi_dadd+0x39c>
 80009a4:	0004      	movs	r4, r0
 80009a6:	431c      	orrs	r4, r3
 80009a8:	d100      	bne.n	80009ac <__aeabi_dadd+0x15c>
 80009aa:	e1af      	b.n	8000d0c <__aeabi_dadd+0x4bc>
 80009ac:	4662      	mov	r2, ip
 80009ae:	1e54      	subs	r4, r2, #1
 80009b0:	2a01      	cmp	r2, #1
 80009b2:	d100      	bne.n	80009b6 <__aeabi_dadd+0x166>
 80009b4:	e215      	b.n	8000de2 <__aeabi_dadd+0x592>
 80009b6:	4d80      	ldr	r5, [pc, #512]	; (8000bb8 <__aeabi_dadd+0x368>)
 80009b8:	45ac      	cmp	ip, r5
 80009ba:	d100      	bne.n	80009be <__aeabi_dadd+0x16e>
 80009bc:	e1c8      	b.n	8000d50 <__aeabi_dadd+0x500>
 80009be:	46a4      	mov	ip, r4
 80009c0:	e11b      	b.n	8000bfa <__aeabi_dadd+0x3aa>
 80009c2:	464a      	mov	r2, r9
 80009c4:	1ab2      	subs	r2, r6, r2
 80009c6:	4694      	mov	ip, r2
 80009c8:	2a00      	cmp	r2, #0
 80009ca:	dc00      	bgt.n	80009ce <__aeabi_dadd+0x17e>
 80009cc:	e0ac      	b.n	8000b28 <__aeabi_dadd+0x2d8>
 80009ce:	464a      	mov	r2, r9
 80009d0:	2a00      	cmp	r2, #0
 80009d2:	d043      	beq.n	8000a5c <__aeabi_dadd+0x20c>
 80009d4:	4a78      	ldr	r2, [pc, #480]	; (8000bb8 <__aeabi_dadd+0x368>)
 80009d6:	4296      	cmp	r6, r2
 80009d8:	d100      	bne.n	80009dc <__aeabi_dadd+0x18c>
 80009da:	e1af      	b.n	8000d3c <__aeabi_dadd+0x4ec>
 80009dc:	2280      	movs	r2, #128	; 0x80
 80009de:	003c      	movs	r4, r7
 80009e0:	0412      	lsls	r2, r2, #16
 80009e2:	4314      	orrs	r4, r2
 80009e4:	46a0      	mov	r8, r4
 80009e6:	4662      	mov	r2, ip
 80009e8:	2a38      	cmp	r2, #56	; 0x38
 80009ea:	dc67      	bgt.n	8000abc <__aeabi_dadd+0x26c>
 80009ec:	2a1f      	cmp	r2, #31
 80009ee:	dc00      	bgt.n	80009f2 <__aeabi_dadd+0x1a2>
 80009f0:	e15f      	b.n	8000cb2 <__aeabi_dadd+0x462>
 80009f2:	4647      	mov	r7, r8
 80009f4:	3a20      	subs	r2, #32
 80009f6:	40d7      	lsrs	r7, r2
 80009f8:	4662      	mov	r2, ip
 80009fa:	2a20      	cmp	r2, #32
 80009fc:	d005      	beq.n	8000a0a <__aeabi_dadd+0x1ba>
 80009fe:	4664      	mov	r4, ip
 8000a00:	2240      	movs	r2, #64	; 0x40
 8000a02:	1b12      	subs	r2, r2, r4
 8000a04:	4644      	mov	r4, r8
 8000a06:	4094      	lsls	r4, r2
 8000a08:	4321      	orrs	r1, r4
 8000a0a:	1e4a      	subs	r2, r1, #1
 8000a0c:	4191      	sbcs	r1, r2
 8000a0e:	000c      	movs	r4, r1
 8000a10:	433c      	orrs	r4, r7
 8000a12:	e057      	b.n	8000ac4 <__aeabi_dadd+0x274>
 8000a14:	003a      	movs	r2, r7
 8000a16:	430a      	orrs	r2, r1
 8000a18:	d100      	bne.n	8000a1c <__aeabi_dadd+0x1cc>
 8000a1a:	e105      	b.n	8000c28 <__aeabi_dadd+0x3d8>
 8000a1c:	0022      	movs	r2, r4
 8000a1e:	3a01      	subs	r2, #1
 8000a20:	2c01      	cmp	r4, #1
 8000a22:	d100      	bne.n	8000a26 <__aeabi_dadd+0x1d6>
 8000a24:	e182      	b.n	8000d2c <__aeabi_dadd+0x4dc>
 8000a26:	4c64      	ldr	r4, [pc, #400]	; (8000bb8 <__aeabi_dadd+0x368>)
 8000a28:	45a4      	cmp	ip, r4
 8000a2a:	d05b      	beq.n	8000ae4 <__aeabi_dadd+0x294>
 8000a2c:	4694      	mov	ip, r2
 8000a2e:	e741      	b.n	80008b4 <__aeabi_dadd+0x64>
 8000a30:	4c63      	ldr	r4, [pc, #396]	; (8000bc0 <__aeabi_dadd+0x370>)
 8000a32:	1c77      	adds	r7, r6, #1
 8000a34:	4227      	tst	r7, r4
 8000a36:	d000      	beq.n	8000a3a <__aeabi_dadd+0x1ea>
 8000a38:	e0c4      	b.n	8000bc4 <__aeabi_dadd+0x374>
 8000a3a:	0004      	movs	r4, r0
 8000a3c:	431c      	orrs	r4, r3
 8000a3e:	2e00      	cmp	r6, #0
 8000a40:	d000      	beq.n	8000a44 <__aeabi_dadd+0x1f4>
 8000a42:	e169      	b.n	8000d18 <__aeabi_dadd+0x4c8>
 8000a44:	2c00      	cmp	r4, #0
 8000a46:	d100      	bne.n	8000a4a <__aeabi_dadd+0x1fa>
 8000a48:	e1bf      	b.n	8000dca <__aeabi_dadd+0x57a>
 8000a4a:	4644      	mov	r4, r8
 8000a4c:	430c      	orrs	r4, r1
 8000a4e:	d000      	beq.n	8000a52 <__aeabi_dadd+0x202>
 8000a50:	e1d0      	b.n	8000df4 <__aeabi_dadd+0x5a4>
 8000a52:	0742      	lsls	r2, r0, #29
 8000a54:	08db      	lsrs	r3, r3, #3
 8000a56:	4313      	orrs	r3, r2
 8000a58:	08c0      	lsrs	r0, r0, #3
 8000a5a:	e029      	b.n	8000ab0 <__aeabi_dadd+0x260>
 8000a5c:	003a      	movs	r2, r7
 8000a5e:	430a      	orrs	r2, r1
 8000a60:	d100      	bne.n	8000a64 <__aeabi_dadd+0x214>
 8000a62:	e170      	b.n	8000d46 <__aeabi_dadd+0x4f6>
 8000a64:	4662      	mov	r2, ip
 8000a66:	4664      	mov	r4, ip
 8000a68:	3a01      	subs	r2, #1
 8000a6a:	2c01      	cmp	r4, #1
 8000a6c:	d100      	bne.n	8000a70 <__aeabi_dadd+0x220>
 8000a6e:	e0e0      	b.n	8000c32 <__aeabi_dadd+0x3e2>
 8000a70:	4c51      	ldr	r4, [pc, #324]	; (8000bb8 <__aeabi_dadd+0x368>)
 8000a72:	45a4      	cmp	ip, r4
 8000a74:	d100      	bne.n	8000a78 <__aeabi_dadd+0x228>
 8000a76:	e161      	b.n	8000d3c <__aeabi_dadd+0x4ec>
 8000a78:	4694      	mov	ip, r2
 8000a7a:	e7b4      	b.n	80009e6 <__aeabi_dadd+0x196>
 8000a7c:	003a      	movs	r2, r7
 8000a7e:	391f      	subs	r1, #31
 8000a80:	40ca      	lsrs	r2, r1
 8000a82:	0011      	movs	r1, r2
 8000a84:	2b20      	cmp	r3, #32
 8000a86:	d003      	beq.n	8000a90 <__aeabi_dadd+0x240>
 8000a88:	2240      	movs	r2, #64	; 0x40
 8000a8a:	1ad3      	subs	r3, r2, r3
 8000a8c:	409f      	lsls	r7, r3
 8000a8e:	433c      	orrs	r4, r7
 8000a90:	1e63      	subs	r3, r4, #1
 8000a92:	419c      	sbcs	r4, r3
 8000a94:	2700      	movs	r7, #0
 8000a96:	2600      	movs	r6, #0
 8000a98:	430c      	orrs	r4, r1
 8000a9a:	0763      	lsls	r3, r4, #29
 8000a9c:	d000      	beq.n	8000aa0 <__aeabi_dadd+0x250>
 8000a9e:	e753      	b.n	8000948 <__aeabi_dadd+0xf8>
 8000aa0:	46b4      	mov	ip, r6
 8000aa2:	08e4      	lsrs	r4, r4, #3
 8000aa4:	077b      	lsls	r3, r7, #29
 8000aa6:	4323      	orrs	r3, r4
 8000aa8:	08f8      	lsrs	r0, r7, #3
 8000aaa:	4a43      	ldr	r2, [pc, #268]	; (8000bb8 <__aeabi_dadd+0x368>)
 8000aac:	4594      	cmp	ip, r2
 8000aae:	d01d      	beq.n	8000aec <__aeabi_dadd+0x29c>
 8000ab0:	4662      	mov	r2, ip
 8000ab2:	0307      	lsls	r7, r0, #12
 8000ab4:	0552      	lsls	r2, r2, #21
 8000ab6:	0b3f      	lsrs	r7, r7, #12
 8000ab8:	0d52      	lsrs	r2, r2, #21
 8000aba:	e760      	b.n	800097e <__aeabi_dadd+0x12e>
 8000abc:	4644      	mov	r4, r8
 8000abe:	430c      	orrs	r4, r1
 8000ac0:	1e62      	subs	r2, r4, #1
 8000ac2:	4194      	sbcs	r4, r2
 8000ac4:	18e4      	adds	r4, r4, r3
 8000ac6:	429c      	cmp	r4, r3
 8000ac8:	419b      	sbcs	r3, r3
 8000aca:	425f      	negs	r7, r3
 8000acc:	183f      	adds	r7, r7, r0
 8000ace:	023b      	lsls	r3, r7, #8
 8000ad0:	d5e3      	bpl.n	8000a9a <__aeabi_dadd+0x24a>
 8000ad2:	4b39      	ldr	r3, [pc, #228]	; (8000bb8 <__aeabi_dadd+0x368>)
 8000ad4:	3601      	adds	r6, #1
 8000ad6:	429e      	cmp	r6, r3
 8000ad8:	d000      	beq.n	8000adc <__aeabi_dadd+0x28c>
 8000ada:	e0b5      	b.n	8000c48 <__aeabi_dadd+0x3f8>
 8000adc:	0032      	movs	r2, r6
 8000ade:	2700      	movs	r7, #0
 8000ae0:	2300      	movs	r3, #0
 8000ae2:	e74c      	b.n	800097e <__aeabi_dadd+0x12e>
 8000ae4:	0742      	lsls	r2, r0, #29
 8000ae6:	08db      	lsrs	r3, r3, #3
 8000ae8:	4313      	orrs	r3, r2
 8000aea:	08c0      	lsrs	r0, r0, #3
 8000aec:	001a      	movs	r2, r3
 8000aee:	4302      	orrs	r2, r0
 8000af0:	d100      	bne.n	8000af4 <__aeabi_dadd+0x2a4>
 8000af2:	e1e1      	b.n	8000eb8 <__aeabi_dadd+0x668>
 8000af4:	2780      	movs	r7, #128	; 0x80
 8000af6:	033f      	lsls	r7, r7, #12
 8000af8:	4307      	orrs	r7, r0
 8000afa:	033f      	lsls	r7, r7, #12
 8000afc:	4a2e      	ldr	r2, [pc, #184]	; (8000bb8 <__aeabi_dadd+0x368>)
 8000afe:	0b3f      	lsrs	r7, r7, #12
 8000b00:	e73d      	b.n	800097e <__aeabi_dadd+0x12e>
 8000b02:	0020      	movs	r0, r4
 8000b04:	f001 fd5a 	bl	80025bc <__clzsi2>
 8000b08:	0001      	movs	r1, r0
 8000b0a:	3118      	adds	r1, #24
 8000b0c:	291f      	cmp	r1, #31
 8000b0e:	dc00      	bgt.n	8000b12 <__aeabi_dadd+0x2c2>
 8000b10:	e6fc      	b.n	800090c <__aeabi_dadd+0xbc>
 8000b12:	3808      	subs	r0, #8
 8000b14:	4084      	lsls	r4, r0
 8000b16:	0027      	movs	r7, r4
 8000b18:	2400      	movs	r4, #0
 8000b1a:	42b1      	cmp	r1, r6
 8000b1c:	db00      	blt.n	8000b20 <__aeabi_dadd+0x2d0>
 8000b1e:	e6ff      	b.n	8000920 <__aeabi_dadd+0xd0>
 8000b20:	4a26      	ldr	r2, [pc, #152]	; (8000bbc <__aeabi_dadd+0x36c>)
 8000b22:	1a76      	subs	r6, r6, r1
 8000b24:	4017      	ands	r7, r2
 8000b26:	e70d      	b.n	8000944 <__aeabi_dadd+0xf4>
 8000b28:	2a00      	cmp	r2, #0
 8000b2a:	d02f      	beq.n	8000b8c <__aeabi_dadd+0x33c>
 8000b2c:	464a      	mov	r2, r9
 8000b2e:	1b92      	subs	r2, r2, r6
 8000b30:	4694      	mov	ip, r2
 8000b32:	2e00      	cmp	r6, #0
 8000b34:	d100      	bne.n	8000b38 <__aeabi_dadd+0x2e8>
 8000b36:	e0ad      	b.n	8000c94 <__aeabi_dadd+0x444>
 8000b38:	4a1f      	ldr	r2, [pc, #124]	; (8000bb8 <__aeabi_dadd+0x368>)
 8000b3a:	4591      	cmp	r9, r2
 8000b3c:	d100      	bne.n	8000b40 <__aeabi_dadd+0x2f0>
 8000b3e:	e10f      	b.n	8000d60 <__aeabi_dadd+0x510>
 8000b40:	2280      	movs	r2, #128	; 0x80
 8000b42:	0412      	lsls	r2, r2, #16
 8000b44:	4310      	orrs	r0, r2
 8000b46:	4662      	mov	r2, ip
 8000b48:	2a38      	cmp	r2, #56	; 0x38
 8000b4a:	dd00      	ble.n	8000b4e <__aeabi_dadd+0x2fe>
 8000b4c:	e10f      	b.n	8000d6e <__aeabi_dadd+0x51e>
 8000b4e:	2a1f      	cmp	r2, #31
 8000b50:	dd00      	ble.n	8000b54 <__aeabi_dadd+0x304>
 8000b52:	e180      	b.n	8000e56 <__aeabi_dadd+0x606>
 8000b54:	4664      	mov	r4, ip
 8000b56:	2220      	movs	r2, #32
 8000b58:	001e      	movs	r6, r3
 8000b5a:	1b12      	subs	r2, r2, r4
 8000b5c:	4667      	mov	r7, ip
 8000b5e:	0004      	movs	r4, r0
 8000b60:	4093      	lsls	r3, r2
 8000b62:	4094      	lsls	r4, r2
 8000b64:	40fe      	lsrs	r6, r7
 8000b66:	1e5a      	subs	r2, r3, #1
 8000b68:	4193      	sbcs	r3, r2
 8000b6a:	40f8      	lsrs	r0, r7
 8000b6c:	4334      	orrs	r4, r6
 8000b6e:	431c      	orrs	r4, r3
 8000b70:	4480      	add	r8, r0
 8000b72:	1864      	adds	r4, r4, r1
 8000b74:	428c      	cmp	r4, r1
 8000b76:	41bf      	sbcs	r7, r7
 8000b78:	427f      	negs	r7, r7
 8000b7a:	464e      	mov	r6, r9
 8000b7c:	4447      	add	r7, r8
 8000b7e:	e7a6      	b.n	8000ace <__aeabi_dadd+0x27e>
 8000b80:	4642      	mov	r2, r8
 8000b82:	430a      	orrs	r2, r1
 8000b84:	0011      	movs	r1, r2
 8000b86:	1e4a      	subs	r2, r1, #1
 8000b88:	4191      	sbcs	r1, r2
 8000b8a:	e6ad      	b.n	80008e8 <__aeabi_dadd+0x98>
 8000b8c:	4c0c      	ldr	r4, [pc, #48]	; (8000bc0 <__aeabi_dadd+0x370>)
 8000b8e:	1c72      	adds	r2, r6, #1
 8000b90:	4222      	tst	r2, r4
 8000b92:	d000      	beq.n	8000b96 <__aeabi_dadd+0x346>
 8000b94:	e0a1      	b.n	8000cda <__aeabi_dadd+0x48a>
 8000b96:	0002      	movs	r2, r0
 8000b98:	431a      	orrs	r2, r3
 8000b9a:	2e00      	cmp	r6, #0
 8000b9c:	d000      	beq.n	8000ba0 <__aeabi_dadd+0x350>
 8000b9e:	e0fa      	b.n	8000d96 <__aeabi_dadd+0x546>
 8000ba0:	2a00      	cmp	r2, #0
 8000ba2:	d100      	bne.n	8000ba6 <__aeabi_dadd+0x356>
 8000ba4:	e145      	b.n	8000e32 <__aeabi_dadd+0x5e2>
 8000ba6:	003a      	movs	r2, r7
 8000ba8:	430a      	orrs	r2, r1
 8000baa:	d000      	beq.n	8000bae <__aeabi_dadd+0x35e>
 8000bac:	e146      	b.n	8000e3c <__aeabi_dadd+0x5ec>
 8000bae:	0742      	lsls	r2, r0, #29
 8000bb0:	08db      	lsrs	r3, r3, #3
 8000bb2:	4313      	orrs	r3, r2
 8000bb4:	08c0      	lsrs	r0, r0, #3
 8000bb6:	e77b      	b.n	8000ab0 <__aeabi_dadd+0x260>
 8000bb8:	000007ff 	.word	0x000007ff
 8000bbc:	ff7fffff 	.word	0xff7fffff
 8000bc0:	000007fe 	.word	0x000007fe
 8000bc4:	4647      	mov	r7, r8
 8000bc6:	1a5c      	subs	r4, r3, r1
 8000bc8:	1bc2      	subs	r2, r0, r7
 8000bca:	42a3      	cmp	r3, r4
 8000bcc:	41bf      	sbcs	r7, r7
 8000bce:	427f      	negs	r7, r7
 8000bd0:	46b9      	mov	r9, r7
 8000bd2:	0017      	movs	r7, r2
 8000bd4:	464a      	mov	r2, r9
 8000bd6:	1abf      	subs	r7, r7, r2
 8000bd8:	023a      	lsls	r2, r7, #8
 8000bda:	d500      	bpl.n	8000bde <__aeabi_dadd+0x38e>
 8000bdc:	e08d      	b.n	8000cfa <__aeabi_dadd+0x4aa>
 8000bde:	0023      	movs	r3, r4
 8000be0:	433b      	orrs	r3, r7
 8000be2:	d000      	beq.n	8000be6 <__aeabi_dadd+0x396>
 8000be4:	e68a      	b.n	80008fc <__aeabi_dadd+0xac>
 8000be6:	2000      	movs	r0, #0
 8000be8:	2500      	movs	r5, #0
 8000bea:	e761      	b.n	8000ab0 <__aeabi_dadd+0x260>
 8000bec:	4cb4      	ldr	r4, [pc, #720]	; (8000ec0 <__aeabi_dadd+0x670>)
 8000bee:	45a1      	cmp	r9, r4
 8000bf0:	d100      	bne.n	8000bf4 <__aeabi_dadd+0x3a4>
 8000bf2:	e0ad      	b.n	8000d50 <__aeabi_dadd+0x500>
 8000bf4:	2480      	movs	r4, #128	; 0x80
 8000bf6:	0424      	lsls	r4, r4, #16
 8000bf8:	4320      	orrs	r0, r4
 8000bfa:	4664      	mov	r4, ip
 8000bfc:	2c38      	cmp	r4, #56	; 0x38
 8000bfe:	dc3d      	bgt.n	8000c7c <__aeabi_dadd+0x42c>
 8000c00:	4662      	mov	r2, ip
 8000c02:	2c1f      	cmp	r4, #31
 8000c04:	dd00      	ble.n	8000c08 <__aeabi_dadd+0x3b8>
 8000c06:	e0b7      	b.n	8000d78 <__aeabi_dadd+0x528>
 8000c08:	2520      	movs	r5, #32
 8000c0a:	001e      	movs	r6, r3
 8000c0c:	1b2d      	subs	r5, r5, r4
 8000c0e:	0004      	movs	r4, r0
 8000c10:	40ab      	lsls	r3, r5
 8000c12:	40ac      	lsls	r4, r5
 8000c14:	40d6      	lsrs	r6, r2
 8000c16:	40d0      	lsrs	r0, r2
 8000c18:	4642      	mov	r2, r8
 8000c1a:	1e5d      	subs	r5, r3, #1
 8000c1c:	41ab      	sbcs	r3, r5
 8000c1e:	4334      	orrs	r4, r6
 8000c20:	1a12      	subs	r2, r2, r0
 8000c22:	4690      	mov	r8, r2
 8000c24:	4323      	orrs	r3, r4
 8000c26:	e02c      	b.n	8000c82 <__aeabi_dadd+0x432>
 8000c28:	0742      	lsls	r2, r0, #29
 8000c2a:	08db      	lsrs	r3, r3, #3
 8000c2c:	4313      	orrs	r3, r2
 8000c2e:	08c0      	lsrs	r0, r0, #3
 8000c30:	e73b      	b.n	8000aaa <__aeabi_dadd+0x25a>
 8000c32:	185c      	adds	r4, r3, r1
 8000c34:	429c      	cmp	r4, r3
 8000c36:	419b      	sbcs	r3, r3
 8000c38:	4440      	add	r0, r8
 8000c3a:	425b      	negs	r3, r3
 8000c3c:	18c7      	adds	r7, r0, r3
 8000c3e:	2601      	movs	r6, #1
 8000c40:	023b      	lsls	r3, r7, #8
 8000c42:	d400      	bmi.n	8000c46 <__aeabi_dadd+0x3f6>
 8000c44:	e729      	b.n	8000a9a <__aeabi_dadd+0x24a>
 8000c46:	2602      	movs	r6, #2
 8000c48:	4a9e      	ldr	r2, [pc, #632]	; (8000ec4 <__aeabi_dadd+0x674>)
 8000c4a:	0863      	lsrs	r3, r4, #1
 8000c4c:	4017      	ands	r7, r2
 8000c4e:	2201      	movs	r2, #1
 8000c50:	4014      	ands	r4, r2
 8000c52:	431c      	orrs	r4, r3
 8000c54:	07fb      	lsls	r3, r7, #31
 8000c56:	431c      	orrs	r4, r3
 8000c58:	087f      	lsrs	r7, r7, #1
 8000c5a:	e673      	b.n	8000944 <__aeabi_dadd+0xf4>
 8000c5c:	4644      	mov	r4, r8
 8000c5e:	3a20      	subs	r2, #32
 8000c60:	40d4      	lsrs	r4, r2
 8000c62:	4662      	mov	r2, ip
 8000c64:	2a20      	cmp	r2, #32
 8000c66:	d005      	beq.n	8000c74 <__aeabi_dadd+0x424>
 8000c68:	4667      	mov	r7, ip
 8000c6a:	2240      	movs	r2, #64	; 0x40
 8000c6c:	1bd2      	subs	r2, r2, r7
 8000c6e:	4647      	mov	r7, r8
 8000c70:	4097      	lsls	r7, r2
 8000c72:	4339      	orrs	r1, r7
 8000c74:	1e4a      	subs	r2, r1, #1
 8000c76:	4191      	sbcs	r1, r2
 8000c78:	4321      	orrs	r1, r4
 8000c7a:	e635      	b.n	80008e8 <__aeabi_dadd+0x98>
 8000c7c:	4303      	orrs	r3, r0
 8000c7e:	1e58      	subs	r0, r3, #1
 8000c80:	4183      	sbcs	r3, r0
 8000c82:	1acc      	subs	r4, r1, r3
 8000c84:	42a1      	cmp	r1, r4
 8000c86:	41bf      	sbcs	r7, r7
 8000c88:	4643      	mov	r3, r8
 8000c8a:	427f      	negs	r7, r7
 8000c8c:	4655      	mov	r5, sl
 8000c8e:	464e      	mov	r6, r9
 8000c90:	1bdf      	subs	r7, r3, r7
 8000c92:	e62e      	b.n	80008f2 <__aeabi_dadd+0xa2>
 8000c94:	0002      	movs	r2, r0
 8000c96:	431a      	orrs	r2, r3
 8000c98:	d100      	bne.n	8000c9c <__aeabi_dadd+0x44c>
 8000c9a:	e0bd      	b.n	8000e18 <__aeabi_dadd+0x5c8>
 8000c9c:	4662      	mov	r2, ip
 8000c9e:	4664      	mov	r4, ip
 8000ca0:	3a01      	subs	r2, #1
 8000ca2:	2c01      	cmp	r4, #1
 8000ca4:	d100      	bne.n	8000ca8 <__aeabi_dadd+0x458>
 8000ca6:	e0e5      	b.n	8000e74 <__aeabi_dadd+0x624>
 8000ca8:	4c85      	ldr	r4, [pc, #532]	; (8000ec0 <__aeabi_dadd+0x670>)
 8000caa:	45a4      	cmp	ip, r4
 8000cac:	d058      	beq.n	8000d60 <__aeabi_dadd+0x510>
 8000cae:	4694      	mov	ip, r2
 8000cb0:	e749      	b.n	8000b46 <__aeabi_dadd+0x2f6>
 8000cb2:	4664      	mov	r4, ip
 8000cb4:	2220      	movs	r2, #32
 8000cb6:	1b12      	subs	r2, r2, r4
 8000cb8:	4644      	mov	r4, r8
 8000cba:	4094      	lsls	r4, r2
 8000cbc:	000f      	movs	r7, r1
 8000cbe:	46a1      	mov	r9, r4
 8000cc0:	4664      	mov	r4, ip
 8000cc2:	4091      	lsls	r1, r2
 8000cc4:	40e7      	lsrs	r7, r4
 8000cc6:	464c      	mov	r4, r9
 8000cc8:	1e4a      	subs	r2, r1, #1
 8000cca:	4191      	sbcs	r1, r2
 8000ccc:	433c      	orrs	r4, r7
 8000cce:	4642      	mov	r2, r8
 8000cd0:	430c      	orrs	r4, r1
 8000cd2:	4661      	mov	r1, ip
 8000cd4:	40ca      	lsrs	r2, r1
 8000cd6:	1880      	adds	r0, r0, r2
 8000cd8:	e6f4      	b.n	8000ac4 <__aeabi_dadd+0x274>
 8000cda:	4c79      	ldr	r4, [pc, #484]	; (8000ec0 <__aeabi_dadd+0x670>)
 8000cdc:	42a2      	cmp	r2, r4
 8000cde:	d100      	bne.n	8000ce2 <__aeabi_dadd+0x492>
 8000ce0:	e6fd      	b.n	8000ade <__aeabi_dadd+0x28e>
 8000ce2:	1859      	adds	r1, r3, r1
 8000ce4:	4299      	cmp	r1, r3
 8000ce6:	419b      	sbcs	r3, r3
 8000ce8:	4440      	add	r0, r8
 8000cea:	425f      	negs	r7, r3
 8000cec:	19c7      	adds	r7, r0, r7
 8000cee:	07fc      	lsls	r4, r7, #31
 8000cf0:	0849      	lsrs	r1, r1, #1
 8000cf2:	0016      	movs	r6, r2
 8000cf4:	430c      	orrs	r4, r1
 8000cf6:	087f      	lsrs	r7, r7, #1
 8000cf8:	e6cf      	b.n	8000a9a <__aeabi_dadd+0x24a>
 8000cfa:	1acc      	subs	r4, r1, r3
 8000cfc:	42a1      	cmp	r1, r4
 8000cfe:	41bf      	sbcs	r7, r7
 8000d00:	4643      	mov	r3, r8
 8000d02:	427f      	negs	r7, r7
 8000d04:	1a18      	subs	r0, r3, r0
 8000d06:	4655      	mov	r5, sl
 8000d08:	1bc7      	subs	r7, r0, r7
 8000d0a:	e5f7      	b.n	80008fc <__aeabi_dadd+0xac>
 8000d0c:	08c9      	lsrs	r1, r1, #3
 8000d0e:	077b      	lsls	r3, r7, #29
 8000d10:	4655      	mov	r5, sl
 8000d12:	430b      	orrs	r3, r1
 8000d14:	08f8      	lsrs	r0, r7, #3
 8000d16:	e6c8      	b.n	8000aaa <__aeabi_dadd+0x25a>
 8000d18:	2c00      	cmp	r4, #0
 8000d1a:	d000      	beq.n	8000d1e <__aeabi_dadd+0x4ce>
 8000d1c:	e081      	b.n	8000e22 <__aeabi_dadd+0x5d2>
 8000d1e:	4643      	mov	r3, r8
 8000d20:	430b      	orrs	r3, r1
 8000d22:	d115      	bne.n	8000d50 <__aeabi_dadd+0x500>
 8000d24:	2080      	movs	r0, #128	; 0x80
 8000d26:	2500      	movs	r5, #0
 8000d28:	0300      	lsls	r0, r0, #12
 8000d2a:	e6e3      	b.n	8000af4 <__aeabi_dadd+0x2a4>
 8000d2c:	1a5c      	subs	r4, r3, r1
 8000d2e:	42a3      	cmp	r3, r4
 8000d30:	419b      	sbcs	r3, r3
 8000d32:	1bc7      	subs	r7, r0, r7
 8000d34:	425b      	negs	r3, r3
 8000d36:	2601      	movs	r6, #1
 8000d38:	1aff      	subs	r7, r7, r3
 8000d3a:	e5da      	b.n	80008f2 <__aeabi_dadd+0xa2>
 8000d3c:	0742      	lsls	r2, r0, #29
 8000d3e:	08db      	lsrs	r3, r3, #3
 8000d40:	4313      	orrs	r3, r2
 8000d42:	08c0      	lsrs	r0, r0, #3
 8000d44:	e6d2      	b.n	8000aec <__aeabi_dadd+0x29c>
 8000d46:	0742      	lsls	r2, r0, #29
 8000d48:	08db      	lsrs	r3, r3, #3
 8000d4a:	4313      	orrs	r3, r2
 8000d4c:	08c0      	lsrs	r0, r0, #3
 8000d4e:	e6ac      	b.n	8000aaa <__aeabi_dadd+0x25a>
 8000d50:	4643      	mov	r3, r8
 8000d52:	4642      	mov	r2, r8
 8000d54:	08c9      	lsrs	r1, r1, #3
 8000d56:	075b      	lsls	r3, r3, #29
 8000d58:	4655      	mov	r5, sl
 8000d5a:	430b      	orrs	r3, r1
 8000d5c:	08d0      	lsrs	r0, r2, #3
 8000d5e:	e6c5      	b.n	8000aec <__aeabi_dadd+0x29c>
 8000d60:	4643      	mov	r3, r8
 8000d62:	4642      	mov	r2, r8
 8000d64:	075b      	lsls	r3, r3, #29
 8000d66:	08c9      	lsrs	r1, r1, #3
 8000d68:	430b      	orrs	r3, r1
 8000d6a:	08d0      	lsrs	r0, r2, #3
 8000d6c:	e6be      	b.n	8000aec <__aeabi_dadd+0x29c>
 8000d6e:	4303      	orrs	r3, r0
 8000d70:	001c      	movs	r4, r3
 8000d72:	1e63      	subs	r3, r4, #1
 8000d74:	419c      	sbcs	r4, r3
 8000d76:	e6fc      	b.n	8000b72 <__aeabi_dadd+0x322>
 8000d78:	0002      	movs	r2, r0
 8000d7a:	3c20      	subs	r4, #32
 8000d7c:	40e2      	lsrs	r2, r4
 8000d7e:	0014      	movs	r4, r2
 8000d80:	4662      	mov	r2, ip
 8000d82:	2a20      	cmp	r2, #32
 8000d84:	d003      	beq.n	8000d8e <__aeabi_dadd+0x53e>
 8000d86:	2540      	movs	r5, #64	; 0x40
 8000d88:	1aad      	subs	r5, r5, r2
 8000d8a:	40a8      	lsls	r0, r5
 8000d8c:	4303      	orrs	r3, r0
 8000d8e:	1e58      	subs	r0, r3, #1
 8000d90:	4183      	sbcs	r3, r0
 8000d92:	4323      	orrs	r3, r4
 8000d94:	e775      	b.n	8000c82 <__aeabi_dadd+0x432>
 8000d96:	2a00      	cmp	r2, #0
 8000d98:	d0e2      	beq.n	8000d60 <__aeabi_dadd+0x510>
 8000d9a:	003a      	movs	r2, r7
 8000d9c:	430a      	orrs	r2, r1
 8000d9e:	d0cd      	beq.n	8000d3c <__aeabi_dadd+0x4ec>
 8000da0:	0742      	lsls	r2, r0, #29
 8000da2:	08db      	lsrs	r3, r3, #3
 8000da4:	4313      	orrs	r3, r2
 8000da6:	2280      	movs	r2, #128	; 0x80
 8000da8:	08c0      	lsrs	r0, r0, #3
 8000daa:	0312      	lsls	r2, r2, #12
 8000dac:	4210      	tst	r0, r2
 8000dae:	d006      	beq.n	8000dbe <__aeabi_dadd+0x56e>
 8000db0:	08fc      	lsrs	r4, r7, #3
 8000db2:	4214      	tst	r4, r2
 8000db4:	d103      	bne.n	8000dbe <__aeabi_dadd+0x56e>
 8000db6:	0020      	movs	r0, r4
 8000db8:	08cb      	lsrs	r3, r1, #3
 8000dba:	077a      	lsls	r2, r7, #29
 8000dbc:	4313      	orrs	r3, r2
 8000dbe:	0f5a      	lsrs	r2, r3, #29
 8000dc0:	00db      	lsls	r3, r3, #3
 8000dc2:	0752      	lsls	r2, r2, #29
 8000dc4:	08db      	lsrs	r3, r3, #3
 8000dc6:	4313      	orrs	r3, r2
 8000dc8:	e690      	b.n	8000aec <__aeabi_dadd+0x29c>
 8000dca:	4643      	mov	r3, r8
 8000dcc:	430b      	orrs	r3, r1
 8000dce:	d100      	bne.n	8000dd2 <__aeabi_dadd+0x582>
 8000dd0:	e709      	b.n	8000be6 <__aeabi_dadd+0x396>
 8000dd2:	4643      	mov	r3, r8
 8000dd4:	4642      	mov	r2, r8
 8000dd6:	08c9      	lsrs	r1, r1, #3
 8000dd8:	075b      	lsls	r3, r3, #29
 8000dda:	4655      	mov	r5, sl
 8000ddc:	430b      	orrs	r3, r1
 8000dde:	08d0      	lsrs	r0, r2, #3
 8000de0:	e666      	b.n	8000ab0 <__aeabi_dadd+0x260>
 8000de2:	1acc      	subs	r4, r1, r3
 8000de4:	42a1      	cmp	r1, r4
 8000de6:	4189      	sbcs	r1, r1
 8000de8:	1a3f      	subs	r7, r7, r0
 8000dea:	4249      	negs	r1, r1
 8000dec:	4655      	mov	r5, sl
 8000dee:	2601      	movs	r6, #1
 8000df0:	1a7f      	subs	r7, r7, r1
 8000df2:	e57e      	b.n	80008f2 <__aeabi_dadd+0xa2>
 8000df4:	4642      	mov	r2, r8
 8000df6:	1a5c      	subs	r4, r3, r1
 8000df8:	1a87      	subs	r7, r0, r2
 8000dfa:	42a3      	cmp	r3, r4
 8000dfc:	4192      	sbcs	r2, r2
 8000dfe:	4252      	negs	r2, r2
 8000e00:	1abf      	subs	r7, r7, r2
 8000e02:	023a      	lsls	r2, r7, #8
 8000e04:	d53d      	bpl.n	8000e82 <__aeabi_dadd+0x632>
 8000e06:	1acc      	subs	r4, r1, r3
 8000e08:	42a1      	cmp	r1, r4
 8000e0a:	4189      	sbcs	r1, r1
 8000e0c:	4643      	mov	r3, r8
 8000e0e:	4249      	negs	r1, r1
 8000e10:	1a1f      	subs	r7, r3, r0
 8000e12:	4655      	mov	r5, sl
 8000e14:	1a7f      	subs	r7, r7, r1
 8000e16:	e595      	b.n	8000944 <__aeabi_dadd+0xf4>
 8000e18:	077b      	lsls	r3, r7, #29
 8000e1a:	08c9      	lsrs	r1, r1, #3
 8000e1c:	430b      	orrs	r3, r1
 8000e1e:	08f8      	lsrs	r0, r7, #3
 8000e20:	e643      	b.n	8000aaa <__aeabi_dadd+0x25a>
 8000e22:	4644      	mov	r4, r8
 8000e24:	08db      	lsrs	r3, r3, #3
 8000e26:	430c      	orrs	r4, r1
 8000e28:	d130      	bne.n	8000e8c <__aeabi_dadd+0x63c>
 8000e2a:	0742      	lsls	r2, r0, #29
 8000e2c:	4313      	orrs	r3, r2
 8000e2e:	08c0      	lsrs	r0, r0, #3
 8000e30:	e65c      	b.n	8000aec <__aeabi_dadd+0x29c>
 8000e32:	077b      	lsls	r3, r7, #29
 8000e34:	08c9      	lsrs	r1, r1, #3
 8000e36:	430b      	orrs	r3, r1
 8000e38:	08f8      	lsrs	r0, r7, #3
 8000e3a:	e639      	b.n	8000ab0 <__aeabi_dadd+0x260>
 8000e3c:	185c      	adds	r4, r3, r1
 8000e3e:	429c      	cmp	r4, r3
 8000e40:	419b      	sbcs	r3, r3
 8000e42:	4440      	add	r0, r8
 8000e44:	425b      	negs	r3, r3
 8000e46:	18c7      	adds	r7, r0, r3
 8000e48:	023b      	lsls	r3, r7, #8
 8000e4a:	d400      	bmi.n	8000e4e <__aeabi_dadd+0x5fe>
 8000e4c:	e625      	b.n	8000a9a <__aeabi_dadd+0x24a>
 8000e4e:	4b1d      	ldr	r3, [pc, #116]	; (8000ec4 <__aeabi_dadd+0x674>)
 8000e50:	2601      	movs	r6, #1
 8000e52:	401f      	ands	r7, r3
 8000e54:	e621      	b.n	8000a9a <__aeabi_dadd+0x24a>
 8000e56:	0004      	movs	r4, r0
 8000e58:	3a20      	subs	r2, #32
 8000e5a:	40d4      	lsrs	r4, r2
 8000e5c:	4662      	mov	r2, ip
 8000e5e:	2a20      	cmp	r2, #32
 8000e60:	d004      	beq.n	8000e6c <__aeabi_dadd+0x61c>
 8000e62:	2240      	movs	r2, #64	; 0x40
 8000e64:	4666      	mov	r6, ip
 8000e66:	1b92      	subs	r2, r2, r6
 8000e68:	4090      	lsls	r0, r2
 8000e6a:	4303      	orrs	r3, r0
 8000e6c:	1e5a      	subs	r2, r3, #1
 8000e6e:	4193      	sbcs	r3, r2
 8000e70:	431c      	orrs	r4, r3
 8000e72:	e67e      	b.n	8000b72 <__aeabi_dadd+0x322>
 8000e74:	185c      	adds	r4, r3, r1
 8000e76:	428c      	cmp	r4, r1
 8000e78:	4189      	sbcs	r1, r1
 8000e7a:	4440      	add	r0, r8
 8000e7c:	4249      	negs	r1, r1
 8000e7e:	1847      	adds	r7, r0, r1
 8000e80:	e6dd      	b.n	8000c3e <__aeabi_dadd+0x3ee>
 8000e82:	0023      	movs	r3, r4
 8000e84:	433b      	orrs	r3, r7
 8000e86:	d100      	bne.n	8000e8a <__aeabi_dadd+0x63a>
 8000e88:	e6ad      	b.n	8000be6 <__aeabi_dadd+0x396>
 8000e8a:	e606      	b.n	8000a9a <__aeabi_dadd+0x24a>
 8000e8c:	0744      	lsls	r4, r0, #29
 8000e8e:	4323      	orrs	r3, r4
 8000e90:	2480      	movs	r4, #128	; 0x80
 8000e92:	08c0      	lsrs	r0, r0, #3
 8000e94:	0324      	lsls	r4, r4, #12
 8000e96:	4220      	tst	r0, r4
 8000e98:	d008      	beq.n	8000eac <__aeabi_dadd+0x65c>
 8000e9a:	4642      	mov	r2, r8
 8000e9c:	08d6      	lsrs	r6, r2, #3
 8000e9e:	4226      	tst	r6, r4
 8000ea0:	d104      	bne.n	8000eac <__aeabi_dadd+0x65c>
 8000ea2:	4655      	mov	r5, sl
 8000ea4:	0030      	movs	r0, r6
 8000ea6:	08cb      	lsrs	r3, r1, #3
 8000ea8:	0751      	lsls	r1, r2, #29
 8000eaa:	430b      	orrs	r3, r1
 8000eac:	0f5a      	lsrs	r2, r3, #29
 8000eae:	00db      	lsls	r3, r3, #3
 8000eb0:	08db      	lsrs	r3, r3, #3
 8000eb2:	0752      	lsls	r2, r2, #29
 8000eb4:	4313      	orrs	r3, r2
 8000eb6:	e619      	b.n	8000aec <__aeabi_dadd+0x29c>
 8000eb8:	2300      	movs	r3, #0
 8000eba:	4a01      	ldr	r2, [pc, #4]	; (8000ec0 <__aeabi_dadd+0x670>)
 8000ebc:	001f      	movs	r7, r3
 8000ebe:	e55e      	b.n	800097e <__aeabi_dadd+0x12e>
 8000ec0:	000007ff 	.word	0x000007ff
 8000ec4:	ff7fffff 	.word	0xff7fffff

08000ec8 <__aeabi_ddiv>:
 8000ec8:	b5f0      	push	{r4, r5, r6, r7, lr}
 8000eca:	4657      	mov	r7, sl
 8000ecc:	464e      	mov	r6, r9
 8000ece:	4645      	mov	r5, r8
 8000ed0:	46de      	mov	lr, fp
 8000ed2:	b5e0      	push	{r5, r6, r7, lr}
 8000ed4:	4681      	mov	r9, r0
 8000ed6:	0005      	movs	r5, r0
 8000ed8:	030c      	lsls	r4, r1, #12
 8000eda:	0048      	lsls	r0, r1, #1
 8000edc:	4692      	mov	sl, r2
 8000ede:	001f      	movs	r7, r3
 8000ee0:	b085      	sub	sp, #20
 8000ee2:	0b24      	lsrs	r4, r4, #12
 8000ee4:	0d40      	lsrs	r0, r0, #21
 8000ee6:	0fce      	lsrs	r6, r1, #31
 8000ee8:	2800      	cmp	r0, #0
 8000eea:	d100      	bne.n	8000eee <__aeabi_ddiv+0x26>
 8000eec:	e156      	b.n	800119c <__aeabi_ddiv+0x2d4>
 8000eee:	4bd4      	ldr	r3, [pc, #848]	; (8001240 <__aeabi_ddiv+0x378>)
 8000ef0:	4298      	cmp	r0, r3
 8000ef2:	d100      	bne.n	8000ef6 <__aeabi_ddiv+0x2e>
 8000ef4:	e172      	b.n	80011dc <__aeabi_ddiv+0x314>
 8000ef6:	0f6b      	lsrs	r3, r5, #29
 8000ef8:	00e4      	lsls	r4, r4, #3
 8000efa:	431c      	orrs	r4, r3
 8000efc:	2380      	movs	r3, #128	; 0x80
 8000efe:	041b      	lsls	r3, r3, #16
 8000f00:	4323      	orrs	r3, r4
 8000f02:	4698      	mov	r8, r3
 8000f04:	4bcf      	ldr	r3, [pc, #828]	; (8001244 <__aeabi_ddiv+0x37c>)
 8000f06:	00ed      	lsls	r5, r5, #3
 8000f08:	469b      	mov	fp, r3
 8000f0a:	2300      	movs	r3, #0
 8000f0c:	4699      	mov	r9, r3
 8000f0e:	4483      	add	fp, r0
 8000f10:	9300      	str	r3, [sp, #0]
 8000f12:	033c      	lsls	r4, r7, #12
 8000f14:	007b      	lsls	r3, r7, #1
 8000f16:	4650      	mov	r0, sl
 8000f18:	0b24      	lsrs	r4, r4, #12
 8000f1a:	0d5b      	lsrs	r3, r3, #21
 8000f1c:	0fff      	lsrs	r7, r7, #31
 8000f1e:	2b00      	cmp	r3, #0
 8000f20:	d100      	bne.n	8000f24 <__aeabi_ddiv+0x5c>
 8000f22:	e11f      	b.n	8001164 <__aeabi_ddiv+0x29c>
 8000f24:	4ac6      	ldr	r2, [pc, #792]	; (8001240 <__aeabi_ddiv+0x378>)
 8000f26:	4293      	cmp	r3, r2
 8000f28:	d100      	bne.n	8000f2c <__aeabi_ddiv+0x64>
 8000f2a:	e162      	b.n	80011f2 <__aeabi_ddiv+0x32a>
 8000f2c:	49c5      	ldr	r1, [pc, #788]	; (8001244 <__aeabi_ddiv+0x37c>)
 8000f2e:	0f42      	lsrs	r2, r0, #29
 8000f30:	468c      	mov	ip, r1
 8000f32:	00e4      	lsls	r4, r4, #3
 8000f34:	4659      	mov	r1, fp
 8000f36:	4314      	orrs	r4, r2
 8000f38:	2280      	movs	r2, #128	; 0x80
 8000f3a:	4463      	add	r3, ip
 8000f3c:	0412      	lsls	r2, r2, #16
 8000f3e:	1acb      	subs	r3, r1, r3
 8000f40:	4314      	orrs	r4, r2
 8000f42:	469b      	mov	fp, r3
 8000f44:	00c2      	lsls	r2, r0, #3
 8000f46:	2000      	movs	r0, #0
 8000f48:	0033      	movs	r3, r6
 8000f4a:	407b      	eors	r3, r7
 8000f4c:	469a      	mov	sl, r3
 8000f4e:	464b      	mov	r3, r9
 8000f50:	2b0f      	cmp	r3, #15
 8000f52:	d827      	bhi.n	8000fa4 <__aeabi_ddiv+0xdc>
 8000f54:	49bc      	ldr	r1, [pc, #752]	; (8001248 <__aeabi_ddiv+0x380>)
 8000f56:	009b      	lsls	r3, r3, #2
 8000f58:	58cb      	ldr	r3, [r1, r3]
 8000f5a:	469f      	mov	pc, r3
 8000f5c:	46b2      	mov	sl, r6
 8000f5e:	9b00      	ldr	r3, [sp, #0]
 8000f60:	2b02      	cmp	r3, #2
 8000f62:	d016      	beq.n	8000f92 <__aeabi_ddiv+0xca>
 8000f64:	2b03      	cmp	r3, #3
 8000f66:	d100      	bne.n	8000f6a <__aeabi_ddiv+0xa2>
 8000f68:	e28e      	b.n	8001488 <__aeabi_ddiv+0x5c0>
 8000f6a:	2b01      	cmp	r3, #1
 8000f6c:	d000      	beq.n	8000f70 <__aeabi_ddiv+0xa8>
 8000f6e:	e0d9      	b.n	8001124 <__aeabi_ddiv+0x25c>
 8000f70:	2300      	movs	r3, #0
 8000f72:	2400      	movs	r4, #0
 8000f74:	2500      	movs	r5, #0
 8000f76:	4652      	mov	r2, sl
 8000f78:	051b      	lsls	r3, r3, #20
 8000f7a:	4323      	orrs	r3, r4
 8000f7c:	07d2      	lsls	r2, r2, #31
 8000f7e:	4313      	orrs	r3, r2
 8000f80:	0028      	movs	r0, r5
 8000f82:	0019      	movs	r1, r3
 8000f84:	b005      	add	sp, #20
 8000f86:	bcf0      	pop	{r4, r5, r6, r7}
 8000f88:	46bb      	mov	fp, r7
 8000f8a:	46b2      	mov	sl, r6
 8000f8c:	46a9      	mov	r9, r5
 8000f8e:	46a0      	mov	r8, r4
 8000f90:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8000f92:	2400      	movs	r4, #0
 8000f94:	2500      	movs	r5, #0
 8000f96:	4baa      	ldr	r3, [pc, #680]	; (8001240 <__aeabi_ddiv+0x378>)
 8000f98:	e7ed      	b.n	8000f76 <__aeabi_ddiv+0xae>
 8000f9a:	46ba      	mov	sl, r7
 8000f9c:	46a0      	mov	r8, r4
 8000f9e:	0015      	movs	r5, r2
 8000fa0:	9000      	str	r0, [sp, #0]
 8000fa2:	e7dc      	b.n	8000f5e <__aeabi_ddiv+0x96>
 8000fa4:	4544      	cmp	r4, r8
 8000fa6:	d200      	bcs.n	8000faa <__aeabi_ddiv+0xe2>
 8000fa8:	e1c7      	b.n	800133a <__aeabi_ddiv+0x472>
 8000faa:	d100      	bne.n	8000fae <__aeabi_ddiv+0xe6>
 8000fac:	e1c2      	b.n	8001334 <__aeabi_ddiv+0x46c>
 8000fae:	2301      	movs	r3, #1
 8000fb0:	425b      	negs	r3, r3
 8000fb2:	469c      	mov	ip, r3
 8000fb4:	002e      	movs	r6, r5
 8000fb6:	4640      	mov	r0, r8
 8000fb8:	2500      	movs	r5, #0
 8000fba:	44e3      	add	fp, ip
 8000fbc:	0223      	lsls	r3, r4, #8
 8000fbe:	0e14      	lsrs	r4, r2, #24
 8000fc0:	431c      	orrs	r4, r3
 8000fc2:	0c1b      	lsrs	r3, r3, #16
 8000fc4:	4699      	mov	r9, r3
 8000fc6:	0423      	lsls	r3, r4, #16
 8000fc8:	0c1f      	lsrs	r7, r3, #16
 8000fca:	0212      	lsls	r2, r2, #8
 8000fcc:	4649      	mov	r1, r9
 8000fce:	9200      	str	r2, [sp, #0]
 8000fd0:	9701      	str	r7, [sp, #4]
 8000fd2:	f7ff f939 	bl	8000248 <__aeabi_uidivmod>
 8000fd6:	0002      	movs	r2, r0
 8000fd8:	437a      	muls	r2, r7
 8000fda:	040b      	lsls	r3, r1, #16
 8000fdc:	0c31      	lsrs	r1, r6, #16
 8000fde:	4680      	mov	r8, r0
 8000fe0:	4319      	orrs	r1, r3
 8000fe2:	428a      	cmp	r2, r1
 8000fe4:	d907      	bls.n	8000ff6 <__aeabi_ddiv+0x12e>
 8000fe6:	2301      	movs	r3, #1
 8000fe8:	425b      	negs	r3, r3
 8000fea:	469c      	mov	ip, r3
 8000fec:	1909      	adds	r1, r1, r4
 8000fee:	44e0      	add	r8, ip
 8000ff0:	428c      	cmp	r4, r1
 8000ff2:	d800      	bhi.n	8000ff6 <__aeabi_ddiv+0x12e>
 8000ff4:	e207      	b.n	8001406 <__aeabi_ddiv+0x53e>
 8000ff6:	1a88      	subs	r0, r1, r2
 8000ff8:	4649      	mov	r1, r9
 8000ffa:	f7ff f925 	bl	8000248 <__aeabi_uidivmod>
 8000ffe:	0409      	lsls	r1, r1, #16
 8001000:	468c      	mov	ip, r1
 8001002:	0431      	lsls	r1, r6, #16
 8001004:	4666      	mov	r6, ip
 8001006:	9a01      	ldr	r2, [sp, #4]
 8001008:	0c09      	lsrs	r1, r1, #16
 800100a:	4342      	muls	r2, r0
 800100c:	0003      	movs	r3, r0
 800100e:	4331      	orrs	r1, r6
 8001010:	428a      	cmp	r2, r1
 8001012:	d904      	bls.n	800101e <__aeabi_ddiv+0x156>
 8001014:	1909      	adds	r1, r1, r4
 8001016:	3b01      	subs	r3, #1
 8001018:	428c      	cmp	r4, r1
 800101a:	d800      	bhi.n	800101e <__aeabi_ddiv+0x156>
 800101c:	e1ed      	b.n	80013fa <__aeabi_ddiv+0x532>
 800101e:	1a88      	subs	r0, r1, r2
 8001020:	4642      	mov	r2, r8
 8001022:	0412      	lsls	r2, r2, #16
 8001024:	431a      	orrs	r2, r3
 8001026:	4690      	mov	r8, r2
 8001028:	4641      	mov	r1, r8
 800102a:	9b00      	ldr	r3, [sp, #0]
 800102c:	040e      	lsls	r6, r1, #16
 800102e:	0c1b      	lsrs	r3, r3, #16
 8001030:	001f      	movs	r7, r3
 8001032:	9302      	str	r3, [sp, #8]
 8001034:	9b00      	ldr	r3, [sp, #0]
 8001036:	0c36      	lsrs	r6, r6, #16
 8001038:	041b      	lsls	r3, r3, #16
 800103a:	0c19      	lsrs	r1, r3, #16
 800103c:	000b      	movs	r3, r1
 800103e:	4373      	muls	r3, r6
 8001040:	0c12      	lsrs	r2, r2, #16
 8001042:	437e      	muls	r6, r7
 8001044:	9103      	str	r1, [sp, #12]
 8001046:	4351      	muls	r1, r2
 8001048:	437a      	muls	r2, r7
 800104a:	0c1f      	lsrs	r7, r3, #16
 800104c:	46bc      	mov	ip, r7
 800104e:	1876      	adds	r6, r6, r1
 8001050:	4466      	add	r6, ip
 8001052:	42b1      	cmp	r1, r6
 8001054:	d903      	bls.n	800105e <__aeabi_ddiv+0x196>
 8001056:	2180      	movs	r1, #128	; 0x80
 8001058:	0249      	lsls	r1, r1, #9
 800105a:	468c      	mov	ip, r1
 800105c:	4462      	add	r2, ip
 800105e:	0c31      	lsrs	r1, r6, #16
 8001060:	188a      	adds	r2, r1, r2
 8001062:	0431      	lsls	r1, r6, #16
 8001064:	041e      	lsls	r6, r3, #16
 8001066:	0c36      	lsrs	r6, r6, #16
 8001068:	198e      	adds	r6, r1, r6
 800106a:	4290      	cmp	r0, r2
 800106c:	d302      	bcc.n	8001074 <__aeabi_ddiv+0x1ac>
 800106e:	d112      	bne.n	8001096 <__aeabi_ddiv+0x1ce>
 8001070:	42b5      	cmp	r5, r6
 8001072:	d210      	bcs.n	8001096 <__aeabi_ddiv+0x1ce>
 8001074:	4643      	mov	r3, r8
 8001076:	1e59      	subs	r1, r3, #1
 8001078:	9b00      	ldr	r3, [sp, #0]
 800107a:	469c      	mov	ip, r3
 800107c:	4465      	add	r5, ip
 800107e:	001f      	movs	r7, r3
 8001080:	429d      	cmp	r5, r3
 8001082:	419b      	sbcs	r3, r3
 8001084:	425b      	negs	r3, r3
 8001086:	191b      	adds	r3, r3, r4
 8001088:	18c0      	adds	r0, r0, r3
 800108a:	4284      	cmp	r4, r0
 800108c:	d200      	bcs.n	8001090 <__aeabi_ddiv+0x1c8>
 800108e:	e1a0      	b.n	80013d2 <__aeabi_ddiv+0x50a>
 8001090:	d100      	bne.n	8001094 <__aeabi_ddiv+0x1cc>
 8001092:	e19b      	b.n	80013cc <__aeabi_ddiv+0x504>
 8001094:	4688      	mov	r8, r1
 8001096:	1bae      	subs	r6, r5, r6
 8001098:	42b5      	cmp	r5, r6
 800109a:	41ad      	sbcs	r5, r5
 800109c:	1a80      	subs	r0, r0, r2
 800109e:	426d      	negs	r5, r5
 80010a0:	1b40      	subs	r0, r0, r5
 80010a2:	4284      	cmp	r4, r0
 80010a4:	d100      	bne.n	80010a8 <__aeabi_ddiv+0x1e0>
 80010a6:	e1d5      	b.n	8001454 <__aeabi_ddiv+0x58c>
 80010a8:	4649      	mov	r1, r9
 80010aa:	f7ff f8cd 	bl	8000248 <__aeabi_uidivmod>
 80010ae:	9a01      	ldr	r2, [sp, #4]
 80010b0:	040b      	lsls	r3, r1, #16
 80010b2:	4342      	muls	r2, r0
 80010b4:	0c31      	lsrs	r1, r6, #16
 80010b6:	0005      	movs	r5, r0
 80010b8:	4319      	orrs	r1, r3
 80010ba:	428a      	cmp	r2, r1
 80010bc:	d900      	bls.n	80010c0 <__aeabi_ddiv+0x1f8>
 80010be:	e16c      	b.n	800139a <__aeabi_ddiv+0x4d2>
 80010c0:	1a88      	subs	r0, r1, r2
 80010c2:	4649      	mov	r1, r9
 80010c4:	f7ff f8c0 	bl	8000248 <__aeabi_uidivmod>
 80010c8:	9a01      	ldr	r2, [sp, #4]
 80010ca:	0436      	lsls	r6, r6, #16
 80010cc:	4342      	muls	r2, r0
 80010ce:	0409      	lsls	r1, r1, #16
 80010d0:	0c36      	lsrs	r6, r6, #16
 80010d2:	0003      	movs	r3, r0
 80010d4:	430e      	orrs	r6, r1
 80010d6:	42b2      	cmp	r2, r6
 80010d8:	d900      	bls.n	80010dc <__aeabi_ddiv+0x214>
 80010da:	e153      	b.n	8001384 <__aeabi_ddiv+0x4bc>
 80010dc:	9803      	ldr	r0, [sp, #12]
 80010de:	1ab6      	subs	r6, r6, r2
 80010e0:	0002      	movs	r2, r0
 80010e2:	042d      	lsls	r5, r5, #16
 80010e4:	431d      	orrs	r5, r3
 80010e6:	9f02      	ldr	r7, [sp, #8]
 80010e8:	042b      	lsls	r3, r5, #16
 80010ea:	0c1b      	lsrs	r3, r3, #16
 80010ec:	435a      	muls	r2, r3
 80010ee:	437b      	muls	r3, r7
 80010f0:	469c      	mov	ip, r3
 80010f2:	0c29      	lsrs	r1, r5, #16
 80010f4:	4348      	muls	r0, r1
 80010f6:	0c13      	lsrs	r3, r2, #16
 80010f8:	4484      	add	ip, r0
 80010fa:	4463      	add	r3, ip
 80010fc:	4379      	muls	r1, r7
 80010fe:	4298      	cmp	r0, r3
 8001100:	d903      	bls.n	800110a <__aeabi_ddiv+0x242>
 8001102:	2080      	movs	r0, #128	; 0x80
 8001104:	0240      	lsls	r0, r0, #9
 8001106:	4684      	mov	ip, r0
 8001108:	4461      	add	r1, ip
 800110a:	0c18      	lsrs	r0, r3, #16
 800110c:	0412      	lsls	r2, r2, #16
 800110e:	041b      	lsls	r3, r3, #16
 8001110:	0c12      	lsrs	r2, r2, #16
 8001112:	1841      	adds	r1, r0, r1
 8001114:	189b      	adds	r3, r3, r2
 8001116:	428e      	cmp	r6, r1
 8001118:	d200      	bcs.n	800111c <__aeabi_ddiv+0x254>
 800111a:	e0ff      	b.n	800131c <__aeabi_ddiv+0x454>
 800111c:	d100      	bne.n	8001120 <__aeabi_ddiv+0x258>
 800111e:	e0fa      	b.n	8001316 <__aeabi_ddiv+0x44e>
 8001120:	2301      	movs	r3, #1
 8001122:	431d      	orrs	r5, r3
 8001124:	4a49      	ldr	r2, [pc, #292]	; (800124c <__aeabi_ddiv+0x384>)
 8001126:	445a      	add	r2, fp
 8001128:	2a00      	cmp	r2, #0
 800112a:	dc00      	bgt.n	800112e <__aeabi_ddiv+0x266>
 800112c:	e0aa      	b.n	8001284 <__aeabi_ddiv+0x3bc>
 800112e:	076b      	lsls	r3, r5, #29
 8001130:	d000      	beq.n	8001134 <__aeabi_ddiv+0x26c>
 8001132:	e13d      	b.n	80013b0 <__aeabi_ddiv+0x4e8>
 8001134:	08ed      	lsrs	r5, r5, #3
 8001136:	4643      	mov	r3, r8
 8001138:	01db      	lsls	r3, r3, #7
 800113a:	d506      	bpl.n	800114a <__aeabi_ddiv+0x282>
 800113c:	4642      	mov	r2, r8
 800113e:	4b44      	ldr	r3, [pc, #272]	; (8001250 <__aeabi_ddiv+0x388>)
 8001140:	401a      	ands	r2, r3
 8001142:	4690      	mov	r8, r2
 8001144:	2280      	movs	r2, #128	; 0x80
 8001146:	00d2      	lsls	r2, r2, #3
 8001148:	445a      	add	r2, fp
 800114a:	4b42      	ldr	r3, [pc, #264]	; (8001254 <__aeabi_ddiv+0x38c>)
 800114c:	429a      	cmp	r2, r3
 800114e:	dd00      	ble.n	8001152 <__aeabi_ddiv+0x28a>
 8001150:	e71f      	b.n	8000f92 <__aeabi_ddiv+0xca>
 8001152:	4643      	mov	r3, r8
 8001154:	075b      	lsls	r3, r3, #29
 8001156:	431d      	orrs	r5, r3
 8001158:	4643      	mov	r3, r8
 800115a:	0552      	lsls	r2, r2, #21
 800115c:	025c      	lsls	r4, r3, #9
 800115e:	0b24      	lsrs	r4, r4, #12
 8001160:	0d53      	lsrs	r3, r2, #21
 8001162:	e708      	b.n	8000f76 <__aeabi_ddiv+0xae>
 8001164:	4652      	mov	r2, sl
 8001166:	4322      	orrs	r2, r4
 8001168:	d100      	bne.n	800116c <__aeabi_ddiv+0x2a4>
 800116a:	e07b      	b.n	8001264 <__aeabi_ddiv+0x39c>
 800116c:	2c00      	cmp	r4, #0
 800116e:	d100      	bne.n	8001172 <__aeabi_ddiv+0x2aa>
 8001170:	e0fa      	b.n	8001368 <__aeabi_ddiv+0x4a0>
 8001172:	0020      	movs	r0, r4
 8001174:	f001 fa22 	bl	80025bc <__clzsi2>
 8001178:	0002      	movs	r2, r0
 800117a:	3a0b      	subs	r2, #11
 800117c:	231d      	movs	r3, #29
 800117e:	0001      	movs	r1, r0
 8001180:	1a9b      	subs	r3, r3, r2
 8001182:	4652      	mov	r2, sl
 8001184:	3908      	subs	r1, #8
 8001186:	40da      	lsrs	r2, r3
 8001188:	408c      	lsls	r4, r1
 800118a:	4314      	orrs	r4, r2
 800118c:	4652      	mov	r2, sl
 800118e:	408a      	lsls	r2, r1
 8001190:	4b31      	ldr	r3, [pc, #196]	; (8001258 <__aeabi_ddiv+0x390>)
 8001192:	4458      	add	r0, fp
 8001194:	469b      	mov	fp, r3
 8001196:	4483      	add	fp, r0
 8001198:	2000      	movs	r0, #0
 800119a:	e6d5      	b.n	8000f48 <__aeabi_ddiv+0x80>
 800119c:	464b      	mov	r3, r9
 800119e:	4323      	orrs	r3, r4
 80011a0:	4698      	mov	r8, r3
 80011a2:	d044      	beq.n	800122e <__aeabi_ddiv+0x366>
 80011a4:	2c00      	cmp	r4, #0
 80011a6:	d100      	bne.n	80011aa <__aeabi_ddiv+0x2e2>
 80011a8:	e0ce      	b.n	8001348 <__aeabi_ddiv+0x480>
 80011aa:	0020      	movs	r0, r4
 80011ac:	f001 fa06 	bl	80025bc <__clzsi2>
 80011b0:	0001      	movs	r1, r0
 80011b2:	0002      	movs	r2, r0
 80011b4:	390b      	subs	r1, #11
 80011b6:	231d      	movs	r3, #29
 80011b8:	1a5b      	subs	r3, r3, r1
 80011ba:	4649      	mov	r1, r9
 80011bc:	0010      	movs	r0, r2
 80011be:	40d9      	lsrs	r1, r3
 80011c0:	3808      	subs	r0, #8
 80011c2:	4084      	lsls	r4, r0
 80011c4:	000b      	movs	r3, r1
 80011c6:	464d      	mov	r5, r9
 80011c8:	4323      	orrs	r3, r4
 80011ca:	4698      	mov	r8, r3
 80011cc:	4085      	lsls	r5, r0
 80011ce:	4823      	ldr	r0, [pc, #140]	; (800125c <__aeabi_ddiv+0x394>)
 80011d0:	1a83      	subs	r3, r0, r2
 80011d2:	469b      	mov	fp, r3
 80011d4:	2300      	movs	r3, #0
 80011d6:	4699      	mov	r9, r3
 80011d8:	9300      	str	r3, [sp, #0]
 80011da:	e69a      	b.n	8000f12 <__aeabi_ddiv+0x4a>
 80011dc:	464b      	mov	r3, r9
 80011de:	4323      	orrs	r3, r4
 80011e0:	4698      	mov	r8, r3
 80011e2:	d11d      	bne.n	8001220 <__aeabi_ddiv+0x358>
 80011e4:	2308      	movs	r3, #8
 80011e6:	4699      	mov	r9, r3
 80011e8:	3b06      	subs	r3, #6
 80011ea:	2500      	movs	r5, #0
 80011ec:	4683      	mov	fp, r0
 80011ee:	9300      	str	r3, [sp, #0]
 80011f0:	e68f      	b.n	8000f12 <__aeabi_ddiv+0x4a>
 80011f2:	4652      	mov	r2, sl
 80011f4:	4322      	orrs	r2, r4
 80011f6:	d109      	bne.n	800120c <__aeabi_ddiv+0x344>
 80011f8:	2302      	movs	r3, #2
 80011fa:	4649      	mov	r1, r9
 80011fc:	4319      	orrs	r1, r3
 80011fe:	4b18      	ldr	r3, [pc, #96]	; (8001260 <__aeabi_ddiv+0x398>)
 8001200:	4689      	mov	r9, r1
 8001202:	469c      	mov	ip, r3
 8001204:	2400      	movs	r4, #0
 8001206:	2002      	movs	r0, #2
 8001208:	44e3      	add	fp, ip
 800120a:	e69d      	b.n	8000f48 <__aeabi_ddiv+0x80>
 800120c:	2303      	movs	r3, #3
 800120e:	464a      	mov	r2, r9
 8001210:	431a      	orrs	r2, r3
 8001212:	4b13      	ldr	r3, [pc, #76]	; (8001260 <__aeabi_ddiv+0x398>)
 8001214:	4691      	mov	r9, r2
 8001216:	469c      	mov	ip, r3
 8001218:	4652      	mov	r2, sl
 800121a:	2003      	movs	r0, #3
 800121c:	44e3      	add	fp, ip
 800121e:	e693      	b.n	8000f48 <__aeabi_ddiv+0x80>
 8001220:	230c      	movs	r3, #12
 8001222:	4699      	mov	r9, r3
 8001224:	3b09      	subs	r3, #9
 8001226:	46a0      	mov	r8, r4
 8001228:	4683      	mov	fp, r0
 800122a:	9300      	str	r3, [sp, #0]
 800122c:	e671      	b.n	8000f12 <__aeabi_ddiv+0x4a>
 800122e:	2304      	movs	r3, #4
 8001230:	4699      	mov	r9, r3
 8001232:	2300      	movs	r3, #0
 8001234:	469b      	mov	fp, r3
 8001236:	3301      	adds	r3, #1
 8001238:	2500      	movs	r5, #0
 800123a:	9300      	str	r3, [sp, #0]
 800123c:	e669      	b.n	8000f12 <__aeabi_ddiv+0x4a>
 800123e:	46c0      	nop			; (mov r8, r8)
 8001240:	000007ff 	.word	0x000007ff
 8001244:	fffffc01 	.word	0xfffffc01
 8001248:	0800a398 	.word	0x0800a398
 800124c:	000003ff 	.word	0x000003ff
 8001250:	feffffff 	.word	0xfeffffff
 8001254:	000007fe 	.word	0x000007fe
 8001258:	000003f3 	.word	0x000003f3
 800125c:	fffffc0d 	.word	0xfffffc0d
 8001260:	fffff801 	.word	0xfffff801
 8001264:	4649      	mov	r1, r9
 8001266:	2301      	movs	r3, #1
 8001268:	4319      	orrs	r1, r3
 800126a:	4689      	mov	r9, r1
 800126c:	2400      	movs	r4, #0
 800126e:	2001      	movs	r0, #1
 8001270:	e66a      	b.n	8000f48 <__aeabi_ddiv+0x80>
 8001272:	2300      	movs	r3, #0
 8001274:	2480      	movs	r4, #128	; 0x80
 8001276:	469a      	mov	sl, r3
 8001278:	2500      	movs	r5, #0
 800127a:	4b8a      	ldr	r3, [pc, #552]	; (80014a4 <__aeabi_ddiv+0x5dc>)
 800127c:	0324      	lsls	r4, r4, #12
 800127e:	e67a      	b.n	8000f76 <__aeabi_ddiv+0xae>
 8001280:	2501      	movs	r5, #1
 8001282:	426d      	negs	r5, r5
 8001284:	2301      	movs	r3, #1
 8001286:	1a9b      	subs	r3, r3, r2
 8001288:	2b38      	cmp	r3, #56	; 0x38
 800128a:	dd00      	ble.n	800128e <__aeabi_ddiv+0x3c6>
 800128c:	e670      	b.n	8000f70 <__aeabi_ddiv+0xa8>
 800128e:	2b1f      	cmp	r3, #31
 8001290:	dc00      	bgt.n	8001294 <__aeabi_ddiv+0x3cc>
 8001292:	e0bf      	b.n	8001414 <__aeabi_ddiv+0x54c>
 8001294:	211f      	movs	r1, #31
 8001296:	4249      	negs	r1, r1
 8001298:	1a8a      	subs	r2, r1, r2
 800129a:	4641      	mov	r1, r8
 800129c:	40d1      	lsrs	r1, r2
 800129e:	000a      	movs	r2, r1
 80012a0:	2b20      	cmp	r3, #32
 80012a2:	d004      	beq.n	80012ae <__aeabi_ddiv+0x3e6>
 80012a4:	4641      	mov	r1, r8
 80012a6:	4b80      	ldr	r3, [pc, #512]	; (80014a8 <__aeabi_ddiv+0x5e0>)
 80012a8:	445b      	add	r3, fp
 80012aa:	4099      	lsls	r1, r3
 80012ac:	430d      	orrs	r5, r1
 80012ae:	1e6b      	subs	r3, r5, #1
 80012b0:	419d      	sbcs	r5, r3
 80012b2:	2307      	movs	r3, #7
 80012b4:	432a      	orrs	r2, r5
 80012b6:	001d      	movs	r5, r3
 80012b8:	2400      	movs	r4, #0
 80012ba:	4015      	ands	r5, r2
 80012bc:	4213      	tst	r3, r2
 80012be:	d100      	bne.n	80012c2 <__aeabi_ddiv+0x3fa>
 80012c0:	e0d4      	b.n	800146c <__aeabi_ddiv+0x5a4>
 80012c2:	210f      	movs	r1, #15
 80012c4:	2300      	movs	r3, #0
 80012c6:	4011      	ands	r1, r2
 80012c8:	2904      	cmp	r1, #4
 80012ca:	d100      	bne.n	80012ce <__aeabi_ddiv+0x406>
 80012cc:	e0cb      	b.n	8001466 <__aeabi_ddiv+0x59e>
 80012ce:	1d11      	adds	r1, r2, #4
 80012d0:	4291      	cmp	r1, r2
 80012d2:	4192      	sbcs	r2, r2
 80012d4:	4252      	negs	r2, r2
 80012d6:	189b      	adds	r3, r3, r2
 80012d8:	000a      	movs	r2, r1
 80012da:	0219      	lsls	r1, r3, #8
 80012dc:	d400      	bmi.n	80012e0 <__aeabi_ddiv+0x418>
 80012de:	e0c2      	b.n	8001466 <__aeabi_ddiv+0x59e>
 80012e0:	2301      	movs	r3, #1
 80012e2:	2400      	movs	r4, #0
 80012e4:	2500      	movs	r5, #0
 80012e6:	e646      	b.n	8000f76 <__aeabi_ddiv+0xae>
 80012e8:	2380      	movs	r3, #128	; 0x80
 80012ea:	4641      	mov	r1, r8
 80012ec:	031b      	lsls	r3, r3, #12
 80012ee:	4219      	tst	r1, r3
 80012f0:	d008      	beq.n	8001304 <__aeabi_ddiv+0x43c>
 80012f2:	421c      	tst	r4, r3
 80012f4:	d106      	bne.n	8001304 <__aeabi_ddiv+0x43c>
 80012f6:	431c      	orrs	r4, r3
 80012f8:	0324      	lsls	r4, r4, #12
 80012fa:	46ba      	mov	sl, r7
 80012fc:	0015      	movs	r5, r2
 80012fe:	4b69      	ldr	r3, [pc, #420]	; (80014a4 <__aeabi_ddiv+0x5dc>)
 8001300:	0b24      	lsrs	r4, r4, #12
 8001302:	e638      	b.n	8000f76 <__aeabi_ddiv+0xae>
 8001304:	2480      	movs	r4, #128	; 0x80
 8001306:	4643      	mov	r3, r8
 8001308:	0324      	lsls	r4, r4, #12
 800130a:	431c      	orrs	r4, r3
 800130c:	0324      	lsls	r4, r4, #12
 800130e:	46b2      	mov	sl, r6
 8001310:	4b64      	ldr	r3, [pc, #400]	; (80014a4 <__aeabi_ddiv+0x5dc>)
 8001312:	0b24      	lsrs	r4, r4, #12
 8001314:	e62f      	b.n	8000f76 <__aeabi_ddiv+0xae>
 8001316:	2b00      	cmp	r3, #0
 8001318:	d100      	bne.n	800131c <__aeabi_ddiv+0x454>
 800131a:	e703      	b.n	8001124 <__aeabi_ddiv+0x25c>
 800131c:	19a6      	adds	r6, r4, r6
 800131e:	1e68      	subs	r0, r5, #1
 8001320:	42a6      	cmp	r6, r4
 8001322:	d200      	bcs.n	8001326 <__aeabi_ddiv+0x45e>
 8001324:	e08d      	b.n	8001442 <__aeabi_ddiv+0x57a>
 8001326:	428e      	cmp	r6, r1
 8001328:	d200      	bcs.n	800132c <__aeabi_ddiv+0x464>
 800132a:	e0a3      	b.n	8001474 <__aeabi_ddiv+0x5ac>
 800132c:	d100      	bne.n	8001330 <__aeabi_ddiv+0x468>
 800132e:	e0b3      	b.n	8001498 <__aeabi_ddiv+0x5d0>
 8001330:	0005      	movs	r5, r0
 8001332:	e6f5      	b.n	8001120 <__aeabi_ddiv+0x258>
 8001334:	42aa      	cmp	r2, r5
 8001336:	d900      	bls.n	800133a <__aeabi_ddiv+0x472>
 8001338:	e639      	b.n	8000fae <__aeabi_ddiv+0xe6>
 800133a:	4643      	mov	r3, r8
 800133c:	07de      	lsls	r6, r3, #31
 800133e:	0858      	lsrs	r0, r3, #1
 8001340:	086b      	lsrs	r3, r5, #1
 8001342:	431e      	orrs	r6, r3
 8001344:	07ed      	lsls	r5, r5, #31
 8001346:	e639      	b.n	8000fbc <__aeabi_ddiv+0xf4>
 8001348:	4648      	mov	r0, r9
 800134a:	f001 f937 	bl	80025bc <__clzsi2>
 800134e:	0001      	movs	r1, r0
 8001350:	0002      	movs	r2, r0
 8001352:	3115      	adds	r1, #21
 8001354:	3220      	adds	r2, #32
 8001356:	291c      	cmp	r1, #28
 8001358:	dc00      	bgt.n	800135c <__aeabi_ddiv+0x494>
 800135a:	e72c      	b.n	80011b6 <__aeabi_ddiv+0x2ee>
 800135c:	464b      	mov	r3, r9
 800135e:	3808      	subs	r0, #8
 8001360:	4083      	lsls	r3, r0
 8001362:	2500      	movs	r5, #0
 8001364:	4698      	mov	r8, r3
 8001366:	e732      	b.n	80011ce <__aeabi_ddiv+0x306>
 8001368:	f001 f928 	bl	80025bc <__clzsi2>
 800136c:	0003      	movs	r3, r0
 800136e:	001a      	movs	r2, r3
 8001370:	3215      	adds	r2, #21
 8001372:	3020      	adds	r0, #32
 8001374:	2a1c      	cmp	r2, #28
 8001376:	dc00      	bgt.n	800137a <__aeabi_ddiv+0x4b2>
 8001378:	e700      	b.n	800117c <__aeabi_ddiv+0x2b4>
 800137a:	4654      	mov	r4, sl
 800137c:	3b08      	subs	r3, #8
 800137e:	2200      	movs	r2, #0
 8001380:	409c      	lsls	r4, r3
 8001382:	e705      	b.n	8001190 <__aeabi_ddiv+0x2c8>
 8001384:	1936      	adds	r6, r6, r4
 8001386:	3b01      	subs	r3, #1
 8001388:	42b4      	cmp	r4, r6
 800138a:	d900      	bls.n	800138e <__aeabi_ddiv+0x4c6>
 800138c:	e6a6      	b.n	80010dc <__aeabi_ddiv+0x214>
 800138e:	42b2      	cmp	r2, r6
 8001390:	d800      	bhi.n	8001394 <__aeabi_ddiv+0x4cc>
 8001392:	e6a3      	b.n	80010dc <__aeabi_ddiv+0x214>
 8001394:	1e83      	subs	r3, r0, #2
 8001396:	1936      	adds	r6, r6, r4
 8001398:	e6a0      	b.n	80010dc <__aeabi_ddiv+0x214>
 800139a:	1909      	adds	r1, r1, r4
 800139c:	3d01      	subs	r5, #1
 800139e:	428c      	cmp	r4, r1
 80013a0:	d900      	bls.n	80013a4 <__aeabi_ddiv+0x4dc>
 80013a2:	e68d      	b.n	80010c0 <__aeabi_ddiv+0x1f8>
 80013a4:	428a      	cmp	r2, r1
 80013a6:	d800      	bhi.n	80013aa <__aeabi_ddiv+0x4e2>
 80013a8:	e68a      	b.n	80010c0 <__aeabi_ddiv+0x1f8>
 80013aa:	1e85      	subs	r5, r0, #2
 80013ac:	1909      	adds	r1, r1, r4
 80013ae:	e687      	b.n	80010c0 <__aeabi_ddiv+0x1f8>
 80013b0:	230f      	movs	r3, #15
 80013b2:	402b      	ands	r3, r5
 80013b4:	2b04      	cmp	r3, #4
 80013b6:	d100      	bne.n	80013ba <__aeabi_ddiv+0x4f2>
 80013b8:	e6bc      	b.n	8001134 <__aeabi_ddiv+0x26c>
 80013ba:	2305      	movs	r3, #5
 80013bc:	425b      	negs	r3, r3
 80013be:	42ab      	cmp	r3, r5
 80013c0:	419b      	sbcs	r3, r3
 80013c2:	3504      	adds	r5, #4
 80013c4:	425b      	negs	r3, r3
 80013c6:	08ed      	lsrs	r5, r5, #3
 80013c8:	4498      	add	r8, r3
 80013ca:	e6b4      	b.n	8001136 <__aeabi_ddiv+0x26e>
 80013cc:	42af      	cmp	r7, r5
 80013ce:	d900      	bls.n	80013d2 <__aeabi_ddiv+0x50a>
 80013d0:	e660      	b.n	8001094 <__aeabi_ddiv+0x1cc>
 80013d2:	4282      	cmp	r2, r0
 80013d4:	d804      	bhi.n	80013e0 <__aeabi_ddiv+0x518>
 80013d6:	d000      	beq.n	80013da <__aeabi_ddiv+0x512>
 80013d8:	e65c      	b.n	8001094 <__aeabi_ddiv+0x1cc>
 80013da:	42ae      	cmp	r6, r5
 80013dc:	d800      	bhi.n	80013e0 <__aeabi_ddiv+0x518>
 80013de:	e659      	b.n	8001094 <__aeabi_ddiv+0x1cc>
 80013e0:	2302      	movs	r3, #2
 80013e2:	425b      	negs	r3, r3
 80013e4:	469c      	mov	ip, r3
 80013e6:	9b00      	ldr	r3, [sp, #0]
 80013e8:	44e0      	add	r8, ip
 80013ea:	469c      	mov	ip, r3
 80013ec:	4465      	add	r5, ip
 80013ee:	429d      	cmp	r5, r3
 80013f0:	419b      	sbcs	r3, r3
 80013f2:	425b      	negs	r3, r3
 80013f4:	191b      	adds	r3, r3, r4
 80013f6:	18c0      	adds	r0, r0, r3
 80013f8:	e64d      	b.n	8001096 <__aeabi_ddiv+0x1ce>
 80013fa:	428a      	cmp	r2, r1
 80013fc:	d800      	bhi.n	8001400 <__aeabi_ddiv+0x538>
 80013fe:	e60e      	b.n	800101e <__aeabi_ddiv+0x156>
 8001400:	1e83      	subs	r3, r0, #2
 8001402:	1909      	adds	r1, r1, r4
 8001404:	e60b      	b.n	800101e <__aeabi_ddiv+0x156>
 8001406:	428a      	cmp	r2, r1
 8001408:	d800      	bhi.n	800140c <__aeabi_ddiv+0x544>
 800140a:	e5f4      	b.n	8000ff6 <__aeabi_ddiv+0x12e>
 800140c:	1e83      	subs	r3, r0, #2
 800140e:	4698      	mov	r8, r3
 8001410:	1909      	adds	r1, r1, r4
 8001412:	e5f0      	b.n	8000ff6 <__aeabi_ddiv+0x12e>
 8001414:	4925      	ldr	r1, [pc, #148]	; (80014ac <__aeabi_ddiv+0x5e4>)
 8001416:	0028      	movs	r0, r5
 8001418:	4459      	add	r1, fp
 800141a:	408d      	lsls	r5, r1
 800141c:	4642      	mov	r2, r8
 800141e:	408a      	lsls	r2, r1
 8001420:	1e69      	subs	r1, r5, #1
 8001422:	418d      	sbcs	r5, r1
 8001424:	4641      	mov	r1, r8
 8001426:	40d8      	lsrs	r0, r3
 8001428:	40d9      	lsrs	r1, r3
 800142a:	4302      	orrs	r2, r0
 800142c:	432a      	orrs	r2, r5
 800142e:	000b      	movs	r3, r1
 8001430:	0751      	lsls	r1, r2, #29
 8001432:	d100      	bne.n	8001436 <__aeabi_ddiv+0x56e>
 8001434:	e751      	b.n	80012da <__aeabi_ddiv+0x412>
 8001436:	210f      	movs	r1, #15
 8001438:	4011      	ands	r1, r2
 800143a:	2904      	cmp	r1, #4
 800143c:	d000      	beq.n	8001440 <__aeabi_ddiv+0x578>
 800143e:	e746      	b.n	80012ce <__aeabi_ddiv+0x406>
 8001440:	e74b      	b.n	80012da <__aeabi_ddiv+0x412>
 8001442:	0005      	movs	r5, r0
 8001444:	428e      	cmp	r6, r1
 8001446:	d000      	beq.n	800144a <__aeabi_ddiv+0x582>
 8001448:	e66a      	b.n	8001120 <__aeabi_ddiv+0x258>
 800144a:	9a00      	ldr	r2, [sp, #0]
 800144c:	4293      	cmp	r3, r2
 800144e:	d000      	beq.n	8001452 <__aeabi_ddiv+0x58a>
 8001450:	e666      	b.n	8001120 <__aeabi_ddiv+0x258>
 8001452:	e667      	b.n	8001124 <__aeabi_ddiv+0x25c>
 8001454:	4a16      	ldr	r2, [pc, #88]	; (80014b0 <__aeabi_ddiv+0x5e8>)
 8001456:	445a      	add	r2, fp
 8001458:	2a00      	cmp	r2, #0
 800145a:	dc00      	bgt.n	800145e <__aeabi_ddiv+0x596>
 800145c:	e710      	b.n	8001280 <__aeabi_ddiv+0x3b8>
 800145e:	2301      	movs	r3, #1
 8001460:	2500      	movs	r5, #0
 8001462:	4498      	add	r8, r3
 8001464:	e667      	b.n	8001136 <__aeabi_ddiv+0x26e>
 8001466:	075d      	lsls	r5, r3, #29
 8001468:	025b      	lsls	r3, r3, #9
 800146a:	0b1c      	lsrs	r4, r3, #12
 800146c:	08d2      	lsrs	r2, r2, #3
 800146e:	2300      	movs	r3, #0
 8001470:	4315      	orrs	r5, r2
 8001472:	e580      	b.n	8000f76 <__aeabi_ddiv+0xae>
 8001474:	9800      	ldr	r0, [sp, #0]
 8001476:	3d02      	subs	r5, #2
 8001478:	0042      	lsls	r2, r0, #1
 800147a:	4282      	cmp	r2, r0
 800147c:	41bf      	sbcs	r7, r7
 800147e:	427f      	negs	r7, r7
 8001480:	193c      	adds	r4, r7, r4
 8001482:	1936      	adds	r6, r6, r4
 8001484:	9200      	str	r2, [sp, #0]
 8001486:	e7dd      	b.n	8001444 <__aeabi_ddiv+0x57c>
 8001488:	2480      	movs	r4, #128	; 0x80
 800148a:	4643      	mov	r3, r8
 800148c:	0324      	lsls	r4, r4, #12
 800148e:	431c      	orrs	r4, r3
 8001490:	0324      	lsls	r4, r4, #12
 8001492:	4b04      	ldr	r3, [pc, #16]	; (80014a4 <__aeabi_ddiv+0x5dc>)
 8001494:	0b24      	lsrs	r4, r4, #12
 8001496:	e56e      	b.n	8000f76 <__aeabi_ddiv+0xae>
 8001498:	9a00      	ldr	r2, [sp, #0]
 800149a:	429a      	cmp	r2, r3
 800149c:	d3ea      	bcc.n	8001474 <__aeabi_ddiv+0x5ac>
 800149e:	0005      	movs	r5, r0
 80014a0:	e7d3      	b.n	800144a <__aeabi_ddiv+0x582>
 80014a2:	46c0      	nop			; (mov r8, r8)
 80014a4:	000007ff 	.word	0x000007ff
 80014a8:	0000043e 	.word	0x0000043e
 80014ac:	0000041e 	.word	0x0000041e
 80014b0:	000003ff 	.word	0x000003ff

080014b4 <__eqdf2>:
 80014b4:	b5f0      	push	{r4, r5, r6, r7, lr}
 80014b6:	464e      	mov	r6, r9
 80014b8:	4645      	mov	r5, r8
 80014ba:	46de      	mov	lr, fp
 80014bc:	4657      	mov	r7, sl
 80014be:	4690      	mov	r8, r2
 80014c0:	b5e0      	push	{r5, r6, r7, lr}
 80014c2:	0017      	movs	r7, r2
 80014c4:	031a      	lsls	r2, r3, #12
 80014c6:	0b12      	lsrs	r2, r2, #12
 80014c8:	0005      	movs	r5, r0
 80014ca:	4684      	mov	ip, r0
 80014cc:	4819      	ldr	r0, [pc, #100]	; (8001534 <__eqdf2+0x80>)
 80014ce:	030e      	lsls	r6, r1, #12
 80014d0:	004c      	lsls	r4, r1, #1
 80014d2:	4691      	mov	r9, r2
 80014d4:	005a      	lsls	r2, r3, #1
 80014d6:	0fdb      	lsrs	r3, r3, #31
 80014d8:	469b      	mov	fp, r3
 80014da:	0b36      	lsrs	r6, r6, #12
 80014dc:	0d64      	lsrs	r4, r4, #21
 80014de:	0fc9      	lsrs	r1, r1, #31
 80014e0:	0d52      	lsrs	r2, r2, #21
 80014e2:	4284      	cmp	r4, r0
 80014e4:	d019      	beq.n	800151a <__eqdf2+0x66>
 80014e6:	4282      	cmp	r2, r0
 80014e8:	d010      	beq.n	800150c <__eqdf2+0x58>
 80014ea:	2001      	movs	r0, #1
 80014ec:	4294      	cmp	r4, r2
 80014ee:	d10e      	bne.n	800150e <__eqdf2+0x5a>
 80014f0:	454e      	cmp	r6, r9
 80014f2:	d10c      	bne.n	800150e <__eqdf2+0x5a>
 80014f4:	2001      	movs	r0, #1
 80014f6:	45c4      	cmp	ip, r8
 80014f8:	d109      	bne.n	800150e <__eqdf2+0x5a>
 80014fa:	4559      	cmp	r1, fp
 80014fc:	d017      	beq.n	800152e <__eqdf2+0x7a>
 80014fe:	2c00      	cmp	r4, #0
 8001500:	d105      	bne.n	800150e <__eqdf2+0x5a>
 8001502:	0030      	movs	r0, r6
 8001504:	4328      	orrs	r0, r5
 8001506:	1e43      	subs	r3, r0, #1
 8001508:	4198      	sbcs	r0, r3
 800150a:	e000      	b.n	800150e <__eqdf2+0x5a>
 800150c:	2001      	movs	r0, #1
 800150e:	bcf0      	pop	{r4, r5, r6, r7}
 8001510:	46bb      	mov	fp, r7
 8001512:	46b2      	mov	sl, r6
 8001514:	46a9      	mov	r9, r5
 8001516:	46a0      	mov	r8, r4
 8001518:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800151a:	0033      	movs	r3, r6
 800151c:	2001      	movs	r0, #1
 800151e:	432b      	orrs	r3, r5
 8001520:	d1f5      	bne.n	800150e <__eqdf2+0x5a>
 8001522:	42a2      	cmp	r2, r4
 8001524:	d1f3      	bne.n	800150e <__eqdf2+0x5a>
 8001526:	464b      	mov	r3, r9
 8001528:	433b      	orrs	r3, r7
 800152a:	d1f0      	bne.n	800150e <__eqdf2+0x5a>
 800152c:	e7e2      	b.n	80014f4 <__eqdf2+0x40>
 800152e:	2000      	movs	r0, #0
 8001530:	e7ed      	b.n	800150e <__eqdf2+0x5a>
 8001532:	46c0      	nop			; (mov r8, r8)
 8001534:	000007ff 	.word	0x000007ff

08001538 <__gedf2>:
 8001538:	b5f0      	push	{r4, r5, r6, r7, lr}
 800153a:	4647      	mov	r7, r8
 800153c:	46ce      	mov	lr, r9
 800153e:	0004      	movs	r4, r0
 8001540:	0018      	movs	r0, r3
 8001542:	0016      	movs	r6, r2
 8001544:	031b      	lsls	r3, r3, #12
 8001546:	0b1b      	lsrs	r3, r3, #12
 8001548:	4d2d      	ldr	r5, [pc, #180]	; (8001600 <__gedf2+0xc8>)
 800154a:	004a      	lsls	r2, r1, #1
 800154c:	4699      	mov	r9, r3
 800154e:	b580      	push	{r7, lr}
 8001550:	0043      	lsls	r3, r0, #1
 8001552:	030f      	lsls	r7, r1, #12
 8001554:	46a4      	mov	ip, r4
 8001556:	46b0      	mov	r8, r6
 8001558:	0b3f      	lsrs	r7, r7, #12
 800155a:	0d52      	lsrs	r2, r2, #21
 800155c:	0fc9      	lsrs	r1, r1, #31
 800155e:	0d5b      	lsrs	r3, r3, #21
 8001560:	0fc0      	lsrs	r0, r0, #31
 8001562:	42aa      	cmp	r2, r5
 8001564:	d021      	beq.n	80015aa <__gedf2+0x72>
 8001566:	42ab      	cmp	r3, r5
 8001568:	d013      	beq.n	8001592 <__gedf2+0x5a>
 800156a:	2a00      	cmp	r2, #0
 800156c:	d122      	bne.n	80015b4 <__gedf2+0x7c>
 800156e:	433c      	orrs	r4, r7
 8001570:	2b00      	cmp	r3, #0
 8001572:	d102      	bne.n	800157a <__gedf2+0x42>
 8001574:	464d      	mov	r5, r9
 8001576:	432e      	orrs	r6, r5
 8001578:	d022      	beq.n	80015c0 <__gedf2+0x88>
 800157a:	2c00      	cmp	r4, #0
 800157c:	d010      	beq.n	80015a0 <__gedf2+0x68>
 800157e:	4281      	cmp	r1, r0
 8001580:	d022      	beq.n	80015c8 <__gedf2+0x90>
 8001582:	2002      	movs	r0, #2
 8001584:	3901      	subs	r1, #1
 8001586:	4008      	ands	r0, r1
 8001588:	3801      	subs	r0, #1
 800158a:	bcc0      	pop	{r6, r7}
 800158c:	46b9      	mov	r9, r7
 800158e:	46b0      	mov	r8, r6
 8001590:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8001592:	464d      	mov	r5, r9
 8001594:	432e      	orrs	r6, r5
 8001596:	d129      	bne.n	80015ec <__gedf2+0xb4>
 8001598:	2a00      	cmp	r2, #0
 800159a:	d1f0      	bne.n	800157e <__gedf2+0x46>
 800159c:	433c      	orrs	r4, r7
 800159e:	d1ee      	bne.n	800157e <__gedf2+0x46>
 80015a0:	2800      	cmp	r0, #0
 80015a2:	d1f2      	bne.n	800158a <__gedf2+0x52>
 80015a4:	2001      	movs	r0, #1
 80015a6:	4240      	negs	r0, r0
 80015a8:	e7ef      	b.n	800158a <__gedf2+0x52>
 80015aa:	003d      	movs	r5, r7
 80015ac:	4325      	orrs	r5, r4
 80015ae:	d11d      	bne.n	80015ec <__gedf2+0xb4>
 80015b0:	4293      	cmp	r3, r2
 80015b2:	d0ee      	beq.n	8001592 <__gedf2+0x5a>
 80015b4:	2b00      	cmp	r3, #0
 80015b6:	d1e2      	bne.n	800157e <__gedf2+0x46>
 80015b8:	464c      	mov	r4, r9
 80015ba:	4326      	orrs	r6, r4
 80015bc:	d1df      	bne.n	800157e <__gedf2+0x46>
 80015be:	e7e0      	b.n	8001582 <__gedf2+0x4a>
 80015c0:	2000      	movs	r0, #0
 80015c2:	2c00      	cmp	r4, #0
 80015c4:	d0e1      	beq.n	800158a <__gedf2+0x52>
 80015c6:	e7dc      	b.n	8001582 <__gedf2+0x4a>
 80015c8:	429a      	cmp	r2, r3
 80015ca:	dc0a      	bgt.n	80015e2 <__gedf2+0xaa>
 80015cc:	dbe8      	blt.n	80015a0 <__gedf2+0x68>
 80015ce:	454f      	cmp	r7, r9
 80015d0:	d8d7      	bhi.n	8001582 <__gedf2+0x4a>
 80015d2:	d00e      	beq.n	80015f2 <__gedf2+0xba>
 80015d4:	2000      	movs	r0, #0
 80015d6:	454f      	cmp	r7, r9
 80015d8:	d2d7      	bcs.n	800158a <__gedf2+0x52>
 80015da:	2900      	cmp	r1, #0
 80015dc:	d0e2      	beq.n	80015a4 <__gedf2+0x6c>
 80015de:	0008      	movs	r0, r1
 80015e0:	e7d3      	b.n	800158a <__gedf2+0x52>
 80015e2:	4243      	negs	r3, r0
 80015e4:	4158      	adcs	r0, r3
 80015e6:	0040      	lsls	r0, r0, #1
 80015e8:	3801      	subs	r0, #1
 80015ea:	e7ce      	b.n	800158a <__gedf2+0x52>
 80015ec:	2002      	movs	r0, #2
 80015ee:	4240      	negs	r0, r0
 80015f0:	e7cb      	b.n	800158a <__gedf2+0x52>
 80015f2:	45c4      	cmp	ip, r8
 80015f4:	d8c5      	bhi.n	8001582 <__gedf2+0x4a>
 80015f6:	2000      	movs	r0, #0
 80015f8:	45c4      	cmp	ip, r8
 80015fa:	d2c6      	bcs.n	800158a <__gedf2+0x52>
 80015fc:	e7ed      	b.n	80015da <__gedf2+0xa2>
 80015fe:	46c0      	nop			; (mov r8, r8)
 8001600:	000007ff 	.word	0x000007ff

08001604 <__ledf2>:
 8001604:	b5f0      	push	{r4, r5, r6, r7, lr}
 8001606:	4647      	mov	r7, r8
 8001608:	46ce      	mov	lr, r9
 800160a:	0004      	movs	r4, r0
 800160c:	0018      	movs	r0, r3
 800160e:	0016      	movs	r6, r2
 8001610:	031b      	lsls	r3, r3, #12
 8001612:	0b1b      	lsrs	r3, r3, #12
 8001614:	4d2c      	ldr	r5, [pc, #176]	; (80016c8 <__ledf2+0xc4>)
 8001616:	004a      	lsls	r2, r1, #1
 8001618:	4699      	mov	r9, r3
 800161a:	b580      	push	{r7, lr}
 800161c:	0043      	lsls	r3, r0, #1
 800161e:	030f      	lsls	r7, r1, #12
 8001620:	46a4      	mov	ip, r4
 8001622:	46b0      	mov	r8, r6
 8001624:	0b3f      	lsrs	r7, r7, #12
 8001626:	0d52      	lsrs	r2, r2, #21
 8001628:	0fc9      	lsrs	r1, r1, #31
 800162a:	0d5b      	lsrs	r3, r3, #21
 800162c:	0fc0      	lsrs	r0, r0, #31
 800162e:	42aa      	cmp	r2, r5
 8001630:	d00d      	beq.n	800164e <__ledf2+0x4a>
 8001632:	42ab      	cmp	r3, r5
 8001634:	d010      	beq.n	8001658 <__ledf2+0x54>
 8001636:	2a00      	cmp	r2, #0
 8001638:	d127      	bne.n	800168a <__ledf2+0x86>
 800163a:	433c      	orrs	r4, r7
 800163c:	2b00      	cmp	r3, #0
 800163e:	d111      	bne.n	8001664 <__ledf2+0x60>
 8001640:	464d      	mov	r5, r9
 8001642:	432e      	orrs	r6, r5
 8001644:	d10e      	bne.n	8001664 <__ledf2+0x60>
 8001646:	2000      	movs	r0, #0
 8001648:	2c00      	cmp	r4, #0
 800164a:	d015      	beq.n	8001678 <__ledf2+0x74>
 800164c:	e00e      	b.n	800166c <__ledf2+0x68>
 800164e:	003d      	movs	r5, r7
 8001650:	4325      	orrs	r5, r4
 8001652:	d110      	bne.n	8001676 <__ledf2+0x72>
 8001654:	4293      	cmp	r3, r2
 8001656:	d118      	bne.n	800168a <__ledf2+0x86>
 8001658:	464d      	mov	r5, r9
 800165a:	432e      	orrs	r6, r5
 800165c:	d10b      	bne.n	8001676 <__ledf2+0x72>
 800165e:	2a00      	cmp	r2, #0
 8001660:	d102      	bne.n	8001668 <__ledf2+0x64>
 8001662:	433c      	orrs	r4, r7
 8001664:	2c00      	cmp	r4, #0
 8001666:	d00b      	beq.n	8001680 <__ledf2+0x7c>
 8001668:	4281      	cmp	r1, r0
 800166a:	d014      	beq.n	8001696 <__ledf2+0x92>
 800166c:	2002      	movs	r0, #2
 800166e:	3901      	subs	r1, #1
 8001670:	4008      	ands	r0, r1
 8001672:	3801      	subs	r0, #1
 8001674:	e000      	b.n	8001678 <__ledf2+0x74>
 8001676:	2002      	movs	r0, #2
 8001678:	bcc0      	pop	{r6, r7}
 800167a:	46b9      	mov	r9, r7
 800167c:	46b0      	mov	r8, r6
 800167e:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8001680:	2800      	cmp	r0, #0
 8001682:	d1f9      	bne.n	8001678 <__ledf2+0x74>
 8001684:	2001      	movs	r0, #1
 8001686:	4240      	negs	r0, r0
 8001688:	e7f6      	b.n	8001678 <__ledf2+0x74>
 800168a:	2b00      	cmp	r3, #0
 800168c:	d1ec      	bne.n	8001668 <__ledf2+0x64>
 800168e:	464c      	mov	r4, r9
 8001690:	4326      	orrs	r6, r4
 8001692:	d1e9      	bne.n	8001668 <__ledf2+0x64>
 8001694:	e7ea      	b.n	800166c <__ledf2+0x68>
 8001696:	429a      	cmp	r2, r3
 8001698:	dd04      	ble.n	80016a4 <__ledf2+0xa0>
 800169a:	4243      	negs	r3, r0
 800169c:	4158      	adcs	r0, r3
 800169e:	0040      	lsls	r0, r0, #1
 80016a0:	3801      	subs	r0, #1
 80016a2:	e7e9      	b.n	8001678 <__ledf2+0x74>
 80016a4:	429a      	cmp	r2, r3
 80016a6:	dbeb      	blt.n	8001680 <__ledf2+0x7c>
 80016a8:	454f      	cmp	r7, r9
 80016aa:	d8df      	bhi.n	800166c <__ledf2+0x68>
 80016ac:	d006      	beq.n	80016bc <__ledf2+0xb8>
 80016ae:	2000      	movs	r0, #0
 80016b0:	454f      	cmp	r7, r9
 80016b2:	d2e1      	bcs.n	8001678 <__ledf2+0x74>
 80016b4:	2900      	cmp	r1, #0
 80016b6:	d0e5      	beq.n	8001684 <__ledf2+0x80>
 80016b8:	0008      	movs	r0, r1
 80016ba:	e7dd      	b.n	8001678 <__ledf2+0x74>
 80016bc:	45c4      	cmp	ip, r8
 80016be:	d8d5      	bhi.n	800166c <__ledf2+0x68>
 80016c0:	2000      	movs	r0, #0
 80016c2:	45c4      	cmp	ip, r8
 80016c4:	d2d8      	bcs.n	8001678 <__ledf2+0x74>
 80016c6:	e7f5      	b.n	80016b4 <__ledf2+0xb0>
 80016c8:	000007ff 	.word	0x000007ff

080016cc <__aeabi_dmul>:
 80016cc:	b5f0      	push	{r4, r5, r6, r7, lr}
 80016ce:	4657      	mov	r7, sl
 80016d0:	464e      	mov	r6, r9
 80016d2:	4645      	mov	r5, r8
 80016d4:	46de      	mov	lr, fp
 80016d6:	b5e0      	push	{r5, r6, r7, lr}
 80016d8:	4698      	mov	r8, r3
 80016da:	030c      	lsls	r4, r1, #12
 80016dc:	004b      	lsls	r3, r1, #1
 80016de:	0006      	movs	r6, r0
 80016e0:	4692      	mov	sl, r2
 80016e2:	b087      	sub	sp, #28
 80016e4:	0b24      	lsrs	r4, r4, #12
 80016e6:	0d5b      	lsrs	r3, r3, #21
 80016e8:	0fcf      	lsrs	r7, r1, #31
 80016ea:	2b00      	cmp	r3, #0
 80016ec:	d100      	bne.n	80016f0 <__aeabi_dmul+0x24>
 80016ee:	e15c      	b.n	80019aa <__aeabi_dmul+0x2de>
 80016f0:	4ad9      	ldr	r2, [pc, #868]	; (8001a58 <__aeabi_dmul+0x38c>)
 80016f2:	4293      	cmp	r3, r2
 80016f4:	d100      	bne.n	80016f8 <__aeabi_dmul+0x2c>
 80016f6:	e175      	b.n	80019e4 <__aeabi_dmul+0x318>
 80016f8:	0f42      	lsrs	r2, r0, #29
 80016fa:	00e4      	lsls	r4, r4, #3
 80016fc:	4314      	orrs	r4, r2
 80016fe:	2280      	movs	r2, #128	; 0x80
 8001700:	0412      	lsls	r2, r2, #16
 8001702:	4314      	orrs	r4, r2
 8001704:	4ad5      	ldr	r2, [pc, #852]	; (8001a5c <__aeabi_dmul+0x390>)
 8001706:	00c5      	lsls	r5, r0, #3
 8001708:	4694      	mov	ip, r2
 800170a:	4463      	add	r3, ip
 800170c:	9300      	str	r3, [sp, #0]
 800170e:	2300      	movs	r3, #0
 8001710:	4699      	mov	r9, r3
 8001712:	469b      	mov	fp, r3
 8001714:	4643      	mov	r3, r8
 8001716:	4642      	mov	r2, r8
 8001718:	031e      	lsls	r6, r3, #12
 800171a:	0fd2      	lsrs	r2, r2, #31
 800171c:	005b      	lsls	r3, r3, #1
 800171e:	4650      	mov	r0, sl
 8001720:	4690      	mov	r8, r2
 8001722:	0b36      	lsrs	r6, r6, #12
 8001724:	0d5b      	lsrs	r3, r3, #21
 8001726:	d100      	bne.n	800172a <__aeabi_dmul+0x5e>
 8001728:	e120      	b.n	800196c <__aeabi_dmul+0x2a0>
 800172a:	4acb      	ldr	r2, [pc, #812]	; (8001a58 <__aeabi_dmul+0x38c>)
 800172c:	4293      	cmp	r3, r2
 800172e:	d100      	bne.n	8001732 <__aeabi_dmul+0x66>
 8001730:	e162      	b.n	80019f8 <__aeabi_dmul+0x32c>
 8001732:	49ca      	ldr	r1, [pc, #808]	; (8001a5c <__aeabi_dmul+0x390>)
 8001734:	0f42      	lsrs	r2, r0, #29
 8001736:	468c      	mov	ip, r1
 8001738:	9900      	ldr	r1, [sp, #0]
 800173a:	4463      	add	r3, ip
 800173c:	00f6      	lsls	r6, r6, #3
 800173e:	468c      	mov	ip, r1
 8001740:	4316      	orrs	r6, r2
 8001742:	2280      	movs	r2, #128	; 0x80
 8001744:	449c      	add	ip, r3
 8001746:	0412      	lsls	r2, r2, #16
 8001748:	4663      	mov	r3, ip
 800174a:	4316      	orrs	r6, r2
 800174c:	00c2      	lsls	r2, r0, #3
 800174e:	2000      	movs	r0, #0
 8001750:	9300      	str	r3, [sp, #0]
 8001752:	9900      	ldr	r1, [sp, #0]
 8001754:	4643      	mov	r3, r8
 8001756:	3101      	adds	r1, #1
 8001758:	468c      	mov	ip, r1
 800175a:	4649      	mov	r1, r9
 800175c:	407b      	eors	r3, r7
 800175e:	9301      	str	r3, [sp, #4]
 8001760:	290f      	cmp	r1, #15
 8001762:	d826      	bhi.n	80017b2 <__aeabi_dmul+0xe6>
 8001764:	4bbe      	ldr	r3, [pc, #760]	; (8001a60 <__aeabi_dmul+0x394>)
 8001766:	0089      	lsls	r1, r1, #2
 8001768:	5859      	ldr	r1, [r3, r1]
 800176a:	468f      	mov	pc, r1
 800176c:	4643      	mov	r3, r8
 800176e:	9301      	str	r3, [sp, #4]
 8001770:	0034      	movs	r4, r6
 8001772:	0015      	movs	r5, r2
 8001774:	4683      	mov	fp, r0
 8001776:	465b      	mov	r3, fp
 8001778:	2b02      	cmp	r3, #2
 800177a:	d016      	beq.n	80017aa <__aeabi_dmul+0xde>
 800177c:	2b03      	cmp	r3, #3
 800177e:	d100      	bne.n	8001782 <__aeabi_dmul+0xb6>
 8001780:	e203      	b.n	8001b8a <__aeabi_dmul+0x4be>
 8001782:	2b01      	cmp	r3, #1
 8001784:	d000      	beq.n	8001788 <__aeabi_dmul+0xbc>
 8001786:	e0cd      	b.n	8001924 <__aeabi_dmul+0x258>
 8001788:	2200      	movs	r2, #0
 800178a:	2400      	movs	r4, #0
 800178c:	2500      	movs	r5, #0
 800178e:	9b01      	ldr	r3, [sp, #4]
 8001790:	0512      	lsls	r2, r2, #20
 8001792:	4322      	orrs	r2, r4
 8001794:	07db      	lsls	r3, r3, #31
 8001796:	431a      	orrs	r2, r3
 8001798:	0028      	movs	r0, r5
 800179a:	0011      	movs	r1, r2
 800179c:	b007      	add	sp, #28
 800179e:	bcf0      	pop	{r4, r5, r6, r7}
 80017a0:	46bb      	mov	fp, r7
 80017a2:	46b2      	mov	sl, r6
 80017a4:	46a9      	mov	r9, r5
 80017a6:	46a0      	mov	r8, r4
 80017a8:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80017aa:	2400      	movs	r4, #0
 80017ac:	2500      	movs	r5, #0
 80017ae:	4aaa      	ldr	r2, [pc, #680]	; (8001a58 <__aeabi_dmul+0x38c>)
 80017b0:	e7ed      	b.n	800178e <__aeabi_dmul+0xc2>
 80017b2:	0c28      	lsrs	r0, r5, #16
 80017b4:	042d      	lsls	r5, r5, #16
 80017b6:	0c2d      	lsrs	r5, r5, #16
 80017b8:	002b      	movs	r3, r5
 80017ba:	0c11      	lsrs	r1, r2, #16
 80017bc:	0412      	lsls	r2, r2, #16
 80017be:	0c12      	lsrs	r2, r2, #16
 80017c0:	4353      	muls	r3, r2
 80017c2:	4698      	mov	r8, r3
 80017c4:	0013      	movs	r3, r2
 80017c6:	002f      	movs	r7, r5
 80017c8:	4343      	muls	r3, r0
 80017ca:	4699      	mov	r9, r3
 80017cc:	434f      	muls	r7, r1
 80017ce:	444f      	add	r7, r9
 80017d0:	46bb      	mov	fp, r7
 80017d2:	4647      	mov	r7, r8
 80017d4:	000b      	movs	r3, r1
 80017d6:	0c3f      	lsrs	r7, r7, #16
 80017d8:	46ba      	mov	sl, r7
 80017da:	4343      	muls	r3, r0
 80017dc:	44da      	add	sl, fp
 80017de:	9302      	str	r3, [sp, #8]
 80017e0:	45d1      	cmp	r9, sl
 80017e2:	d904      	bls.n	80017ee <__aeabi_dmul+0x122>
 80017e4:	2780      	movs	r7, #128	; 0x80
 80017e6:	027f      	lsls	r7, r7, #9
 80017e8:	46b9      	mov	r9, r7
 80017ea:	444b      	add	r3, r9
 80017ec:	9302      	str	r3, [sp, #8]
 80017ee:	4653      	mov	r3, sl
 80017f0:	0c1b      	lsrs	r3, r3, #16
 80017f2:	469b      	mov	fp, r3
 80017f4:	4653      	mov	r3, sl
 80017f6:	041f      	lsls	r7, r3, #16
 80017f8:	4643      	mov	r3, r8
 80017fa:	041b      	lsls	r3, r3, #16
 80017fc:	0c1b      	lsrs	r3, r3, #16
 80017fe:	4698      	mov	r8, r3
 8001800:	003b      	movs	r3, r7
 8001802:	4443      	add	r3, r8
 8001804:	9304      	str	r3, [sp, #16]
 8001806:	0c33      	lsrs	r3, r6, #16
 8001808:	0436      	lsls	r6, r6, #16
 800180a:	0c36      	lsrs	r6, r6, #16
 800180c:	4698      	mov	r8, r3
 800180e:	0033      	movs	r3, r6
 8001810:	4343      	muls	r3, r0
 8001812:	4699      	mov	r9, r3
 8001814:	4643      	mov	r3, r8
 8001816:	4343      	muls	r3, r0
 8001818:	002f      	movs	r7, r5
 800181a:	469a      	mov	sl, r3
 800181c:	4643      	mov	r3, r8
 800181e:	4377      	muls	r7, r6
 8001820:	435d      	muls	r5, r3
 8001822:	0c38      	lsrs	r0, r7, #16
 8001824:	444d      	add	r5, r9
 8001826:	1945      	adds	r5, r0, r5
 8001828:	45a9      	cmp	r9, r5
 800182a:	d903      	bls.n	8001834 <__aeabi_dmul+0x168>
 800182c:	2380      	movs	r3, #128	; 0x80
 800182e:	025b      	lsls	r3, r3, #9
 8001830:	4699      	mov	r9, r3
 8001832:	44ca      	add	sl, r9
 8001834:	043f      	lsls	r7, r7, #16
 8001836:	0c28      	lsrs	r0, r5, #16
 8001838:	0c3f      	lsrs	r7, r7, #16
 800183a:	042d      	lsls	r5, r5, #16
 800183c:	19ed      	adds	r5, r5, r7
 800183e:	0c27      	lsrs	r7, r4, #16
 8001840:	0424      	lsls	r4, r4, #16
 8001842:	0c24      	lsrs	r4, r4, #16
 8001844:	0003      	movs	r3, r0
 8001846:	0020      	movs	r0, r4
 8001848:	4350      	muls	r0, r2
 800184a:	437a      	muls	r2, r7
 800184c:	4691      	mov	r9, r2
 800184e:	003a      	movs	r2, r7
 8001850:	4453      	add	r3, sl
 8001852:	9305      	str	r3, [sp, #20]
 8001854:	0c03      	lsrs	r3, r0, #16
 8001856:	469a      	mov	sl, r3
 8001858:	434a      	muls	r2, r1
 800185a:	4361      	muls	r1, r4
 800185c:	4449      	add	r1, r9
 800185e:	4451      	add	r1, sl
 8001860:	44ab      	add	fp, r5
 8001862:	4589      	cmp	r9, r1
 8001864:	d903      	bls.n	800186e <__aeabi_dmul+0x1a2>
 8001866:	2380      	movs	r3, #128	; 0x80
 8001868:	025b      	lsls	r3, r3, #9
 800186a:	4699      	mov	r9, r3
 800186c:	444a      	add	r2, r9
 800186e:	0400      	lsls	r0, r0, #16
 8001870:	0c0b      	lsrs	r3, r1, #16
 8001872:	0c00      	lsrs	r0, r0, #16
 8001874:	0409      	lsls	r1, r1, #16
 8001876:	1809      	adds	r1, r1, r0
 8001878:	0020      	movs	r0, r4
 800187a:	4699      	mov	r9, r3
 800187c:	4643      	mov	r3, r8
 800187e:	4370      	muls	r0, r6
 8001880:	435c      	muls	r4, r3
 8001882:	437e      	muls	r6, r7
 8001884:	435f      	muls	r7, r3
 8001886:	0c03      	lsrs	r3, r0, #16
 8001888:	4698      	mov	r8, r3
 800188a:	19a4      	adds	r4, r4, r6
 800188c:	4444      	add	r4, r8
 800188e:	444a      	add	r2, r9
 8001890:	9703      	str	r7, [sp, #12]
 8001892:	42a6      	cmp	r6, r4
 8001894:	d904      	bls.n	80018a0 <__aeabi_dmul+0x1d4>
 8001896:	2380      	movs	r3, #128	; 0x80
 8001898:	025b      	lsls	r3, r3, #9
 800189a:	4698      	mov	r8, r3
 800189c:	4447      	add	r7, r8
 800189e:	9703      	str	r7, [sp, #12]
 80018a0:	0423      	lsls	r3, r4, #16
 80018a2:	9e02      	ldr	r6, [sp, #8]
 80018a4:	469a      	mov	sl, r3
 80018a6:	9b05      	ldr	r3, [sp, #20]
 80018a8:	445e      	add	r6, fp
 80018aa:	4698      	mov	r8, r3
 80018ac:	42ae      	cmp	r6, r5
 80018ae:	41ad      	sbcs	r5, r5
 80018b0:	1876      	adds	r6, r6, r1
 80018b2:	428e      	cmp	r6, r1
 80018b4:	4189      	sbcs	r1, r1
 80018b6:	0400      	lsls	r0, r0, #16
 80018b8:	0c00      	lsrs	r0, r0, #16
 80018ba:	4450      	add	r0, sl
 80018bc:	4440      	add	r0, r8
 80018be:	426d      	negs	r5, r5
 80018c0:	1947      	adds	r7, r0, r5
 80018c2:	46b8      	mov	r8, r7
 80018c4:	4693      	mov	fp, r2
 80018c6:	4249      	negs	r1, r1
 80018c8:	4689      	mov	r9, r1
 80018ca:	44c3      	add	fp, r8
 80018cc:	44d9      	add	r9, fp
 80018ce:	4298      	cmp	r0, r3
 80018d0:	4180      	sbcs	r0, r0
 80018d2:	45a8      	cmp	r8, r5
 80018d4:	41ad      	sbcs	r5, r5
 80018d6:	4593      	cmp	fp, r2
 80018d8:	4192      	sbcs	r2, r2
 80018da:	4589      	cmp	r9, r1
 80018dc:	4189      	sbcs	r1, r1
 80018de:	426d      	negs	r5, r5
 80018e0:	4240      	negs	r0, r0
 80018e2:	4328      	orrs	r0, r5
 80018e4:	0c24      	lsrs	r4, r4, #16
 80018e6:	4252      	negs	r2, r2
 80018e8:	4249      	negs	r1, r1
 80018ea:	430a      	orrs	r2, r1
 80018ec:	9b03      	ldr	r3, [sp, #12]
 80018ee:	1900      	adds	r0, r0, r4
 80018f0:	1880      	adds	r0, r0, r2
 80018f2:	18c7      	adds	r7, r0, r3
 80018f4:	464b      	mov	r3, r9
 80018f6:	0ddc      	lsrs	r4, r3, #23
 80018f8:	9b04      	ldr	r3, [sp, #16]
 80018fa:	0275      	lsls	r5, r6, #9
 80018fc:	431d      	orrs	r5, r3
 80018fe:	1e6a      	subs	r2, r5, #1
 8001900:	4195      	sbcs	r5, r2
 8001902:	464b      	mov	r3, r9
 8001904:	0df6      	lsrs	r6, r6, #23
 8001906:	027f      	lsls	r7, r7, #9
 8001908:	4335      	orrs	r5, r6
 800190a:	025a      	lsls	r2, r3, #9
 800190c:	433c      	orrs	r4, r7
 800190e:	4315      	orrs	r5, r2
 8001910:	01fb      	lsls	r3, r7, #7
 8001912:	d400      	bmi.n	8001916 <__aeabi_dmul+0x24a>
 8001914:	e11c      	b.n	8001b50 <__aeabi_dmul+0x484>
 8001916:	2101      	movs	r1, #1
 8001918:	086a      	lsrs	r2, r5, #1
 800191a:	400d      	ands	r5, r1
 800191c:	4315      	orrs	r5, r2
 800191e:	07e2      	lsls	r2, r4, #31
 8001920:	4315      	orrs	r5, r2
 8001922:	0864      	lsrs	r4, r4, #1
 8001924:	494f      	ldr	r1, [pc, #316]	; (8001a64 <__aeabi_dmul+0x398>)
 8001926:	4461      	add	r1, ip
 8001928:	2900      	cmp	r1, #0
 800192a:	dc00      	bgt.n	800192e <__aeabi_dmul+0x262>
 800192c:	e0b0      	b.n	8001a90 <__aeabi_dmul+0x3c4>
 800192e:	076b      	lsls	r3, r5, #29
 8001930:	d009      	beq.n	8001946 <__aeabi_dmul+0x27a>
 8001932:	220f      	movs	r2, #15
 8001934:	402a      	ands	r2, r5
 8001936:	2a04      	cmp	r2, #4
 8001938:	d005      	beq.n	8001946 <__aeabi_dmul+0x27a>
 800193a:	1d2a      	adds	r2, r5, #4
 800193c:	42aa      	cmp	r2, r5
 800193e:	41ad      	sbcs	r5, r5
 8001940:	426d      	negs	r5, r5
 8001942:	1964      	adds	r4, r4, r5
 8001944:	0015      	movs	r5, r2
 8001946:	01e3      	lsls	r3, r4, #7
 8001948:	d504      	bpl.n	8001954 <__aeabi_dmul+0x288>
 800194a:	2180      	movs	r1, #128	; 0x80
 800194c:	4a46      	ldr	r2, [pc, #280]	; (8001a68 <__aeabi_dmul+0x39c>)
 800194e:	00c9      	lsls	r1, r1, #3
 8001950:	4014      	ands	r4, r2
 8001952:	4461      	add	r1, ip
 8001954:	4a45      	ldr	r2, [pc, #276]	; (8001a6c <__aeabi_dmul+0x3a0>)
 8001956:	4291      	cmp	r1, r2
 8001958:	dd00      	ble.n	800195c <__aeabi_dmul+0x290>
 800195a:	e726      	b.n	80017aa <__aeabi_dmul+0xde>
 800195c:	0762      	lsls	r2, r4, #29
 800195e:	08ed      	lsrs	r5, r5, #3
 8001960:	0264      	lsls	r4, r4, #9
 8001962:	0549      	lsls	r1, r1, #21
 8001964:	4315      	orrs	r5, r2
 8001966:	0b24      	lsrs	r4, r4, #12
 8001968:	0d4a      	lsrs	r2, r1, #21
 800196a:	e710      	b.n	800178e <__aeabi_dmul+0xc2>
 800196c:	4652      	mov	r2, sl
 800196e:	4332      	orrs	r2, r6
 8001970:	d100      	bne.n	8001974 <__aeabi_dmul+0x2a8>
 8001972:	e07f      	b.n	8001a74 <__aeabi_dmul+0x3a8>
 8001974:	2e00      	cmp	r6, #0
 8001976:	d100      	bne.n	800197a <__aeabi_dmul+0x2ae>
 8001978:	e0dc      	b.n	8001b34 <__aeabi_dmul+0x468>
 800197a:	0030      	movs	r0, r6
 800197c:	f000 fe1e 	bl	80025bc <__clzsi2>
 8001980:	0002      	movs	r2, r0
 8001982:	3a0b      	subs	r2, #11
 8001984:	231d      	movs	r3, #29
 8001986:	0001      	movs	r1, r0
 8001988:	1a9b      	subs	r3, r3, r2
 800198a:	4652      	mov	r2, sl
 800198c:	3908      	subs	r1, #8
 800198e:	40da      	lsrs	r2, r3
 8001990:	408e      	lsls	r6, r1
 8001992:	4316      	orrs	r6, r2
 8001994:	4652      	mov	r2, sl
 8001996:	408a      	lsls	r2, r1
 8001998:	9b00      	ldr	r3, [sp, #0]
 800199a:	4935      	ldr	r1, [pc, #212]	; (8001a70 <__aeabi_dmul+0x3a4>)
 800199c:	1a18      	subs	r0, r3, r0
 800199e:	0003      	movs	r3, r0
 80019a0:	468c      	mov	ip, r1
 80019a2:	4463      	add	r3, ip
 80019a4:	2000      	movs	r0, #0
 80019a6:	9300      	str	r3, [sp, #0]
 80019a8:	e6d3      	b.n	8001752 <__aeabi_dmul+0x86>
 80019aa:	0025      	movs	r5, r4
 80019ac:	4305      	orrs	r5, r0
 80019ae:	d04a      	beq.n	8001a46 <__aeabi_dmul+0x37a>
 80019b0:	2c00      	cmp	r4, #0
 80019b2:	d100      	bne.n	80019b6 <__aeabi_dmul+0x2ea>
 80019b4:	e0b0      	b.n	8001b18 <__aeabi_dmul+0x44c>
 80019b6:	0020      	movs	r0, r4
 80019b8:	f000 fe00 	bl	80025bc <__clzsi2>
 80019bc:	0001      	movs	r1, r0
 80019be:	0002      	movs	r2, r0
 80019c0:	390b      	subs	r1, #11
 80019c2:	231d      	movs	r3, #29
 80019c4:	0010      	movs	r0, r2
 80019c6:	1a5b      	subs	r3, r3, r1
 80019c8:	0031      	movs	r1, r6
 80019ca:	0035      	movs	r5, r6
 80019cc:	3808      	subs	r0, #8
 80019ce:	4084      	lsls	r4, r0
 80019d0:	40d9      	lsrs	r1, r3
 80019d2:	4085      	lsls	r5, r0
 80019d4:	430c      	orrs	r4, r1
 80019d6:	4826      	ldr	r0, [pc, #152]	; (8001a70 <__aeabi_dmul+0x3a4>)
 80019d8:	1a83      	subs	r3, r0, r2
 80019da:	9300      	str	r3, [sp, #0]
 80019dc:	2300      	movs	r3, #0
 80019de:	4699      	mov	r9, r3
 80019e0:	469b      	mov	fp, r3
 80019e2:	e697      	b.n	8001714 <__aeabi_dmul+0x48>
 80019e4:	0005      	movs	r5, r0
 80019e6:	4325      	orrs	r5, r4
 80019e8:	d126      	bne.n	8001a38 <__aeabi_dmul+0x36c>
 80019ea:	2208      	movs	r2, #8
 80019ec:	9300      	str	r3, [sp, #0]
 80019ee:	2302      	movs	r3, #2
 80019f0:	2400      	movs	r4, #0
 80019f2:	4691      	mov	r9, r2
 80019f4:	469b      	mov	fp, r3
 80019f6:	e68d      	b.n	8001714 <__aeabi_dmul+0x48>
 80019f8:	4652      	mov	r2, sl
 80019fa:	9b00      	ldr	r3, [sp, #0]
 80019fc:	4332      	orrs	r2, r6
 80019fe:	d110      	bne.n	8001a22 <__aeabi_dmul+0x356>
 8001a00:	4915      	ldr	r1, [pc, #84]	; (8001a58 <__aeabi_dmul+0x38c>)
 8001a02:	2600      	movs	r6, #0
 8001a04:	468c      	mov	ip, r1
 8001a06:	4463      	add	r3, ip
 8001a08:	4649      	mov	r1, r9
 8001a0a:	9300      	str	r3, [sp, #0]
 8001a0c:	2302      	movs	r3, #2
 8001a0e:	4319      	orrs	r1, r3
 8001a10:	4689      	mov	r9, r1
 8001a12:	2002      	movs	r0, #2
 8001a14:	e69d      	b.n	8001752 <__aeabi_dmul+0x86>
 8001a16:	465b      	mov	r3, fp
 8001a18:	9701      	str	r7, [sp, #4]
 8001a1a:	2b02      	cmp	r3, #2
 8001a1c:	d000      	beq.n	8001a20 <__aeabi_dmul+0x354>
 8001a1e:	e6ad      	b.n	800177c <__aeabi_dmul+0xb0>
 8001a20:	e6c3      	b.n	80017aa <__aeabi_dmul+0xde>
 8001a22:	4a0d      	ldr	r2, [pc, #52]	; (8001a58 <__aeabi_dmul+0x38c>)
 8001a24:	2003      	movs	r0, #3
 8001a26:	4694      	mov	ip, r2
 8001a28:	4463      	add	r3, ip
 8001a2a:	464a      	mov	r2, r9
 8001a2c:	9300      	str	r3, [sp, #0]
 8001a2e:	2303      	movs	r3, #3
 8001a30:	431a      	orrs	r2, r3
 8001a32:	4691      	mov	r9, r2
 8001a34:	4652      	mov	r2, sl
 8001a36:	e68c      	b.n	8001752 <__aeabi_dmul+0x86>
 8001a38:	220c      	movs	r2, #12
 8001a3a:	9300      	str	r3, [sp, #0]
 8001a3c:	2303      	movs	r3, #3
 8001a3e:	0005      	movs	r5, r0
 8001a40:	4691      	mov	r9, r2
 8001a42:	469b      	mov	fp, r3
 8001a44:	e666      	b.n	8001714 <__aeabi_dmul+0x48>
 8001a46:	2304      	movs	r3, #4
 8001a48:	4699      	mov	r9, r3
 8001a4a:	2300      	movs	r3, #0
 8001a4c:	9300      	str	r3, [sp, #0]
 8001a4e:	3301      	adds	r3, #1
 8001a50:	2400      	movs	r4, #0
 8001a52:	469b      	mov	fp, r3
 8001a54:	e65e      	b.n	8001714 <__aeabi_dmul+0x48>
 8001a56:	46c0      	nop			; (mov r8, r8)
 8001a58:	000007ff 	.word	0x000007ff
 8001a5c:	fffffc01 	.word	0xfffffc01
 8001a60:	0800a3d8 	.word	0x0800a3d8
 8001a64:	000003ff 	.word	0x000003ff
 8001a68:	feffffff 	.word	0xfeffffff
 8001a6c:	000007fe 	.word	0x000007fe
 8001a70:	fffffc0d 	.word	0xfffffc0d
 8001a74:	4649      	mov	r1, r9
 8001a76:	2301      	movs	r3, #1
 8001a78:	4319      	orrs	r1, r3
 8001a7a:	4689      	mov	r9, r1
 8001a7c:	2600      	movs	r6, #0
 8001a7e:	2001      	movs	r0, #1
 8001a80:	e667      	b.n	8001752 <__aeabi_dmul+0x86>
 8001a82:	2300      	movs	r3, #0
 8001a84:	2480      	movs	r4, #128	; 0x80
 8001a86:	2500      	movs	r5, #0
 8001a88:	4a43      	ldr	r2, [pc, #268]	; (8001b98 <__aeabi_dmul+0x4cc>)
 8001a8a:	9301      	str	r3, [sp, #4]
 8001a8c:	0324      	lsls	r4, r4, #12
 8001a8e:	e67e      	b.n	800178e <__aeabi_dmul+0xc2>
 8001a90:	2001      	movs	r0, #1
 8001a92:	1a40      	subs	r0, r0, r1
 8001a94:	2838      	cmp	r0, #56	; 0x38
 8001a96:	dd00      	ble.n	8001a9a <__aeabi_dmul+0x3ce>
 8001a98:	e676      	b.n	8001788 <__aeabi_dmul+0xbc>
 8001a9a:	281f      	cmp	r0, #31
 8001a9c:	dd5b      	ble.n	8001b56 <__aeabi_dmul+0x48a>
 8001a9e:	221f      	movs	r2, #31
 8001aa0:	0023      	movs	r3, r4
 8001aa2:	4252      	negs	r2, r2
 8001aa4:	1a51      	subs	r1, r2, r1
 8001aa6:	40cb      	lsrs	r3, r1
 8001aa8:	0019      	movs	r1, r3
 8001aaa:	2820      	cmp	r0, #32
 8001aac:	d003      	beq.n	8001ab6 <__aeabi_dmul+0x3ea>
 8001aae:	4a3b      	ldr	r2, [pc, #236]	; (8001b9c <__aeabi_dmul+0x4d0>)
 8001ab0:	4462      	add	r2, ip
 8001ab2:	4094      	lsls	r4, r2
 8001ab4:	4325      	orrs	r5, r4
 8001ab6:	1e6a      	subs	r2, r5, #1
 8001ab8:	4195      	sbcs	r5, r2
 8001aba:	002a      	movs	r2, r5
 8001abc:	430a      	orrs	r2, r1
 8001abe:	2107      	movs	r1, #7
 8001ac0:	000d      	movs	r5, r1
 8001ac2:	2400      	movs	r4, #0
 8001ac4:	4015      	ands	r5, r2
 8001ac6:	4211      	tst	r1, r2
 8001ac8:	d05b      	beq.n	8001b82 <__aeabi_dmul+0x4b6>
 8001aca:	210f      	movs	r1, #15
 8001acc:	2400      	movs	r4, #0
 8001ace:	4011      	ands	r1, r2
 8001ad0:	2904      	cmp	r1, #4
 8001ad2:	d053      	beq.n	8001b7c <__aeabi_dmul+0x4b0>
 8001ad4:	1d11      	adds	r1, r2, #4
 8001ad6:	4291      	cmp	r1, r2
 8001ad8:	4192      	sbcs	r2, r2
 8001ada:	4252      	negs	r2, r2
 8001adc:	18a4      	adds	r4, r4, r2
 8001ade:	000a      	movs	r2, r1
 8001ae0:	0223      	lsls	r3, r4, #8
 8001ae2:	d54b      	bpl.n	8001b7c <__aeabi_dmul+0x4b0>
 8001ae4:	2201      	movs	r2, #1
 8001ae6:	2400      	movs	r4, #0
 8001ae8:	2500      	movs	r5, #0
 8001aea:	e650      	b.n	800178e <__aeabi_dmul+0xc2>
 8001aec:	2380      	movs	r3, #128	; 0x80
 8001aee:	031b      	lsls	r3, r3, #12
 8001af0:	421c      	tst	r4, r3
 8001af2:	d009      	beq.n	8001b08 <__aeabi_dmul+0x43c>
 8001af4:	421e      	tst	r6, r3
 8001af6:	d107      	bne.n	8001b08 <__aeabi_dmul+0x43c>
 8001af8:	4333      	orrs	r3, r6
 8001afa:	031c      	lsls	r4, r3, #12
 8001afc:	4643      	mov	r3, r8
 8001afe:	0015      	movs	r5, r2
 8001b00:	0b24      	lsrs	r4, r4, #12
 8001b02:	4a25      	ldr	r2, [pc, #148]	; (8001b98 <__aeabi_dmul+0x4cc>)
 8001b04:	9301      	str	r3, [sp, #4]
 8001b06:	e642      	b.n	800178e <__aeabi_dmul+0xc2>
 8001b08:	2280      	movs	r2, #128	; 0x80
 8001b0a:	0312      	lsls	r2, r2, #12
 8001b0c:	4314      	orrs	r4, r2
 8001b0e:	0324      	lsls	r4, r4, #12
 8001b10:	4a21      	ldr	r2, [pc, #132]	; (8001b98 <__aeabi_dmul+0x4cc>)
 8001b12:	0b24      	lsrs	r4, r4, #12
 8001b14:	9701      	str	r7, [sp, #4]
 8001b16:	e63a      	b.n	800178e <__aeabi_dmul+0xc2>
 8001b18:	f000 fd50 	bl	80025bc <__clzsi2>
 8001b1c:	0001      	movs	r1, r0
 8001b1e:	0002      	movs	r2, r0
 8001b20:	3115      	adds	r1, #21
 8001b22:	3220      	adds	r2, #32
 8001b24:	291c      	cmp	r1, #28
 8001b26:	dc00      	bgt.n	8001b2a <__aeabi_dmul+0x45e>
 8001b28:	e74b      	b.n	80019c2 <__aeabi_dmul+0x2f6>
 8001b2a:	0034      	movs	r4, r6
 8001b2c:	3808      	subs	r0, #8
 8001b2e:	2500      	movs	r5, #0
 8001b30:	4084      	lsls	r4, r0
 8001b32:	e750      	b.n	80019d6 <__aeabi_dmul+0x30a>
 8001b34:	f000 fd42 	bl	80025bc <__clzsi2>
 8001b38:	0003      	movs	r3, r0
 8001b3a:	001a      	movs	r2, r3
 8001b3c:	3215      	adds	r2, #21
 8001b3e:	3020      	adds	r0, #32
 8001b40:	2a1c      	cmp	r2, #28
 8001b42:	dc00      	bgt.n	8001b46 <__aeabi_dmul+0x47a>
 8001b44:	e71e      	b.n	8001984 <__aeabi_dmul+0x2b8>
 8001b46:	4656      	mov	r6, sl
 8001b48:	3b08      	subs	r3, #8
 8001b4a:	2200      	movs	r2, #0
 8001b4c:	409e      	lsls	r6, r3
 8001b4e:	e723      	b.n	8001998 <__aeabi_dmul+0x2cc>
 8001b50:	9b00      	ldr	r3, [sp, #0]
 8001b52:	469c      	mov	ip, r3
 8001b54:	e6e6      	b.n	8001924 <__aeabi_dmul+0x258>
 8001b56:	4912      	ldr	r1, [pc, #72]	; (8001ba0 <__aeabi_dmul+0x4d4>)
 8001b58:	0022      	movs	r2, r4
 8001b5a:	4461      	add	r1, ip
 8001b5c:	002e      	movs	r6, r5
 8001b5e:	408d      	lsls	r5, r1
 8001b60:	408a      	lsls	r2, r1
 8001b62:	40c6      	lsrs	r6, r0
 8001b64:	1e69      	subs	r1, r5, #1
 8001b66:	418d      	sbcs	r5, r1
 8001b68:	4332      	orrs	r2, r6
 8001b6a:	432a      	orrs	r2, r5
 8001b6c:	40c4      	lsrs	r4, r0
 8001b6e:	0753      	lsls	r3, r2, #29
 8001b70:	d0b6      	beq.n	8001ae0 <__aeabi_dmul+0x414>
 8001b72:	210f      	movs	r1, #15
 8001b74:	4011      	ands	r1, r2
 8001b76:	2904      	cmp	r1, #4
 8001b78:	d1ac      	bne.n	8001ad4 <__aeabi_dmul+0x408>
 8001b7a:	e7b1      	b.n	8001ae0 <__aeabi_dmul+0x414>
 8001b7c:	0765      	lsls	r5, r4, #29
 8001b7e:	0264      	lsls	r4, r4, #9
 8001b80:	0b24      	lsrs	r4, r4, #12
 8001b82:	08d2      	lsrs	r2, r2, #3
 8001b84:	4315      	orrs	r5, r2
 8001b86:	2200      	movs	r2, #0
 8001b88:	e601      	b.n	800178e <__aeabi_dmul+0xc2>
 8001b8a:	2280      	movs	r2, #128	; 0x80
 8001b8c:	0312      	lsls	r2, r2, #12
 8001b8e:	4314      	orrs	r4, r2
 8001b90:	0324      	lsls	r4, r4, #12
 8001b92:	4a01      	ldr	r2, [pc, #4]	; (8001b98 <__aeabi_dmul+0x4cc>)
 8001b94:	0b24      	lsrs	r4, r4, #12
 8001b96:	e5fa      	b.n	800178e <__aeabi_dmul+0xc2>
 8001b98:	000007ff 	.word	0x000007ff
 8001b9c:	0000043e 	.word	0x0000043e
 8001ba0:	0000041e 	.word	0x0000041e

08001ba4 <__aeabi_dsub>:
 8001ba4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8001ba6:	4657      	mov	r7, sl
 8001ba8:	464e      	mov	r6, r9
 8001baa:	4645      	mov	r5, r8
 8001bac:	46de      	mov	lr, fp
 8001bae:	b5e0      	push	{r5, r6, r7, lr}
 8001bb0:	001e      	movs	r6, r3
 8001bb2:	0017      	movs	r7, r2
 8001bb4:	004a      	lsls	r2, r1, #1
 8001bb6:	030b      	lsls	r3, r1, #12
 8001bb8:	0d52      	lsrs	r2, r2, #21
 8001bba:	0a5b      	lsrs	r3, r3, #9
 8001bbc:	4690      	mov	r8, r2
 8001bbe:	0f42      	lsrs	r2, r0, #29
 8001bc0:	431a      	orrs	r2, r3
 8001bc2:	0fcd      	lsrs	r5, r1, #31
 8001bc4:	4ccd      	ldr	r4, [pc, #820]	; (8001efc <__aeabi_dsub+0x358>)
 8001bc6:	0331      	lsls	r1, r6, #12
 8001bc8:	00c3      	lsls	r3, r0, #3
 8001bca:	4694      	mov	ip, r2
 8001bcc:	0070      	lsls	r0, r6, #1
 8001bce:	0f7a      	lsrs	r2, r7, #29
 8001bd0:	0a49      	lsrs	r1, r1, #9
 8001bd2:	00ff      	lsls	r7, r7, #3
 8001bd4:	469a      	mov	sl, r3
 8001bd6:	46b9      	mov	r9, r7
 8001bd8:	0d40      	lsrs	r0, r0, #21
 8001bda:	0ff6      	lsrs	r6, r6, #31
 8001bdc:	4311      	orrs	r1, r2
 8001bde:	42a0      	cmp	r0, r4
 8001be0:	d100      	bne.n	8001be4 <__aeabi_dsub+0x40>
 8001be2:	e0b1      	b.n	8001d48 <__aeabi_dsub+0x1a4>
 8001be4:	2201      	movs	r2, #1
 8001be6:	4056      	eors	r6, r2
 8001be8:	46b3      	mov	fp, r6
 8001bea:	42b5      	cmp	r5, r6
 8001bec:	d100      	bne.n	8001bf0 <__aeabi_dsub+0x4c>
 8001bee:	e088      	b.n	8001d02 <__aeabi_dsub+0x15e>
 8001bf0:	4642      	mov	r2, r8
 8001bf2:	1a12      	subs	r2, r2, r0
 8001bf4:	2a00      	cmp	r2, #0
 8001bf6:	dc00      	bgt.n	8001bfa <__aeabi_dsub+0x56>
 8001bf8:	e0ae      	b.n	8001d58 <__aeabi_dsub+0x1b4>
 8001bfa:	2800      	cmp	r0, #0
 8001bfc:	d100      	bne.n	8001c00 <__aeabi_dsub+0x5c>
 8001bfe:	e0c1      	b.n	8001d84 <__aeabi_dsub+0x1e0>
 8001c00:	48be      	ldr	r0, [pc, #760]	; (8001efc <__aeabi_dsub+0x358>)
 8001c02:	4580      	cmp	r8, r0
 8001c04:	d100      	bne.n	8001c08 <__aeabi_dsub+0x64>
 8001c06:	e151      	b.n	8001eac <__aeabi_dsub+0x308>
 8001c08:	2080      	movs	r0, #128	; 0x80
 8001c0a:	0400      	lsls	r0, r0, #16
 8001c0c:	4301      	orrs	r1, r0
 8001c0e:	2a38      	cmp	r2, #56	; 0x38
 8001c10:	dd00      	ble.n	8001c14 <__aeabi_dsub+0x70>
 8001c12:	e17b      	b.n	8001f0c <__aeabi_dsub+0x368>
 8001c14:	2a1f      	cmp	r2, #31
 8001c16:	dd00      	ble.n	8001c1a <__aeabi_dsub+0x76>
 8001c18:	e1ee      	b.n	8001ff8 <__aeabi_dsub+0x454>
 8001c1a:	2020      	movs	r0, #32
 8001c1c:	003e      	movs	r6, r7
 8001c1e:	1a80      	subs	r0, r0, r2
 8001c20:	000c      	movs	r4, r1
 8001c22:	40d6      	lsrs	r6, r2
 8001c24:	40d1      	lsrs	r1, r2
 8001c26:	4087      	lsls	r7, r0
 8001c28:	4662      	mov	r2, ip
 8001c2a:	4084      	lsls	r4, r0
 8001c2c:	1a52      	subs	r2, r2, r1
 8001c2e:	1e78      	subs	r0, r7, #1
 8001c30:	4187      	sbcs	r7, r0
 8001c32:	4694      	mov	ip, r2
 8001c34:	4334      	orrs	r4, r6
 8001c36:	4327      	orrs	r7, r4
 8001c38:	1bdc      	subs	r4, r3, r7
 8001c3a:	42a3      	cmp	r3, r4
 8001c3c:	419b      	sbcs	r3, r3
 8001c3e:	4662      	mov	r2, ip
 8001c40:	425b      	negs	r3, r3
 8001c42:	1ad3      	subs	r3, r2, r3
 8001c44:	4699      	mov	r9, r3
 8001c46:	464b      	mov	r3, r9
 8001c48:	021b      	lsls	r3, r3, #8
 8001c4a:	d400      	bmi.n	8001c4e <__aeabi_dsub+0xaa>
 8001c4c:	e118      	b.n	8001e80 <__aeabi_dsub+0x2dc>
 8001c4e:	464b      	mov	r3, r9
 8001c50:	0258      	lsls	r0, r3, #9
 8001c52:	0a43      	lsrs	r3, r0, #9
 8001c54:	4699      	mov	r9, r3
 8001c56:	464b      	mov	r3, r9
 8001c58:	2b00      	cmp	r3, #0
 8001c5a:	d100      	bne.n	8001c5e <__aeabi_dsub+0xba>
 8001c5c:	e137      	b.n	8001ece <__aeabi_dsub+0x32a>
 8001c5e:	4648      	mov	r0, r9
 8001c60:	f000 fcac 	bl	80025bc <__clzsi2>
 8001c64:	0001      	movs	r1, r0
 8001c66:	3908      	subs	r1, #8
 8001c68:	2320      	movs	r3, #32
 8001c6a:	0022      	movs	r2, r4
 8001c6c:	4648      	mov	r0, r9
 8001c6e:	1a5b      	subs	r3, r3, r1
 8001c70:	40da      	lsrs	r2, r3
 8001c72:	4088      	lsls	r0, r1
 8001c74:	408c      	lsls	r4, r1
 8001c76:	4643      	mov	r3, r8
 8001c78:	4310      	orrs	r0, r2
 8001c7a:	4588      	cmp	r8, r1
 8001c7c:	dd00      	ble.n	8001c80 <__aeabi_dsub+0xdc>
 8001c7e:	e136      	b.n	8001eee <__aeabi_dsub+0x34a>
 8001c80:	1ac9      	subs	r1, r1, r3
 8001c82:	1c4b      	adds	r3, r1, #1
 8001c84:	2b1f      	cmp	r3, #31
 8001c86:	dd00      	ble.n	8001c8a <__aeabi_dsub+0xe6>
 8001c88:	e0ea      	b.n	8001e60 <__aeabi_dsub+0x2bc>
 8001c8a:	2220      	movs	r2, #32
 8001c8c:	0026      	movs	r6, r4
 8001c8e:	1ad2      	subs	r2, r2, r3
 8001c90:	0001      	movs	r1, r0
 8001c92:	4094      	lsls	r4, r2
 8001c94:	40de      	lsrs	r6, r3
 8001c96:	40d8      	lsrs	r0, r3
 8001c98:	2300      	movs	r3, #0
 8001c9a:	4091      	lsls	r1, r2
 8001c9c:	1e62      	subs	r2, r4, #1
 8001c9e:	4194      	sbcs	r4, r2
 8001ca0:	4681      	mov	r9, r0
 8001ca2:	4698      	mov	r8, r3
 8001ca4:	4331      	orrs	r1, r6
 8001ca6:	430c      	orrs	r4, r1
 8001ca8:	0763      	lsls	r3, r4, #29
 8001caa:	d009      	beq.n	8001cc0 <__aeabi_dsub+0x11c>
 8001cac:	230f      	movs	r3, #15
 8001cae:	4023      	ands	r3, r4
 8001cb0:	2b04      	cmp	r3, #4
 8001cb2:	d005      	beq.n	8001cc0 <__aeabi_dsub+0x11c>
 8001cb4:	1d23      	adds	r3, r4, #4
 8001cb6:	42a3      	cmp	r3, r4
 8001cb8:	41a4      	sbcs	r4, r4
 8001cba:	4264      	negs	r4, r4
 8001cbc:	44a1      	add	r9, r4
 8001cbe:	001c      	movs	r4, r3
 8001cc0:	464b      	mov	r3, r9
 8001cc2:	021b      	lsls	r3, r3, #8
 8001cc4:	d400      	bmi.n	8001cc8 <__aeabi_dsub+0x124>
 8001cc6:	e0de      	b.n	8001e86 <__aeabi_dsub+0x2e2>
 8001cc8:	4641      	mov	r1, r8
 8001cca:	4b8c      	ldr	r3, [pc, #560]	; (8001efc <__aeabi_dsub+0x358>)
 8001ccc:	3101      	adds	r1, #1
 8001cce:	4299      	cmp	r1, r3
 8001cd0:	d100      	bne.n	8001cd4 <__aeabi_dsub+0x130>
 8001cd2:	e0e7      	b.n	8001ea4 <__aeabi_dsub+0x300>
 8001cd4:	464b      	mov	r3, r9
 8001cd6:	488a      	ldr	r0, [pc, #552]	; (8001f00 <__aeabi_dsub+0x35c>)
 8001cd8:	08e4      	lsrs	r4, r4, #3
 8001cda:	4003      	ands	r3, r0
 8001cdc:	0018      	movs	r0, r3
 8001cde:	0549      	lsls	r1, r1, #21
 8001ce0:	075b      	lsls	r3, r3, #29
 8001ce2:	0240      	lsls	r0, r0, #9
 8001ce4:	4323      	orrs	r3, r4
 8001ce6:	0d4a      	lsrs	r2, r1, #21
 8001ce8:	0b04      	lsrs	r4, r0, #12
 8001cea:	0512      	lsls	r2, r2, #20
 8001cec:	07ed      	lsls	r5, r5, #31
 8001cee:	4322      	orrs	r2, r4
 8001cf0:	432a      	orrs	r2, r5
 8001cf2:	0018      	movs	r0, r3
 8001cf4:	0011      	movs	r1, r2
 8001cf6:	bcf0      	pop	{r4, r5, r6, r7}
 8001cf8:	46bb      	mov	fp, r7
 8001cfa:	46b2      	mov	sl, r6
 8001cfc:	46a9      	mov	r9, r5
 8001cfe:	46a0      	mov	r8, r4
 8001d00:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8001d02:	4642      	mov	r2, r8
 8001d04:	1a12      	subs	r2, r2, r0
 8001d06:	2a00      	cmp	r2, #0
 8001d08:	dd52      	ble.n	8001db0 <__aeabi_dsub+0x20c>
 8001d0a:	2800      	cmp	r0, #0
 8001d0c:	d100      	bne.n	8001d10 <__aeabi_dsub+0x16c>
 8001d0e:	e09c      	b.n	8001e4a <__aeabi_dsub+0x2a6>
 8001d10:	45a0      	cmp	r8, r4
 8001d12:	d100      	bne.n	8001d16 <__aeabi_dsub+0x172>
 8001d14:	e0ca      	b.n	8001eac <__aeabi_dsub+0x308>
 8001d16:	2080      	movs	r0, #128	; 0x80
 8001d18:	0400      	lsls	r0, r0, #16
 8001d1a:	4301      	orrs	r1, r0
 8001d1c:	2a38      	cmp	r2, #56	; 0x38
 8001d1e:	dd00      	ble.n	8001d22 <__aeabi_dsub+0x17e>
 8001d20:	e149      	b.n	8001fb6 <__aeabi_dsub+0x412>
 8001d22:	2a1f      	cmp	r2, #31
 8001d24:	dc00      	bgt.n	8001d28 <__aeabi_dsub+0x184>
 8001d26:	e197      	b.n	8002058 <__aeabi_dsub+0x4b4>
 8001d28:	0010      	movs	r0, r2
 8001d2a:	000e      	movs	r6, r1
 8001d2c:	3820      	subs	r0, #32
 8001d2e:	40c6      	lsrs	r6, r0
 8001d30:	2a20      	cmp	r2, #32
 8001d32:	d004      	beq.n	8001d3e <__aeabi_dsub+0x19a>
 8001d34:	2040      	movs	r0, #64	; 0x40
 8001d36:	1a82      	subs	r2, r0, r2
 8001d38:	4091      	lsls	r1, r2
 8001d3a:	430f      	orrs	r7, r1
 8001d3c:	46b9      	mov	r9, r7
 8001d3e:	464c      	mov	r4, r9
 8001d40:	1e62      	subs	r2, r4, #1
 8001d42:	4194      	sbcs	r4, r2
 8001d44:	4334      	orrs	r4, r6
 8001d46:	e13a      	b.n	8001fbe <__aeabi_dsub+0x41a>
 8001d48:	000a      	movs	r2, r1
 8001d4a:	433a      	orrs	r2, r7
 8001d4c:	d028      	beq.n	8001da0 <__aeabi_dsub+0x1fc>
 8001d4e:	46b3      	mov	fp, r6
 8001d50:	42b5      	cmp	r5, r6
 8001d52:	d02b      	beq.n	8001dac <__aeabi_dsub+0x208>
 8001d54:	4a6b      	ldr	r2, [pc, #428]	; (8001f04 <__aeabi_dsub+0x360>)
 8001d56:	4442      	add	r2, r8
 8001d58:	2a00      	cmp	r2, #0
 8001d5a:	d05d      	beq.n	8001e18 <__aeabi_dsub+0x274>
 8001d5c:	4642      	mov	r2, r8
 8001d5e:	4644      	mov	r4, r8
 8001d60:	1a82      	subs	r2, r0, r2
 8001d62:	2c00      	cmp	r4, #0
 8001d64:	d000      	beq.n	8001d68 <__aeabi_dsub+0x1c4>
 8001d66:	e0f5      	b.n	8001f54 <__aeabi_dsub+0x3b0>
 8001d68:	4665      	mov	r5, ip
 8001d6a:	431d      	orrs	r5, r3
 8001d6c:	d100      	bne.n	8001d70 <__aeabi_dsub+0x1cc>
 8001d6e:	e19c      	b.n	80020aa <__aeabi_dsub+0x506>
 8001d70:	1e55      	subs	r5, r2, #1
 8001d72:	2a01      	cmp	r2, #1
 8001d74:	d100      	bne.n	8001d78 <__aeabi_dsub+0x1d4>
 8001d76:	e1fb      	b.n	8002170 <__aeabi_dsub+0x5cc>
 8001d78:	4c60      	ldr	r4, [pc, #384]	; (8001efc <__aeabi_dsub+0x358>)
 8001d7a:	42a2      	cmp	r2, r4
 8001d7c:	d100      	bne.n	8001d80 <__aeabi_dsub+0x1dc>
 8001d7e:	e1bd      	b.n	80020fc <__aeabi_dsub+0x558>
 8001d80:	002a      	movs	r2, r5
 8001d82:	e0f0      	b.n	8001f66 <__aeabi_dsub+0x3c2>
 8001d84:	0008      	movs	r0, r1
 8001d86:	4338      	orrs	r0, r7
 8001d88:	d100      	bne.n	8001d8c <__aeabi_dsub+0x1e8>
 8001d8a:	e0c3      	b.n	8001f14 <__aeabi_dsub+0x370>
 8001d8c:	1e50      	subs	r0, r2, #1
 8001d8e:	2a01      	cmp	r2, #1
 8001d90:	d100      	bne.n	8001d94 <__aeabi_dsub+0x1f0>
 8001d92:	e1a8      	b.n	80020e6 <__aeabi_dsub+0x542>
 8001d94:	4c59      	ldr	r4, [pc, #356]	; (8001efc <__aeabi_dsub+0x358>)
 8001d96:	42a2      	cmp	r2, r4
 8001d98:	d100      	bne.n	8001d9c <__aeabi_dsub+0x1f8>
 8001d9a:	e087      	b.n	8001eac <__aeabi_dsub+0x308>
 8001d9c:	0002      	movs	r2, r0
 8001d9e:	e736      	b.n	8001c0e <__aeabi_dsub+0x6a>
 8001da0:	2201      	movs	r2, #1
 8001da2:	4056      	eors	r6, r2
 8001da4:	46b3      	mov	fp, r6
 8001da6:	42b5      	cmp	r5, r6
 8001da8:	d000      	beq.n	8001dac <__aeabi_dsub+0x208>
 8001daa:	e721      	b.n	8001bf0 <__aeabi_dsub+0x4c>
 8001dac:	4a55      	ldr	r2, [pc, #340]	; (8001f04 <__aeabi_dsub+0x360>)
 8001dae:	4442      	add	r2, r8
 8001db0:	2a00      	cmp	r2, #0
 8001db2:	d100      	bne.n	8001db6 <__aeabi_dsub+0x212>
 8001db4:	e0b5      	b.n	8001f22 <__aeabi_dsub+0x37e>
 8001db6:	4642      	mov	r2, r8
 8001db8:	4644      	mov	r4, r8
 8001dba:	1a82      	subs	r2, r0, r2
 8001dbc:	2c00      	cmp	r4, #0
 8001dbe:	d100      	bne.n	8001dc2 <__aeabi_dsub+0x21e>
 8001dc0:	e138      	b.n	8002034 <__aeabi_dsub+0x490>
 8001dc2:	4e4e      	ldr	r6, [pc, #312]	; (8001efc <__aeabi_dsub+0x358>)
 8001dc4:	42b0      	cmp	r0, r6
 8001dc6:	d100      	bne.n	8001dca <__aeabi_dsub+0x226>
 8001dc8:	e1de      	b.n	8002188 <__aeabi_dsub+0x5e4>
 8001dca:	2680      	movs	r6, #128	; 0x80
 8001dcc:	4664      	mov	r4, ip
 8001dce:	0436      	lsls	r6, r6, #16
 8001dd0:	4334      	orrs	r4, r6
 8001dd2:	46a4      	mov	ip, r4
 8001dd4:	2a38      	cmp	r2, #56	; 0x38
 8001dd6:	dd00      	ble.n	8001dda <__aeabi_dsub+0x236>
 8001dd8:	e196      	b.n	8002108 <__aeabi_dsub+0x564>
 8001dda:	2a1f      	cmp	r2, #31
 8001ddc:	dd00      	ble.n	8001de0 <__aeabi_dsub+0x23c>
 8001dde:	e224      	b.n	800222a <__aeabi_dsub+0x686>
 8001de0:	2620      	movs	r6, #32
 8001de2:	1ab4      	subs	r4, r6, r2
 8001de4:	46a2      	mov	sl, r4
 8001de6:	4664      	mov	r4, ip
 8001de8:	4656      	mov	r6, sl
 8001dea:	40b4      	lsls	r4, r6
 8001dec:	46a1      	mov	r9, r4
 8001dee:	001c      	movs	r4, r3
 8001df0:	464e      	mov	r6, r9
 8001df2:	40d4      	lsrs	r4, r2
 8001df4:	4326      	orrs	r6, r4
 8001df6:	0034      	movs	r4, r6
 8001df8:	4656      	mov	r6, sl
 8001dfa:	40b3      	lsls	r3, r6
 8001dfc:	1e5e      	subs	r6, r3, #1
 8001dfe:	41b3      	sbcs	r3, r6
 8001e00:	431c      	orrs	r4, r3
 8001e02:	4663      	mov	r3, ip
 8001e04:	40d3      	lsrs	r3, r2
 8001e06:	18c9      	adds	r1, r1, r3
 8001e08:	19e4      	adds	r4, r4, r7
 8001e0a:	42bc      	cmp	r4, r7
 8001e0c:	41bf      	sbcs	r7, r7
 8001e0e:	427f      	negs	r7, r7
 8001e10:	46b9      	mov	r9, r7
 8001e12:	4680      	mov	r8, r0
 8001e14:	4489      	add	r9, r1
 8001e16:	e0d8      	b.n	8001fca <__aeabi_dsub+0x426>
 8001e18:	4640      	mov	r0, r8
 8001e1a:	4c3b      	ldr	r4, [pc, #236]	; (8001f08 <__aeabi_dsub+0x364>)
 8001e1c:	3001      	adds	r0, #1
 8001e1e:	4220      	tst	r0, r4
 8001e20:	d000      	beq.n	8001e24 <__aeabi_dsub+0x280>
 8001e22:	e0b4      	b.n	8001f8e <__aeabi_dsub+0x3ea>
 8001e24:	4640      	mov	r0, r8
 8001e26:	2800      	cmp	r0, #0
 8001e28:	d000      	beq.n	8001e2c <__aeabi_dsub+0x288>
 8001e2a:	e144      	b.n	80020b6 <__aeabi_dsub+0x512>
 8001e2c:	4660      	mov	r0, ip
 8001e2e:	4318      	orrs	r0, r3
 8001e30:	d100      	bne.n	8001e34 <__aeabi_dsub+0x290>
 8001e32:	e190      	b.n	8002156 <__aeabi_dsub+0x5b2>
 8001e34:	0008      	movs	r0, r1
 8001e36:	4338      	orrs	r0, r7
 8001e38:	d000      	beq.n	8001e3c <__aeabi_dsub+0x298>
 8001e3a:	e1aa      	b.n	8002192 <__aeabi_dsub+0x5ee>
 8001e3c:	4661      	mov	r1, ip
 8001e3e:	08db      	lsrs	r3, r3, #3
 8001e40:	0749      	lsls	r1, r1, #29
 8001e42:	430b      	orrs	r3, r1
 8001e44:	4661      	mov	r1, ip
 8001e46:	08cc      	lsrs	r4, r1, #3
 8001e48:	e027      	b.n	8001e9a <__aeabi_dsub+0x2f6>
 8001e4a:	0008      	movs	r0, r1
 8001e4c:	4338      	orrs	r0, r7
 8001e4e:	d061      	beq.n	8001f14 <__aeabi_dsub+0x370>
 8001e50:	1e50      	subs	r0, r2, #1
 8001e52:	2a01      	cmp	r2, #1
 8001e54:	d100      	bne.n	8001e58 <__aeabi_dsub+0x2b4>
 8001e56:	e139      	b.n	80020cc <__aeabi_dsub+0x528>
 8001e58:	42a2      	cmp	r2, r4
 8001e5a:	d027      	beq.n	8001eac <__aeabi_dsub+0x308>
 8001e5c:	0002      	movs	r2, r0
 8001e5e:	e75d      	b.n	8001d1c <__aeabi_dsub+0x178>
 8001e60:	0002      	movs	r2, r0
 8001e62:	391f      	subs	r1, #31
 8001e64:	40ca      	lsrs	r2, r1
 8001e66:	0011      	movs	r1, r2
 8001e68:	2b20      	cmp	r3, #32
 8001e6a:	d003      	beq.n	8001e74 <__aeabi_dsub+0x2d0>
 8001e6c:	2240      	movs	r2, #64	; 0x40
 8001e6e:	1ad3      	subs	r3, r2, r3
 8001e70:	4098      	lsls	r0, r3
 8001e72:	4304      	orrs	r4, r0
 8001e74:	1e63      	subs	r3, r4, #1
 8001e76:	419c      	sbcs	r4, r3
 8001e78:	2300      	movs	r3, #0
 8001e7a:	4699      	mov	r9, r3
 8001e7c:	4698      	mov	r8, r3
 8001e7e:	430c      	orrs	r4, r1
 8001e80:	0763      	lsls	r3, r4, #29
 8001e82:	d000      	beq.n	8001e86 <__aeabi_dsub+0x2e2>
 8001e84:	e712      	b.n	8001cac <__aeabi_dsub+0x108>
 8001e86:	464b      	mov	r3, r9
 8001e88:	464a      	mov	r2, r9
 8001e8a:	08e4      	lsrs	r4, r4, #3
 8001e8c:	075b      	lsls	r3, r3, #29
 8001e8e:	4323      	orrs	r3, r4
 8001e90:	08d4      	lsrs	r4, r2, #3
 8001e92:	4642      	mov	r2, r8
 8001e94:	4919      	ldr	r1, [pc, #100]	; (8001efc <__aeabi_dsub+0x358>)
 8001e96:	428a      	cmp	r2, r1
 8001e98:	d00e      	beq.n	8001eb8 <__aeabi_dsub+0x314>
 8001e9a:	0324      	lsls	r4, r4, #12
 8001e9c:	0552      	lsls	r2, r2, #21
 8001e9e:	0b24      	lsrs	r4, r4, #12
 8001ea0:	0d52      	lsrs	r2, r2, #21
 8001ea2:	e722      	b.n	8001cea <__aeabi_dsub+0x146>
 8001ea4:	000a      	movs	r2, r1
 8001ea6:	2400      	movs	r4, #0
 8001ea8:	2300      	movs	r3, #0
 8001eaa:	e71e      	b.n	8001cea <__aeabi_dsub+0x146>
 8001eac:	08db      	lsrs	r3, r3, #3
 8001eae:	4662      	mov	r2, ip
 8001eb0:	0752      	lsls	r2, r2, #29
 8001eb2:	4313      	orrs	r3, r2
 8001eb4:	4662      	mov	r2, ip
 8001eb6:	08d4      	lsrs	r4, r2, #3
 8001eb8:	001a      	movs	r2, r3
 8001eba:	4322      	orrs	r2, r4
 8001ebc:	d100      	bne.n	8001ec0 <__aeabi_dsub+0x31c>
 8001ebe:	e1fc      	b.n	80022ba <__aeabi_dsub+0x716>
 8001ec0:	2280      	movs	r2, #128	; 0x80
 8001ec2:	0312      	lsls	r2, r2, #12
 8001ec4:	4314      	orrs	r4, r2
 8001ec6:	0324      	lsls	r4, r4, #12
 8001ec8:	4a0c      	ldr	r2, [pc, #48]	; (8001efc <__aeabi_dsub+0x358>)
 8001eca:	0b24      	lsrs	r4, r4, #12
 8001ecc:	e70d      	b.n	8001cea <__aeabi_dsub+0x146>
 8001ece:	0020      	movs	r0, r4
 8001ed0:	f000 fb74 	bl	80025bc <__clzsi2>
 8001ed4:	0001      	movs	r1, r0
 8001ed6:	3118      	adds	r1, #24
 8001ed8:	291f      	cmp	r1, #31
 8001eda:	dc00      	bgt.n	8001ede <__aeabi_dsub+0x33a>
 8001edc:	e6c4      	b.n	8001c68 <__aeabi_dsub+0xc4>
 8001ede:	3808      	subs	r0, #8
 8001ee0:	4084      	lsls	r4, r0
 8001ee2:	4643      	mov	r3, r8
 8001ee4:	0020      	movs	r0, r4
 8001ee6:	2400      	movs	r4, #0
 8001ee8:	4588      	cmp	r8, r1
 8001eea:	dc00      	bgt.n	8001eee <__aeabi_dsub+0x34a>
 8001eec:	e6c8      	b.n	8001c80 <__aeabi_dsub+0xdc>
 8001eee:	4a04      	ldr	r2, [pc, #16]	; (8001f00 <__aeabi_dsub+0x35c>)
 8001ef0:	1a5b      	subs	r3, r3, r1
 8001ef2:	4010      	ands	r0, r2
 8001ef4:	4698      	mov	r8, r3
 8001ef6:	4681      	mov	r9, r0
 8001ef8:	e6d6      	b.n	8001ca8 <__aeabi_dsub+0x104>
 8001efa:	46c0      	nop			; (mov r8, r8)
 8001efc:	000007ff 	.word	0x000007ff
 8001f00:	ff7fffff 	.word	0xff7fffff
 8001f04:	fffff801 	.word	0xfffff801
 8001f08:	000007fe 	.word	0x000007fe
 8001f0c:	430f      	orrs	r7, r1
 8001f0e:	1e7a      	subs	r2, r7, #1
 8001f10:	4197      	sbcs	r7, r2
 8001f12:	e691      	b.n	8001c38 <__aeabi_dsub+0x94>
 8001f14:	4661      	mov	r1, ip
 8001f16:	08db      	lsrs	r3, r3, #3
 8001f18:	0749      	lsls	r1, r1, #29
 8001f1a:	430b      	orrs	r3, r1
 8001f1c:	4661      	mov	r1, ip
 8001f1e:	08cc      	lsrs	r4, r1, #3
 8001f20:	e7b8      	b.n	8001e94 <__aeabi_dsub+0x2f0>
 8001f22:	4640      	mov	r0, r8
 8001f24:	4cd3      	ldr	r4, [pc, #844]	; (8002274 <__aeabi_dsub+0x6d0>)
 8001f26:	3001      	adds	r0, #1
 8001f28:	4220      	tst	r0, r4
 8001f2a:	d000      	beq.n	8001f2e <__aeabi_dsub+0x38a>
 8001f2c:	e0a2      	b.n	8002074 <__aeabi_dsub+0x4d0>
 8001f2e:	4640      	mov	r0, r8
 8001f30:	2800      	cmp	r0, #0
 8001f32:	d000      	beq.n	8001f36 <__aeabi_dsub+0x392>
 8001f34:	e101      	b.n	800213a <__aeabi_dsub+0x596>
 8001f36:	4660      	mov	r0, ip
 8001f38:	4318      	orrs	r0, r3
 8001f3a:	d100      	bne.n	8001f3e <__aeabi_dsub+0x39a>
 8001f3c:	e15e      	b.n	80021fc <__aeabi_dsub+0x658>
 8001f3e:	0008      	movs	r0, r1
 8001f40:	4338      	orrs	r0, r7
 8001f42:	d000      	beq.n	8001f46 <__aeabi_dsub+0x3a2>
 8001f44:	e15f      	b.n	8002206 <__aeabi_dsub+0x662>
 8001f46:	4661      	mov	r1, ip
 8001f48:	08db      	lsrs	r3, r3, #3
 8001f4a:	0749      	lsls	r1, r1, #29
 8001f4c:	430b      	orrs	r3, r1
 8001f4e:	4661      	mov	r1, ip
 8001f50:	08cc      	lsrs	r4, r1, #3
 8001f52:	e7a2      	b.n	8001e9a <__aeabi_dsub+0x2f6>
 8001f54:	4dc8      	ldr	r5, [pc, #800]	; (8002278 <__aeabi_dsub+0x6d4>)
 8001f56:	42a8      	cmp	r0, r5
 8001f58:	d100      	bne.n	8001f5c <__aeabi_dsub+0x3b8>
 8001f5a:	e0cf      	b.n	80020fc <__aeabi_dsub+0x558>
 8001f5c:	2580      	movs	r5, #128	; 0x80
 8001f5e:	4664      	mov	r4, ip
 8001f60:	042d      	lsls	r5, r5, #16
 8001f62:	432c      	orrs	r4, r5
 8001f64:	46a4      	mov	ip, r4
 8001f66:	2a38      	cmp	r2, #56	; 0x38
 8001f68:	dc56      	bgt.n	8002018 <__aeabi_dsub+0x474>
 8001f6a:	2a1f      	cmp	r2, #31
 8001f6c:	dd00      	ble.n	8001f70 <__aeabi_dsub+0x3cc>
 8001f6e:	e0d1      	b.n	8002114 <__aeabi_dsub+0x570>
 8001f70:	2520      	movs	r5, #32
 8001f72:	001e      	movs	r6, r3
 8001f74:	1aad      	subs	r5, r5, r2
 8001f76:	4664      	mov	r4, ip
 8001f78:	40ab      	lsls	r3, r5
 8001f7a:	40ac      	lsls	r4, r5
 8001f7c:	40d6      	lsrs	r6, r2
 8001f7e:	1e5d      	subs	r5, r3, #1
 8001f80:	41ab      	sbcs	r3, r5
 8001f82:	4334      	orrs	r4, r6
 8001f84:	4323      	orrs	r3, r4
 8001f86:	4664      	mov	r4, ip
 8001f88:	40d4      	lsrs	r4, r2
 8001f8a:	1b09      	subs	r1, r1, r4
 8001f8c:	e049      	b.n	8002022 <__aeabi_dsub+0x47e>
 8001f8e:	4660      	mov	r0, ip
 8001f90:	1bdc      	subs	r4, r3, r7
 8001f92:	1a46      	subs	r6, r0, r1
 8001f94:	42a3      	cmp	r3, r4
 8001f96:	4180      	sbcs	r0, r0
 8001f98:	4240      	negs	r0, r0
 8001f9a:	4681      	mov	r9, r0
 8001f9c:	0030      	movs	r0, r6
 8001f9e:	464e      	mov	r6, r9
 8001fa0:	1b80      	subs	r0, r0, r6
 8001fa2:	4681      	mov	r9, r0
 8001fa4:	0200      	lsls	r0, r0, #8
 8001fa6:	d476      	bmi.n	8002096 <__aeabi_dsub+0x4f2>
 8001fa8:	464b      	mov	r3, r9
 8001faa:	4323      	orrs	r3, r4
 8001fac:	d000      	beq.n	8001fb0 <__aeabi_dsub+0x40c>
 8001fae:	e652      	b.n	8001c56 <__aeabi_dsub+0xb2>
 8001fb0:	2400      	movs	r4, #0
 8001fb2:	2500      	movs	r5, #0
 8001fb4:	e771      	b.n	8001e9a <__aeabi_dsub+0x2f6>
 8001fb6:	4339      	orrs	r1, r7
 8001fb8:	000c      	movs	r4, r1
 8001fba:	1e62      	subs	r2, r4, #1
 8001fbc:	4194      	sbcs	r4, r2
 8001fbe:	18e4      	adds	r4, r4, r3
 8001fc0:	429c      	cmp	r4, r3
 8001fc2:	419b      	sbcs	r3, r3
 8001fc4:	425b      	negs	r3, r3
 8001fc6:	4463      	add	r3, ip
 8001fc8:	4699      	mov	r9, r3
 8001fca:	464b      	mov	r3, r9
 8001fcc:	021b      	lsls	r3, r3, #8
 8001fce:	d400      	bmi.n	8001fd2 <__aeabi_dsub+0x42e>
 8001fd0:	e756      	b.n	8001e80 <__aeabi_dsub+0x2dc>
 8001fd2:	2301      	movs	r3, #1
 8001fd4:	469c      	mov	ip, r3
 8001fd6:	4ba8      	ldr	r3, [pc, #672]	; (8002278 <__aeabi_dsub+0x6d4>)
 8001fd8:	44e0      	add	r8, ip
 8001fda:	4598      	cmp	r8, r3
 8001fdc:	d038      	beq.n	8002050 <__aeabi_dsub+0x4ac>
 8001fde:	464b      	mov	r3, r9
 8001fe0:	48a6      	ldr	r0, [pc, #664]	; (800227c <__aeabi_dsub+0x6d8>)
 8001fe2:	2201      	movs	r2, #1
 8001fe4:	4003      	ands	r3, r0
 8001fe6:	0018      	movs	r0, r3
 8001fe8:	0863      	lsrs	r3, r4, #1
 8001fea:	4014      	ands	r4, r2
 8001fec:	431c      	orrs	r4, r3
 8001fee:	07c3      	lsls	r3, r0, #31
 8001ff0:	431c      	orrs	r4, r3
 8001ff2:	0843      	lsrs	r3, r0, #1
 8001ff4:	4699      	mov	r9, r3
 8001ff6:	e657      	b.n	8001ca8 <__aeabi_dsub+0x104>
 8001ff8:	0010      	movs	r0, r2
 8001ffa:	000e      	movs	r6, r1
 8001ffc:	3820      	subs	r0, #32
 8001ffe:	40c6      	lsrs	r6, r0
 8002000:	2a20      	cmp	r2, #32
 8002002:	d004      	beq.n	800200e <__aeabi_dsub+0x46a>
 8002004:	2040      	movs	r0, #64	; 0x40
 8002006:	1a82      	subs	r2, r0, r2
 8002008:	4091      	lsls	r1, r2
 800200a:	430f      	orrs	r7, r1
 800200c:	46b9      	mov	r9, r7
 800200e:	464f      	mov	r7, r9
 8002010:	1e7a      	subs	r2, r7, #1
 8002012:	4197      	sbcs	r7, r2
 8002014:	4337      	orrs	r7, r6
 8002016:	e60f      	b.n	8001c38 <__aeabi_dsub+0x94>
 8002018:	4662      	mov	r2, ip
 800201a:	431a      	orrs	r2, r3
 800201c:	0013      	movs	r3, r2
 800201e:	1e5a      	subs	r2, r3, #1
 8002020:	4193      	sbcs	r3, r2
 8002022:	1afc      	subs	r4, r7, r3
 8002024:	42a7      	cmp	r7, r4
 8002026:	41bf      	sbcs	r7, r7
 8002028:	427f      	negs	r7, r7
 800202a:	1bcb      	subs	r3, r1, r7
 800202c:	4699      	mov	r9, r3
 800202e:	465d      	mov	r5, fp
 8002030:	4680      	mov	r8, r0
 8002032:	e608      	b.n	8001c46 <__aeabi_dsub+0xa2>
 8002034:	4666      	mov	r6, ip
 8002036:	431e      	orrs	r6, r3
 8002038:	d100      	bne.n	800203c <__aeabi_dsub+0x498>
 800203a:	e0be      	b.n	80021ba <__aeabi_dsub+0x616>
 800203c:	1e56      	subs	r6, r2, #1
 800203e:	2a01      	cmp	r2, #1
 8002040:	d100      	bne.n	8002044 <__aeabi_dsub+0x4a0>
 8002042:	e109      	b.n	8002258 <__aeabi_dsub+0x6b4>
 8002044:	4c8c      	ldr	r4, [pc, #560]	; (8002278 <__aeabi_dsub+0x6d4>)
 8002046:	42a2      	cmp	r2, r4
 8002048:	d100      	bne.n	800204c <__aeabi_dsub+0x4a8>
 800204a:	e119      	b.n	8002280 <__aeabi_dsub+0x6dc>
 800204c:	0032      	movs	r2, r6
 800204e:	e6c1      	b.n	8001dd4 <__aeabi_dsub+0x230>
 8002050:	4642      	mov	r2, r8
 8002052:	2400      	movs	r4, #0
 8002054:	2300      	movs	r3, #0
 8002056:	e648      	b.n	8001cea <__aeabi_dsub+0x146>
 8002058:	2020      	movs	r0, #32
 800205a:	000c      	movs	r4, r1
 800205c:	1a80      	subs	r0, r0, r2
 800205e:	003e      	movs	r6, r7
 8002060:	4087      	lsls	r7, r0
 8002062:	4084      	lsls	r4, r0
 8002064:	40d6      	lsrs	r6, r2
 8002066:	1e78      	subs	r0, r7, #1
 8002068:	4187      	sbcs	r7, r0
 800206a:	40d1      	lsrs	r1, r2
 800206c:	4334      	orrs	r4, r6
 800206e:	433c      	orrs	r4, r7
 8002070:	448c      	add	ip, r1
 8002072:	e7a4      	b.n	8001fbe <__aeabi_dsub+0x41a>
 8002074:	4a80      	ldr	r2, [pc, #512]	; (8002278 <__aeabi_dsub+0x6d4>)
 8002076:	4290      	cmp	r0, r2
 8002078:	d100      	bne.n	800207c <__aeabi_dsub+0x4d8>
 800207a:	e0e9      	b.n	8002250 <__aeabi_dsub+0x6ac>
 800207c:	19df      	adds	r7, r3, r7
 800207e:	429f      	cmp	r7, r3
 8002080:	419b      	sbcs	r3, r3
 8002082:	4461      	add	r1, ip
 8002084:	425b      	negs	r3, r3
 8002086:	18c9      	adds	r1, r1, r3
 8002088:	07cc      	lsls	r4, r1, #31
 800208a:	087f      	lsrs	r7, r7, #1
 800208c:	084b      	lsrs	r3, r1, #1
 800208e:	4699      	mov	r9, r3
 8002090:	4680      	mov	r8, r0
 8002092:	433c      	orrs	r4, r7
 8002094:	e6f4      	b.n	8001e80 <__aeabi_dsub+0x2dc>
 8002096:	1afc      	subs	r4, r7, r3
 8002098:	42a7      	cmp	r7, r4
 800209a:	41bf      	sbcs	r7, r7
 800209c:	4663      	mov	r3, ip
 800209e:	427f      	negs	r7, r7
 80020a0:	1ac9      	subs	r1, r1, r3
 80020a2:	1bcb      	subs	r3, r1, r7
 80020a4:	4699      	mov	r9, r3
 80020a6:	465d      	mov	r5, fp
 80020a8:	e5d5      	b.n	8001c56 <__aeabi_dsub+0xb2>
 80020aa:	08ff      	lsrs	r7, r7, #3
 80020ac:	074b      	lsls	r3, r1, #29
 80020ae:	465d      	mov	r5, fp
 80020b0:	433b      	orrs	r3, r7
 80020b2:	08cc      	lsrs	r4, r1, #3
 80020b4:	e6ee      	b.n	8001e94 <__aeabi_dsub+0x2f0>
 80020b6:	4662      	mov	r2, ip
 80020b8:	431a      	orrs	r2, r3
 80020ba:	d000      	beq.n	80020be <__aeabi_dsub+0x51a>
 80020bc:	e082      	b.n	80021c4 <__aeabi_dsub+0x620>
 80020be:	000b      	movs	r3, r1
 80020c0:	433b      	orrs	r3, r7
 80020c2:	d11b      	bne.n	80020fc <__aeabi_dsub+0x558>
 80020c4:	2480      	movs	r4, #128	; 0x80
 80020c6:	2500      	movs	r5, #0
 80020c8:	0324      	lsls	r4, r4, #12
 80020ca:	e6f9      	b.n	8001ec0 <__aeabi_dsub+0x31c>
 80020cc:	19dc      	adds	r4, r3, r7
 80020ce:	429c      	cmp	r4, r3
 80020d0:	419b      	sbcs	r3, r3
 80020d2:	4461      	add	r1, ip
 80020d4:	4689      	mov	r9, r1
 80020d6:	425b      	negs	r3, r3
 80020d8:	4499      	add	r9, r3
 80020da:	464b      	mov	r3, r9
 80020dc:	021b      	lsls	r3, r3, #8
 80020de:	d444      	bmi.n	800216a <__aeabi_dsub+0x5c6>
 80020e0:	2301      	movs	r3, #1
 80020e2:	4698      	mov	r8, r3
 80020e4:	e6cc      	b.n	8001e80 <__aeabi_dsub+0x2dc>
 80020e6:	1bdc      	subs	r4, r3, r7
 80020e8:	4662      	mov	r2, ip
 80020ea:	42a3      	cmp	r3, r4
 80020ec:	419b      	sbcs	r3, r3
 80020ee:	1a51      	subs	r1, r2, r1
 80020f0:	425b      	negs	r3, r3
 80020f2:	1acb      	subs	r3, r1, r3
 80020f4:	4699      	mov	r9, r3
 80020f6:	2301      	movs	r3, #1
 80020f8:	4698      	mov	r8, r3
 80020fa:	e5a4      	b.n	8001c46 <__aeabi_dsub+0xa2>
 80020fc:	08ff      	lsrs	r7, r7, #3
 80020fe:	074b      	lsls	r3, r1, #29
 8002100:	465d      	mov	r5, fp
 8002102:	433b      	orrs	r3, r7
 8002104:	08cc      	lsrs	r4, r1, #3
 8002106:	e6d7      	b.n	8001eb8 <__aeabi_dsub+0x314>
 8002108:	4662      	mov	r2, ip
 800210a:	431a      	orrs	r2, r3
 800210c:	0014      	movs	r4, r2
 800210e:	1e63      	subs	r3, r4, #1
 8002110:	419c      	sbcs	r4, r3
 8002112:	e679      	b.n	8001e08 <__aeabi_dsub+0x264>
 8002114:	0015      	movs	r5, r2
 8002116:	4664      	mov	r4, ip
 8002118:	3d20      	subs	r5, #32
 800211a:	40ec      	lsrs	r4, r5
 800211c:	46a0      	mov	r8, r4
 800211e:	2a20      	cmp	r2, #32
 8002120:	d005      	beq.n	800212e <__aeabi_dsub+0x58a>
 8002122:	2540      	movs	r5, #64	; 0x40
 8002124:	4664      	mov	r4, ip
 8002126:	1aaa      	subs	r2, r5, r2
 8002128:	4094      	lsls	r4, r2
 800212a:	4323      	orrs	r3, r4
 800212c:	469a      	mov	sl, r3
 800212e:	4654      	mov	r4, sl
 8002130:	1e63      	subs	r3, r4, #1
 8002132:	419c      	sbcs	r4, r3
 8002134:	4643      	mov	r3, r8
 8002136:	4323      	orrs	r3, r4
 8002138:	e773      	b.n	8002022 <__aeabi_dsub+0x47e>
 800213a:	4662      	mov	r2, ip
 800213c:	431a      	orrs	r2, r3
 800213e:	d023      	beq.n	8002188 <__aeabi_dsub+0x5e4>
 8002140:	000a      	movs	r2, r1
 8002142:	433a      	orrs	r2, r7
 8002144:	d000      	beq.n	8002148 <__aeabi_dsub+0x5a4>
 8002146:	e0a0      	b.n	800228a <__aeabi_dsub+0x6e6>
 8002148:	4662      	mov	r2, ip
 800214a:	08db      	lsrs	r3, r3, #3
 800214c:	0752      	lsls	r2, r2, #29
 800214e:	4313      	orrs	r3, r2
 8002150:	4662      	mov	r2, ip
 8002152:	08d4      	lsrs	r4, r2, #3
 8002154:	e6b0      	b.n	8001eb8 <__aeabi_dsub+0x314>
 8002156:	000b      	movs	r3, r1
 8002158:	433b      	orrs	r3, r7
 800215a:	d100      	bne.n	800215e <__aeabi_dsub+0x5ba>
 800215c:	e728      	b.n	8001fb0 <__aeabi_dsub+0x40c>
 800215e:	08ff      	lsrs	r7, r7, #3
 8002160:	074b      	lsls	r3, r1, #29
 8002162:	465d      	mov	r5, fp
 8002164:	433b      	orrs	r3, r7
 8002166:	08cc      	lsrs	r4, r1, #3
 8002168:	e697      	b.n	8001e9a <__aeabi_dsub+0x2f6>
 800216a:	2302      	movs	r3, #2
 800216c:	4698      	mov	r8, r3
 800216e:	e736      	b.n	8001fde <__aeabi_dsub+0x43a>
 8002170:	1afc      	subs	r4, r7, r3
 8002172:	42a7      	cmp	r7, r4
 8002174:	41bf      	sbcs	r7, r7
 8002176:	4663      	mov	r3, ip
 8002178:	427f      	negs	r7, r7
 800217a:	1ac9      	subs	r1, r1, r3
 800217c:	1bcb      	subs	r3, r1, r7
 800217e:	4699      	mov	r9, r3
 8002180:	2301      	movs	r3, #1
 8002182:	465d      	mov	r5, fp
 8002184:	4698      	mov	r8, r3
 8002186:	e55e      	b.n	8001c46 <__aeabi_dsub+0xa2>
 8002188:	074b      	lsls	r3, r1, #29
 800218a:	08ff      	lsrs	r7, r7, #3
 800218c:	433b      	orrs	r3, r7
 800218e:	08cc      	lsrs	r4, r1, #3
 8002190:	e692      	b.n	8001eb8 <__aeabi_dsub+0x314>
 8002192:	1bdc      	subs	r4, r3, r7
 8002194:	4660      	mov	r0, ip
 8002196:	42a3      	cmp	r3, r4
 8002198:	41b6      	sbcs	r6, r6
 800219a:	1a40      	subs	r0, r0, r1
 800219c:	4276      	negs	r6, r6
 800219e:	1b80      	subs	r0, r0, r6
 80021a0:	4681      	mov	r9, r0
 80021a2:	0200      	lsls	r0, r0, #8
 80021a4:	d560      	bpl.n	8002268 <__aeabi_dsub+0x6c4>
 80021a6:	1afc      	subs	r4, r7, r3
 80021a8:	42a7      	cmp	r7, r4
 80021aa:	41bf      	sbcs	r7, r7
 80021ac:	4663      	mov	r3, ip
 80021ae:	427f      	negs	r7, r7
 80021b0:	1ac9      	subs	r1, r1, r3
 80021b2:	1bcb      	subs	r3, r1, r7
 80021b4:	4699      	mov	r9, r3
 80021b6:	465d      	mov	r5, fp
 80021b8:	e576      	b.n	8001ca8 <__aeabi_dsub+0x104>
 80021ba:	08ff      	lsrs	r7, r7, #3
 80021bc:	074b      	lsls	r3, r1, #29
 80021be:	433b      	orrs	r3, r7
 80021c0:	08cc      	lsrs	r4, r1, #3
 80021c2:	e667      	b.n	8001e94 <__aeabi_dsub+0x2f0>
 80021c4:	000a      	movs	r2, r1
 80021c6:	08db      	lsrs	r3, r3, #3
 80021c8:	433a      	orrs	r2, r7
 80021ca:	d100      	bne.n	80021ce <__aeabi_dsub+0x62a>
 80021cc:	e66f      	b.n	8001eae <__aeabi_dsub+0x30a>
 80021ce:	4662      	mov	r2, ip
 80021d0:	0752      	lsls	r2, r2, #29
 80021d2:	4313      	orrs	r3, r2
 80021d4:	4662      	mov	r2, ip
 80021d6:	08d4      	lsrs	r4, r2, #3
 80021d8:	2280      	movs	r2, #128	; 0x80
 80021da:	0312      	lsls	r2, r2, #12
 80021dc:	4214      	tst	r4, r2
 80021de:	d007      	beq.n	80021f0 <__aeabi_dsub+0x64c>
 80021e0:	08c8      	lsrs	r0, r1, #3
 80021e2:	4210      	tst	r0, r2
 80021e4:	d104      	bne.n	80021f0 <__aeabi_dsub+0x64c>
 80021e6:	465d      	mov	r5, fp
 80021e8:	0004      	movs	r4, r0
 80021ea:	08fb      	lsrs	r3, r7, #3
 80021ec:	0749      	lsls	r1, r1, #29
 80021ee:	430b      	orrs	r3, r1
 80021f0:	0f5a      	lsrs	r2, r3, #29
 80021f2:	00db      	lsls	r3, r3, #3
 80021f4:	08db      	lsrs	r3, r3, #3
 80021f6:	0752      	lsls	r2, r2, #29
 80021f8:	4313      	orrs	r3, r2
 80021fa:	e65d      	b.n	8001eb8 <__aeabi_dsub+0x314>
 80021fc:	074b      	lsls	r3, r1, #29
 80021fe:	08ff      	lsrs	r7, r7, #3
 8002200:	433b      	orrs	r3, r7
 8002202:	08cc      	lsrs	r4, r1, #3
 8002204:	e649      	b.n	8001e9a <__aeabi_dsub+0x2f6>
 8002206:	19dc      	adds	r4, r3, r7
 8002208:	429c      	cmp	r4, r3
 800220a:	419b      	sbcs	r3, r3
 800220c:	4461      	add	r1, ip
 800220e:	4689      	mov	r9, r1
 8002210:	425b      	negs	r3, r3
 8002212:	4499      	add	r9, r3
 8002214:	464b      	mov	r3, r9
 8002216:	021b      	lsls	r3, r3, #8
 8002218:	d400      	bmi.n	800221c <__aeabi_dsub+0x678>
 800221a:	e631      	b.n	8001e80 <__aeabi_dsub+0x2dc>
 800221c:	464a      	mov	r2, r9
 800221e:	4b17      	ldr	r3, [pc, #92]	; (800227c <__aeabi_dsub+0x6d8>)
 8002220:	401a      	ands	r2, r3
 8002222:	2301      	movs	r3, #1
 8002224:	4691      	mov	r9, r2
 8002226:	4698      	mov	r8, r3
 8002228:	e62a      	b.n	8001e80 <__aeabi_dsub+0x2dc>
 800222a:	0016      	movs	r6, r2
 800222c:	4664      	mov	r4, ip
 800222e:	3e20      	subs	r6, #32
 8002230:	40f4      	lsrs	r4, r6
 8002232:	46a0      	mov	r8, r4
 8002234:	2a20      	cmp	r2, #32
 8002236:	d005      	beq.n	8002244 <__aeabi_dsub+0x6a0>
 8002238:	2640      	movs	r6, #64	; 0x40
 800223a:	4664      	mov	r4, ip
 800223c:	1ab2      	subs	r2, r6, r2
 800223e:	4094      	lsls	r4, r2
 8002240:	4323      	orrs	r3, r4
 8002242:	469a      	mov	sl, r3
 8002244:	4654      	mov	r4, sl
 8002246:	1e63      	subs	r3, r4, #1
 8002248:	419c      	sbcs	r4, r3
 800224a:	4643      	mov	r3, r8
 800224c:	431c      	orrs	r4, r3
 800224e:	e5db      	b.n	8001e08 <__aeabi_dsub+0x264>
 8002250:	0002      	movs	r2, r0
 8002252:	2400      	movs	r4, #0
 8002254:	2300      	movs	r3, #0
 8002256:	e548      	b.n	8001cea <__aeabi_dsub+0x146>
 8002258:	19dc      	adds	r4, r3, r7
 800225a:	42bc      	cmp	r4, r7
 800225c:	41bf      	sbcs	r7, r7
 800225e:	4461      	add	r1, ip
 8002260:	4689      	mov	r9, r1
 8002262:	427f      	negs	r7, r7
 8002264:	44b9      	add	r9, r7
 8002266:	e738      	b.n	80020da <__aeabi_dsub+0x536>
 8002268:	464b      	mov	r3, r9
 800226a:	4323      	orrs	r3, r4
 800226c:	d100      	bne.n	8002270 <__aeabi_dsub+0x6cc>
 800226e:	e69f      	b.n	8001fb0 <__aeabi_dsub+0x40c>
 8002270:	e606      	b.n	8001e80 <__aeabi_dsub+0x2dc>
 8002272:	46c0      	nop			; (mov r8, r8)
 8002274:	000007fe 	.word	0x000007fe
 8002278:	000007ff 	.word	0x000007ff
 800227c:	ff7fffff 	.word	0xff7fffff
 8002280:	08ff      	lsrs	r7, r7, #3
 8002282:	074b      	lsls	r3, r1, #29
 8002284:	433b      	orrs	r3, r7
 8002286:	08cc      	lsrs	r4, r1, #3
 8002288:	e616      	b.n	8001eb8 <__aeabi_dsub+0x314>
 800228a:	4662      	mov	r2, ip
 800228c:	08db      	lsrs	r3, r3, #3
 800228e:	0752      	lsls	r2, r2, #29
 8002290:	4313      	orrs	r3, r2
 8002292:	4662      	mov	r2, ip
 8002294:	08d4      	lsrs	r4, r2, #3
 8002296:	2280      	movs	r2, #128	; 0x80
 8002298:	0312      	lsls	r2, r2, #12
 800229a:	4214      	tst	r4, r2
 800229c:	d007      	beq.n	80022ae <__aeabi_dsub+0x70a>
 800229e:	08c8      	lsrs	r0, r1, #3
 80022a0:	4210      	tst	r0, r2
 80022a2:	d104      	bne.n	80022ae <__aeabi_dsub+0x70a>
 80022a4:	465d      	mov	r5, fp
 80022a6:	0004      	movs	r4, r0
 80022a8:	08fb      	lsrs	r3, r7, #3
 80022aa:	0749      	lsls	r1, r1, #29
 80022ac:	430b      	orrs	r3, r1
 80022ae:	0f5a      	lsrs	r2, r3, #29
 80022b0:	00db      	lsls	r3, r3, #3
 80022b2:	0752      	lsls	r2, r2, #29
 80022b4:	08db      	lsrs	r3, r3, #3
 80022b6:	4313      	orrs	r3, r2
 80022b8:	e5fe      	b.n	8001eb8 <__aeabi_dsub+0x314>
 80022ba:	2300      	movs	r3, #0
 80022bc:	4a01      	ldr	r2, [pc, #4]	; (80022c4 <__aeabi_dsub+0x720>)
 80022be:	001c      	movs	r4, r3
 80022c0:	e513      	b.n	8001cea <__aeabi_dsub+0x146>
 80022c2:	46c0      	nop			; (mov r8, r8)
 80022c4:	000007ff 	.word	0x000007ff

080022c8 <__aeabi_dcmpun>:
 80022c8:	b570      	push	{r4, r5, r6, lr}
 80022ca:	0005      	movs	r5, r0
 80022cc:	480c      	ldr	r0, [pc, #48]	; (8002300 <__aeabi_dcmpun+0x38>)
 80022ce:	031c      	lsls	r4, r3, #12
 80022d0:	0016      	movs	r6, r2
 80022d2:	005b      	lsls	r3, r3, #1
 80022d4:	030a      	lsls	r2, r1, #12
 80022d6:	0049      	lsls	r1, r1, #1
 80022d8:	0b12      	lsrs	r2, r2, #12
 80022da:	0d49      	lsrs	r1, r1, #21
 80022dc:	0b24      	lsrs	r4, r4, #12
 80022de:	0d5b      	lsrs	r3, r3, #21
 80022e0:	4281      	cmp	r1, r0
 80022e2:	d008      	beq.n	80022f6 <__aeabi_dcmpun+0x2e>
 80022e4:	4a06      	ldr	r2, [pc, #24]	; (8002300 <__aeabi_dcmpun+0x38>)
 80022e6:	2000      	movs	r0, #0
 80022e8:	4293      	cmp	r3, r2
 80022ea:	d103      	bne.n	80022f4 <__aeabi_dcmpun+0x2c>
 80022ec:	0020      	movs	r0, r4
 80022ee:	4330      	orrs	r0, r6
 80022f0:	1e43      	subs	r3, r0, #1
 80022f2:	4198      	sbcs	r0, r3
 80022f4:	bd70      	pop	{r4, r5, r6, pc}
 80022f6:	2001      	movs	r0, #1
 80022f8:	432a      	orrs	r2, r5
 80022fa:	d1fb      	bne.n	80022f4 <__aeabi_dcmpun+0x2c>
 80022fc:	e7f2      	b.n	80022e4 <__aeabi_dcmpun+0x1c>
 80022fe:	46c0      	nop			; (mov r8, r8)
 8002300:	000007ff 	.word	0x000007ff

08002304 <__aeabi_d2iz>:
 8002304:	000a      	movs	r2, r1
 8002306:	b530      	push	{r4, r5, lr}
 8002308:	4c13      	ldr	r4, [pc, #76]	; (8002358 <__aeabi_d2iz+0x54>)
 800230a:	0053      	lsls	r3, r2, #1
 800230c:	0309      	lsls	r1, r1, #12
 800230e:	0005      	movs	r5, r0
 8002310:	0b09      	lsrs	r1, r1, #12
 8002312:	2000      	movs	r0, #0
 8002314:	0d5b      	lsrs	r3, r3, #21
 8002316:	0fd2      	lsrs	r2, r2, #31
 8002318:	42a3      	cmp	r3, r4
 800231a:	dd04      	ble.n	8002326 <__aeabi_d2iz+0x22>
 800231c:	480f      	ldr	r0, [pc, #60]	; (800235c <__aeabi_d2iz+0x58>)
 800231e:	4283      	cmp	r3, r0
 8002320:	dd02      	ble.n	8002328 <__aeabi_d2iz+0x24>
 8002322:	4b0f      	ldr	r3, [pc, #60]	; (8002360 <__aeabi_d2iz+0x5c>)
 8002324:	18d0      	adds	r0, r2, r3
 8002326:	bd30      	pop	{r4, r5, pc}
 8002328:	2080      	movs	r0, #128	; 0x80
 800232a:	0340      	lsls	r0, r0, #13
 800232c:	4301      	orrs	r1, r0
 800232e:	480d      	ldr	r0, [pc, #52]	; (8002364 <__aeabi_d2iz+0x60>)
 8002330:	1ac0      	subs	r0, r0, r3
 8002332:	281f      	cmp	r0, #31
 8002334:	dd08      	ble.n	8002348 <__aeabi_d2iz+0x44>
 8002336:	480c      	ldr	r0, [pc, #48]	; (8002368 <__aeabi_d2iz+0x64>)
 8002338:	1ac3      	subs	r3, r0, r3
 800233a:	40d9      	lsrs	r1, r3
 800233c:	000b      	movs	r3, r1
 800233e:	4258      	negs	r0, r3
 8002340:	2a00      	cmp	r2, #0
 8002342:	d1f0      	bne.n	8002326 <__aeabi_d2iz+0x22>
 8002344:	0018      	movs	r0, r3
 8002346:	e7ee      	b.n	8002326 <__aeabi_d2iz+0x22>
 8002348:	4c08      	ldr	r4, [pc, #32]	; (800236c <__aeabi_d2iz+0x68>)
 800234a:	40c5      	lsrs	r5, r0
 800234c:	46a4      	mov	ip, r4
 800234e:	4463      	add	r3, ip
 8002350:	4099      	lsls	r1, r3
 8002352:	000b      	movs	r3, r1
 8002354:	432b      	orrs	r3, r5
 8002356:	e7f2      	b.n	800233e <__aeabi_d2iz+0x3a>
 8002358:	000003fe 	.word	0x000003fe
 800235c:	0000041d 	.word	0x0000041d
 8002360:	7fffffff 	.word	0x7fffffff
 8002364:	00000433 	.word	0x00000433
 8002368:	00000413 	.word	0x00000413
 800236c:	fffffbed 	.word	0xfffffbed

08002370 <__aeabi_i2d>:
 8002370:	b570      	push	{r4, r5, r6, lr}
 8002372:	2800      	cmp	r0, #0
 8002374:	d016      	beq.n	80023a4 <__aeabi_i2d+0x34>
 8002376:	17c3      	asrs	r3, r0, #31
 8002378:	18c5      	adds	r5, r0, r3
 800237a:	405d      	eors	r5, r3
 800237c:	0fc4      	lsrs	r4, r0, #31
 800237e:	0028      	movs	r0, r5
 8002380:	f000 f91c 	bl	80025bc <__clzsi2>
 8002384:	4a11      	ldr	r2, [pc, #68]	; (80023cc <__aeabi_i2d+0x5c>)
 8002386:	1a12      	subs	r2, r2, r0
 8002388:	280a      	cmp	r0, #10
 800238a:	dc16      	bgt.n	80023ba <__aeabi_i2d+0x4a>
 800238c:	0003      	movs	r3, r0
 800238e:	002e      	movs	r6, r5
 8002390:	3315      	adds	r3, #21
 8002392:	409e      	lsls	r6, r3
 8002394:	230b      	movs	r3, #11
 8002396:	1a18      	subs	r0, r3, r0
 8002398:	40c5      	lsrs	r5, r0
 800239a:	0552      	lsls	r2, r2, #21
 800239c:	032d      	lsls	r5, r5, #12
 800239e:	0b2d      	lsrs	r5, r5, #12
 80023a0:	0d53      	lsrs	r3, r2, #21
 80023a2:	e003      	b.n	80023ac <__aeabi_i2d+0x3c>
 80023a4:	2400      	movs	r4, #0
 80023a6:	2300      	movs	r3, #0
 80023a8:	2500      	movs	r5, #0
 80023aa:	2600      	movs	r6, #0
 80023ac:	051b      	lsls	r3, r3, #20
 80023ae:	432b      	orrs	r3, r5
 80023b0:	07e4      	lsls	r4, r4, #31
 80023b2:	4323      	orrs	r3, r4
 80023b4:	0030      	movs	r0, r6
 80023b6:	0019      	movs	r1, r3
 80023b8:	bd70      	pop	{r4, r5, r6, pc}
 80023ba:	380b      	subs	r0, #11
 80023bc:	4085      	lsls	r5, r0
 80023be:	0552      	lsls	r2, r2, #21
 80023c0:	032d      	lsls	r5, r5, #12
 80023c2:	2600      	movs	r6, #0
 80023c4:	0b2d      	lsrs	r5, r5, #12
 80023c6:	0d53      	lsrs	r3, r2, #21
 80023c8:	e7f0      	b.n	80023ac <__aeabi_i2d+0x3c>
 80023ca:	46c0      	nop			; (mov r8, r8)
 80023cc:	0000041e 	.word	0x0000041e

080023d0 <__aeabi_ui2d>:
 80023d0:	b510      	push	{r4, lr}
 80023d2:	1e04      	subs	r4, r0, #0
 80023d4:	d010      	beq.n	80023f8 <__aeabi_ui2d+0x28>
 80023d6:	f000 f8f1 	bl	80025bc <__clzsi2>
 80023da:	4b0f      	ldr	r3, [pc, #60]	; (8002418 <__aeabi_ui2d+0x48>)
 80023dc:	1a1b      	subs	r3, r3, r0
 80023de:	280a      	cmp	r0, #10
 80023e0:	dc11      	bgt.n	8002406 <__aeabi_ui2d+0x36>
 80023e2:	220b      	movs	r2, #11
 80023e4:	0021      	movs	r1, r4
 80023e6:	1a12      	subs	r2, r2, r0
 80023e8:	40d1      	lsrs	r1, r2
 80023ea:	3015      	adds	r0, #21
 80023ec:	030a      	lsls	r2, r1, #12
 80023ee:	055b      	lsls	r3, r3, #21
 80023f0:	4084      	lsls	r4, r0
 80023f2:	0b12      	lsrs	r2, r2, #12
 80023f4:	0d5b      	lsrs	r3, r3, #21
 80023f6:	e001      	b.n	80023fc <__aeabi_ui2d+0x2c>
 80023f8:	2300      	movs	r3, #0
 80023fa:	2200      	movs	r2, #0
 80023fc:	051b      	lsls	r3, r3, #20
 80023fe:	4313      	orrs	r3, r2
 8002400:	0020      	movs	r0, r4
 8002402:	0019      	movs	r1, r3
 8002404:	bd10      	pop	{r4, pc}
 8002406:	0022      	movs	r2, r4
 8002408:	380b      	subs	r0, #11
 800240a:	4082      	lsls	r2, r0
 800240c:	055b      	lsls	r3, r3, #21
 800240e:	0312      	lsls	r2, r2, #12
 8002410:	2400      	movs	r4, #0
 8002412:	0b12      	lsrs	r2, r2, #12
 8002414:	0d5b      	lsrs	r3, r3, #21
 8002416:	e7f1      	b.n	80023fc <__aeabi_ui2d+0x2c>
 8002418:	0000041e 	.word	0x0000041e

0800241c <__aeabi_f2d>:
 800241c:	b570      	push	{r4, r5, r6, lr}
 800241e:	0043      	lsls	r3, r0, #1
 8002420:	0246      	lsls	r6, r0, #9
 8002422:	0fc4      	lsrs	r4, r0, #31
 8002424:	20fe      	movs	r0, #254	; 0xfe
 8002426:	0e1b      	lsrs	r3, r3, #24
 8002428:	1c59      	adds	r1, r3, #1
 800242a:	0a75      	lsrs	r5, r6, #9
 800242c:	4208      	tst	r0, r1
 800242e:	d00c      	beq.n	800244a <__aeabi_f2d+0x2e>
 8002430:	22e0      	movs	r2, #224	; 0xe0
 8002432:	0092      	lsls	r2, r2, #2
 8002434:	4694      	mov	ip, r2
 8002436:	076d      	lsls	r5, r5, #29
 8002438:	0b36      	lsrs	r6, r6, #12
 800243a:	4463      	add	r3, ip
 800243c:	051b      	lsls	r3, r3, #20
 800243e:	4333      	orrs	r3, r6
 8002440:	07e4      	lsls	r4, r4, #31
 8002442:	4323      	orrs	r3, r4
 8002444:	0028      	movs	r0, r5
 8002446:	0019      	movs	r1, r3
 8002448:	bd70      	pop	{r4, r5, r6, pc}
 800244a:	2b00      	cmp	r3, #0
 800244c:	d114      	bne.n	8002478 <__aeabi_f2d+0x5c>
 800244e:	2d00      	cmp	r5, #0
 8002450:	d01b      	beq.n	800248a <__aeabi_f2d+0x6e>
 8002452:	0028      	movs	r0, r5
 8002454:	f000 f8b2 	bl	80025bc <__clzsi2>
 8002458:	280a      	cmp	r0, #10
 800245a:	dc1c      	bgt.n	8002496 <__aeabi_f2d+0x7a>
 800245c:	230b      	movs	r3, #11
 800245e:	002e      	movs	r6, r5
 8002460:	1a1b      	subs	r3, r3, r0
 8002462:	40de      	lsrs	r6, r3
 8002464:	0003      	movs	r3, r0
 8002466:	3315      	adds	r3, #21
 8002468:	409d      	lsls	r5, r3
 800246a:	4a0e      	ldr	r2, [pc, #56]	; (80024a4 <__aeabi_f2d+0x88>)
 800246c:	0336      	lsls	r6, r6, #12
 800246e:	1a12      	subs	r2, r2, r0
 8002470:	0552      	lsls	r2, r2, #21
 8002472:	0b36      	lsrs	r6, r6, #12
 8002474:	0d53      	lsrs	r3, r2, #21
 8002476:	e7e1      	b.n	800243c <__aeabi_f2d+0x20>
 8002478:	2d00      	cmp	r5, #0
 800247a:	d009      	beq.n	8002490 <__aeabi_f2d+0x74>
 800247c:	2280      	movs	r2, #128	; 0x80
 800247e:	0b36      	lsrs	r6, r6, #12
 8002480:	0312      	lsls	r2, r2, #12
 8002482:	4b09      	ldr	r3, [pc, #36]	; (80024a8 <__aeabi_f2d+0x8c>)
 8002484:	076d      	lsls	r5, r5, #29
 8002486:	4316      	orrs	r6, r2
 8002488:	e7d8      	b.n	800243c <__aeabi_f2d+0x20>
 800248a:	2300      	movs	r3, #0
 800248c:	2600      	movs	r6, #0
 800248e:	e7d5      	b.n	800243c <__aeabi_f2d+0x20>
 8002490:	2600      	movs	r6, #0
 8002492:	4b05      	ldr	r3, [pc, #20]	; (80024a8 <__aeabi_f2d+0x8c>)
 8002494:	e7d2      	b.n	800243c <__aeabi_f2d+0x20>
 8002496:	0003      	movs	r3, r0
 8002498:	3b0b      	subs	r3, #11
 800249a:	409d      	lsls	r5, r3
 800249c:	002e      	movs	r6, r5
 800249e:	2500      	movs	r5, #0
 80024a0:	e7e3      	b.n	800246a <__aeabi_f2d+0x4e>
 80024a2:	46c0      	nop			; (mov r8, r8)
 80024a4:	00000389 	.word	0x00000389
 80024a8:	000007ff 	.word	0x000007ff

080024ac <__aeabi_d2f>:
 80024ac:	0002      	movs	r2, r0
 80024ae:	004b      	lsls	r3, r1, #1
 80024b0:	b5f0      	push	{r4, r5, r6, r7, lr}
 80024b2:	0d5b      	lsrs	r3, r3, #21
 80024b4:	030c      	lsls	r4, r1, #12
 80024b6:	4e3d      	ldr	r6, [pc, #244]	; (80025ac <__aeabi_d2f+0x100>)
 80024b8:	0a64      	lsrs	r4, r4, #9
 80024ba:	0f40      	lsrs	r0, r0, #29
 80024bc:	1c5f      	adds	r7, r3, #1
 80024be:	0fc9      	lsrs	r1, r1, #31
 80024c0:	4304      	orrs	r4, r0
 80024c2:	00d5      	lsls	r5, r2, #3
 80024c4:	4237      	tst	r7, r6
 80024c6:	d00a      	beq.n	80024de <__aeabi_d2f+0x32>
 80024c8:	4839      	ldr	r0, [pc, #228]	; (80025b0 <__aeabi_d2f+0x104>)
 80024ca:	181e      	adds	r6, r3, r0
 80024cc:	2efe      	cmp	r6, #254	; 0xfe
 80024ce:	dd16      	ble.n	80024fe <__aeabi_d2f+0x52>
 80024d0:	20ff      	movs	r0, #255	; 0xff
 80024d2:	2400      	movs	r4, #0
 80024d4:	05c0      	lsls	r0, r0, #23
 80024d6:	4320      	orrs	r0, r4
 80024d8:	07c9      	lsls	r1, r1, #31
 80024da:	4308      	orrs	r0, r1
 80024dc:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80024de:	2b00      	cmp	r3, #0
 80024e0:	d106      	bne.n	80024f0 <__aeabi_d2f+0x44>
 80024e2:	432c      	orrs	r4, r5
 80024e4:	d026      	beq.n	8002534 <__aeabi_d2f+0x88>
 80024e6:	2205      	movs	r2, #5
 80024e8:	0192      	lsls	r2, r2, #6
 80024ea:	0a54      	lsrs	r4, r2, #9
 80024ec:	b2d8      	uxtb	r0, r3
 80024ee:	e7f1      	b.n	80024d4 <__aeabi_d2f+0x28>
 80024f0:	4325      	orrs	r5, r4
 80024f2:	d0ed      	beq.n	80024d0 <__aeabi_d2f+0x24>
 80024f4:	2080      	movs	r0, #128	; 0x80
 80024f6:	03c0      	lsls	r0, r0, #15
 80024f8:	4304      	orrs	r4, r0
 80024fa:	20ff      	movs	r0, #255	; 0xff
 80024fc:	e7ea      	b.n	80024d4 <__aeabi_d2f+0x28>
 80024fe:	2e00      	cmp	r6, #0
 8002500:	dd1b      	ble.n	800253a <__aeabi_d2f+0x8e>
 8002502:	0192      	lsls	r2, r2, #6
 8002504:	1e53      	subs	r3, r2, #1
 8002506:	419a      	sbcs	r2, r3
 8002508:	00e4      	lsls	r4, r4, #3
 800250a:	0f6d      	lsrs	r5, r5, #29
 800250c:	4322      	orrs	r2, r4
 800250e:	432a      	orrs	r2, r5
 8002510:	0753      	lsls	r3, r2, #29
 8002512:	d048      	beq.n	80025a6 <__aeabi_d2f+0xfa>
 8002514:	230f      	movs	r3, #15
 8002516:	4013      	ands	r3, r2
 8002518:	2b04      	cmp	r3, #4
 800251a:	d000      	beq.n	800251e <__aeabi_d2f+0x72>
 800251c:	3204      	adds	r2, #4
 800251e:	2380      	movs	r3, #128	; 0x80
 8002520:	04db      	lsls	r3, r3, #19
 8002522:	4013      	ands	r3, r2
 8002524:	d03f      	beq.n	80025a6 <__aeabi_d2f+0xfa>
 8002526:	1c70      	adds	r0, r6, #1
 8002528:	2efe      	cmp	r6, #254	; 0xfe
 800252a:	d0d1      	beq.n	80024d0 <__aeabi_d2f+0x24>
 800252c:	0192      	lsls	r2, r2, #6
 800252e:	0a54      	lsrs	r4, r2, #9
 8002530:	b2c0      	uxtb	r0, r0
 8002532:	e7cf      	b.n	80024d4 <__aeabi_d2f+0x28>
 8002534:	2000      	movs	r0, #0
 8002536:	2400      	movs	r4, #0
 8002538:	e7cc      	b.n	80024d4 <__aeabi_d2f+0x28>
 800253a:	0032      	movs	r2, r6
 800253c:	3217      	adds	r2, #23
 800253e:	db22      	blt.n	8002586 <__aeabi_d2f+0xda>
 8002540:	2080      	movs	r0, #128	; 0x80
 8002542:	0400      	lsls	r0, r0, #16
 8002544:	4320      	orrs	r0, r4
 8002546:	241e      	movs	r4, #30
 8002548:	1ba4      	subs	r4, r4, r6
 800254a:	2c1f      	cmp	r4, #31
 800254c:	dd1d      	ble.n	800258a <__aeabi_d2f+0xde>
 800254e:	2202      	movs	r2, #2
 8002550:	4252      	negs	r2, r2
 8002552:	1b96      	subs	r6, r2, r6
 8002554:	0002      	movs	r2, r0
 8002556:	40f2      	lsrs	r2, r6
 8002558:	0016      	movs	r6, r2
 800255a:	2c20      	cmp	r4, #32
 800255c:	d004      	beq.n	8002568 <__aeabi_d2f+0xbc>
 800255e:	4a15      	ldr	r2, [pc, #84]	; (80025b4 <__aeabi_d2f+0x108>)
 8002560:	4694      	mov	ip, r2
 8002562:	4463      	add	r3, ip
 8002564:	4098      	lsls	r0, r3
 8002566:	4305      	orrs	r5, r0
 8002568:	002a      	movs	r2, r5
 800256a:	1e53      	subs	r3, r2, #1
 800256c:	419a      	sbcs	r2, r3
 800256e:	4332      	orrs	r2, r6
 8002570:	2600      	movs	r6, #0
 8002572:	0753      	lsls	r3, r2, #29
 8002574:	d1ce      	bne.n	8002514 <__aeabi_d2f+0x68>
 8002576:	2480      	movs	r4, #128	; 0x80
 8002578:	0013      	movs	r3, r2
 800257a:	04e4      	lsls	r4, r4, #19
 800257c:	2001      	movs	r0, #1
 800257e:	4023      	ands	r3, r4
 8002580:	4222      	tst	r2, r4
 8002582:	d1d3      	bne.n	800252c <__aeabi_d2f+0x80>
 8002584:	e7b0      	b.n	80024e8 <__aeabi_d2f+0x3c>
 8002586:	2300      	movs	r3, #0
 8002588:	e7ad      	b.n	80024e6 <__aeabi_d2f+0x3a>
 800258a:	4a0b      	ldr	r2, [pc, #44]	; (80025b8 <__aeabi_d2f+0x10c>)
 800258c:	4694      	mov	ip, r2
 800258e:	002a      	movs	r2, r5
 8002590:	40e2      	lsrs	r2, r4
 8002592:	0014      	movs	r4, r2
 8002594:	002a      	movs	r2, r5
 8002596:	4463      	add	r3, ip
 8002598:	409a      	lsls	r2, r3
 800259a:	4098      	lsls	r0, r3
 800259c:	1e55      	subs	r5, r2, #1
 800259e:	41aa      	sbcs	r2, r5
 80025a0:	4302      	orrs	r2, r0
 80025a2:	4322      	orrs	r2, r4
 80025a4:	e7e4      	b.n	8002570 <__aeabi_d2f+0xc4>
 80025a6:	0033      	movs	r3, r6
 80025a8:	e79e      	b.n	80024e8 <__aeabi_d2f+0x3c>
 80025aa:	46c0      	nop			; (mov r8, r8)
 80025ac:	000007fe 	.word	0x000007fe
 80025b0:	fffffc80 	.word	0xfffffc80
 80025b4:	fffffca2 	.word	0xfffffca2
 80025b8:	fffffc82 	.word	0xfffffc82

080025bc <__clzsi2>:
 80025bc:	211c      	movs	r1, #28
 80025be:	2301      	movs	r3, #1
 80025c0:	041b      	lsls	r3, r3, #16
 80025c2:	4298      	cmp	r0, r3
 80025c4:	d301      	bcc.n	80025ca <__clzsi2+0xe>
 80025c6:	0c00      	lsrs	r0, r0, #16
 80025c8:	3910      	subs	r1, #16
 80025ca:	0a1b      	lsrs	r3, r3, #8
 80025cc:	4298      	cmp	r0, r3
 80025ce:	d301      	bcc.n	80025d4 <__clzsi2+0x18>
 80025d0:	0a00      	lsrs	r0, r0, #8
 80025d2:	3908      	subs	r1, #8
 80025d4:	091b      	lsrs	r3, r3, #4
 80025d6:	4298      	cmp	r0, r3
 80025d8:	d301      	bcc.n	80025de <__clzsi2+0x22>
 80025da:	0900      	lsrs	r0, r0, #4
 80025dc:	3904      	subs	r1, #4
 80025de:	a202      	add	r2, pc, #8	; (adr r2, 80025e8 <__clzsi2+0x2c>)
 80025e0:	5c10      	ldrb	r0, [r2, r0]
 80025e2:	1840      	adds	r0, r0, r1
 80025e4:	4770      	bx	lr
 80025e6:	46c0      	nop			; (mov r8, r8)
 80025e8:	02020304 	.word	0x02020304
 80025ec:	01010101 	.word	0x01010101
	...

080025f8 <__clzdi2>:
 80025f8:	b510      	push	{r4, lr}
 80025fa:	2900      	cmp	r1, #0
 80025fc:	d103      	bne.n	8002606 <__clzdi2+0xe>
 80025fe:	f7ff ffdd 	bl	80025bc <__clzsi2>
 8002602:	3020      	adds	r0, #32
 8002604:	e002      	b.n	800260c <__clzdi2+0x14>
 8002606:	0008      	movs	r0, r1
 8002608:	f7ff ffd8 	bl	80025bc <__clzsi2>
 800260c:	bd10      	pop	{r4, pc}
 800260e:	46c0      	nop			; (mov r8, r8)

08002610 <HD44780_Init>:
static void ExpanderWrite(uint8_t);
static void PulseEnable(uint8_t);
static void DelayInit(void);

void HD44780_Init(uint8_t rows)
{
 8002610:	b580      	push	{r7, lr}
 8002612:	b082      	sub	sp, #8
 8002614:	af00      	add	r7, sp, #0
 8002616:	0002      	movs	r2, r0
 8002618:	1dfb      	adds	r3, r7, #7
 800261a:	701a      	strb	r2, [r3, #0]
  dpRows = rows;
 800261c:	4b2f      	ldr	r3, [pc, #188]	; (80026dc <HD44780_Init+0xcc>)
 800261e:	1dfa      	adds	r2, r7, #7
 8002620:	7812      	ldrb	r2, [r2, #0]
 8002622:	701a      	strb	r2, [r3, #0]

  dpBacklight = LCD_BACKLIGHT;
 8002624:	4b2e      	ldr	r3, [pc, #184]	; (80026e0 <HD44780_Init+0xd0>)
 8002626:	2208      	movs	r2, #8
 8002628:	701a      	strb	r2, [r3, #0]

  dpFunction = LCD_4BITMODE | LCD_1LINE | LCD_5x8DOTS;
 800262a:	4b2e      	ldr	r3, [pc, #184]	; (80026e4 <HD44780_Init+0xd4>)
 800262c:	2200      	movs	r2, #0
 800262e:	701a      	strb	r2, [r3, #0]

  if (dpRows > 1)
 8002630:	4b2a      	ldr	r3, [pc, #168]	; (80026dc <HD44780_Init+0xcc>)
 8002632:	781b      	ldrb	r3, [r3, #0]
 8002634:	2b01      	cmp	r3, #1
 8002636:	d907      	bls.n	8002648 <HD44780_Init+0x38>
  {
    dpFunction |= LCD_2LINE;
 8002638:	4b2a      	ldr	r3, [pc, #168]	; (80026e4 <HD44780_Init+0xd4>)
 800263a:	781b      	ldrb	r3, [r3, #0]
 800263c:	2208      	movs	r2, #8
 800263e:	4313      	orrs	r3, r2
 8002640:	b2da      	uxtb	r2, r3
 8002642:	4b28      	ldr	r3, [pc, #160]	; (80026e4 <HD44780_Init+0xd4>)
 8002644:	701a      	strb	r2, [r3, #0]
 8002646:	e006      	b.n	8002656 <HD44780_Init+0x46>
  }
  else
  {
    dpFunction |= LCD_5x10DOTS;
 8002648:	4b26      	ldr	r3, [pc, #152]	; (80026e4 <HD44780_Init+0xd4>)
 800264a:	781b      	ldrb	r3, [r3, #0]
 800264c:	2204      	movs	r2, #4
 800264e:	4313      	orrs	r3, r2
 8002650:	b2da      	uxtb	r2, r3
 8002652:	4b24      	ldr	r3, [pc, #144]	; (80026e4 <HD44780_Init+0xd4>)
 8002654:	701a      	strb	r2, [r3, #0]
  }

  ExpanderWrite(dpBacklight);
 8002656:	4b22      	ldr	r3, [pc, #136]	; (80026e0 <HD44780_Init+0xd0>)
 8002658:	781b      	ldrb	r3, [r3, #0]
 800265a:	0018      	movs	r0, r3
 800265c:	f000 f95e 	bl	800291c <ExpanderWrite>
  HAL_Delay(10);
 8002660:	200a      	movs	r0, #10
 8002662:	f001 f83d 	bl	80036e0 <HAL_Delay>

  /* 4bit Mode */
  Write4Bits(0x03 << 4);
 8002666:	2030      	movs	r0, #48	; 0x30
 8002668:	f000 f943 	bl	80028f2 <Write4Bits>
  HAL_Delay(45);
 800266c:	202d      	movs	r0, #45	; 0x2d
 800266e:	f001 f837 	bl	80036e0 <HAL_Delay>

  Write4Bits(0x03 << 4);
 8002672:	2030      	movs	r0, #48	; 0x30
 8002674:	f000 f93d 	bl	80028f2 <Write4Bits>
  HAL_Delay(45);
 8002678:	202d      	movs	r0, #45	; 0x2d
 800267a:	f001 f831 	bl	80036e0 <HAL_Delay>

  Write4Bits(0x03 << 4);
 800267e:	2030      	movs	r0, #48	; 0x30
 8002680:	f000 f937 	bl	80028f2 <Write4Bits>
  HAL_Delay(45);
 8002684:	202d      	movs	r0, #45	; 0x2d
 8002686:	f001 f82b 	bl	80036e0 <HAL_Delay>

  Write4Bits(0x02 << 4);
 800268a:	2020      	movs	r0, #32
 800268c:	f000 f931 	bl	80028f2 <Write4Bits>
  HAL_Delay(1);
 8002690:	2001      	movs	r0, #1
 8002692:	f001 f825 	bl	80036e0 <HAL_Delay>

  /* Display Control */
  SendCommand(LCD_FUNCTIONSET | dpFunction);
 8002696:	4b13      	ldr	r3, [pc, #76]	; (80026e4 <HD44780_Init+0xd4>)
 8002698:	781b      	ldrb	r3, [r3, #0]
 800269a:	2220      	movs	r2, #32
 800269c:	4313      	orrs	r3, r2
 800269e:	b2db      	uxtb	r3, r3
 80026a0:	0018      	movs	r0, r3
 80026a2:	f000 f8da 	bl	800285a <SendCommand>

  dpControl = LCD_DISPLAYON | LCD_CURSOROFF | LCD_BLINKOFF;
 80026a6:	4b10      	ldr	r3, [pc, #64]	; (80026e8 <HD44780_Init+0xd8>)
 80026a8:	2204      	movs	r2, #4
 80026aa:	701a      	strb	r2, [r3, #0]
  HD44780_Display();
 80026ac:	f000 f86e 	bl	800278c <HD44780_Display>
  HD44780_Clear();
 80026b0:	f000 f81e 	bl	80026f0 <HD44780_Clear>

  /* Display Mode */
  dpMode = LCD_ENTRYLEFT | LCD_ENTRYSHIFTDECREMENT;
 80026b4:	4b0d      	ldr	r3, [pc, #52]	; (80026ec <HD44780_Init+0xdc>)
 80026b6:	2202      	movs	r2, #2
 80026b8:	701a      	strb	r2, [r3, #0]
  SendCommand(LCD_ENTRYMODESET | dpMode);
 80026ba:	4b0c      	ldr	r3, [pc, #48]	; (80026ec <HD44780_Init+0xdc>)
 80026bc:	781b      	ldrb	r3, [r3, #0]
 80026be:	2204      	movs	r2, #4
 80026c0:	4313      	orrs	r3, r2
 80026c2:	b2db      	uxtb	r3, r3
 80026c4:	0018      	movs	r0, r3
 80026c6:	f000 f8c8 	bl	800285a <SendCommand>
  HAL_Delay(45);
 80026ca:	202d      	movs	r0, #45	; 0x2d
 80026cc:	f001 f808 	bl	80036e0 <HAL_Delay>


  HD44780_Home();
 80026d0:	f000 f819 	bl	8002706 <HD44780_Home>
}
 80026d4:	46c0      	nop			; (mov r8, r8)
 80026d6:	46bd      	mov	sp, r7
 80026d8:	b002      	add	sp, #8
 80026da:	bd80      	pop	{r7, pc}
 80026dc:	20000203 	.word	0x20000203
 80026e0:	20000204 	.word	0x20000204
 80026e4:	20000200 	.word	0x20000200
 80026e8:	20000201 	.word	0x20000201
 80026ec:	20000202 	.word	0x20000202

080026f0 <HD44780_Clear>:

void HD44780_Clear()
{
 80026f0:	b580      	push	{r7, lr}
 80026f2:	af00      	add	r7, sp, #0
  SendCommand(LCD_CLEARDISPLAY);
 80026f4:	2001      	movs	r0, #1
 80026f6:	f000 f8b0 	bl	800285a <SendCommand>
  HAL_Delay(20);
 80026fa:	2014      	movs	r0, #20
 80026fc:	f000 fff0 	bl	80036e0 <HAL_Delay>
}
 8002700:	46c0      	nop			; (mov r8, r8)
 8002702:	46bd      	mov	sp, r7
 8002704:	bd80      	pop	{r7, pc}

08002706 <HD44780_Home>:

void HD44780_Home()
{
 8002706:	b580      	push	{r7, lr}
 8002708:	af00      	add	r7, sp, #0
  SendCommand(LCD_RETURNHOME);
 800270a:	2002      	movs	r0, #2
 800270c:	f000 f8a5 	bl	800285a <SendCommand>
  HAL_Delay(20);
 8002710:	2014      	movs	r0, #20
 8002712:	f000 ffe5 	bl	80036e0 <HAL_Delay>
}
 8002716:	46c0      	nop			; (mov r8, r8)
 8002718:	46bd      	mov	sp, r7
 800271a:	bd80      	pop	{r7, pc}

0800271c <HD44780_SetCursor>:

void HD44780_SetCursor(uint8_t col, uint8_t row)
{
 800271c:	b590      	push	{r4, r7, lr}
 800271e:	b087      	sub	sp, #28
 8002720:	af00      	add	r7, sp, #0
 8002722:	0002      	movs	r2, r0
 8002724:	1dfb      	adds	r3, r7, #7
 8002726:	701a      	strb	r2, [r3, #0]
 8002728:	1dbb      	adds	r3, r7, #6
 800272a:	1c0a      	adds	r2, r1, #0
 800272c:	701a      	strb	r2, [r3, #0]
  int row_offsets[] = { 0x00, 0x40, 0x14, 0x54 };
 800272e:	2308      	movs	r3, #8
 8002730:	18fb      	adds	r3, r7, r3
 8002732:	4a14      	ldr	r2, [pc, #80]	; (8002784 <HD44780_SetCursor+0x68>)
 8002734:	ca13      	ldmia	r2!, {r0, r1, r4}
 8002736:	c313      	stmia	r3!, {r0, r1, r4}
 8002738:	6812      	ldr	r2, [r2, #0]
 800273a:	601a      	str	r2, [r3, #0]
  if (row >= dpRows)
 800273c:	4b12      	ldr	r3, [pc, #72]	; (8002788 <HD44780_SetCursor+0x6c>)
 800273e:	781b      	ldrb	r3, [r3, #0]
 8002740:	1dba      	adds	r2, r7, #6
 8002742:	7812      	ldrb	r2, [r2, #0]
 8002744:	429a      	cmp	r2, r3
 8002746:	d304      	bcc.n	8002752 <HD44780_SetCursor+0x36>
  {
    row = dpRows-1;
 8002748:	4b0f      	ldr	r3, [pc, #60]	; (8002788 <HD44780_SetCursor+0x6c>)
 800274a:	781a      	ldrb	r2, [r3, #0]
 800274c:	1dbb      	adds	r3, r7, #6
 800274e:	3a01      	subs	r2, #1
 8002750:	701a      	strb	r2, [r3, #0]
  }
  SendCommand(LCD_SETDDRAMADDR | (col + row_offsets[row]));
 8002752:	1dbb      	adds	r3, r7, #6
 8002754:	781a      	ldrb	r2, [r3, #0]
 8002756:	2308      	movs	r3, #8
 8002758:	18fb      	adds	r3, r7, r3
 800275a:	0092      	lsls	r2, r2, #2
 800275c:	58d3      	ldr	r3, [r2, r3]
 800275e:	b2da      	uxtb	r2, r3
 8002760:	1dfb      	adds	r3, r7, #7
 8002762:	781b      	ldrb	r3, [r3, #0]
 8002764:	18d3      	adds	r3, r2, r3
 8002766:	b2db      	uxtb	r3, r3
 8002768:	b25b      	sxtb	r3, r3
 800276a:	2280      	movs	r2, #128	; 0x80
 800276c:	4252      	negs	r2, r2
 800276e:	4313      	orrs	r3, r2
 8002770:	b25b      	sxtb	r3, r3
 8002772:	b2db      	uxtb	r3, r3
 8002774:	0018      	movs	r0, r3
 8002776:	f000 f870 	bl	800285a <SendCommand>
}
 800277a:	46c0      	nop			; (mov r8, r8)
 800277c:	46bd      	mov	sp, r7
 800277e:	b007      	add	sp, #28
 8002780:	bd90      	pop	{r4, r7, pc}
 8002782:	46c0      	nop			; (mov r8, r8)
 8002784:	0800a368 	.word	0x0800a368
 8002788:	20000203 	.word	0x20000203

0800278c <HD44780_Display>:
  dpControl &= ~LCD_DISPLAYON;
  SendCommand(LCD_DISPLAYCONTROL | dpControl);
}

void HD44780_Display()
{
 800278c:	b580      	push	{r7, lr}
 800278e:	af00      	add	r7, sp, #0
  dpControl |= LCD_DISPLAYON;
 8002790:	4b08      	ldr	r3, [pc, #32]	; (80027b4 <HD44780_Display+0x28>)
 8002792:	781b      	ldrb	r3, [r3, #0]
 8002794:	2204      	movs	r2, #4
 8002796:	4313      	orrs	r3, r2
 8002798:	b2da      	uxtb	r2, r3
 800279a:	4b06      	ldr	r3, [pc, #24]	; (80027b4 <HD44780_Display+0x28>)
 800279c:	701a      	strb	r2, [r3, #0]
  SendCommand(LCD_DISPLAYCONTROL | dpControl);
 800279e:	4b05      	ldr	r3, [pc, #20]	; (80027b4 <HD44780_Display+0x28>)
 80027a0:	781b      	ldrb	r3, [r3, #0]
 80027a2:	2208      	movs	r2, #8
 80027a4:	4313      	orrs	r3, r2
 80027a6:	b2db      	uxtb	r3, r3
 80027a8:	0018      	movs	r0, r3
 80027aa:	f000 f856 	bl	800285a <SendCommand>
}
 80027ae:	46c0      	nop			; (mov r8, r8)
 80027b0:	46bd      	mov	sp, r7
 80027b2:	bd80      	pop	{r7, pc}
 80027b4:	20000201 	.word	0x20000201

080027b8 <HD44780_CreateSpecialChar>:
  dpMode &= ~LCD_ENTRYSHIFTINCREMENT;
  SendCommand(LCD_ENTRYMODESET | dpMode);
}

void HD44780_CreateSpecialChar(uint8_t location, uint8_t charmap[])
{
 80027b8:	b580      	push	{r7, lr}
 80027ba:	b084      	sub	sp, #16
 80027bc:	af00      	add	r7, sp, #0
 80027be:	0002      	movs	r2, r0
 80027c0:	6039      	str	r1, [r7, #0]
 80027c2:	1dfb      	adds	r3, r7, #7
 80027c4:	701a      	strb	r2, [r3, #0]
  location &= 0x7;
 80027c6:	1dfb      	adds	r3, r7, #7
 80027c8:	1dfa      	adds	r2, r7, #7
 80027ca:	7812      	ldrb	r2, [r2, #0]
 80027cc:	2107      	movs	r1, #7
 80027ce:	400a      	ands	r2, r1
 80027d0:	701a      	strb	r2, [r3, #0]
  SendCommand(LCD_SETCGRAMADDR | (location << 3));
 80027d2:	1dfb      	adds	r3, r7, #7
 80027d4:	781b      	ldrb	r3, [r3, #0]
 80027d6:	00db      	lsls	r3, r3, #3
 80027d8:	b25b      	sxtb	r3, r3
 80027da:	2240      	movs	r2, #64	; 0x40
 80027dc:	4313      	orrs	r3, r2
 80027de:	b25b      	sxtb	r3, r3
 80027e0:	b2db      	uxtb	r3, r3
 80027e2:	0018      	movs	r0, r3
 80027e4:	f000 f839 	bl	800285a <SendCommand>
  for (int i=0; i<8; i++)
 80027e8:	2300      	movs	r3, #0
 80027ea:	60fb      	str	r3, [r7, #12]
 80027ec:	e009      	b.n	8002802 <HD44780_CreateSpecialChar+0x4a>
  {
    SendChar(charmap[i]);
 80027ee:	68fb      	ldr	r3, [r7, #12]
 80027f0:	683a      	ldr	r2, [r7, #0]
 80027f2:	18d3      	adds	r3, r2, r3
 80027f4:	781b      	ldrb	r3, [r3, #0]
 80027f6:	0018      	movs	r0, r3
 80027f8:	f000 f83f 	bl	800287a <SendChar>
  for (int i=0; i<8; i++)
 80027fc:	68fb      	ldr	r3, [r7, #12]
 80027fe:	3301      	adds	r3, #1
 8002800:	60fb      	str	r3, [r7, #12]
 8002802:	68fb      	ldr	r3, [r7, #12]
 8002804:	2b07      	cmp	r3, #7
 8002806:	ddf2      	ble.n	80027ee <HD44780_CreateSpecialChar+0x36>
  }
}
 8002808:	46c0      	nop			; (mov r8, r8)
 800280a:	46c0      	nop			; (mov r8, r8)
 800280c:	46bd      	mov	sp, r7
 800280e:	b004      	add	sp, #16
 8002810:	bd80      	pop	{r7, pc}

08002812 <HD44780_PrintSpecialChar>:

void HD44780_PrintSpecialChar(uint8_t index)
{
 8002812:	b580      	push	{r7, lr}
 8002814:	b082      	sub	sp, #8
 8002816:	af00      	add	r7, sp, #0
 8002818:	0002      	movs	r2, r0
 800281a:	1dfb      	adds	r3, r7, #7
 800281c:	701a      	strb	r2, [r3, #0]
  SendChar(index);
 800281e:	1dfb      	adds	r3, r7, #7
 8002820:	781b      	ldrb	r3, [r3, #0]
 8002822:	0018      	movs	r0, r3
 8002824:	f000 f829 	bl	800287a <SendChar>
}
 8002828:	46c0      	nop			; (mov r8, r8)
 800282a:	46bd      	mov	sp, r7
 800282c:	b002      	add	sp, #8
 800282e:	bd80      	pop	{r7, pc}

08002830 <HD44780_PrintStr>:
{
  HD44780_CreateSpecialChar(char_num, rows);
}

void HD44780_PrintStr(const char c[])
{
 8002830:	b580      	push	{r7, lr}
 8002832:	b082      	sub	sp, #8
 8002834:	af00      	add	r7, sp, #0
 8002836:	6078      	str	r0, [r7, #4]
  while(*c) SendChar(*c++);
 8002838:	e006      	b.n	8002848 <HD44780_PrintStr+0x18>
 800283a:	687b      	ldr	r3, [r7, #4]
 800283c:	1c5a      	adds	r2, r3, #1
 800283e:	607a      	str	r2, [r7, #4]
 8002840:	781b      	ldrb	r3, [r3, #0]
 8002842:	0018      	movs	r0, r3
 8002844:	f000 f819 	bl	800287a <SendChar>
 8002848:	687b      	ldr	r3, [r7, #4]
 800284a:	781b      	ldrb	r3, [r3, #0]
 800284c:	2b00      	cmp	r3, #0
 800284e:	d1f4      	bne.n	800283a <HD44780_PrintStr+0xa>
}
 8002850:	46c0      	nop			; (mov r8, r8)
 8002852:	46c0      	nop			; (mov r8, r8)
 8002854:	46bd      	mov	sp, r7
 8002856:	b002      	add	sp, #8
 8002858:	bd80      	pop	{r7, pc}

0800285a <SendCommand>:
  dpBacklight=LCD_BACKLIGHT;
  ExpanderWrite(0);
}

static void SendCommand(uint8_t cmd)
{
 800285a:	b580      	push	{r7, lr}
 800285c:	b082      	sub	sp, #8
 800285e:	af00      	add	r7, sp, #0
 8002860:	0002      	movs	r2, r0
 8002862:	1dfb      	adds	r3, r7, #7
 8002864:	701a      	strb	r2, [r3, #0]
  Send(cmd, 0);
 8002866:	1dfb      	adds	r3, r7, #7
 8002868:	781b      	ldrb	r3, [r3, #0]
 800286a:	2100      	movs	r1, #0
 800286c:	0018      	movs	r0, r3
 800286e:	f000 f814 	bl	800289a <Send>
}
 8002872:	46c0      	nop			; (mov r8, r8)
 8002874:	46bd      	mov	sp, r7
 8002876:	b002      	add	sp, #8
 8002878:	bd80      	pop	{r7, pc}

0800287a <SendChar>:

static void SendChar(uint8_t ch)
{
 800287a:	b580      	push	{r7, lr}
 800287c:	b082      	sub	sp, #8
 800287e:	af00      	add	r7, sp, #0
 8002880:	0002      	movs	r2, r0
 8002882:	1dfb      	adds	r3, r7, #7
 8002884:	701a      	strb	r2, [r3, #0]
  Send(ch, RS);
 8002886:	1dfb      	adds	r3, r7, #7
 8002888:	781b      	ldrb	r3, [r3, #0]
 800288a:	2101      	movs	r1, #1
 800288c:	0018      	movs	r0, r3
 800288e:	f000 f804 	bl	800289a <Send>
}
 8002892:	46c0      	nop			; (mov r8, r8)
 8002894:	46bd      	mov	sp, r7
 8002896:	b002      	add	sp, #8
 8002898:	bd80      	pop	{r7, pc}

0800289a <Send>:

static void Send(uint8_t value, uint8_t mode)
{
 800289a:	b590      	push	{r4, r7, lr}
 800289c:	b085      	sub	sp, #20
 800289e:	af00      	add	r7, sp, #0
 80028a0:	0002      	movs	r2, r0
 80028a2:	1dfb      	adds	r3, r7, #7
 80028a4:	701a      	strb	r2, [r3, #0]
 80028a6:	1dbb      	adds	r3, r7, #6
 80028a8:	1c0a      	adds	r2, r1, #0
 80028aa:	701a      	strb	r2, [r3, #0]
  uint8_t highnib = value & 0xF0;
 80028ac:	200f      	movs	r0, #15
 80028ae:	183b      	adds	r3, r7, r0
 80028b0:	1dfa      	adds	r2, r7, #7
 80028b2:	7812      	ldrb	r2, [r2, #0]
 80028b4:	210f      	movs	r1, #15
 80028b6:	438a      	bics	r2, r1
 80028b8:	701a      	strb	r2, [r3, #0]
  uint8_t lownib = (value<<4) & 0xF0;
 80028ba:	1dfb      	adds	r3, r7, #7
 80028bc:	781b      	ldrb	r3, [r3, #0]
 80028be:	011a      	lsls	r2, r3, #4
 80028c0:	240e      	movs	r4, #14
 80028c2:	193b      	adds	r3, r7, r4
 80028c4:	701a      	strb	r2, [r3, #0]
  Write4Bits((highnib)|mode);
 80028c6:	183a      	adds	r2, r7, r0
 80028c8:	1dbb      	adds	r3, r7, #6
 80028ca:	7812      	ldrb	r2, [r2, #0]
 80028cc:	781b      	ldrb	r3, [r3, #0]
 80028ce:	4313      	orrs	r3, r2
 80028d0:	b2db      	uxtb	r3, r3
 80028d2:	0018      	movs	r0, r3
 80028d4:	f000 f80d 	bl	80028f2 <Write4Bits>
  Write4Bits((lownib)|mode);
 80028d8:	193a      	adds	r2, r7, r4
 80028da:	1dbb      	adds	r3, r7, #6
 80028dc:	7812      	ldrb	r2, [r2, #0]
 80028de:	781b      	ldrb	r3, [r3, #0]
 80028e0:	4313      	orrs	r3, r2
 80028e2:	b2db      	uxtb	r3, r3
 80028e4:	0018      	movs	r0, r3
 80028e6:	f000 f804 	bl	80028f2 <Write4Bits>
}
 80028ea:	46c0      	nop			; (mov r8, r8)
 80028ec:	46bd      	mov	sp, r7
 80028ee:	b005      	add	sp, #20
 80028f0:	bd90      	pop	{r4, r7, pc}

080028f2 <Write4Bits>:

static void Write4Bits(uint8_t value)
{
 80028f2:	b580      	push	{r7, lr}
 80028f4:	b082      	sub	sp, #8
 80028f6:	af00      	add	r7, sp, #0
 80028f8:	0002      	movs	r2, r0
 80028fa:	1dfb      	adds	r3, r7, #7
 80028fc:	701a      	strb	r2, [r3, #0]
  ExpanderWrite(value);
 80028fe:	1dfb      	adds	r3, r7, #7
 8002900:	781b      	ldrb	r3, [r3, #0]
 8002902:	0018      	movs	r0, r3
 8002904:	f000 f80a 	bl	800291c <ExpanderWrite>
  PulseEnable(value);
 8002908:	1dfb      	adds	r3, r7, #7
 800290a:	781b      	ldrb	r3, [r3, #0]
 800290c:	0018      	movs	r0, r3
 800290e:	f000 f825 	bl	800295c <PulseEnable>
}
 8002912:	46c0      	nop			; (mov r8, r8)
 8002914:	46bd      	mov	sp, r7
 8002916:	b002      	add	sp, #8
 8002918:	bd80      	pop	{r7, pc}
	...

0800291c <ExpanderWrite>:

static void ExpanderWrite(uint8_t _data)
{
 800291c:	b580      	push	{r7, lr}
 800291e:	b086      	sub	sp, #24
 8002920:	af02      	add	r7, sp, #8
 8002922:	0002      	movs	r2, r0
 8002924:	1dfb      	adds	r3, r7, #7
 8002926:	701a      	strb	r2, [r3, #0]
  uint8_t data = _data | dpBacklight;
 8002928:	4b0a      	ldr	r3, [pc, #40]	; (8002954 <ExpanderWrite+0x38>)
 800292a:	781a      	ldrb	r2, [r3, #0]
 800292c:	1dfb      	adds	r3, r7, #7
 800292e:	781b      	ldrb	r3, [r3, #0]
 8002930:	4313      	orrs	r3, r2
 8002932:	b2da      	uxtb	r2, r3
 8002934:	210f      	movs	r1, #15
 8002936:	187b      	adds	r3, r7, r1
 8002938:	701a      	strb	r2, [r3, #0]
  HAL_I2C_Master_Transmit(&hi2c1, DEVICE_ADDR, (uint8_t*)&data, 1, 10);
 800293a:	187a      	adds	r2, r7, r1
 800293c:	4806      	ldr	r0, [pc, #24]	; (8002958 <ExpanderWrite+0x3c>)
 800293e:	230a      	movs	r3, #10
 8002940:	9300      	str	r3, [sp, #0]
 8002942:	2301      	movs	r3, #1
 8002944:	217e      	movs	r1, #126	; 0x7e
 8002946:	f001 ffe5 	bl	8004914 <HAL_I2C_Master_Transmit>
}
 800294a:	46c0      	nop			; (mov r8, r8)
 800294c:	46bd      	mov	sp, r7
 800294e:	b004      	add	sp, #16
 8002950:	bd80      	pop	{r7, pc}
 8002952:	46c0      	nop			; (mov r8, r8)
 8002954:	20000204 	.word	0x20000204
 8002958:	2000026c 	.word	0x2000026c

0800295c <PulseEnable>:

static void PulseEnable(uint8_t _data)
{
 800295c:	b580      	push	{r7, lr}
 800295e:	b082      	sub	sp, #8
 8002960:	af00      	add	r7, sp, #0
 8002962:	0002      	movs	r2, r0
 8002964:	1dfb      	adds	r3, r7, #7
 8002966:	701a      	strb	r2, [r3, #0]
  ExpanderWrite(_data | ENABLE);
 8002968:	1dfb      	adds	r3, r7, #7
 800296a:	781b      	ldrb	r3, [r3, #0]
 800296c:	2204      	movs	r2, #4
 800296e:	4313      	orrs	r3, r2
 8002970:	b2db      	uxtb	r3, r3
 8002972:	0018      	movs	r0, r3
 8002974:	f7ff ffd2 	bl	800291c <ExpanderWrite>
  HAL_Delay(2);
 8002978:	2002      	movs	r0, #2
 800297a:	f000 feb1 	bl	80036e0 <HAL_Delay>

  ExpanderWrite(_data & ~ENABLE);
 800297e:	1dfb      	adds	r3, r7, #7
 8002980:	781b      	ldrb	r3, [r3, #0]
 8002982:	2204      	movs	r2, #4
 8002984:	4393      	bics	r3, r2
 8002986:	b2db      	uxtb	r3, r3
 8002988:	0018      	movs	r0, r3
 800298a:	f7ff ffc7 	bl	800291c <ExpanderWrite>
  HAL_Delay(2);
 800298e:	2002      	movs	r0, #2
 8002990:	f000 fea6 	bl	80036e0 <HAL_Delay>
}
 8002994:	46c0      	nop			; (mov r8, r8)
 8002996:	46bd      	mov	sp, r7
 8002998:	b002      	add	sp, #8
 800299a:	bd80      	pop	{r7, pc}

0800299c <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 800299c:	b5b0      	push	{r4, r5, r7, lr}
 800299e:	b088      	sub	sp, #32
 80029a0:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80029a2:	f000 fe17 	bl	80035d4 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80029a6:	f000 f90b 	bl	8002bc0 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80029aa:	f000 fad5 	bl	8002f58 <MX_GPIO_Init>
  MX_USART2_UART_Init();
 80029ae:	f000 fa9f 	bl	8002ef0 <MX_USART2_UART_Init>
  MX_ADC1_Init();
 80029b2:	f000 f94d 	bl	8002c50 <MX_ADC1_Init>
  MX_I2C1_Init();
 80029b6:	f000 f9b1 	bl	8002d1c <MX_I2C1_Init>
  MX_TIM1_Init();
 80029ba:	f000 f9ef 	bl	8002d9c <MX_TIM1_Init>
  /* USER CODE BEGIN 2 */
  HAL_TIM_PWM_Start(&htim1, TIM_CHANNEL_1);
 80029be:	4b73      	ldr	r3, [pc, #460]	; (8002b8c <main+0x1f0>)
 80029c0:	2100      	movs	r1, #0
 80029c2:	0018      	movs	r0, r3
 80029c4:	f003 fa3e 	bl	8005e44 <HAL_TIM_PWM_Start>
  setFanSpeed(99);
 80029c8:	2063      	movs	r0, #99	; 0x63
 80029ca:	f000 fb33 	bl	8003034 <setFanSpeed>
  uint16_t adc_value;
  float temperature;
  uint8_t pwm_value = 100;
 80029ce:	231b      	movs	r3, #27
 80029d0:	18fb      	adds	r3, r7, r3
 80029d2:	2264      	movs	r2, #100	; 0x64
 80029d4:	701a      	strb	r2, [r3, #0]
  uint8_t prev_pwm_value = 100;
 80029d6:	231a      	movs	r3, #26
 80029d8:	18fb      	adds	r3, r7, r3
 80029da:	2264      	movs	r2, #100	; 0x64
 80029dc:	701a      	strb	r2, [r3, #0]
  HAL_ADC_Start(&hadc1);
 80029de:	4b6c      	ldr	r3, [pc, #432]	; (8002b90 <main+0x1f4>)
 80029e0:	0018      	movs	r0, r3
 80029e2:	f001 f97f 	bl	8003ce4 <HAL_ADC_Start>
  HD44780_Init(2);
 80029e6:	2002      	movs	r0, #2
 80029e8:	f7ff fe12 	bl	8002610 <HD44780_Init>
  HD44780_CreateSpecialChar(0, degreeSymbol);
 80029ec:	4b69      	ldr	r3, [pc, #420]	; (8002b94 <main+0x1f8>)
 80029ee:	0019      	movs	r1, r3
 80029f0:	2000      	movs	r0, #0
 80029f2:	f7ff fee1 	bl	80027b8 <HD44780_CreateSpecialChar>
  HD44780_Clear();
 80029f6:	f7ff fe7b 	bl	80026f0 <HD44780_Clear>
  HD44780_SetCursor(0, 0);
 80029fa:	2100      	movs	r1, #0
 80029fc:	2000      	movs	r0, #0
 80029fe:	f7ff fe8d 	bl	800271c <HD44780_SetCursor>

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {
	  HD44780_Clear();
 8002a02:	f7ff fe75 	bl	80026f0 <HD44780_Clear>
	  HD44780_SetCursor(0, 0);
 8002a06:	2100      	movs	r1, #0
 8002a08:	2000      	movs	r0, #0
 8002a0a:	f7ff fe87 	bl	800271c <HD44780_SetCursor>
	  HD44780_PrintStr("Temp.:");
 8002a0e:	4b62      	ldr	r3, [pc, #392]	; (8002b98 <main+0x1fc>)
 8002a10:	0018      	movs	r0, r3
 8002a12:	f7ff ff0d 	bl	8002830 <HD44780_PrintStr>
	  if (HAL_ADC_PollForConversion(&hadc1, 1000000) == HAL_OK) {
 8002a16:	4a61      	ldr	r2, [pc, #388]	; (8002b9c <main+0x200>)
 8002a18:	4b5d      	ldr	r3, [pc, #372]	; (8002b90 <main+0x1f4>)
 8002a1a:	0011      	movs	r1, r2
 8002a1c:	0018      	movs	r0, r3
 8002a1e:	f001 f9af 	bl	8003d80 <HAL_ADC_PollForConversion>
 8002a22:	1e03      	subs	r3, r0, #0
 8002a24:	d118      	bne.n	8002a58 <main+0xbc>
		  adc_value = HAL_ADC_GetValue(&hadc1);
 8002a26:	4b5a      	ldr	r3, [pc, #360]	; (8002b90 <main+0x1f4>)
 8002a28:	0018      	movs	r0, r3
 8002a2a:	f001 fa3d 	bl	8003ea8 <HAL_ADC_GetValue>
 8002a2e:	0002      	movs	r2, r0
 8002a30:	2118      	movs	r1, #24
 8002a32:	187b      	adds	r3, r7, r1
 8002a34:	801a      	strh	r2, [r3, #0]
		  temperature = 0.0805664 * adc_value;
 8002a36:	187b      	adds	r3, r7, r1
 8002a38:	881b      	ldrh	r3, [r3, #0]
 8002a3a:	0018      	movs	r0, r3
 8002a3c:	f7ff fc98 	bl	8002370 <__aeabi_i2d>
 8002a40:	4a57      	ldr	r2, [pc, #348]	; (8002ba0 <main+0x204>)
 8002a42:	4b58      	ldr	r3, [pc, #352]	; (8002ba4 <main+0x208>)
 8002a44:	f7fe fe42 	bl	80016cc <__aeabi_dmul>
 8002a48:	0002      	movs	r2, r0
 8002a4a:	000b      	movs	r3, r1
 8002a4c:	0010      	movs	r0, r2
 8002a4e:	0019      	movs	r1, r3
 8002a50:	f7ff fd2c 	bl	80024ac <__aeabi_d2f>
 8002a54:	1c03      	adds	r3, r0, #0
 8002a56:	61fb      	str	r3, [r7, #28]
	  }
	  sprintf(temp_str, "%.1f", temperature);
 8002a58:	69f8      	ldr	r0, [r7, #28]
 8002a5a:	f7ff fcdf 	bl	800241c <__aeabi_f2d>
 8002a5e:	0002      	movs	r2, r0
 8002a60:	000b      	movs	r3, r1
 8002a62:	4951      	ldr	r1, [pc, #324]	; (8002ba8 <main+0x20c>)
 8002a64:	240c      	movs	r4, #12
 8002a66:	1938      	adds	r0, r7, r4
 8002a68:	f005 f946 	bl	8007cf8 <siprintf>
	  HD44780_SetCursor(6, 0);
 8002a6c:	2100      	movs	r1, #0
 8002a6e:	2006      	movs	r0, #6
 8002a70:	f7ff fe54 	bl	800271c <HD44780_SetCursor>
	  HD44780_PrintStr(temp_str);
 8002a74:	193b      	adds	r3, r7, r4
 8002a76:	0018      	movs	r0, r3
 8002a78:	f7ff feda 	bl	8002830 <HD44780_PrintStr>
	  HD44780_SetCursor(10, 0);
 8002a7c:	2100      	movs	r1, #0
 8002a7e:	200a      	movs	r0, #10
 8002a80:	f7ff fe4c 	bl	800271c <HD44780_SetCursor>
	  HD44780_PrintSpecialChar(0);
 8002a84:	2000      	movs	r0, #0
 8002a86:	f7ff fec4 	bl	8002812 <HD44780_PrintSpecialChar>

	  if (temperature < 26.0) {
 8002a8a:	4948      	ldr	r1, [pc, #288]	; (8002bac <main+0x210>)
 8002a8c:	69f8      	ldr	r0, [r7, #28]
 8002a8e:	f7fd fd1b 	bl	80004c8 <__aeabi_fcmplt>
 8002a92:	1e03      	subs	r3, r0, #0
 8002a94:	d004      	beq.n	8002aa0 <main+0x104>
		  pwm_value = 100;
 8002a96:	231b      	movs	r3, #27
 8002a98:	18fb      	adds	r3, r7, r3
 8002a9a:	2264      	movs	r2, #100	; 0x64
 8002a9c:	701a      	strb	r2, [r3, #0]
 8002a9e:	e03e      	b.n	8002b1e <main+0x182>
	  } else if (temperature >=26.0 && temperature < 28.0) {
 8002aa0:	4942      	ldr	r1, [pc, #264]	; (8002bac <main+0x210>)
 8002aa2:	69f8      	ldr	r0, [r7, #28]
 8002aa4:	f7fd fd2e 	bl	8000504 <__aeabi_fcmpge>
 8002aa8:	1e03      	subs	r3, r0, #0
 8002aaa:	d00a      	beq.n	8002ac2 <main+0x126>
 8002aac:	4940      	ldr	r1, [pc, #256]	; (8002bb0 <main+0x214>)
 8002aae:	69f8      	ldr	r0, [r7, #28]
 8002ab0:	f7fd fd0a 	bl	80004c8 <__aeabi_fcmplt>
 8002ab4:	1e03      	subs	r3, r0, #0
 8002ab6:	d004      	beq.n	8002ac2 <main+0x126>
		  pwm_value = 75;
 8002ab8:	231b      	movs	r3, #27
 8002aba:	18fb      	adds	r3, r7, r3
 8002abc:	224b      	movs	r2, #75	; 0x4b
 8002abe:	701a      	strb	r2, [r3, #0]
 8002ac0:	e02d      	b.n	8002b1e <main+0x182>
	  } else if (temperature >= 28.0 && temperature < 30.0) {
 8002ac2:	493b      	ldr	r1, [pc, #236]	; (8002bb0 <main+0x214>)
 8002ac4:	69f8      	ldr	r0, [r7, #28]
 8002ac6:	f7fd fd1d 	bl	8000504 <__aeabi_fcmpge>
 8002aca:	1e03      	subs	r3, r0, #0
 8002acc:	d00a      	beq.n	8002ae4 <main+0x148>
 8002ace:	4939      	ldr	r1, [pc, #228]	; (8002bb4 <main+0x218>)
 8002ad0:	69f8      	ldr	r0, [r7, #28]
 8002ad2:	f7fd fcf9 	bl	80004c8 <__aeabi_fcmplt>
 8002ad6:	1e03      	subs	r3, r0, #0
 8002ad8:	d004      	beq.n	8002ae4 <main+0x148>
		  pwm_value = 50;
 8002ada:	231b      	movs	r3, #27
 8002adc:	18fb      	adds	r3, r7, r3
 8002ade:	2232      	movs	r2, #50	; 0x32
 8002ae0:	701a      	strb	r2, [r3, #0]
 8002ae2:	e01c      	b.n	8002b1e <main+0x182>
	  } else if (temperature >= 30.0 && temperature < 32.0) {
 8002ae4:	4933      	ldr	r1, [pc, #204]	; (8002bb4 <main+0x218>)
 8002ae6:	69f8      	ldr	r0, [r7, #28]
 8002ae8:	f7fd fd0c 	bl	8000504 <__aeabi_fcmpge>
 8002aec:	1e03      	subs	r3, r0, #0
 8002aee:	d00b      	beq.n	8002b08 <main+0x16c>
 8002af0:	2184      	movs	r1, #132	; 0x84
 8002af2:	05c9      	lsls	r1, r1, #23
 8002af4:	69f8      	ldr	r0, [r7, #28]
 8002af6:	f7fd fce7 	bl	80004c8 <__aeabi_fcmplt>
 8002afa:	1e03      	subs	r3, r0, #0
 8002afc:	d004      	beq.n	8002b08 <main+0x16c>
		  pwm_value = 25;
 8002afe:	231b      	movs	r3, #27
 8002b00:	18fb      	adds	r3, r7, r3
 8002b02:	2219      	movs	r2, #25
 8002b04:	701a      	strb	r2, [r3, #0]
 8002b06:	e00a      	b.n	8002b1e <main+0x182>
	  } else if (temperature >= 32.0){
 8002b08:	2184      	movs	r1, #132	; 0x84
 8002b0a:	05c9      	lsls	r1, r1, #23
 8002b0c:	69f8      	ldr	r0, [r7, #28]
 8002b0e:	f7fd fcf9 	bl	8000504 <__aeabi_fcmpge>
 8002b12:	1e03      	subs	r3, r0, #0
 8002b14:	d003      	beq.n	8002b1e <main+0x182>
		  pwm_value = 0;
 8002b16:	231b      	movs	r3, #27
 8002b18:	18fb      	adds	r3, r7, r3
 8002b1a:	2200      	movs	r2, #0
 8002b1c:	701a      	strb	r2, [r3, #0]
	  }
	  sprintf(pwm_str, "%d", 100-pwm_value);
 8002b1e:	241b      	movs	r4, #27
 8002b20:	193b      	adds	r3, r7, r4
 8002b22:	781b      	ldrb	r3, [r3, #0]
 8002b24:	2264      	movs	r2, #100	; 0x64
 8002b26:	1ad2      	subs	r2, r2, r3
 8002b28:	4923      	ldr	r1, [pc, #140]	; (8002bb8 <main+0x21c>)
 8002b2a:	003b      	movs	r3, r7
 8002b2c:	0018      	movs	r0, r3
 8002b2e:	f005 f8e3 	bl	8007cf8 <siprintf>
	  HD44780_SetCursor(0, 1);
 8002b32:	2101      	movs	r1, #1
 8002b34:	2000      	movs	r0, #0
 8002b36:	f7ff fdf1 	bl	800271c <HD44780_SetCursor>
	  HD44780_PrintStr("Fan Mode:%");
 8002b3a:	4b20      	ldr	r3, [pc, #128]	; (8002bbc <main+0x220>)
 8002b3c:	0018      	movs	r0, r3
 8002b3e:	f7ff fe77 	bl	8002830 <HD44780_PrintStr>
	  HD44780_SetCursor(10, 1);
 8002b42:	2101      	movs	r1, #1
 8002b44:	200a      	movs	r0, #10
 8002b46:	f7ff fde9 	bl	800271c <HD44780_SetCursor>
	  HD44780_PrintStr(pwm_str);
 8002b4a:	003b      	movs	r3, r7
 8002b4c:	0018      	movs	r0, r3
 8002b4e:	f7ff fe6f 	bl	8002830 <HD44780_PrintStr>
	  if(pwm_value != prev_pwm_value){
 8002b52:	193a      	adds	r2, r7, r4
 8002b54:	251a      	movs	r5, #26
 8002b56:	197b      	adds	r3, r7, r5
 8002b58:	7812      	ldrb	r2, [r2, #0]
 8002b5a:	781b      	ldrb	r3, [r3, #0]
 8002b5c:	429a      	cmp	r2, r3
 8002b5e:	d009      	beq.n	8002b74 <main+0x1d8>
		  setFanSpeed(0);
 8002b60:	2000      	movs	r0, #0
 8002b62:	f000 fa67 	bl	8003034 <setFanSpeed>
		  HAL_Delay(100);
 8002b66:	2064      	movs	r0, #100	; 0x64
 8002b68:	f000 fdba 	bl	80036e0 <HAL_Delay>
		  prev_pwm_value = pwm_value;
 8002b6c:	197b      	adds	r3, r7, r5
 8002b6e:	193a      	adds	r2, r7, r4
 8002b70:	7812      	ldrb	r2, [r2, #0]
 8002b72:	701a      	strb	r2, [r3, #0]
	  }
	  setFanSpeed(pwm_value);
 8002b74:	231b      	movs	r3, #27
 8002b76:	18fb      	adds	r3, r7, r3
 8002b78:	781b      	ldrb	r3, [r3, #0]
 8002b7a:	0018      	movs	r0, r3
 8002b7c:	f000 fa5a 	bl	8003034 <setFanSpeed>
	  HAL_Delay(1000);
 8002b80:	23fa      	movs	r3, #250	; 0xfa
 8002b82:	009b      	lsls	r3, r3, #2
 8002b84:	0018      	movs	r0, r3
 8002b86:	f000 fdab 	bl	80036e0 <HAL_Delay>
  {
 8002b8a:	e73a      	b.n	8002a02 <main+0x66>
 8002b8c:	200002c0 	.word	0x200002c0
 8002b90:	20000208 	.word	0x20000208
 8002b94:	20000000 	.word	0x20000000
 8002b98:	0800a378 	.word	0x0800a378
 8002b9c:	000f4240 	.word	0x000f4240
 8002ba0:	e5280d65 	.word	0xe5280d65
 8002ba4:	3fb49fff 	.word	0x3fb49fff
 8002ba8:	0800a380 	.word	0x0800a380
 8002bac:	41d00000 	.word	0x41d00000
 8002bb0:	41e00000 	.word	0x41e00000
 8002bb4:	41f00000 	.word	0x41f00000
 8002bb8:	0800a388 	.word	0x0800a388
 8002bbc:	0800a38c 	.word	0x0800a38c

08002bc0 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8002bc0:	b590      	push	{r4, r7, lr}
 8002bc2:	b093      	sub	sp, #76	; 0x4c
 8002bc4:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8002bc6:	2410      	movs	r4, #16
 8002bc8:	193b      	adds	r3, r7, r4
 8002bca:	0018      	movs	r0, r3
 8002bcc:	2338      	movs	r3, #56	; 0x38
 8002bce:	001a      	movs	r2, r3
 8002bd0:	2100      	movs	r1, #0
 8002bd2:	f004 fc1b 	bl	800740c <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8002bd6:	003b      	movs	r3, r7
 8002bd8:	0018      	movs	r0, r3
 8002bda:	2310      	movs	r3, #16
 8002bdc:	001a      	movs	r2, r3
 8002bde:	2100      	movs	r1, #0
 8002be0:	f004 fc14 	bl	800740c <memset>

  /** Configure the main internal regulator output voltage
  */
  HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1);
 8002be4:	2380      	movs	r3, #128	; 0x80
 8002be6:	009b      	lsls	r3, r3, #2
 8002be8:	0018      	movs	r0, r3
 8002bea:	f002 fa49 	bl	8005080 <HAL_PWREx_ControlVoltageScaling>

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8002bee:	193b      	adds	r3, r7, r4
 8002bf0:	2202      	movs	r2, #2
 8002bf2:	601a      	str	r2, [r3, #0]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8002bf4:	193b      	adds	r3, r7, r4
 8002bf6:	2280      	movs	r2, #128	; 0x80
 8002bf8:	0052      	lsls	r2, r2, #1
 8002bfa:	60da      	str	r2, [r3, #12]
  RCC_OscInitStruct.HSIDiv = RCC_HSI_DIV1;
 8002bfc:	193b      	adds	r3, r7, r4
 8002bfe:	2200      	movs	r2, #0
 8002c00:	611a      	str	r2, [r3, #16]
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8002c02:	193b      	adds	r3, r7, r4
 8002c04:	2240      	movs	r2, #64	; 0x40
 8002c06:	615a      	str	r2, [r3, #20]
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 8002c08:	193b      	adds	r3, r7, r4
 8002c0a:	2200      	movs	r2, #0
 8002c0c:	61da      	str	r2, [r3, #28]
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8002c0e:	193b      	adds	r3, r7, r4
 8002c10:	0018      	movs	r0, r3
 8002c12:	f002 fa81 	bl	8005118 <HAL_RCC_OscConfig>
 8002c16:	1e03      	subs	r3, r0, #0
 8002c18:	d001      	beq.n	8002c1e <SystemClock_Config+0x5e>
  {
    Error_Handler();
 8002c1a:	f000 fa23 	bl	8003064 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8002c1e:	003b      	movs	r3, r7
 8002c20:	2207      	movs	r2, #7
 8002c22:	601a      	str	r2, [r3, #0]
                              |RCC_CLOCKTYPE_PCLK1;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_HSI;
 8002c24:	003b      	movs	r3, r7
 8002c26:	2200      	movs	r2, #0
 8002c28:	605a      	str	r2, [r3, #4]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8002c2a:	003b      	movs	r3, r7
 8002c2c:	2200      	movs	r2, #0
 8002c2e:	609a      	str	r2, [r3, #8]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8002c30:	003b      	movs	r3, r7
 8002c32:	2200      	movs	r2, #0
 8002c34:	60da      	str	r2, [r3, #12]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 8002c36:	003b      	movs	r3, r7
 8002c38:	2100      	movs	r1, #0
 8002c3a:	0018      	movs	r0, r3
 8002c3c:	f002 fd86 	bl	800574c <HAL_RCC_ClockConfig>
 8002c40:	1e03      	subs	r3, r0, #0
 8002c42:	d001      	beq.n	8002c48 <SystemClock_Config+0x88>
  {
    Error_Handler();
 8002c44:	f000 fa0e 	bl	8003064 <Error_Handler>
  }
}
 8002c48:	46c0      	nop			; (mov r8, r8)
 8002c4a:	46bd      	mov	sp, r7
 8002c4c:	b013      	add	sp, #76	; 0x4c
 8002c4e:	bd90      	pop	{r4, r7, pc}

08002c50 <MX_ADC1_Init>:
  * @brief ADC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC1_Init(void)
{
 8002c50:	b580      	push	{r7, lr}
 8002c52:	b084      	sub	sp, #16
 8002c54:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 8002c56:	1d3b      	adds	r3, r7, #4
 8002c58:	0018      	movs	r0, r3
 8002c5a:	230c      	movs	r3, #12
 8002c5c:	001a      	movs	r2, r3
 8002c5e:	2100      	movs	r1, #0
 8002c60:	f004 fbd4 	bl	800740c <memset>

  /* USER CODE END ADC1_Init 1 */

  /** Configure the global features of the ADC (Clock, Resolution, Data Alignment and number of conversion)
  */
  hadc1.Instance = ADC1;
 8002c64:	4b2b      	ldr	r3, [pc, #172]	; (8002d14 <MX_ADC1_Init+0xc4>)
 8002c66:	4a2c      	ldr	r2, [pc, #176]	; (8002d18 <MX_ADC1_Init+0xc8>)
 8002c68:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV2;
 8002c6a:	4b2a      	ldr	r3, [pc, #168]	; (8002d14 <MX_ADC1_Init+0xc4>)
 8002c6c:	2280      	movs	r2, #128	; 0x80
 8002c6e:	05d2      	lsls	r2, r2, #23
 8002c70:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 8002c72:	4b28      	ldr	r3, [pc, #160]	; (8002d14 <MX_ADC1_Init+0xc4>)
 8002c74:	2200      	movs	r2, #0
 8002c76:	609a      	str	r2, [r3, #8]
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8002c78:	4b26      	ldr	r3, [pc, #152]	; (8002d14 <MX_ADC1_Init+0xc4>)
 8002c7a:	2200      	movs	r2, #0
 8002c7c:	60da      	str	r2, [r3, #12]
  hadc1.Init.ScanConvMode = ADC_SCAN_DISABLE;
 8002c7e:	4b25      	ldr	r3, [pc, #148]	; (8002d14 <MX_ADC1_Init+0xc4>)
 8002c80:	2200      	movs	r2, #0
 8002c82:	611a      	str	r2, [r3, #16]
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 8002c84:	4b23      	ldr	r3, [pc, #140]	; (8002d14 <MX_ADC1_Init+0xc4>)
 8002c86:	2204      	movs	r2, #4
 8002c88:	615a      	str	r2, [r3, #20]
  hadc1.Init.LowPowerAutoWait = DISABLE;
 8002c8a:	4b22      	ldr	r3, [pc, #136]	; (8002d14 <MX_ADC1_Init+0xc4>)
 8002c8c:	2200      	movs	r2, #0
 8002c8e:	761a      	strb	r2, [r3, #24]
  hadc1.Init.LowPowerAutoPowerOff = DISABLE;
 8002c90:	4b20      	ldr	r3, [pc, #128]	; (8002d14 <MX_ADC1_Init+0xc4>)
 8002c92:	2200      	movs	r2, #0
 8002c94:	765a      	strb	r2, [r3, #25]
  hadc1.Init.ContinuousConvMode = ENABLE;
 8002c96:	4b1f      	ldr	r3, [pc, #124]	; (8002d14 <MX_ADC1_Init+0xc4>)
 8002c98:	2201      	movs	r2, #1
 8002c9a:	769a      	strb	r2, [r3, #26]
  hadc1.Init.NbrOfConversion = 1;
 8002c9c:	4b1d      	ldr	r3, [pc, #116]	; (8002d14 <MX_ADC1_Init+0xc4>)
 8002c9e:	2201      	movs	r2, #1
 8002ca0:	61da      	str	r2, [r3, #28]
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8002ca2:	4b1c      	ldr	r3, [pc, #112]	; (8002d14 <MX_ADC1_Init+0xc4>)
 8002ca4:	2200      	movs	r2, #0
 8002ca6:	625a      	str	r2, [r3, #36]	; 0x24
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 8002ca8:	4b1a      	ldr	r3, [pc, #104]	; (8002d14 <MX_ADC1_Init+0xc4>)
 8002caa:	2200      	movs	r2, #0
 8002cac:	629a      	str	r2, [r3, #40]	; 0x28
  hadc1.Init.DMAContinuousRequests = DISABLE;
 8002cae:	4b19      	ldr	r3, [pc, #100]	; (8002d14 <MX_ADC1_Init+0xc4>)
 8002cb0:	222c      	movs	r2, #44	; 0x2c
 8002cb2:	2100      	movs	r1, #0
 8002cb4:	5499      	strb	r1, [r3, r2]
  hadc1.Init.Overrun = ADC_OVR_DATA_PRESERVED;
 8002cb6:	4b17      	ldr	r3, [pc, #92]	; (8002d14 <MX_ADC1_Init+0xc4>)
 8002cb8:	2200      	movs	r2, #0
 8002cba:	631a      	str	r2, [r3, #48]	; 0x30
  hadc1.Init.SamplingTimeCommon1 = ADC_SAMPLETIME_1CYCLE_5;
 8002cbc:	4b15      	ldr	r3, [pc, #84]	; (8002d14 <MX_ADC1_Init+0xc4>)
 8002cbe:	2200      	movs	r2, #0
 8002cc0:	635a      	str	r2, [r3, #52]	; 0x34
  hadc1.Init.SamplingTimeCommon2 = ADC_SAMPLETIME_1CYCLE_5;
 8002cc2:	4b14      	ldr	r3, [pc, #80]	; (8002d14 <MX_ADC1_Init+0xc4>)
 8002cc4:	2200      	movs	r2, #0
 8002cc6:	639a      	str	r2, [r3, #56]	; 0x38
  hadc1.Init.OversamplingMode = DISABLE;
 8002cc8:	4b12      	ldr	r3, [pc, #72]	; (8002d14 <MX_ADC1_Init+0xc4>)
 8002cca:	223c      	movs	r2, #60	; 0x3c
 8002ccc:	2100      	movs	r1, #0
 8002cce:	5499      	strb	r1, [r3, r2]
  hadc1.Init.TriggerFrequencyMode = ADC_TRIGGER_FREQ_HIGH;
 8002cd0:	4b10      	ldr	r3, [pc, #64]	; (8002d14 <MX_ADC1_Init+0xc4>)
 8002cd2:	2200      	movs	r2, #0
 8002cd4:	64da      	str	r2, [r3, #76]	; 0x4c
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 8002cd6:	4b0f      	ldr	r3, [pc, #60]	; (8002d14 <MX_ADC1_Init+0xc4>)
 8002cd8:	0018      	movs	r0, r3
 8002cda:	f000 fe5b 	bl	8003994 <HAL_ADC_Init>
 8002cde:	1e03      	subs	r3, r0, #0
 8002ce0:	d001      	beq.n	8002ce6 <MX_ADC1_Init+0x96>
  {
    Error_Handler();
 8002ce2:	f000 f9bf 	bl	8003064 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_0;
 8002ce6:	1d3b      	adds	r3, r7, #4
 8002ce8:	2201      	movs	r2, #1
 8002cea:	601a      	str	r2, [r3, #0]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 8002cec:	1d3b      	adds	r3, r7, #4
 8002cee:	2200      	movs	r2, #0
 8002cf0:	605a      	str	r2, [r3, #4]
  sConfig.SamplingTime = ADC_SAMPLINGTIME_COMMON_1;
 8002cf2:	1d3b      	adds	r3, r7, #4
 8002cf4:	2200      	movs	r2, #0
 8002cf6:	609a      	str	r2, [r3, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8002cf8:	1d3a      	adds	r2, r7, #4
 8002cfa:	4b06      	ldr	r3, [pc, #24]	; (8002d14 <MX_ADC1_Init+0xc4>)
 8002cfc:	0011      	movs	r1, r2
 8002cfe:	0018      	movs	r0, r3
 8002d00:	f001 f8de 	bl	8003ec0 <HAL_ADC_ConfigChannel>
 8002d04:	1e03      	subs	r3, r0, #0
 8002d06:	d001      	beq.n	8002d0c <MX_ADC1_Init+0xbc>
  {
    Error_Handler();
 8002d08:	f000 f9ac 	bl	8003064 <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 8002d0c:	46c0      	nop			; (mov r8, r8)
 8002d0e:	46bd      	mov	sp, r7
 8002d10:	b004      	add	sp, #16
 8002d12:	bd80      	pop	{r7, pc}
 8002d14:	20000208 	.word	0x20000208
 8002d18:	40012400 	.word	0x40012400

08002d1c <MX_I2C1_Init>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 8002d1c:	b580      	push	{r7, lr}
 8002d1e:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 8002d20:	4b1b      	ldr	r3, [pc, #108]	; (8002d90 <MX_I2C1_Init+0x74>)
 8002d22:	4a1c      	ldr	r2, [pc, #112]	; (8002d94 <MX_I2C1_Init+0x78>)
 8002d24:	601a      	str	r2, [r3, #0]
  hi2c1.Init.Timing = 0x00303D5B;
 8002d26:	4b1a      	ldr	r3, [pc, #104]	; (8002d90 <MX_I2C1_Init+0x74>)
 8002d28:	4a1b      	ldr	r2, [pc, #108]	; (8002d98 <MX_I2C1_Init+0x7c>)
 8002d2a:	605a      	str	r2, [r3, #4]
  hi2c1.Init.OwnAddress1 = 0;
 8002d2c:	4b18      	ldr	r3, [pc, #96]	; (8002d90 <MX_I2C1_Init+0x74>)
 8002d2e:	2200      	movs	r2, #0
 8002d30:	609a      	str	r2, [r3, #8]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8002d32:	4b17      	ldr	r3, [pc, #92]	; (8002d90 <MX_I2C1_Init+0x74>)
 8002d34:	2201      	movs	r2, #1
 8002d36:	60da      	str	r2, [r3, #12]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8002d38:	4b15      	ldr	r3, [pc, #84]	; (8002d90 <MX_I2C1_Init+0x74>)
 8002d3a:	2200      	movs	r2, #0
 8002d3c:	611a      	str	r2, [r3, #16]
  hi2c1.Init.OwnAddress2 = 0;
 8002d3e:	4b14      	ldr	r3, [pc, #80]	; (8002d90 <MX_I2C1_Init+0x74>)
 8002d40:	2200      	movs	r2, #0
 8002d42:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 8002d44:	4b12      	ldr	r3, [pc, #72]	; (8002d90 <MX_I2C1_Init+0x74>)
 8002d46:	2200      	movs	r2, #0
 8002d48:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8002d4a:	4b11      	ldr	r3, [pc, #68]	; (8002d90 <MX_I2C1_Init+0x74>)
 8002d4c:	2200      	movs	r2, #0
 8002d4e:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8002d50:	4b0f      	ldr	r3, [pc, #60]	; (8002d90 <MX_I2C1_Init+0x74>)
 8002d52:	2200      	movs	r2, #0
 8002d54:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 8002d56:	4b0e      	ldr	r3, [pc, #56]	; (8002d90 <MX_I2C1_Init+0x74>)
 8002d58:	0018      	movs	r0, r3
 8002d5a:	f001 fd45 	bl	80047e8 <HAL_I2C_Init>
 8002d5e:	1e03      	subs	r3, r0, #0
 8002d60:	d001      	beq.n	8002d66 <MX_I2C1_Init+0x4a>
  {
    Error_Handler();
 8002d62:	f000 f97f 	bl	8003064 <Error_Handler>
  }

  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c1, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 8002d66:	4b0a      	ldr	r3, [pc, #40]	; (8002d90 <MX_I2C1_Init+0x74>)
 8002d68:	2100      	movs	r1, #0
 8002d6a:	0018      	movs	r0, r3
 8002d6c:	f002 f8f0 	bl	8004f50 <HAL_I2CEx_ConfigAnalogFilter>
 8002d70:	1e03      	subs	r3, r0, #0
 8002d72:	d001      	beq.n	8002d78 <MX_I2C1_Init+0x5c>
  {
    Error_Handler();
 8002d74:	f000 f976 	bl	8003064 <Error_Handler>
  }

  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c1, 0) != HAL_OK)
 8002d78:	4b05      	ldr	r3, [pc, #20]	; (8002d90 <MX_I2C1_Init+0x74>)
 8002d7a:	2100      	movs	r1, #0
 8002d7c:	0018      	movs	r0, r3
 8002d7e:	f002 f933 	bl	8004fe8 <HAL_I2CEx_ConfigDigitalFilter>
 8002d82:	1e03      	subs	r3, r0, #0
 8002d84:	d001      	beq.n	8002d8a <MX_I2C1_Init+0x6e>
  {
    Error_Handler();
 8002d86:	f000 f96d 	bl	8003064 <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 8002d8a:	46c0      	nop			; (mov r8, r8)
 8002d8c:	46bd      	mov	sp, r7
 8002d8e:	bd80      	pop	{r7, pc}
 8002d90:	2000026c 	.word	0x2000026c
 8002d94:	40005400 	.word	0x40005400
 8002d98:	00303d5b 	.word	0x00303d5b

08002d9c <MX_TIM1_Init>:
  * @brief TIM1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM1_Init(void)
{
 8002d9c:	b580      	push	{r7, lr}
 8002d9e:	b098      	sub	sp, #96	; 0x60
 8002da0:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8002da2:	2354      	movs	r3, #84	; 0x54
 8002da4:	18fb      	adds	r3, r7, r3
 8002da6:	0018      	movs	r0, r3
 8002da8:	230c      	movs	r3, #12
 8002daa:	001a      	movs	r2, r3
 8002dac:	2100      	movs	r1, #0
 8002dae:	f004 fb2d 	bl	800740c <memset>
  TIM_OC_InitTypeDef sConfigOC = {0};
 8002db2:	2338      	movs	r3, #56	; 0x38
 8002db4:	18fb      	adds	r3, r7, r3
 8002db6:	0018      	movs	r0, r3
 8002db8:	231c      	movs	r3, #28
 8002dba:	001a      	movs	r2, r3
 8002dbc:	2100      	movs	r1, #0
 8002dbe:	f004 fb25 	bl	800740c <memset>
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 8002dc2:	1d3b      	adds	r3, r7, #4
 8002dc4:	0018      	movs	r0, r3
 8002dc6:	2334      	movs	r3, #52	; 0x34
 8002dc8:	001a      	movs	r2, r3
 8002dca:	2100      	movs	r1, #0
 8002dcc:	f004 fb1e 	bl	800740c <memset>

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 8002dd0:	4b45      	ldr	r3, [pc, #276]	; (8002ee8 <MX_TIM1_Init+0x14c>)
 8002dd2:	4a46      	ldr	r2, [pc, #280]	; (8002eec <MX_TIM1_Init+0x150>)
 8002dd4:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 9;
 8002dd6:	4b44      	ldr	r3, [pc, #272]	; (8002ee8 <MX_TIM1_Init+0x14c>)
 8002dd8:	2209      	movs	r2, #9
 8002dda:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 8002ddc:	4b42      	ldr	r3, [pc, #264]	; (8002ee8 <MX_TIM1_Init+0x14c>)
 8002dde:	2200      	movs	r2, #0
 8002de0:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 99;
 8002de2:	4b41      	ldr	r3, [pc, #260]	; (8002ee8 <MX_TIM1_Init+0x14c>)
 8002de4:	2263      	movs	r2, #99	; 0x63
 8002de6:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8002de8:	4b3f      	ldr	r3, [pc, #252]	; (8002ee8 <MX_TIM1_Init+0x14c>)
 8002dea:	2200      	movs	r2, #0
 8002dec:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 8002dee:	4b3e      	ldr	r3, [pc, #248]	; (8002ee8 <MX_TIM1_Init+0x14c>)
 8002df0:	2200      	movs	r2, #0
 8002df2:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8002df4:	4b3c      	ldr	r3, [pc, #240]	; (8002ee8 <MX_TIM1_Init+0x14c>)
 8002df6:	2200      	movs	r2, #0
 8002df8:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_PWM_Init(&htim1) != HAL_OK)
 8002dfa:	4b3b      	ldr	r3, [pc, #236]	; (8002ee8 <MX_TIM1_Init+0x14c>)
 8002dfc:	0018      	movs	r0, r3
 8002dfe:	f002 ffc9 	bl	8005d94 <HAL_TIM_PWM_Init>
 8002e02:	1e03      	subs	r3, r0, #0
 8002e04:	d001      	beq.n	8002e0a <MX_TIM1_Init+0x6e>
  {
    Error_Handler();
 8002e06:	f000 f92d 	bl	8003064 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8002e0a:	2154      	movs	r1, #84	; 0x54
 8002e0c:	187b      	adds	r3, r7, r1
 8002e0e:	2200      	movs	r2, #0
 8002e10:	601a      	str	r2, [r3, #0]
  sMasterConfig.MasterOutputTrigger2 = TIM_TRGO2_RESET;
 8002e12:	187b      	adds	r3, r7, r1
 8002e14:	2200      	movs	r2, #0
 8002e16:	605a      	str	r2, [r3, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8002e18:	187b      	adds	r3, r7, r1
 8002e1a:	2200      	movs	r2, #0
 8002e1c:	609a      	str	r2, [r3, #8]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 8002e1e:	187a      	adds	r2, r7, r1
 8002e20:	4b31      	ldr	r3, [pc, #196]	; (8002ee8 <MX_TIM1_Init+0x14c>)
 8002e22:	0011      	movs	r1, r2
 8002e24:	0018      	movs	r0, r3
 8002e26:	f003 fd21 	bl	800686c <HAL_TIMEx_MasterConfigSynchronization>
 8002e2a:	1e03      	subs	r3, r0, #0
 8002e2c:	d001      	beq.n	8002e32 <MX_TIM1_Init+0x96>
  {
    Error_Handler();
 8002e2e:	f000 f919 	bl	8003064 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8002e32:	2138      	movs	r1, #56	; 0x38
 8002e34:	187b      	adds	r3, r7, r1
 8002e36:	2260      	movs	r2, #96	; 0x60
 8002e38:	601a      	str	r2, [r3, #0]
  sConfigOC.Pulse = 0;
 8002e3a:	187b      	adds	r3, r7, r1
 8002e3c:	2200      	movs	r2, #0
 8002e3e:	605a      	str	r2, [r3, #4]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8002e40:	187b      	adds	r3, r7, r1
 8002e42:	2200      	movs	r2, #0
 8002e44:	609a      	str	r2, [r3, #8]
  sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 8002e46:	187b      	adds	r3, r7, r1
 8002e48:	2200      	movs	r2, #0
 8002e4a:	60da      	str	r2, [r3, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8002e4c:	187b      	adds	r3, r7, r1
 8002e4e:	2200      	movs	r2, #0
 8002e50:	611a      	str	r2, [r3, #16]
  sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 8002e52:	187b      	adds	r3, r7, r1
 8002e54:	2200      	movs	r2, #0
 8002e56:	615a      	str	r2, [r3, #20]
  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 8002e58:	187b      	adds	r3, r7, r1
 8002e5a:	2200      	movs	r2, #0
 8002e5c:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8002e5e:	1879      	adds	r1, r7, r1
 8002e60:	4b21      	ldr	r3, [pc, #132]	; (8002ee8 <MX_TIM1_Init+0x14c>)
 8002e62:	2200      	movs	r2, #0
 8002e64:	0018      	movs	r0, r3
 8002e66:	f003 f8cb 	bl	8006000 <HAL_TIM_PWM_ConfigChannel>
 8002e6a:	1e03      	subs	r3, r0, #0
 8002e6c:	d001      	beq.n	8002e72 <MX_TIM1_Init+0xd6>
  {
    Error_Handler();
 8002e6e:	f000 f8f9 	bl	8003064 <Error_Handler>
  }
  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 8002e72:	1d3b      	adds	r3, r7, #4
 8002e74:	2200      	movs	r2, #0
 8002e76:	601a      	str	r2, [r3, #0]
  sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 8002e78:	1d3b      	adds	r3, r7, #4
 8002e7a:	2200      	movs	r2, #0
 8002e7c:	605a      	str	r2, [r3, #4]
  sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 8002e7e:	1d3b      	adds	r3, r7, #4
 8002e80:	2200      	movs	r2, #0
 8002e82:	609a      	str	r2, [r3, #8]
  sBreakDeadTimeConfig.DeadTime = 0;
 8002e84:	1d3b      	adds	r3, r7, #4
 8002e86:	2200      	movs	r2, #0
 8002e88:	60da      	str	r2, [r3, #12]
  sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 8002e8a:	1d3b      	adds	r3, r7, #4
 8002e8c:	2200      	movs	r2, #0
 8002e8e:	611a      	str	r2, [r3, #16]
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 8002e90:	1d3b      	adds	r3, r7, #4
 8002e92:	2280      	movs	r2, #128	; 0x80
 8002e94:	0192      	lsls	r2, r2, #6
 8002e96:	615a      	str	r2, [r3, #20]
  sBreakDeadTimeConfig.BreakFilter = 0;
 8002e98:	1d3b      	adds	r3, r7, #4
 8002e9a:	2200      	movs	r2, #0
 8002e9c:	619a      	str	r2, [r3, #24]
  sBreakDeadTimeConfig.BreakAFMode = TIM_BREAK_AFMODE_INPUT;
 8002e9e:	1d3b      	adds	r3, r7, #4
 8002ea0:	2200      	movs	r2, #0
 8002ea2:	61da      	str	r2, [r3, #28]
  sBreakDeadTimeConfig.Break2State = TIM_BREAK2_DISABLE;
 8002ea4:	1d3b      	adds	r3, r7, #4
 8002ea6:	2200      	movs	r2, #0
 8002ea8:	621a      	str	r2, [r3, #32]
  sBreakDeadTimeConfig.Break2Polarity = TIM_BREAK2POLARITY_HIGH;
 8002eaa:	1d3b      	adds	r3, r7, #4
 8002eac:	2280      	movs	r2, #128	; 0x80
 8002eae:	0492      	lsls	r2, r2, #18
 8002eb0:	625a      	str	r2, [r3, #36]	; 0x24
  sBreakDeadTimeConfig.Break2Filter = 0;
 8002eb2:	1d3b      	adds	r3, r7, #4
 8002eb4:	2200      	movs	r2, #0
 8002eb6:	629a      	str	r2, [r3, #40]	; 0x28
  sBreakDeadTimeConfig.Break2AFMode = TIM_BREAK_AFMODE_INPUT;
 8002eb8:	1d3b      	adds	r3, r7, #4
 8002eba:	2200      	movs	r2, #0
 8002ebc:	62da      	str	r2, [r3, #44]	; 0x2c
  sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 8002ebe:	1d3b      	adds	r3, r7, #4
 8002ec0:	2200      	movs	r2, #0
 8002ec2:	631a      	str	r2, [r3, #48]	; 0x30
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim1, &sBreakDeadTimeConfig) != HAL_OK)
 8002ec4:	1d3a      	adds	r2, r7, #4
 8002ec6:	4b08      	ldr	r3, [pc, #32]	; (8002ee8 <MX_TIM1_Init+0x14c>)
 8002ec8:	0011      	movs	r1, r2
 8002eca:	0018      	movs	r0, r3
 8002ecc:	f003 fd36 	bl	800693c <HAL_TIMEx_ConfigBreakDeadTime>
 8002ed0:	1e03      	subs	r3, r0, #0
 8002ed2:	d001      	beq.n	8002ed8 <MX_TIM1_Init+0x13c>
  {
    Error_Handler();
 8002ed4:	f000 f8c6 	bl	8003064 <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */
  HAL_TIM_MspPostInit(&htim1);
 8002ed8:	4b03      	ldr	r3, [pc, #12]	; (8002ee8 <MX_TIM1_Init+0x14c>)
 8002eda:	0018      	movs	r0, r3
 8002edc:	f000 f9ee 	bl	80032bc <HAL_TIM_MspPostInit>

}
 8002ee0:	46c0      	nop			; (mov r8, r8)
 8002ee2:	46bd      	mov	sp, r7
 8002ee4:	b018      	add	sp, #96	; 0x60
 8002ee6:	bd80      	pop	{r7, pc}
 8002ee8:	200002c0 	.word	0x200002c0
 8002eec:	40012c00 	.word	0x40012c00

08002ef0 <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 8002ef0:	b580      	push	{r7, lr}
 8002ef2:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8002ef4:	4b16      	ldr	r3, [pc, #88]	; (8002f50 <MX_USART2_UART_Init+0x60>)
 8002ef6:	4a17      	ldr	r2, [pc, #92]	; (8002f54 <MX_USART2_UART_Init+0x64>)
 8002ef8:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 8002efa:	4b15      	ldr	r3, [pc, #84]	; (8002f50 <MX_USART2_UART_Init+0x60>)
 8002efc:	22e1      	movs	r2, #225	; 0xe1
 8002efe:	0252      	lsls	r2, r2, #9
 8002f00:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_7B;
 8002f02:	4b13      	ldr	r3, [pc, #76]	; (8002f50 <MX_USART2_UART_Init+0x60>)
 8002f04:	2280      	movs	r2, #128	; 0x80
 8002f06:	0552      	lsls	r2, r2, #21
 8002f08:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8002f0a:	4b11      	ldr	r3, [pc, #68]	; (8002f50 <MX_USART2_UART_Init+0x60>)
 8002f0c:	2200      	movs	r2, #0
 8002f0e:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 8002f10:	4b0f      	ldr	r3, [pc, #60]	; (8002f50 <MX_USART2_UART_Init+0x60>)
 8002f12:	2200      	movs	r2, #0
 8002f14:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8002f16:	4b0e      	ldr	r3, [pc, #56]	; (8002f50 <MX_USART2_UART_Init+0x60>)
 8002f18:	220c      	movs	r2, #12
 8002f1a:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8002f1c:	4b0c      	ldr	r3, [pc, #48]	; (8002f50 <MX_USART2_UART_Init+0x60>)
 8002f1e:	2200      	movs	r2, #0
 8002f20:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8002f22:	4b0b      	ldr	r3, [pc, #44]	; (8002f50 <MX_USART2_UART_Init+0x60>)
 8002f24:	2200      	movs	r2, #0
 8002f26:	61da      	str	r2, [r3, #28]
  huart2.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8002f28:	4b09      	ldr	r3, [pc, #36]	; (8002f50 <MX_USART2_UART_Init+0x60>)
 8002f2a:	2200      	movs	r2, #0
 8002f2c:	621a      	str	r2, [r3, #32]
  huart2.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 8002f2e:	4b08      	ldr	r3, [pc, #32]	; (8002f50 <MX_USART2_UART_Init+0x60>)
 8002f30:	2200      	movs	r2, #0
 8002f32:	625a      	str	r2, [r3, #36]	; 0x24
  huart2.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8002f34:	4b06      	ldr	r3, [pc, #24]	; (8002f50 <MX_USART2_UART_Init+0x60>)
 8002f36:	2200      	movs	r2, #0
 8002f38:	629a      	str	r2, [r3, #40]	; 0x28
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8002f3a:	4b05      	ldr	r3, [pc, #20]	; (8002f50 <MX_USART2_UART_Init+0x60>)
 8002f3c:	0018      	movs	r0, r3
 8002f3e:	f003 fda3 	bl	8006a88 <HAL_UART_Init>
 8002f42:	1e03      	subs	r3, r0, #0
 8002f44:	d001      	beq.n	8002f4a <MX_USART2_UART_Init+0x5a>
  {
    Error_Handler();
 8002f46:	f000 f88d 	bl	8003064 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 8002f4a:	46c0      	nop			; (mov r8, r8)
 8002f4c:	46bd      	mov	sp, r7
 8002f4e:	bd80      	pop	{r7, pc}
 8002f50:	2000030c 	.word	0x2000030c
 8002f54:	40004400 	.word	0x40004400

08002f58 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8002f58:	b590      	push	{r4, r7, lr}
 8002f5a:	b08b      	sub	sp, #44	; 0x2c
 8002f5c:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002f5e:	2414      	movs	r4, #20
 8002f60:	193b      	adds	r3, r7, r4
 8002f62:	0018      	movs	r0, r3
 8002f64:	2314      	movs	r3, #20
 8002f66:	001a      	movs	r2, r3
 8002f68:	2100      	movs	r1, #0
 8002f6a:	f004 fa4f 	bl	800740c <memset>
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8002f6e:	4b2e      	ldr	r3, [pc, #184]	; (8003028 <MX_GPIO_Init+0xd0>)
 8002f70:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8002f72:	4b2d      	ldr	r3, [pc, #180]	; (8003028 <MX_GPIO_Init+0xd0>)
 8002f74:	2102      	movs	r1, #2
 8002f76:	430a      	orrs	r2, r1
 8002f78:	635a      	str	r2, [r3, #52]	; 0x34
 8002f7a:	4b2b      	ldr	r3, [pc, #172]	; (8003028 <MX_GPIO_Init+0xd0>)
 8002f7c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002f7e:	2202      	movs	r2, #2
 8002f80:	4013      	ands	r3, r2
 8002f82:	613b      	str	r3, [r7, #16]
 8002f84:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8002f86:	4b28      	ldr	r3, [pc, #160]	; (8003028 <MX_GPIO_Init+0xd0>)
 8002f88:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8002f8a:	4b27      	ldr	r3, [pc, #156]	; (8003028 <MX_GPIO_Init+0xd0>)
 8002f8c:	2104      	movs	r1, #4
 8002f8e:	430a      	orrs	r2, r1
 8002f90:	635a      	str	r2, [r3, #52]	; 0x34
 8002f92:	4b25      	ldr	r3, [pc, #148]	; (8003028 <MX_GPIO_Init+0xd0>)
 8002f94:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002f96:	2204      	movs	r2, #4
 8002f98:	4013      	ands	r3, r2
 8002f9a:	60fb      	str	r3, [r7, #12]
 8002f9c:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOF_CLK_ENABLE();
 8002f9e:	4b22      	ldr	r3, [pc, #136]	; (8003028 <MX_GPIO_Init+0xd0>)
 8002fa0:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8002fa2:	4b21      	ldr	r3, [pc, #132]	; (8003028 <MX_GPIO_Init+0xd0>)
 8002fa4:	2120      	movs	r1, #32
 8002fa6:	430a      	orrs	r2, r1
 8002fa8:	635a      	str	r2, [r3, #52]	; 0x34
 8002faa:	4b1f      	ldr	r3, [pc, #124]	; (8003028 <MX_GPIO_Init+0xd0>)
 8002fac:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002fae:	2220      	movs	r2, #32
 8002fb0:	4013      	ands	r3, r2
 8002fb2:	60bb      	str	r3, [r7, #8]
 8002fb4:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8002fb6:	4b1c      	ldr	r3, [pc, #112]	; (8003028 <MX_GPIO_Init+0xd0>)
 8002fb8:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8002fba:	4b1b      	ldr	r3, [pc, #108]	; (8003028 <MX_GPIO_Init+0xd0>)
 8002fbc:	2101      	movs	r1, #1
 8002fbe:	430a      	orrs	r2, r1
 8002fc0:	635a      	str	r2, [r3, #52]	; 0x34
 8002fc2:	4b19      	ldr	r3, [pc, #100]	; (8003028 <MX_GPIO_Init+0xd0>)
 8002fc4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002fc6:	2201      	movs	r2, #1
 8002fc8:	4013      	ands	r3, r2
 8002fca:	607b      	str	r3, [r7, #4]
 8002fcc:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LD3_GPIO_Port, LD3_Pin, GPIO_PIN_RESET);
 8002fce:	4b17      	ldr	r3, [pc, #92]	; (800302c <MX_GPIO_Init+0xd4>)
 8002fd0:	2200      	movs	r2, #0
 8002fd2:	2140      	movs	r1, #64	; 0x40
 8002fd4:	0018      	movs	r0, r3
 8002fd6:	f001 fbe9 	bl	80047ac <HAL_GPIO_WritePin>

  /*Configure GPIO pin : T_NRST_Pin */
  GPIO_InitStruct.Pin = T_NRST_Pin;
 8002fda:	193b      	adds	r3, r7, r4
 8002fdc:	2204      	movs	r2, #4
 8002fde:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8002fe0:	193b      	adds	r3, r7, r4
 8002fe2:	2288      	movs	r2, #136	; 0x88
 8002fe4:	0352      	lsls	r2, r2, #13
 8002fe6:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002fe8:	193b      	adds	r3, r7, r4
 8002fea:	2200      	movs	r2, #0
 8002fec:	609a      	str	r2, [r3, #8]
  HAL_GPIO_Init(T_NRST_GPIO_Port, &GPIO_InitStruct);
 8002fee:	193b      	adds	r3, r7, r4
 8002ff0:	4a0f      	ldr	r2, [pc, #60]	; (8003030 <MX_GPIO_Init+0xd8>)
 8002ff2:	0019      	movs	r1, r3
 8002ff4:	0010      	movs	r0, r2
 8002ff6:	f001 fa75 	bl	80044e4 <HAL_GPIO_Init>

  /*Configure GPIO pin : LD3_Pin */
  GPIO_InitStruct.Pin = LD3_Pin;
 8002ffa:	0021      	movs	r1, r4
 8002ffc:	187b      	adds	r3, r7, r1
 8002ffe:	2240      	movs	r2, #64	; 0x40
 8003000:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8003002:	187b      	adds	r3, r7, r1
 8003004:	2201      	movs	r2, #1
 8003006:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003008:	187b      	adds	r3, r7, r1
 800300a:	2200      	movs	r2, #0
 800300c:	609a      	str	r2, [r3, #8]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800300e:	187b      	adds	r3, r7, r1
 8003010:	2200      	movs	r2, #0
 8003012:	60da      	str	r2, [r3, #12]
  HAL_GPIO_Init(LD3_GPIO_Port, &GPIO_InitStruct);
 8003014:	187b      	adds	r3, r7, r1
 8003016:	4a05      	ldr	r2, [pc, #20]	; (800302c <MX_GPIO_Init+0xd4>)
 8003018:	0019      	movs	r1, r3
 800301a:	0010      	movs	r0, r2
 800301c:	f001 fa62 	bl	80044e4 <HAL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 8003020:	46c0      	nop			; (mov r8, r8)
 8003022:	46bd      	mov	sp, r7
 8003024:	b00b      	add	sp, #44	; 0x2c
 8003026:	bd90      	pop	{r4, r7, pc}
 8003028:	40021000 	.word	0x40021000
 800302c:	50000800 	.word	0x50000800
 8003030:	50001400 	.word	0x50001400

08003034 <setFanSpeed>:

/* USER CODE BEGIN 4 */
void setFanSpeed(uint8_t pwm_value) {
 8003034:	b580      	push	{r7, lr}
 8003036:	b082      	sub	sp, #8
 8003038:	af00      	add	r7, sp, #0
 800303a:	0002      	movs	r2, r0
 800303c:	1dfb      	adds	r3, r7, #7
 800303e:	701a      	strb	r2, [r3, #0]
  if (pwm_value > 99) {
 8003040:	1dfb      	adds	r3, r7, #7
 8003042:	781b      	ldrb	r3, [r3, #0]
 8003044:	2b63      	cmp	r3, #99	; 0x63
 8003046:	d902      	bls.n	800304e <setFanSpeed+0x1a>
    pwm_value = 99;
 8003048:	1dfb      	adds	r3, r7, #7
 800304a:	2263      	movs	r2, #99	; 0x63
 800304c:	701a      	strb	r2, [r3, #0]
  }
  __HAL_TIM_SET_COMPARE(&htim1, TIM_CHANNEL_1, pwm_value);
 800304e:	4b04      	ldr	r3, [pc, #16]	; (8003060 <setFanSpeed+0x2c>)
 8003050:	681b      	ldr	r3, [r3, #0]
 8003052:	1dfa      	adds	r2, r7, #7
 8003054:	7812      	ldrb	r2, [r2, #0]
 8003056:	635a      	str	r2, [r3, #52]	; 0x34
}
 8003058:	46c0      	nop			; (mov r8, r8)
 800305a:	46bd      	mov	sp, r7
 800305c:	b002      	add	sp, #8
 800305e:	bd80      	pop	{r7, pc}
 8003060:	200002c0 	.word	0x200002c0

08003064 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8003064:	b580      	push	{r7, lr}
 8003066:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8003068:	b672      	cpsid	i
}
 800306a:	46c0      	nop			; (mov r8, r8)
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 800306c:	e7fe      	b.n	800306c <Error_Handler+0x8>
	...

08003070 <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                    /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8003070:	b580      	push	{r7, lr}
 8003072:	b082      	sub	sp, #8
 8003074:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8003076:	4b0f      	ldr	r3, [pc, #60]	; (80030b4 <HAL_MspInit+0x44>)
 8003078:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 800307a:	4b0e      	ldr	r3, [pc, #56]	; (80030b4 <HAL_MspInit+0x44>)
 800307c:	2101      	movs	r1, #1
 800307e:	430a      	orrs	r2, r1
 8003080:	641a      	str	r2, [r3, #64]	; 0x40
 8003082:	4b0c      	ldr	r3, [pc, #48]	; (80030b4 <HAL_MspInit+0x44>)
 8003084:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003086:	2201      	movs	r2, #1
 8003088:	4013      	ands	r3, r2
 800308a:	607b      	str	r3, [r7, #4]
 800308c:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 800308e:	4b09      	ldr	r3, [pc, #36]	; (80030b4 <HAL_MspInit+0x44>)
 8003090:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8003092:	4b08      	ldr	r3, [pc, #32]	; (80030b4 <HAL_MspInit+0x44>)
 8003094:	2180      	movs	r1, #128	; 0x80
 8003096:	0549      	lsls	r1, r1, #21
 8003098:	430a      	orrs	r2, r1
 800309a:	63da      	str	r2, [r3, #60]	; 0x3c
 800309c:	4b05      	ldr	r3, [pc, #20]	; (80030b4 <HAL_MspInit+0x44>)
 800309e:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 80030a0:	2380      	movs	r3, #128	; 0x80
 80030a2:	055b      	lsls	r3, r3, #21
 80030a4:	4013      	ands	r3, r2
 80030a6:	603b      	str	r3, [r7, #0]
 80030a8:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80030aa:	46c0      	nop			; (mov r8, r8)
 80030ac:	46bd      	mov	sp, r7
 80030ae:	b002      	add	sp, #8
 80030b0:	bd80      	pop	{r7, pc}
 80030b2:	46c0      	nop			; (mov r8, r8)
 80030b4:	40021000 	.word	0x40021000

080030b8 <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 80030b8:	b590      	push	{r4, r7, lr}
 80030ba:	b08b      	sub	sp, #44	; 0x2c
 80030bc:	af00      	add	r7, sp, #0
 80030be:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80030c0:	2414      	movs	r4, #20
 80030c2:	193b      	adds	r3, r7, r4
 80030c4:	0018      	movs	r0, r3
 80030c6:	2314      	movs	r3, #20
 80030c8:	001a      	movs	r2, r3
 80030ca:	2100      	movs	r1, #0
 80030cc:	f004 f99e 	bl	800740c <memset>
  if(hadc->Instance==ADC1)
 80030d0:	687b      	ldr	r3, [r7, #4]
 80030d2:	681b      	ldr	r3, [r3, #0]
 80030d4:	4a18      	ldr	r2, [pc, #96]	; (8003138 <HAL_ADC_MspInit+0x80>)
 80030d6:	4293      	cmp	r3, r2
 80030d8:	d129      	bne.n	800312e <HAL_ADC_MspInit+0x76>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ADC_CLK_ENABLE();
 80030da:	4b18      	ldr	r3, [pc, #96]	; (800313c <HAL_ADC_MspInit+0x84>)
 80030dc:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80030de:	4b17      	ldr	r3, [pc, #92]	; (800313c <HAL_ADC_MspInit+0x84>)
 80030e0:	2180      	movs	r1, #128	; 0x80
 80030e2:	0349      	lsls	r1, r1, #13
 80030e4:	430a      	orrs	r2, r1
 80030e6:	641a      	str	r2, [r3, #64]	; 0x40
 80030e8:	4b14      	ldr	r3, [pc, #80]	; (800313c <HAL_ADC_MspInit+0x84>)
 80030ea:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80030ec:	2380      	movs	r3, #128	; 0x80
 80030ee:	035b      	lsls	r3, r3, #13
 80030f0:	4013      	ands	r3, r2
 80030f2:	613b      	str	r3, [r7, #16]
 80030f4:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80030f6:	4b11      	ldr	r3, [pc, #68]	; (800313c <HAL_ADC_MspInit+0x84>)
 80030f8:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80030fa:	4b10      	ldr	r3, [pc, #64]	; (800313c <HAL_ADC_MspInit+0x84>)
 80030fc:	2101      	movs	r1, #1
 80030fe:	430a      	orrs	r2, r1
 8003100:	635a      	str	r2, [r3, #52]	; 0x34
 8003102:	4b0e      	ldr	r3, [pc, #56]	; (800313c <HAL_ADC_MspInit+0x84>)
 8003104:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003106:	2201      	movs	r2, #1
 8003108:	4013      	ands	r3, r2
 800310a:	60fb      	str	r3, [r7, #12]
 800310c:	68fb      	ldr	r3, [r7, #12]
    /**ADC1 GPIO Configuration
    PA0     ------> ADC1_IN0
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0;
 800310e:	193b      	adds	r3, r7, r4
 8003110:	2201      	movs	r2, #1
 8003112:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8003114:	193b      	adds	r3, r7, r4
 8003116:	2203      	movs	r2, #3
 8003118:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800311a:	193b      	adds	r3, r7, r4
 800311c:	2200      	movs	r2, #0
 800311e:	609a      	str	r2, [r3, #8]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8003120:	193a      	adds	r2, r7, r4
 8003122:	23a0      	movs	r3, #160	; 0xa0
 8003124:	05db      	lsls	r3, r3, #23
 8003126:	0011      	movs	r1, r2
 8003128:	0018      	movs	r0, r3
 800312a:	f001 f9db 	bl	80044e4 <HAL_GPIO_Init>
  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }

}
 800312e:	46c0      	nop			; (mov r8, r8)
 8003130:	46bd      	mov	sp, r7
 8003132:	b00b      	add	sp, #44	; 0x2c
 8003134:	bd90      	pop	{r4, r7, pc}
 8003136:	46c0      	nop			; (mov r8, r8)
 8003138:	40012400 	.word	0x40012400
 800313c:	40021000 	.word	0x40021000

08003140 <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 8003140:	b590      	push	{r4, r7, lr}
 8003142:	b095      	sub	sp, #84	; 0x54
 8003144:	af00      	add	r7, sp, #0
 8003146:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8003148:	233c      	movs	r3, #60	; 0x3c
 800314a:	18fb      	adds	r3, r7, r3
 800314c:	0018      	movs	r0, r3
 800314e:	2314      	movs	r3, #20
 8003150:	001a      	movs	r2, r3
 8003152:	2100      	movs	r1, #0
 8003154:	f004 f95a 	bl	800740c <memset>
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8003158:	2414      	movs	r4, #20
 800315a:	193b      	adds	r3, r7, r4
 800315c:	0018      	movs	r0, r3
 800315e:	2328      	movs	r3, #40	; 0x28
 8003160:	001a      	movs	r2, r3
 8003162:	2100      	movs	r1, #0
 8003164:	f004 f952 	bl	800740c <memset>
  if(hi2c->Instance==I2C1)
 8003168:	687b      	ldr	r3, [r7, #4]
 800316a:	681b      	ldr	r3, [r3, #0]
 800316c:	4a35      	ldr	r2, [pc, #212]	; (8003244 <HAL_I2C_MspInit+0x104>)
 800316e:	4293      	cmp	r3, r2
 8003170:	d163      	bne.n	800323a <HAL_I2C_MspInit+0xfa>

  /* USER CODE END I2C1_MspInit 0 */

  /** Initializes the peripherals clocks
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_I2C1;
 8003172:	193b      	adds	r3, r7, r4
 8003174:	2220      	movs	r2, #32
 8003176:	601a      	str	r2, [r3, #0]
    PeriphClkInit.I2c1ClockSelection = RCC_I2C1CLKSOURCE_PCLK1;
 8003178:	193b      	adds	r3, r7, r4
 800317a:	2200      	movs	r2, #0
 800317c:	60da      	str	r2, [r3, #12]
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 800317e:	193b      	adds	r3, r7, r4
 8003180:	0018      	movs	r0, r3
 8003182:	f002 fc8d 	bl	8005aa0 <HAL_RCCEx_PeriphCLKConfig>
 8003186:	1e03      	subs	r3, r0, #0
 8003188:	d001      	beq.n	800318e <HAL_I2C_MspInit+0x4e>
    {
      Error_Handler();
 800318a:	f7ff ff6b 	bl	8003064 <Error_Handler>
    }

    __HAL_RCC_GPIOB_CLK_ENABLE();
 800318e:	4b2e      	ldr	r3, [pc, #184]	; (8003248 <HAL_I2C_MspInit+0x108>)
 8003190:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8003192:	4b2d      	ldr	r3, [pc, #180]	; (8003248 <HAL_I2C_MspInit+0x108>)
 8003194:	2102      	movs	r1, #2
 8003196:	430a      	orrs	r2, r1
 8003198:	635a      	str	r2, [r3, #52]	; 0x34
 800319a:	4b2b      	ldr	r3, [pc, #172]	; (8003248 <HAL_I2C_MspInit+0x108>)
 800319c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800319e:	2202      	movs	r2, #2
 80031a0:	4013      	ands	r3, r2
 80031a2:	613b      	str	r3, [r7, #16]
 80031a4:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 80031a6:	4b28      	ldr	r3, [pc, #160]	; (8003248 <HAL_I2C_MspInit+0x108>)
 80031a8:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80031aa:	4b27      	ldr	r3, [pc, #156]	; (8003248 <HAL_I2C_MspInit+0x108>)
 80031ac:	2101      	movs	r1, #1
 80031ae:	430a      	orrs	r2, r1
 80031b0:	635a      	str	r2, [r3, #52]	; 0x34
 80031b2:	4b25      	ldr	r3, [pc, #148]	; (8003248 <HAL_I2C_MspInit+0x108>)
 80031b4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80031b6:	2201      	movs	r2, #1
 80031b8:	4013      	ands	r3, r2
 80031ba:	60fb      	str	r3, [r7, #12]
 80031bc:	68fb      	ldr	r3, [r7, #12]
    /**I2C1 GPIO Configuration
    PB9     ------> I2C1_SDA
    PA9     ------> I2C1_SCL
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9;
 80031be:	213c      	movs	r1, #60	; 0x3c
 80031c0:	187b      	adds	r3, r7, r1
 80031c2:	2280      	movs	r2, #128	; 0x80
 80031c4:	0092      	lsls	r2, r2, #2
 80031c6:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 80031c8:	000c      	movs	r4, r1
 80031ca:	193b      	adds	r3, r7, r4
 80031cc:	2212      	movs	r2, #18
 80031ce:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80031d0:	193b      	adds	r3, r7, r4
 80031d2:	2200      	movs	r2, #0
 80031d4:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80031d6:	193b      	adds	r3, r7, r4
 80031d8:	2200      	movs	r2, #0
 80031da:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF6_I2C1;
 80031dc:	193b      	adds	r3, r7, r4
 80031de:	2206      	movs	r2, #6
 80031e0:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80031e2:	193b      	adds	r3, r7, r4
 80031e4:	4a19      	ldr	r2, [pc, #100]	; (800324c <HAL_I2C_MspInit+0x10c>)
 80031e6:	0019      	movs	r1, r3
 80031e8:	0010      	movs	r0, r2
 80031ea:	f001 f97b 	bl	80044e4 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_9;
 80031ee:	0021      	movs	r1, r4
 80031f0:	187b      	adds	r3, r7, r1
 80031f2:	2280      	movs	r2, #128	; 0x80
 80031f4:	0092      	lsls	r2, r2, #2
 80031f6:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 80031f8:	187b      	adds	r3, r7, r1
 80031fa:	2212      	movs	r2, #18
 80031fc:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80031fe:	187b      	adds	r3, r7, r1
 8003200:	2200      	movs	r2, #0
 8003202:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8003204:	187b      	adds	r3, r7, r1
 8003206:	2200      	movs	r2, #0
 8003208:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF6_I2C1;
 800320a:	187b      	adds	r3, r7, r1
 800320c:	2206      	movs	r2, #6
 800320e:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8003210:	187a      	adds	r2, r7, r1
 8003212:	23a0      	movs	r3, #160	; 0xa0
 8003214:	05db      	lsls	r3, r3, #23
 8003216:	0011      	movs	r1, r2
 8003218:	0018      	movs	r0, r3
 800321a:	f001 f963 	bl	80044e4 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 800321e:	4b0a      	ldr	r3, [pc, #40]	; (8003248 <HAL_I2C_MspInit+0x108>)
 8003220:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8003222:	4b09      	ldr	r3, [pc, #36]	; (8003248 <HAL_I2C_MspInit+0x108>)
 8003224:	2180      	movs	r1, #128	; 0x80
 8003226:	0389      	lsls	r1, r1, #14
 8003228:	430a      	orrs	r2, r1
 800322a:	63da      	str	r2, [r3, #60]	; 0x3c
 800322c:	4b06      	ldr	r3, [pc, #24]	; (8003248 <HAL_I2C_MspInit+0x108>)
 800322e:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8003230:	2380      	movs	r3, #128	; 0x80
 8003232:	039b      	lsls	r3, r3, #14
 8003234:	4013      	ands	r3, r2
 8003236:	60bb      	str	r3, [r7, #8]
 8003238:	68bb      	ldr	r3, [r7, #8]
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }

}
 800323a:	46c0      	nop			; (mov r8, r8)
 800323c:	46bd      	mov	sp, r7
 800323e:	b015      	add	sp, #84	; 0x54
 8003240:	bd90      	pop	{r4, r7, pc}
 8003242:	46c0      	nop			; (mov r8, r8)
 8003244:	40005400 	.word	0x40005400
 8003248:	40021000 	.word	0x40021000
 800324c:	50000400 	.word	0x50000400

08003250 <HAL_TIM_PWM_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_pwm: TIM_PWM handle pointer
* @retval None
*/
void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef* htim_pwm)
{
 8003250:	b590      	push	{r4, r7, lr}
 8003252:	b08f      	sub	sp, #60	; 0x3c
 8003254:	af00      	add	r7, sp, #0
 8003256:	6078      	str	r0, [r7, #4]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8003258:	2410      	movs	r4, #16
 800325a:	193b      	adds	r3, r7, r4
 800325c:	0018      	movs	r0, r3
 800325e:	2328      	movs	r3, #40	; 0x28
 8003260:	001a      	movs	r2, r3
 8003262:	2100      	movs	r1, #0
 8003264:	f004 f8d2 	bl	800740c <memset>
  if(htim_pwm->Instance==TIM1)
 8003268:	687b      	ldr	r3, [r7, #4]
 800326a:	681b      	ldr	r3, [r3, #0]
 800326c:	4a11      	ldr	r2, [pc, #68]	; (80032b4 <HAL_TIM_PWM_MspInit+0x64>)
 800326e:	4293      	cmp	r3, r2
 8003270:	d11c      	bne.n	80032ac <HAL_TIM_PWM_MspInit+0x5c>

  /* USER CODE END TIM1_MspInit 0 */

  /** Initializes the peripherals clocks
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_TIM1;
 8003272:	193b      	adds	r3, r7, r4
 8003274:	2280      	movs	r2, #128	; 0x80
 8003276:	0392      	lsls	r2, r2, #14
 8003278:	601a      	str	r2, [r3, #0]
    PeriphClkInit.Tim1ClockSelection = RCC_TIM1CLKSOURCE_PCLK1;
 800327a:	193b      	adds	r3, r7, r4
 800327c:	2200      	movs	r2, #0
 800327e:	621a      	str	r2, [r3, #32]
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8003280:	193b      	adds	r3, r7, r4
 8003282:	0018      	movs	r0, r3
 8003284:	f002 fc0c 	bl	8005aa0 <HAL_RCCEx_PeriphCLKConfig>
 8003288:	1e03      	subs	r3, r0, #0
 800328a:	d001      	beq.n	8003290 <HAL_TIM_PWM_MspInit+0x40>
    {
      Error_Handler();
 800328c:	f7ff feea 	bl	8003064 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 8003290:	4b09      	ldr	r3, [pc, #36]	; (80032b8 <HAL_TIM_PWM_MspInit+0x68>)
 8003292:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8003294:	4b08      	ldr	r3, [pc, #32]	; (80032b8 <HAL_TIM_PWM_MspInit+0x68>)
 8003296:	2180      	movs	r1, #128	; 0x80
 8003298:	0109      	lsls	r1, r1, #4
 800329a:	430a      	orrs	r2, r1
 800329c:	641a      	str	r2, [r3, #64]	; 0x40
 800329e:	4b06      	ldr	r3, [pc, #24]	; (80032b8 <HAL_TIM_PWM_MspInit+0x68>)
 80032a0:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80032a2:	2380      	movs	r3, #128	; 0x80
 80032a4:	011b      	lsls	r3, r3, #4
 80032a6:	4013      	ands	r3, r2
 80032a8:	60fb      	str	r3, [r7, #12]
 80032aa:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN TIM1_MspInit 1 */

  /* USER CODE END TIM1_MspInit 1 */
  }

}
 80032ac:	46c0      	nop			; (mov r8, r8)
 80032ae:	46bd      	mov	sp, r7
 80032b0:	b00f      	add	sp, #60	; 0x3c
 80032b2:	bd90      	pop	{r4, r7, pc}
 80032b4:	40012c00 	.word	0x40012c00
 80032b8:	40021000 	.word	0x40021000

080032bc <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 80032bc:	b590      	push	{r4, r7, lr}
 80032be:	b089      	sub	sp, #36	; 0x24
 80032c0:	af00      	add	r7, sp, #0
 80032c2:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80032c4:	240c      	movs	r4, #12
 80032c6:	193b      	adds	r3, r7, r4
 80032c8:	0018      	movs	r0, r3
 80032ca:	2314      	movs	r3, #20
 80032cc:	001a      	movs	r2, r3
 80032ce:	2100      	movs	r1, #0
 80032d0:	f004 f89c 	bl	800740c <memset>
  if(htim->Instance==TIM1)
 80032d4:	687b      	ldr	r3, [r7, #4]
 80032d6:	681b      	ldr	r3, [r3, #0]
 80032d8:	4a15      	ldr	r2, [pc, #84]	; (8003330 <HAL_TIM_MspPostInit+0x74>)
 80032da:	4293      	cmp	r3, r2
 80032dc:	d123      	bne.n	8003326 <HAL_TIM_MspPostInit+0x6a>
  {
  /* USER CODE BEGIN TIM1_MspPostInit 0 */

  /* USER CODE END TIM1_MspPostInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80032de:	4b15      	ldr	r3, [pc, #84]	; (8003334 <HAL_TIM_MspPostInit+0x78>)
 80032e0:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80032e2:	4b14      	ldr	r3, [pc, #80]	; (8003334 <HAL_TIM_MspPostInit+0x78>)
 80032e4:	2101      	movs	r1, #1
 80032e6:	430a      	orrs	r2, r1
 80032e8:	635a      	str	r2, [r3, #52]	; 0x34
 80032ea:	4b12      	ldr	r3, [pc, #72]	; (8003334 <HAL_TIM_MspPostInit+0x78>)
 80032ec:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80032ee:	2201      	movs	r2, #1
 80032f0:	4013      	ands	r3, r2
 80032f2:	60bb      	str	r3, [r7, #8]
 80032f4:	68bb      	ldr	r3, [r7, #8]
    /**TIM1 GPIO Configuration
    PA8     ------> TIM1_CH1
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8;
 80032f6:	193b      	adds	r3, r7, r4
 80032f8:	2280      	movs	r2, #128	; 0x80
 80032fa:	0052      	lsls	r2, r2, #1
 80032fc:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80032fe:	0021      	movs	r1, r4
 8003300:	187b      	adds	r3, r7, r1
 8003302:	2202      	movs	r2, #2
 8003304:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003306:	187b      	adds	r3, r7, r1
 8003308:	2200      	movs	r2, #0
 800330a:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800330c:	187b      	adds	r3, r7, r1
 800330e:	2200      	movs	r2, #0
 8003310:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM1;
 8003312:	187b      	adds	r3, r7, r1
 8003314:	2202      	movs	r2, #2
 8003316:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8003318:	187a      	adds	r2, r7, r1
 800331a:	23a0      	movs	r3, #160	; 0xa0
 800331c:	05db      	lsls	r3, r3, #23
 800331e:	0011      	movs	r1, r2
 8003320:	0018      	movs	r0, r3
 8003322:	f001 f8df 	bl	80044e4 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM1_MspPostInit 1 */

  /* USER CODE END TIM1_MspPostInit 1 */
  }

}
 8003326:	46c0      	nop			; (mov r8, r8)
 8003328:	46bd      	mov	sp, r7
 800332a:	b009      	add	sp, #36	; 0x24
 800332c:	bd90      	pop	{r4, r7, pc}
 800332e:	46c0      	nop			; (mov r8, r8)
 8003330:	40012c00 	.word	0x40012c00
 8003334:	40021000 	.word	0x40021000

08003338 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8003338:	b590      	push	{r4, r7, lr}
 800333a:	b08b      	sub	sp, #44	; 0x2c
 800333c:	af00      	add	r7, sp, #0
 800333e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8003340:	2414      	movs	r4, #20
 8003342:	193b      	adds	r3, r7, r4
 8003344:	0018      	movs	r0, r3
 8003346:	2314      	movs	r3, #20
 8003348:	001a      	movs	r2, r3
 800334a:	2100      	movs	r1, #0
 800334c:	f004 f85e 	bl	800740c <memset>
  if(huart->Instance==USART2)
 8003350:	687b      	ldr	r3, [r7, #4]
 8003352:	681b      	ldr	r3, [r3, #0]
 8003354:	4a1b      	ldr	r2, [pc, #108]	; (80033c4 <HAL_UART_MspInit+0x8c>)
 8003356:	4293      	cmp	r3, r2
 8003358:	d130      	bne.n	80033bc <HAL_UART_MspInit+0x84>
  {
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 800335a:	4b1b      	ldr	r3, [pc, #108]	; (80033c8 <HAL_UART_MspInit+0x90>)
 800335c:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800335e:	4b1a      	ldr	r3, [pc, #104]	; (80033c8 <HAL_UART_MspInit+0x90>)
 8003360:	2180      	movs	r1, #128	; 0x80
 8003362:	0289      	lsls	r1, r1, #10
 8003364:	430a      	orrs	r2, r1
 8003366:	63da      	str	r2, [r3, #60]	; 0x3c
 8003368:	4b17      	ldr	r3, [pc, #92]	; (80033c8 <HAL_UART_MspInit+0x90>)
 800336a:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800336c:	2380      	movs	r3, #128	; 0x80
 800336e:	029b      	lsls	r3, r3, #10
 8003370:	4013      	ands	r3, r2
 8003372:	613b      	str	r3, [r7, #16]
 8003374:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8003376:	4b14      	ldr	r3, [pc, #80]	; (80033c8 <HAL_UART_MspInit+0x90>)
 8003378:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800337a:	4b13      	ldr	r3, [pc, #76]	; (80033c8 <HAL_UART_MspInit+0x90>)
 800337c:	2101      	movs	r1, #1
 800337e:	430a      	orrs	r2, r1
 8003380:	635a      	str	r2, [r3, #52]	; 0x34
 8003382:	4b11      	ldr	r3, [pc, #68]	; (80033c8 <HAL_UART_MspInit+0x90>)
 8003384:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003386:	2201      	movs	r2, #1
 8003388:	4013      	ands	r3, r2
 800338a:	60fb      	str	r3, [r7, #12]
 800338c:	68fb      	ldr	r3, [r7, #12]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = T_VCP_TX_Pin|T_VCP_RX_Pin;
 800338e:	0021      	movs	r1, r4
 8003390:	187b      	adds	r3, r7, r1
 8003392:	220c      	movs	r2, #12
 8003394:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003396:	187b      	adds	r3, r7, r1
 8003398:	2202      	movs	r2, #2
 800339a:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 800339c:	187b      	adds	r3, r7, r1
 800339e:	2201      	movs	r2, #1
 80033a0:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80033a2:	187b      	adds	r3, r7, r1
 80033a4:	2200      	movs	r2, #0
 80033a6:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF1_USART2;
 80033a8:	187b      	adds	r3, r7, r1
 80033aa:	2201      	movs	r2, #1
 80033ac:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80033ae:	187a      	adds	r2, r7, r1
 80033b0:	23a0      	movs	r3, #160	; 0xa0
 80033b2:	05db      	lsls	r3, r3, #23
 80033b4:	0011      	movs	r1, r2
 80033b6:	0018      	movs	r0, r3
 80033b8:	f001 f894 	bl	80044e4 <HAL_GPIO_Init>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }

}
 80033bc:	46c0      	nop			; (mov r8, r8)
 80033be:	46bd      	mov	sp, r7
 80033c0:	b00b      	add	sp, #44	; 0x2c
 80033c2:	bd90      	pop	{r4, r7, pc}
 80033c4:	40004400 	.word	0x40004400
 80033c8:	40021000 	.word	0x40021000

080033cc <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80033cc:	b580      	push	{r7, lr}
 80033ce:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 80033d0:	e7fe      	b.n	80033d0 <NMI_Handler+0x4>

080033d2 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80033d2:	b580      	push	{r7, lr}
 80033d4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80033d6:	e7fe      	b.n	80033d6 <HardFault_Handler+0x4>

080033d8 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 80033d8:	b580      	push	{r7, lr}
 80033da:	af00      	add	r7, sp, #0

  /* USER CODE END SVC_IRQn 0 */
  /* USER CODE BEGIN SVC_IRQn 1 */

  /* USER CODE END SVC_IRQn 1 */
}
 80033dc:	46c0      	nop			; (mov r8, r8)
 80033de:	46bd      	mov	sp, r7
 80033e0:	bd80      	pop	{r7, pc}

080033e2 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 80033e2:	b580      	push	{r7, lr}
 80033e4:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 80033e6:	46c0      	nop			; (mov r8, r8)
 80033e8:	46bd      	mov	sp, r7
 80033ea:	bd80      	pop	{r7, pc}

080033ec <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80033ec:	b580      	push	{r7, lr}
 80033ee:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80033f0:	f000 f95a 	bl	80036a8 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80033f4:	46c0      	nop			; (mov r8, r8)
 80033f6:	46bd      	mov	sp, r7
 80033f8:	bd80      	pop	{r7, pc}

080033fa <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 80033fa:	b580      	push	{r7, lr}
 80033fc:	af00      	add	r7, sp, #0
  return 1;
 80033fe:	2301      	movs	r3, #1
}
 8003400:	0018      	movs	r0, r3
 8003402:	46bd      	mov	sp, r7
 8003404:	bd80      	pop	{r7, pc}

08003406 <_kill>:

int _kill(int pid, int sig)
{
 8003406:	b580      	push	{r7, lr}
 8003408:	b082      	sub	sp, #8
 800340a:	af00      	add	r7, sp, #0
 800340c:	6078      	str	r0, [r7, #4]
 800340e:	6039      	str	r1, [r7, #0]
  (void)pid;
  (void)sig;
  errno = EINVAL;
 8003410:	f003 ffd2 	bl	80073b8 <__errno>
 8003414:	0003      	movs	r3, r0
 8003416:	2216      	movs	r2, #22
 8003418:	601a      	str	r2, [r3, #0]
  return -1;
 800341a:	2301      	movs	r3, #1
 800341c:	425b      	negs	r3, r3
}
 800341e:	0018      	movs	r0, r3
 8003420:	46bd      	mov	sp, r7
 8003422:	b002      	add	sp, #8
 8003424:	bd80      	pop	{r7, pc}

08003426 <_exit>:

void _exit (int status)
{
 8003426:	b580      	push	{r7, lr}
 8003428:	b082      	sub	sp, #8
 800342a:	af00      	add	r7, sp, #0
 800342c:	6078      	str	r0, [r7, #4]
  _kill(status, -1);
 800342e:	2301      	movs	r3, #1
 8003430:	425a      	negs	r2, r3
 8003432:	687b      	ldr	r3, [r7, #4]
 8003434:	0011      	movs	r1, r2
 8003436:	0018      	movs	r0, r3
 8003438:	f7ff ffe5 	bl	8003406 <_kill>
  while (1) {}    /* Make sure we hang here */
 800343c:	e7fe      	b.n	800343c <_exit+0x16>

0800343e <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 800343e:	b580      	push	{r7, lr}
 8003440:	b086      	sub	sp, #24
 8003442:	af00      	add	r7, sp, #0
 8003444:	60f8      	str	r0, [r7, #12]
 8003446:	60b9      	str	r1, [r7, #8]
 8003448:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 800344a:	2300      	movs	r3, #0
 800344c:	617b      	str	r3, [r7, #20]
 800344e:	e00a      	b.n	8003466 <_read+0x28>
  {
    *ptr++ = __io_getchar();
 8003450:	e000      	b.n	8003454 <_read+0x16>
 8003452:	bf00      	nop
 8003454:	0001      	movs	r1, r0
 8003456:	68bb      	ldr	r3, [r7, #8]
 8003458:	1c5a      	adds	r2, r3, #1
 800345a:	60ba      	str	r2, [r7, #8]
 800345c:	b2ca      	uxtb	r2, r1
 800345e:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8003460:	697b      	ldr	r3, [r7, #20]
 8003462:	3301      	adds	r3, #1
 8003464:	617b      	str	r3, [r7, #20]
 8003466:	697a      	ldr	r2, [r7, #20]
 8003468:	687b      	ldr	r3, [r7, #4]
 800346a:	429a      	cmp	r2, r3
 800346c:	dbf0      	blt.n	8003450 <_read+0x12>
  }

  return len;
 800346e:	687b      	ldr	r3, [r7, #4]
}
 8003470:	0018      	movs	r0, r3
 8003472:	46bd      	mov	sp, r7
 8003474:	b006      	add	sp, #24
 8003476:	bd80      	pop	{r7, pc}

08003478 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8003478:	b580      	push	{r7, lr}
 800347a:	b086      	sub	sp, #24
 800347c:	af00      	add	r7, sp, #0
 800347e:	60f8      	str	r0, [r7, #12]
 8003480:	60b9      	str	r1, [r7, #8]
 8003482:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8003484:	2300      	movs	r3, #0
 8003486:	617b      	str	r3, [r7, #20]
 8003488:	e009      	b.n	800349e <_write+0x26>
  {
    __io_putchar(*ptr++);
 800348a:	68bb      	ldr	r3, [r7, #8]
 800348c:	1c5a      	adds	r2, r3, #1
 800348e:	60ba      	str	r2, [r7, #8]
 8003490:	781b      	ldrb	r3, [r3, #0]
 8003492:	0018      	movs	r0, r3
 8003494:	e000      	b.n	8003498 <_write+0x20>
 8003496:	bf00      	nop
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8003498:	697b      	ldr	r3, [r7, #20]
 800349a:	3301      	adds	r3, #1
 800349c:	617b      	str	r3, [r7, #20]
 800349e:	697a      	ldr	r2, [r7, #20]
 80034a0:	687b      	ldr	r3, [r7, #4]
 80034a2:	429a      	cmp	r2, r3
 80034a4:	dbf1      	blt.n	800348a <_write+0x12>
  }
  return len;
 80034a6:	687b      	ldr	r3, [r7, #4]
}
 80034a8:	0018      	movs	r0, r3
 80034aa:	46bd      	mov	sp, r7
 80034ac:	b006      	add	sp, #24
 80034ae:	bd80      	pop	{r7, pc}

080034b0 <_close>:

int _close(int file)
{
 80034b0:	b580      	push	{r7, lr}
 80034b2:	b082      	sub	sp, #8
 80034b4:	af00      	add	r7, sp, #0
 80034b6:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 80034b8:	2301      	movs	r3, #1
 80034ba:	425b      	negs	r3, r3
}
 80034bc:	0018      	movs	r0, r3
 80034be:	46bd      	mov	sp, r7
 80034c0:	b002      	add	sp, #8
 80034c2:	bd80      	pop	{r7, pc}

080034c4 <_fstat>:


int _fstat(int file, struct stat *st)
{
 80034c4:	b580      	push	{r7, lr}
 80034c6:	b082      	sub	sp, #8
 80034c8:	af00      	add	r7, sp, #0
 80034ca:	6078      	str	r0, [r7, #4]
 80034cc:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 80034ce:	683b      	ldr	r3, [r7, #0]
 80034d0:	2280      	movs	r2, #128	; 0x80
 80034d2:	0192      	lsls	r2, r2, #6
 80034d4:	605a      	str	r2, [r3, #4]
  return 0;
 80034d6:	2300      	movs	r3, #0
}
 80034d8:	0018      	movs	r0, r3
 80034da:	46bd      	mov	sp, r7
 80034dc:	b002      	add	sp, #8
 80034de:	bd80      	pop	{r7, pc}

080034e0 <_isatty>:

int _isatty(int file)
{
 80034e0:	b580      	push	{r7, lr}
 80034e2:	b082      	sub	sp, #8
 80034e4:	af00      	add	r7, sp, #0
 80034e6:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 80034e8:	2301      	movs	r3, #1
}
 80034ea:	0018      	movs	r0, r3
 80034ec:	46bd      	mov	sp, r7
 80034ee:	b002      	add	sp, #8
 80034f0:	bd80      	pop	{r7, pc}

080034f2 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 80034f2:	b580      	push	{r7, lr}
 80034f4:	b084      	sub	sp, #16
 80034f6:	af00      	add	r7, sp, #0
 80034f8:	60f8      	str	r0, [r7, #12]
 80034fa:	60b9      	str	r1, [r7, #8]
 80034fc:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 80034fe:	2300      	movs	r3, #0
}
 8003500:	0018      	movs	r0, r3
 8003502:	46bd      	mov	sp, r7
 8003504:	b004      	add	sp, #16
 8003506:	bd80      	pop	{r7, pc}

08003508 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8003508:	b580      	push	{r7, lr}
 800350a:	b086      	sub	sp, #24
 800350c:	af00      	add	r7, sp, #0
 800350e:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8003510:	4a14      	ldr	r2, [pc, #80]	; (8003564 <_sbrk+0x5c>)
 8003512:	4b15      	ldr	r3, [pc, #84]	; (8003568 <_sbrk+0x60>)
 8003514:	1ad3      	subs	r3, r2, r3
 8003516:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8003518:	697b      	ldr	r3, [r7, #20]
 800351a:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 800351c:	4b13      	ldr	r3, [pc, #76]	; (800356c <_sbrk+0x64>)
 800351e:	681b      	ldr	r3, [r3, #0]
 8003520:	2b00      	cmp	r3, #0
 8003522:	d102      	bne.n	800352a <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8003524:	4b11      	ldr	r3, [pc, #68]	; (800356c <_sbrk+0x64>)
 8003526:	4a12      	ldr	r2, [pc, #72]	; (8003570 <_sbrk+0x68>)
 8003528:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 800352a:	4b10      	ldr	r3, [pc, #64]	; (800356c <_sbrk+0x64>)
 800352c:	681a      	ldr	r2, [r3, #0]
 800352e:	687b      	ldr	r3, [r7, #4]
 8003530:	18d3      	adds	r3, r2, r3
 8003532:	693a      	ldr	r2, [r7, #16]
 8003534:	429a      	cmp	r2, r3
 8003536:	d207      	bcs.n	8003548 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8003538:	f003 ff3e 	bl	80073b8 <__errno>
 800353c:	0003      	movs	r3, r0
 800353e:	220c      	movs	r2, #12
 8003540:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8003542:	2301      	movs	r3, #1
 8003544:	425b      	negs	r3, r3
 8003546:	e009      	b.n	800355c <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8003548:	4b08      	ldr	r3, [pc, #32]	; (800356c <_sbrk+0x64>)
 800354a:	681b      	ldr	r3, [r3, #0]
 800354c:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 800354e:	4b07      	ldr	r3, [pc, #28]	; (800356c <_sbrk+0x64>)
 8003550:	681a      	ldr	r2, [r3, #0]
 8003552:	687b      	ldr	r3, [r7, #4]
 8003554:	18d2      	adds	r2, r2, r3
 8003556:	4b05      	ldr	r3, [pc, #20]	; (800356c <_sbrk+0x64>)
 8003558:	601a      	str	r2, [r3, #0]

  return (void *)prev_heap_end;
 800355a:	68fb      	ldr	r3, [r7, #12]
}
 800355c:	0018      	movs	r0, r3
 800355e:	46bd      	mov	sp, r7
 8003560:	b006      	add	sp, #24
 8003562:	bd80      	pop	{r7, pc}
 8003564:	20002000 	.word	0x20002000
 8003568:	00000400 	.word	0x00000400
 800356c:	200003a0 	.word	0x200003a0
 8003570:	200003b8 	.word	0x200003b8

08003574 <SystemInit>:
  * @brief  Setup the microcontroller system.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8003574:	b580      	push	{r7, lr}
 8003576:	af00      	add	r7, sp, #0
  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8003578:	46c0      	nop			; (mov r8, r8)
 800357a:	46bd      	mov	sp, r7
 800357c:	bd80      	pop	{r7, pc}
	...

08003580 <Reset_Handler>:

  .section .text.Reset_Handler
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 8003580:	480d      	ldr	r0, [pc, #52]	; (80035b8 <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 8003582:	4685      	mov	sp, r0

/* Call the clock system initialization function.*/
  bl  SystemInit
 8003584:	f7ff fff6 	bl	8003574 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8003588:	480c      	ldr	r0, [pc, #48]	; (80035bc <LoopForever+0x6>)
  ldr r1, =_edata
 800358a:	490d      	ldr	r1, [pc, #52]	; (80035c0 <LoopForever+0xa>)
  ldr r2, =_sidata
 800358c:	4a0d      	ldr	r2, [pc, #52]	; (80035c4 <LoopForever+0xe>)
  movs r3, #0
 800358e:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8003590:	e002      	b.n	8003598 <LoopCopyDataInit>

08003592 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8003592:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8003594:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8003596:	3304      	adds	r3, #4

08003598 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8003598:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 800359a:	428c      	cmp	r4, r1
  bcc CopyDataInit
 800359c:	d3f9      	bcc.n	8003592 <CopyDataInit>

/* Zero fill the bss segment. */
  ldr r2, =_sbss
 800359e:	4a0a      	ldr	r2, [pc, #40]	; (80035c8 <LoopForever+0x12>)
  ldr r4, =_ebss
 80035a0:	4c0a      	ldr	r4, [pc, #40]	; (80035cc <LoopForever+0x16>)
  movs r3, #0
 80035a2:	2300      	movs	r3, #0
  b LoopFillZerobss
 80035a4:	e001      	b.n	80035aa <LoopFillZerobss>

080035a6 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80035a6:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80035a8:	3204      	adds	r2, #4

080035aa <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80035aa:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80035ac:	d3fb      	bcc.n	80035a6 <FillZerobss>

/* Call static constructors */
  bl __libc_init_array
 80035ae:	f003 ff09 	bl	80073c4 <__libc_init_array>
/* Call the application s entry point.*/
  bl main
 80035b2:	f7ff f9f3 	bl	800299c <main>

080035b6 <LoopForever>:

LoopForever:
  b LoopForever
 80035b6:	e7fe      	b.n	80035b6 <LoopForever>
  ldr   r0, =_estack
 80035b8:	20002000 	.word	0x20002000
  ldr r0, =_sdata
 80035bc:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80035c0:	200001e4 	.word	0x200001e4
  ldr r2, =_sidata
 80035c4:	0800a8cc 	.word	0x0800a8cc
  ldr r2, =_sbss
 80035c8:	200001e4 	.word	0x200001e4
  ldr r4, =_ebss
 80035cc:	200003b8 	.word	0x200003b8

080035d0 <ADC1_IRQHandler>:
 * @retval None
*/
  .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 80035d0:	e7fe      	b.n	80035d0 <ADC1_IRQHandler>
	...

080035d4 <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80035d4:	b580      	push	{r7, lr}
 80035d6:	b082      	sub	sp, #8
 80035d8:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 80035da:	1dfb      	adds	r3, r7, #7
 80035dc:	2200      	movs	r2, #0
 80035de:	701a      	strb	r2, [r3, #0]
#if (INSTRUCTION_CACHE_ENABLE == 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_DISABLE();
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 80035e0:	4b0b      	ldr	r3, [pc, #44]	; (8003610 <HAL_Init+0x3c>)
 80035e2:	681a      	ldr	r2, [r3, #0]
 80035e4:	4b0a      	ldr	r3, [pc, #40]	; (8003610 <HAL_Init+0x3c>)
 80035e6:	2180      	movs	r1, #128	; 0x80
 80035e8:	0049      	lsls	r1, r1, #1
 80035ea:	430a      	orrs	r2, r1
 80035ec:	601a      	str	r2, [r3, #0]
#endif /* PREFETCH_ENABLE */

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 80035ee:	2000      	movs	r0, #0
 80035f0:	f000 f810 	bl	8003614 <HAL_InitTick>
 80035f4:	1e03      	subs	r3, r0, #0
 80035f6:	d003      	beq.n	8003600 <HAL_Init+0x2c>
  {
    status = HAL_ERROR;
 80035f8:	1dfb      	adds	r3, r7, #7
 80035fa:	2201      	movs	r2, #1
 80035fc:	701a      	strb	r2, [r3, #0]
 80035fe:	e001      	b.n	8003604 <HAL_Init+0x30>
  }
  else
  {
  /* Init the low level hardware */
  HAL_MspInit();
 8003600:	f7ff fd36 	bl	8003070 <HAL_MspInit>
  }

  /* Return function status */
  return status;
 8003604:	1dfb      	adds	r3, r7, #7
 8003606:	781b      	ldrb	r3, [r3, #0]
}
 8003608:	0018      	movs	r0, r3
 800360a:	46bd      	mov	sp, r7
 800360c:	b002      	add	sp, #8
 800360e:	bd80      	pop	{r7, pc}
 8003610:	40022000 	.word	0x40022000

08003614 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8003614:	b590      	push	{r4, r7, lr}
 8003616:	b085      	sub	sp, #20
 8003618:	af00      	add	r7, sp, #0
 800361a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 800361c:	230f      	movs	r3, #15
 800361e:	18fb      	adds	r3, r7, r3
 8003620:	2200      	movs	r2, #0
 8003622:	701a      	strb	r2, [r3, #0]

  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that doesn't take the value zero)*/ 
  if ((uint32_t)uwTickFreq != 0U)
 8003624:	4b1d      	ldr	r3, [pc, #116]	; (800369c <HAL_InitTick+0x88>)
 8003626:	781b      	ldrb	r3, [r3, #0]
 8003628:	2b00      	cmp	r3, #0
 800362a:	d02b      	beq.n	8003684 <HAL_InitTick+0x70>
  {
    /*Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000U /(uint32_t)uwTickFreq)) == 0U)
 800362c:	4b1c      	ldr	r3, [pc, #112]	; (80036a0 <HAL_InitTick+0x8c>)
 800362e:	681c      	ldr	r4, [r3, #0]
 8003630:	4b1a      	ldr	r3, [pc, #104]	; (800369c <HAL_InitTick+0x88>)
 8003632:	781b      	ldrb	r3, [r3, #0]
 8003634:	0019      	movs	r1, r3
 8003636:	23fa      	movs	r3, #250	; 0xfa
 8003638:	0098      	lsls	r0, r3, #2
 800363a:	f7fc fd7f 	bl	800013c <__udivsi3>
 800363e:	0003      	movs	r3, r0
 8003640:	0019      	movs	r1, r3
 8003642:	0020      	movs	r0, r4
 8003644:	f7fc fd7a 	bl	800013c <__udivsi3>
 8003648:	0003      	movs	r3, r0
 800364a:	0018      	movs	r0, r3
 800364c:	f000 ff3d 	bl	80044ca <HAL_SYSTICK_Config>
 8003650:	1e03      	subs	r3, r0, #0
 8003652:	d112      	bne.n	800367a <HAL_InitTick+0x66>
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8003654:	687b      	ldr	r3, [r7, #4]
 8003656:	2b03      	cmp	r3, #3
 8003658:	d80a      	bhi.n	8003670 <HAL_InitTick+0x5c>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 800365a:	6879      	ldr	r1, [r7, #4]
 800365c:	2301      	movs	r3, #1
 800365e:	425b      	negs	r3, r3
 8003660:	2200      	movs	r2, #0
 8003662:	0018      	movs	r0, r3
 8003664:	f000 ff1c 	bl	80044a0 <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8003668:	4b0e      	ldr	r3, [pc, #56]	; (80036a4 <HAL_InitTick+0x90>)
 800366a:	687a      	ldr	r2, [r7, #4]
 800366c:	601a      	str	r2, [r3, #0]
 800366e:	e00d      	b.n	800368c <HAL_InitTick+0x78>
      }
      else
      {
        status = HAL_ERROR;
 8003670:	230f      	movs	r3, #15
 8003672:	18fb      	adds	r3, r7, r3
 8003674:	2201      	movs	r2, #1
 8003676:	701a      	strb	r2, [r3, #0]
 8003678:	e008      	b.n	800368c <HAL_InitTick+0x78>
      }
    }
    else
    {
      status = HAL_ERROR;
 800367a:	230f      	movs	r3, #15
 800367c:	18fb      	adds	r3, r7, r3
 800367e:	2201      	movs	r2, #1
 8003680:	701a      	strb	r2, [r3, #0]
 8003682:	e003      	b.n	800368c <HAL_InitTick+0x78>
    }
  }
  else
  {
    status = HAL_ERROR;
 8003684:	230f      	movs	r3, #15
 8003686:	18fb      	adds	r3, r7, r3
 8003688:	2201      	movs	r2, #1
 800368a:	701a      	strb	r2, [r3, #0]
  }

  /* Return function status */
  return status;
 800368c:	230f      	movs	r3, #15
 800368e:	18fb      	adds	r3, r7, r3
 8003690:	781b      	ldrb	r3, [r3, #0]
}
 8003692:	0018      	movs	r0, r3
 8003694:	46bd      	mov	sp, r7
 8003696:	b005      	add	sp, #20
 8003698:	bd90      	pop	{r4, r7, pc}
 800369a:	46c0      	nop			; (mov r8, r8)
 800369c:	20000010 	.word	0x20000010
 80036a0:	20000008 	.word	0x20000008
 80036a4:	2000000c 	.word	0x2000000c

080036a8 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80036a8:	b580      	push	{r7, lr}
 80036aa:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 80036ac:	4b05      	ldr	r3, [pc, #20]	; (80036c4 <HAL_IncTick+0x1c>)
 80036ae:	781b      	ldrb	r3, [r3, #0]
 80036b0:	001a      	movs	r2, r3
 80036b2:	4b05      	ldr	r3, [pc, #20]	; (80036c8 <HAL_IncTick+0x20>)
 80036b4:	681b      	ldr	r3, [r3, #0]
 80036b6:	18d2      	adds	r2, r2, r3
 80036b8:	4b03      	ldr	r3, [pc, #12]	; (80036c8 <HAL_IncTick+0x20>)
 80036ba:	601a      	str	r2, [r3, #0]
}
 80036bc:	46c0      	nop			; (mov r8, r8)
 80036be:	46bd      	mov	sp, r7
 80036c0:	bd80      	pop	{r7, pc}
 80036c2:	46c0      	nop			; (mov r8, r8)
 80036c4:	20000010 	.word	0x20000010
 80036c8:	200003a4 	.word	0x200003a4

080036cc <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80036cc:	b580      	push	{r7, lr}
 80036ce:	af00      	add	r7, sp, #0
  return uwTick;
 80036d0:	4b02      	ldr	r3, [pc, #8]	; (80036dc <HAL_GetTick+0x10>)
 80036d2:	681b      	ldr	r3, [r3, #0]
}
 80036d4:	0018      	movs	r0, r3
 80036d6:	46bd      	mov	sp, r7
 80036d8:	bd80      	pop	{r7, pc}
 80036da:	46c0      	nop			; (mov r8, r8)
 80036dc:	200003a4 	.word	0x200003a4

080036e0 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 80036e0:	b580      	push	{r7, lr}
 80036e2:	b084      	sub	sp, #16
 80036e4:	af00      	add	r7, sp, #0
 80036e6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 80036e8:	f7ff fff0 	bl	80036cc <HAL_GetTick>
 80036ec:	0003      	movs	r3, r0
 80036ee:	60bb      	str	r3, [r7, #8]
  uint32_t wait = Delay;
 80036f0:	687b      	ldr	r3, [r7, #4]
 80036f2:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 80036f4:	68fb      	ldr	r3, [r7, #12]
 80036f6:	3301      	adds	r3, #1
 80036f8:	d005      	beq.n	8003706 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 80036fa:	4b0a      	ldr	r3, [pc, #40]	; (8003724 <HAL_Delay+0x44>)
 80036fc:	781b      	ldrb	r3, [r3, #0]
 80036fe:	001a      	movs	r2, r3
 8003700:	68fb      	ldr	r3, [r7, #12]
 8003702:	189b      	adds	r3, r3, r2
 8003704:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8003706:	46c0      	nop			; (mov r8, r8)
 8003708:	f7ff ffe0 	bl	80036cc <HAL_GetTick>
 800370c:	0002      	movs	r2, r0
 800370e:	68bb      	ldr	r3, [r7, #8]
 8003710:	1ad3      	subs	r3, r2, r3
 8003712:	68fa      	ldr	r2, [r7, #12]
 8003714:	429a      	cmp	r2, r3
 8003716:	d8f7      	bhi.n	8003708 <HAL_Delay+0x28>
  {
  }
}
 8003718:	46c0      	nop			; (mov r8, r8)
 800371a:	46c0      	nop			; (mov r8, r8)
 800371c:	46bd      	mov	sp, r7
 800371e:	b004      	add	sp, #16
 8003720:	bd80      	pop	{r7, pc}
 8003722:	46c0      	nop			; (mov r8, r8)
 8003724:	20000010 	.word	0x20000010

08003728 <LL_ADC_SetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetCommonPathInternalCh(ADC_Common_TypeDef *ADCxy_COMMON, uint32_t PathInternal)
{
 8003728:	b580      	push	{r7, lr}
 800372a:	b082      	sub	sp, #8
 800372c:	af00      	add	r7, sp, #0
 800372e:	6078      	str	r0, [r7, #4]
 8003730:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_TSEN | ADC_CCR_VBATEN, PathInternal);
 8003732:	687b      	ldr	r3, [r7, #4]
 8003734:	681b      	ldr	r3, [r3, #0]
 8003736:	4a05      	ldr	r2, [pc, #20]	; (800374c <LL_ADC_SetCommonPathInternalCh+0x24>)
 8003738:	401a      	ands	r2, r3
 800373a:	683b      	ldr	r3, [r7, #0]
 800373c:	431a      	orrs	r2, r3
 800373e:	687b      	ldr	r3, [r7, #4]
 8003740:	601a      	str	r2, [r3, #0]
}
 8003742:	46c0      	nop			; (mov r8, r8)
 8003744:	46bd      	mov	sp, r7
 8003746:	b002      	add	sp, #8
 8003748:	bd80      	pop	{r7, pc}
 800374a:	46c0      	nop			; (mov r8, r8)
 800374c:	fe3fffff 	.word	0xfe3fffff

08003750 <LL_ADC_GetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_VREFINT
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  */
__STATIC_INLINE uint32_t LL_ADC_GetCommonPathInternalCh(ADC_Common_TypeDef *ADCxy_COMMON)
{
 8003750:	b580      	push	{r7, lr}
 8003752:	b082      	sub	sp, #8
 8003754:	af00      	add	r7, sp, #0
 8003756:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_TSEN | ADC_CCR_VBATEN));
 8003758:	687b      	ldr	r3, [r7, #4]
 800375a:	681a      	ldr	r2, [r3, #0]
 800375c:	23e0      	movs	r3, #224	; 0xe0
 800375e:	045b      	lsls	r3, r3, #17
 8003760:	4013      	ands	r3, r2
}
 8003762:	0018      	movs	r0, r3
 8003764:	46bd      	mov	sp, r7
 8003766:	b002      	add	sp, #8
 8003768:	bd80      	pop	{r7, pc}

0800376a <LL_ADC_SetSamplingTimeCommonChannels>:
  *         @arg @ref LL_ADC_SAMPLINGTIME_160CYCLES_5
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetSamplingTimeCommonChannels(ADC_TypeDef *ADCx, uint32_t SamplingTimeY,
                                                          uint32_t SamplingTime)
{
 800376a:	b580      	push	{r7, lr}
 800376c:	b084      	sub	sp, #16
 800376e:	af00      	add	r7, sp, #0
 8003770:	60f8      	str	r0, [r7, #12]
 8003772:	60b9      	str	r1, [r7, #8]
 8003774:	607a      	str	r2, [r7, #4]
  MODIFY_REG(ADCx->SMPR,
 8003776:	68fb      	ldr	r3, [r7, #12]
 8003778:	695b      	ldr	r3, [r3, #20]
 800377a:	68ba      	ldr	r2, [r7, #8]
 800377c:	2104      	movs	r1, #4
 800377e:	400a      	ands	r2, r1
 8003780:	2107      	movs	r1, #7
 8003782:	4091      	lsls	r1, r2
 8003784:	000a      	movs	r2, r1
 8003786:	43d2      	mvns	r2, r2
 8003788:	401a      	ands	r2, r3
 800378a:	68bb      	ldr	r3, [r7, #8]
 800378c:	2104      	movs	r1, #4
 800378e:	400b      	ands	r3, r1
 8003790:	6879      	ldr	r1, [r7, #4]
 8003792:	4099      	lsls	r1, r3
 8003794:	000b      	movs	r3, r1
 8003796:	431a      	orrs	r2, r3
 8003798:	68fb      	ldr	r3, [r7, #12]
 800379a:	615a      	str	r2, [r3, #20]
             ADC_SMPR_SMP1 << (SamplingTimeY & ADC_SAMPLING_TIME_SMP_SHIFT_MASK),
             SamplingTime << (SamplingTimeY & ADC_SAMPLING_TIME_SMP_SHIFT_MASK));
}
 800379c:	46c0      	nop			; (mov r8, r8)
 800379e:	46bd      	mov	sp, r7
 80037a0:	b004      	add	sp, #16
 80037a2:	bd80      	pop	{r7, pc}

080037a4 <LL_ADC_GetSamplingTimeCommonChannels>:
  *         @arg @ref LL_ADC_SAMPLINGTIME_39CYCLES_5
  *         @arg @ref LL_ADC_SAMPLINGTIME_79CYCLES_5
  *         @arg @ref LL_ADC_SAMPLINGTIME_160CYCLES_5
  */
__STATIC_INLINE uint32_t LL_ADC_GetSamplingTimeCommonChannels(ADC_TypeDef *ADCx, uint32_t SamplingTimeY)
{
 80037a4:	b580      	push	{r7, lr}
 80037a6:	b082      	sub	sp, #8
 80037a8:	af00      	add	r7, sp, #0
 80037aa:	6078      	str	r0, [r7, #4]
 80037ac:	6039      	str	r1, [r7, #0]
  return (uint32_t)((READ_BIT(ADCx->SMPR, ADC_SMPR_SMP1 << (SamplingTimeY & ADC_SAMPLING_TIME_SMP_SHIFT_MASK)))
 80037ae:	687b      	ldr	r3, [r7, #4]
 80037b0:	695b      	ldr	r3, [r3, #20]
 80037b2:	683a      	ldr	r2, [r7, #0]
 80037b4:	2104      	movs	r1, #4
 80037b6:	400a      	ands	r2, r1
 80037b8:	2107      	movs	r1, #7
 80037ba:	4091      	lsls	r1, r2
 80037bc:	000a      	movs	r2, r1
 80037be:	401a      	ands	r2, r3
                    >> (SamplingTimeY & ADC_SAMPLING_TIME_SMP_SHIFT_MASK));
 80037c0:	683b      	ldr	r3, [r7, #0]
 80037c2:	2104      	movs	r1, #4
 80037c4:	400b      	ands	r3, r1
  return (uint32_t)((READ_BIT(ADCx->SMPR, ADC_SMPR_SMP1 << (SamplingTimeY & ADC_SAMPLING_TIME_SMP_SHIFT_MASK)))
 80037c6:	40da      	lsrs	r2, r3
 80037c8:	0013      	movs	r3, r2
}
 80037ca:	0018      	movs	r0, r3
 80037cc:	46bd      	mov	sp, r7
 80037ce:	b002      	add	sp, #8
 80037d0:	bd80      	pop	{r7, pc}

080037d2 <LL_ADC_REG_IsTriggerSourceSWStart>:
  * @param  ADCx ADC instance
  * @retval Value "0" if trigger source external trigger
  *         Value "1" if trigger source SW start.
  */
__STATIC_INLINE uint32_t LL_ADC_REG_IsTriggerSourceSWStart(ADC_TypeDef *ADCx)
{
 80037d2:	b580      	push	{r7, lr}
 80037d4:	b082      	sub	sp, #8
 80037d6:	af00      	add	r7, sp, #0
 80037d8:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CFGR1, ADC_CFGR1_EXTEN) == (LL_ADC_REG_TRIG_SOFTWARE & ADC_CFGR1_EXTEN)) ? 1UL : 0UL);
 80037da:	687b      	ldr	r3, [r7, #4]
 80037dc:	68da      	ldr	r2, [r3, #12]
 80037de:	23c0      	movs	r3, #192	; 0xc0
 80037e0:	011b      	lsls	r3, r3, #4
 80037e2:	4013      	ands	r3, r2
 80037e4:	d101      	bne.n	80037ea <LL_ADC_REG_IsTriggerSourceSWStart+0x18>
 80037e6:	2301      	movs	r3, #1
 80037e8:	e000      	b.n	80037ec <LL_ADC_REG_IsTriggerSourceSWStart+0x1a>
 80037ea:	2300      	movs	r3, #0
}
 80037ec:	0018      	movs	r0, r3
 80037ee:	46bd      	mov	sp, r7
 80037f0:	b002      	add	sp, #8
 80037f2:	bd80      	pop	{r7, pc}

080037f4 <LL_ADC_REG_SetSequencerRanks>:
  *             only if sequencer is set in mode "not fully configurable",
  *             refer to function @ref LL_ADC_REG_SetSequencerConfigurable().
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_SetSequencerRanks(ADC_TypeDef *ADCx, uint32_t Rank, uint32_t Channel)
{
 80037f4:	b580      	push	{r7, lr}
 80037f6:	b084      	sub	sp, #16
 80037f8:	af00      	add	r7, sp, #0
 80037fa:	60f8      	str	r0, [r7, #12]
 80037fc:	60b9      	str	r1, [r7, #8]
 80037fe:	607a      	str	r2, [r7, #4]
  /* Set bits with content of parameter "Channel" with bits position          */
  /* in register depending on parameter "Rank".                               */
  /* Parameters "Rank" and "Channel" are used with masks because containing   */
  /* other bits reserved for other purpose.                                   */
  MODIFY_REG(ADCx->CHSELR,
 8003800:	68fb      	ldr	r3, [r7, #12]
 8003802:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003804:	68ba      	ldr	r2, [r7, #8]
 8003806:	211f      	movs	r1, #31
 8003808:	400a      	ands	r2, r1
 800380a:	210f      	movs	r1, #15
 800380c:	4091      	lsls	r1, r2
 800380e:	000a      	movs	r2, r1
 8003810:	43d2      	mvns	r2, r2
 8003812:	401a      	ands	r2, r3
 8003814:	687b      	ldr	r3, [r7, #4]
 8003816:	0e9b      	lsrs	r3, r3, #26
 8003818:	210f      	movs	r1, #15
 800381a:	4019      	ands	r1, r3
 800381c:	68bb      	ldr	r3, [r7, #8]
 800381e:	201f      	movs	r0, #31
 8003820:	4003      	ands	r3, r0
 8003822:	4099      	lsls	r1, r3
 8003824:	000b      	movs	r3, r1
 8003826:	431a      	orrs	r2, r3
 8003828:	68fb      	ldr	r3, [r7, #12]
 800382a:	629a      	str	r2, [r3, #40]	; 0x28
             ADC_CHSELR_SQ1 << (Rank & ADC_REG_RANK_ID_SQRX_MASK),
             ((Channel & ADC_CHANNEL_ID_NUMBER_MASK_SEQ) >> ADC_CHANNEL_ID_NUMBER_BITOFFSET_POS)
              << (Rank & ADC_REG_RANK_ID_SQRX_MASK));
}
 800382c:	46c0      	nop			; (mov r8, r8)
 800382e:	46bd      	mov	sp, r7
 8003830:	b004      	add	sp, #16
 8003832:	bd80      	pop	{r7, pc}

08003834 <LL_ADC_REG_SetSequencerChAdd>:
  *             only if sequencer is set in mode "not fully configurable",
  *             refer to function @ref LL_ADC_REG_SetSequencerConfigurable().
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_SetSequencerChAdd(ADC_TypeDef *ADCx, uint32_t Channel)
{
 8003834:	b580      	push	{r7, lr}
 8003836:	b082      	sub	sp, #8
 8003838:	af00      	add	r7, sp, #0
 800383a:	6078      	str	r0, [r7, #4]
 800383c:	6039      	str	r1, [r7, #0]
  /* Parameter "Channel" is used with masks because containing                */
  /* other bits reserved for other purpose.                                   */
  SET_BIT(ADCx->CHSELR, (Channel & ADC_CHANNEL_ID_BITFIELD_MASK));
 800383e:	687b      	ldr	r3, [r7, #4]
 8003840:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8003842:	683b      	ldr	r3, [r7, #0]
 8003844:	035b      	lsls	r3, r3, #13
 8003846:	0b5b      	lsrs	r3, r3, #13
 8003848:	431a      	orrs	r2, r3
 800384a:	687b      	ldr	r3, [r7, #4]
 800384c:	629a      	str	r2, [r3, #40]	; 0x28
}
 800384e:	46c0      	nop			; (mov r8, r8)
 8003850:	46bd      	mov	sp, r7
 8003852:	b002      	add	sp, #8
 8003854:	bd80      	pop	{r7, pc}

08003856 <LL_ADC_REG_SetSequencerChRem>:
  *             only if sequencer is set in mode "not fully configurable",
  *             refer to function @ref LL_ADC_REG_SetSequencerConfigurable().
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_SetSequencerChRem(ADC_TypeDef *ADCx, uint32_t Channel)
{
 8003856:	b580      	push	{r7, lr}
 8003858:	b082      	sub	sp, #8
 800385a:	af00      	add	r7, sp, #0
 800385c:	6078      	str	r0, [r7, #4]
 800385e:	6039      	str	r1, [r7, #0]
  /* Parameter "Channel" is used with masks because containing                */
  /* other bits reserved for other purpose.                                   */
  CLEAR_BIT(ADCx->CHSELR, (Channel & ADC_CHANNEL_ID_BITFIELD_MASK));
 8003860:	687b      	ldr	r3, [r7, #4]
 8003862:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003864:	683a      	ldr	r2, [r7, #0]
 8003866:	0352      	lsls	r2, r2, #13
 8003868:	0b52      	lsrs	r2, r2, #13
 800386a:	43d2      	mvns	r2, r2
 800386c:	401a      	ands	r2, r3
 800386e:	687b      	ldr	r3, [r7, #4]
 8003870:	629a      	str	r2, [r3, #40]	; 0x28
}
 8003872:	46c0      	nop			; (mov r8, r8)
 8003874:	46bd      	mov	sp, r7
 8003876:	b002      	add	sp, #8
 8003878:	bd80      	pop	{r7, pc}
	...

0800387c <LL_ADC_SetChannelSamplingTime>:
  *         @arg @ref LL_ADC_SAMPLINGTIME_COMMON_1
  *         @arg @ref LL_ADC_SAMPLINGTIME_COMMON_2
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetChannelSamplingTime(ADC_TypeDef *ADCx, uint32_t Channel, uint32_t SamplingTimeY)
{
 800387c:	b580      	push	{r7, lr}
 800387e:	b084      	sub	sp, #16
 8003880:	af00      	add	r7, sp, #0
 8003882:	60f8      	str	r0, [r7, #12]
 8003884:	60b9      	str	r1, [r7, #8]
 8003886:	607a      	str	r2, [r7, #4]
  /* Parameter "Channel" is used with masks because containing                */
  /* other bits reserved for other purpose.                                   */
  MODIFY_REG(ADCx->SMPR,
 8003888:	68fb      	ldr	r3, [r7, #12]
 800388a:	695b      	ldr	r3, [r3, #20]
 800388c:	68ba      	ldr	r2, [r7, #8]
 800388e:	0212      	lsls	r2, r2, #8
 8003890:	43d2      	mvns	r2, r2
 8003892:	401a      	ands	r2, r3
 8003894:	68bb      	ldr	r3, [r7, #8]
 8003896:	021b      	lsls	r3, r3, #8
 8003898:	6879      	ldr	r1, [r7, #4]
 800389a:	400b      	ands	r3, r1
 800389c:	4904      	ldr	r1, [pc, #16]	; (80038b0 <LL_ADC_SetChannelSamplingTime+0x34>)
 800389e:	400b      	ands	r3, r1
 80038a0:	431a      	orrs	r2, r3
 80038a2:	68fb      	ldr	r3, [r7, #12]
 80038a4:	615a      	str	r2, [r3, #20]
             (Channel << ADC_SMPR_SMPSEL0_BITOFFSET_POS),
             (Channel << ADC_SMPR_SMPSEL0_BITOFFSET_POS) & (SamplingTimeY & ADC_SAMPLING_TIME_CH_MASK)
            );
}
 80038a6:	46c0      	nop			; (mov r8, r8)
 80038a8:	46bd      	mov	sp, r7
 80038aa:	b004      	add	sp, #16
 80038ac:	bd80      	pop	{r7, pc}
 80038ae:	46c0      	nop			; (mov r8, r8)
 80038b0:	07ffff00 	.word	0x07ffff00

080038b4 <LL_ADC_EnableInternalRegulator>:
  * @rmtoll CR       ADVREGEN       LL_ADC_EnableInternalRegulator
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_EnableInternalRegulator(ADC_TypeDef *ADCx)
{
 80038b4:	b580      	push	{r7, lr}
 80038b6:	b082      	sub	sp, #8
 80038b8:	af00      	add	r7, sp, #0
 80038ba:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 80038bc:	687b      	ldr	r3, [r7, #4]
 80038be:	689b      	ldr	r3, [r3, #8]
 80038c0:	4a05      	ldr	r2, [pc, #20]	; (80038d8 <LL_ADC_EnableInternalRegulator+0x24>)
 80038c2:	4013      	ands	r3, r2
 80038c4:	2280      	movs	r2, #128	; 0x80
 80038c6:	0552      	lsls	r2, r2, #21
 80038c8:	431a      	orrs	r2, r3
 80038ca:	687b      	ldr	r3, [r7, #4]
 80038cc:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADVREGEN);
}
 80038ce:	46c0      	nop			; (mov r8, r8)
 80038d0:	46bd      	mov	sp, r7
 80038d2:	b002      	add	sp, #8
 80038d4:	bd80      	pop	{r7, pc}
 80038d6:	46c0      	nop			; (mov r8, r8)
 80038d8:	6fffffe8 	.word	0x6fffffe8

080038dc <LL_ADC_IsInternalRegulatorEnabled>:
  * @rmtoll CR       ADVREGEN       LL_ADC_IsInternalRegulatorEnabled
  * @param  ADCx ADC instance
  * @retval 0: internal regulator is disabled, 1: internal regulator is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsInternalRegulatorEnabled(ADC_TypeDef *ADCx)
{
 80038dc:	b580      	push	{r7, lr}
 80038de:	b082      	sub	sp, #8
 80038e0:	af00      	add	r7, sp, #0
 80038e2:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADVREGEN) == (ADC_CR_ADVREGEN)) ? 1UL : 0UL);
 80038e4:	687b      	ldr	r3, [r7, #4]
 80038e6:	689a      	ldr	r2, [r3, #8]
 80038e8:	2380      	movs	r3, #128	; 0x80
 80038ea:	055b      	lsls	r3, r3, #21
 80038ec:	401a      	ands	r2, r3
 80038ee:	2380      	movs	r3, #128	; 0x80
 80038f0:	055b      	lsls	r3, r3, #21
 80038f2:	429a      	cmp	r2, r3
 80038f4:	d101      	bne.n	80038fa <LL_ADC_IsInternalRegulatorEnabled+0x1e>
 80038f6:	2301      	movs	r3, #1
 80038f8:	e000      	b.n	80038fc <LL_ADC_IsInternalRegulatorEnabled+0x20>
 80038fa:	2300      	movs	r3, #0
}
 80038fc:	0018      	movs	r0, r3
 80038fe:	46bd      	mov	sp, r7
 8003900:	b002      	add	sp, #8
 8003902:	bd80      	pop	{r7, pc}

08003904 <LL_ADC_Enable>:
  * @rmtoll CR       ADEN           LL_ADC_Enable
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_Enable(ADC_TypeDef *ADCx)
{
 8003904:	b580      	push	{r7, lr}
 8003906:	b082      	sub	sp, #8
 8003908:	af00      	add	r7, sp, #0
 800390a:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 800390c:	687b      	ldr	r3, [r7, #4]
 800390e:	689b      	ldr	r3, [r3, #8]
 8003910:	4a04      	ldr	r2, [pc, #16]	; (8003924 <LL_ADC_Enable+0x20>)
 8003912:	4013      	ands	r3, r2
 8003914:	2201      	movs	r2, #1
 8003916:	431a      	orrs	r2, r3
 8003918:	687b      	ldr	r3, [r7, #4]
 800391a:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADEN);
}
 800391c:	46c0      	nop			; (mov r8, r8)
 800391e:	46bd      	mov	sp, r7
 8003920:	b002      	add	sp, #8
 8003922:	bd80      	pop	{r7, pc}
 8003924:	7fffffe8 	.word	0x7fffffe8

08003928 <LL_ADC_IsEnabled>:
  * @rmtoll CR       ADEN           LL_ADC_IsEnabled
  * @param  ADCx ADC instance
  * @retval 0: ADC is disabled, 1: ADC is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsEnabled(ADC_TypeDef *ADCx)
{
 8003928:	b580      	push	{r7, lr}
 800392a:	b082      	sub	sp, #8
 800392c:	af00      	add	r7, sp, #0
 800392e:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 8003930:	687b      	ldr	r3, [r7, #4]
 8003932:	689b      	ldr	r3, [r3, #8]
 8003934:	2201      	movs	r2, #1
 8003936:	4013      	ands	r3, r2
 8003938:	2b01      	cmp	r3, #1
 800393a:	d101      	bne.n	8003940 <LL_ADC_IsEnabled+0x18>
 800393c:	2301      	movs	r3, #1
 800393e:	e000      	b.n	8003942 <LL_ADC_IsEnabled+0x1a>
 8003940:	2300      	movs	r3, #0
}
 8003942:	0018      	movs	r0, r3
 8003944:	46bd      	mov	sp, r7
 8003946:	b002      	add	sp, #8
 8003948:	bd80      	pop	{r7, pc}
	...

0800394c <LL_ADC_REG_StartConversion>:
  * @rmtoll CR       ADSTART        LL_ADC_REG_StartConversion
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_StartConversion(ADC_TypeDef *ADCx)
{
 800394c:	b580      	push	{r7, lr}
 800394e:	b082      	sub	sp, #8
 8003950:	af00      	add	r7, sp, #0
 8003952:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8003954:	687b      	ldr	r3, [r7, #4]
 8003956:	689b      	ldr	r3, [r3, #8]
 8003958:	4a04      	ldr	r2, [pc, #16]	; (800396c <LL_ADC_REG_StartConversion+0x20>)
 800395a:	4013      	ands	r3, r2
 800395c:	2204      	movs	r2, #4
 800395e:	431a      	orrs	r2, r3
 8003960:	687b      	ldr	r3, [r7, #4]
 8003962:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADSTART);
}
 8003964:	46c0      	nop			; (mov r8, r8)
 8003966:	46bd      	mov	sp, r7
 8003968:	b002      	add	sp, #8
 800396a:	bd80      	pop	{r7, pc}
 800396c:	7fffffe8 	.word	0x7fffffe8

08003970 <LL_ADC_REG_IsConversionOngoing>:
  * @rmtoll CR       ADSTART        LL_ADC_REG_IsConversionOngoing
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group regular.
  */
__STATIC_INLINE uint32_t LL_ADC_REG_IsConversionOngoing(ADC_TypeDef *ADCx)
{
 8003970:	b580      	push	{r7, lr}
 8003972:	b082      	sub	sp, #8
 8003974:	af00      	add	r7, sp, #0
 8003976:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 8003978:	687b      	ldr	r3, [r7, #4]
 800397a:	689b      	ldr	r3, [r3, #8]
 800397c:	2204      	movs	r2, #4
 800397e:	4013      	ands	r3, r2
 8003980:	2b04      	cmp	r3, #4
 8003982:	d101      	bne.n	8003988 <LL_ADC_REG_IsConversionOngoing+0x18>
 8003984:	2301      	movs	r3, #1
 8003986:	e000      	b.n	800398a <LL_ADC_REG_IsConversionOngoing+0x1a>
 8003988:	2300      	movs	r3, #0
}
 800398a:	0018      	movs	r0, r3
 800398c:	46bd      	mov	sp, r7
 800398e:	b002      	add	sp, #8
 8003990:	bd80      	pop	{r7, pc}
	...

08003994 <HAL_ADC_Init>:
  *         of structure "ADC_InitTypeDef".
  * @param hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef *hadc)
{
 8003994:	b580      	push	{r7, lr}
 8003996:	b088      	sub	sp, #32
 8003998:	af00      	add	r7, sp, #0
 800399a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 800399c:	231f      	movs	r3, #31
 800399e:	18fb      	adds	r3, r7, r3
 80039a0:	2200      	movs	r2, #0
 80039a2:	701a      	strb	r2, [r3, #0]
  uint32_t tmpCFGR1 = 0UL;
 80039a4:	2300      	movs	r3, #0
 80039a6:	61bb      	str	r3, [r7, #24]
  uint32_t tmpCFGR2 = 0UL;
 80039a8:	2300      	movs	r3, #0
 80039aa:	617b      	str	r3, [r7, #20]
  uint32_t tmp_adc_reg_is_conversion_on_going;
  __IO uint32_t wait_loop_index = 0UL;
 80039ac:	2300      	movs	r3, #0
 80039ae:	60fb      	str	r3, [r7, #12]

  /* Check ADC handle */
  if (hadc == NULL)
 80039b0:	687b      	ldr	r3, [r7, #4]
 80039b2:	2b00      	cmp	r3, #0
 80039b4:	d101      	bne.n	80039ba <HAL_ADC_Init+0x26>
  {
    return HAL_ERROR;
 80039b6:	2301      	movs	r3, #1
 80039b8:	e17f      	b.n	8003cba <HAL_ADC_Init+0x326>
  /* continuous mode is disabled.                                             */
  assert_param(!((hadc->Init.DiscontinuousConvMode == ENABLE) && (hadc->Init.ContinuousConvMode == ENABLE)));

  /* Actions performed only if ADC is coming from state reset:                */
  /* - Initialization of ADC MSP                                              */
  if (hadc->State == HAL_ADC_STATE_RESET)
 80039ba:	687b      	ldr	r3, [r7, #4]
 80039bc:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80039be:	2b00      	cmp	r3, #0
 80039c0:	d10a      	bne.n	80039d8 <HAL_ADC_Init+0x44>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 80039c2:	687b      	ldr	r3, [r7, #4]
 80039c4:	0018      	movs	r0, r3
 80039c6:	f7ff fb77 	bl	80030b8 <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 80039ca:	687b      	ldr	r3, [r7, #4]
 80039cc:	2200      	movs	r2, #0
 80039ce:	65da      	str	r2, [r3, #92]	; 0x5c

    /* Initialize Lock */
    hadc->Lock = HAL_UNLOCKED;
 80039d0:	687b      	ldr	r3, [r7, #4]
 80039d2:	2254      	movs	r2, #84	; 0x54
 80039d4:	2100      	movs	r1, #0
 80039d6:	5499      	strb	r1, [r3, r2]
  }

  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 80039d8:	687b      	ldr	r3, [r7, #4]
 80039da:	681b      	ldr	r3, [r3, #0]
 80039dc:	0018      	movs	r0, r3
 80039de:	f7ff ff7d 	bl	80038dc <LL_ADC_IsInternalRegulatorEnabled>
 80039e2:	1e03      	subs	r3, r0, #0
 80039e4:	d115      	bne.n	8003a12 <HAL_ADC_Init+0x7e>
  {
    /* Enable ADC internal voltage regulator */
    LL_ADC_EnableInternalRegulator(hadc->Instance);
 80039e6:	687b      	ldr	r3, [r7, #4]
 80039e8:	681b      	ldr	r3, [r3, #0]
 80039ea:	0018      	movs	r0, r3
 80039ec:	f7ff ff62 	bl	80038b4 <LL_ADC_EnableInternalRegulator>
    /* Delay for ADC stabilization time */
    /* Wait loop initialization and execution */
    /* Note: Variable divided by 2 to compensate partially              */
    /*       CPU processing cycles, scaling in us split to not          */
    /*       exceed 32 bits register capacity and handle low frequency. */
    wait_loop_index = ((LL_ADC_DELAY_INTERNAL_REGUL_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 80039f0:	4bb4      	ldr	r3, [pc, #720]	; (8003cc4 <HAL_ADC_Init+0x330>)
 80039f2:	681b      	ldr	r3, [r3, #0]
 80039f4:	49b4      	ldr	r1, [pc, #720]	; (8003cc8 <HAL_ADC_Init+0x334>)
 80039f6:	0018      	movs	r0, r3
 80039f8:	f7fc fba0 	bl	800013c <__udivsi3>
 80039fc:	0003      	movs	r3, r0
 80039fe:	3301      	adds	r3, #1
 8003a00:	005b      	lsls	r3, r3, #1
 8003a02:	60fb      	str	r3, [r7, #12]
    while (wait_loop_index != 0UL)
 8003a04:	e002      	b.n	8003a0c <HAL_ADC_Init+0x78>
    {
      wait_loop_index--;
 8003a06:	68fb      	ldr	r3, [r7, #12]
 8003a08:	3b01      	subs	r3, #1
 8003a0a:	60fb      	str	r3, [r7, #12]
    while (wait_loop_index != 0UL)
 8003a0c:	68fb      	ldr	r3, [r7, #12]
 8003a0e:	2b00      	cmp	r3, #0
 8003a10:	d1f9      	bne.n	8003a06 <HAL_ADC_Init+0x72>
  }

  /* Verification that ADC voltage regulator is correctly enabled, whether    */
  /* or not ADC is coming from state reset (if any potential problem of       */
  /* clocking, voltage regulator would not be enabled).                       */
  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 8003a12:	687b      	ldr	r3, [r7, #4]
 8003a14:	681b      	ldr	r3, [r3, #0]
 8003a16:	0018      	movs	r0, r3
 8003a18:	f7ff ff60 	bl	80038dc <LL_ADC_IsInternalRegulatorEnabled>
 8003a1c:	1e03      	subs	r3, r0, #0
 8003a1e:	d10f      	bne.n	8003a40 <HAL_ADC_Init+0xac>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8003a20:	687b      	ldr	r3, [r7, #4]
 8003a22:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003a24:	2210      	movs	r2, #16
 8003a26:	431a      	orrs	r2, r3
 8003a28:	687b      	ldr	r3, [r7, #4]
 8003a2a:	659a      	str	r2, [r3, #88]	; 0x58

    /* Set ADC error code to ADC peripheral internal error */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8003a2c:	687b      	ldr	r3, [r7, #4]
 8003a2e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003a30:	2201      	movs	r2, #1
 8003a32:	431a      	orrs	r2, r3
 8003a34:	687b      	ldr	r3, [r7, #4]
 8003a36:	65da      	str	r2, [r3, #92]	; 0x5c

    tmp_hal_status = HAL_ERROR;
 8003a38:	231f      	movs	r3, #31
 8003a3a:	18fb      	adds	r3, r7, r3
 8003a3c:	2201      	movs	r2, #1
 8003a3e:	701a      	strb	r2, [r3, #0]

  /* Configuration of ADC parameters if previous preliminary actions are      */
  /* correctly completed and if there is no conversion on going on regular    */
  /* group (ADC may already be enabled at this point if HAL_ADC_Init() is     */
  /* called to update a parameter on the fly).                                */
  tmp_adc_reg_is_conversion_on_going = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 8003a40:	687b      	ldr	r3, [r7, #4]
 8003a42:	681b      	ldr	r3, [r3, #0]
 8003a44:	0018      	movs	r0, r3
 8003a46:	f7ff ff93 	bl	8003970 <LL_ADC_REG_IsConversionOngoing>
 8003a4a:	0003      	movs	r3, r0
 8003a4c:	613b      	str	r3, [r7, #16]

  if (((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) == 0UL)
 8003a4e:	687b      	ldr	r3, [r7, #4]
 8003a50:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003a52:	2210      	movs	r2, #16
 8003a54:	4013      	ands	r3, r2
 8003a56:	d000      	beq.n	8003a5a <HAL_ADC_Init+0xc6>
 8003a58:	e122      	b.n	8003ca0 <HAL_ADC_Init+0x30c>
      && (tmp_adc_reg_is_conversion_on_going == 0UL)
 8003a5a:	693b      	ldr	r3, [r7, #16]
 8003a5c:	2b00      	cmp	r3, #0
 8003a5e:	d000      	beq.n	8003a62 <HAL_ADC_Init+0xce>
 8003a60:	e11e      	b.n	8003ca0 <HAL_ADC_Init+0x30c>
     )
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8003a62:	687b      	ldr	r3, [r7, #4]
 8003a64:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003a66:	4a99      	ldr	r2, [pc, #612]	; (8003ccc <HAL_ADC_Init+0x338>)
 8003a68:	4013      	ands	r3, r2
 8003a6a:	2202      	movs	r2, #2
 8003a6c:	431a      	orrs	r2, r3
 8003a6e:	687b      	ldr	r3, [r7, #4]
 8003a70:	659a      	str	r2, [r3, #88]	; 0x58
    /*  - DMA continuous request                                              */
    /*  - Trigger frequency mode                                              */
    /* Note: If low power mode AutoPowerOff is enabled, ADC enable            */
    /*       and disable phases are performed automatically by hardware       */
    /*       (in this case, flag ADC_FLAG_RDY is not set).                    */
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8003a72:	687b      	ldr	r3, [r7, #4]
 8003a74:	681b      	ldr	r3, [r3, #0]
 8003a76:	0018      	movs	r0, r3
 8003a78:	f7ff ff56 	bl	8003928 <LL_ADC_IsEnabled>
 8003a7c:	1e03      	subs	r3, r0, #0
 8003a7e:	d000      	beq.n	8003a82 <HAL_ADC_Init+0xee>
 8003a80:	e0ad      	b.n	8003bde <HAL_ADC_Init+0x24a>
      /* without needing to reconfigure all other ADC groups/channels         */
      /* parameters):                                                         */
      /*   - internal measurement paths (VrefInt, ...)                        */
      /*     (set into HAL_ADC_ConfigChannel() )                              */

      tmpCFGR1 |= (hadc->Init.Resolution                                          |
 8003a82:	687b      	ldr	r3, [r7, #4]
 8003a84:	689a      	ldr	r2, [r3, #8]
                   ADC_CFGR1_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait)      |
 8003a86:	687b      	ldr	r3, [r7, #4]
 8003a88:	7e1b      	ldrb	r3, [r3, #24]
 8003a8a:	039b      	lsls	r3, r3, #14
      tmpCFGR1 |= (hadc->Init.Resolution                                          |
 8003a8c:	431a      	orrs	r2, r3
                   ADC_CFGR1_AUTOOFF((uint32_t)hadc->Init.LowPowerAutoPowerOff)   |
 8003a8e:	687b      	ldr	r3, [r7, #4]
 8003a90:	7e5b      	ldrb	r3, [r3, #25]
 8003a92:	03db      	lsls	r3, r3, #15
                   ADC_CFGR1_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait)      |
 8003a94:	431a      	orrs	r2, r3
                   ADC_CFGR1_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)  |
 8003a96:	687b      	ldr	r3, [r7, #4]
 8003a98:	7e9b      	ldrb	r3, [r3, #26]
 8003a9a:	035b      	lsls	r3, r3, #13
                   ADC_CFGR1_AUTOOFF((uint32_t)hadc->Init.LowPowerAutoPowerOff)   |
 8003a9c:	431a      	orrs	r2, r3
                   ADC_CFGR1_OVERRUN(hadc->Init.Overrun)                          |
 8003a9e:	687b      	ldr	r3, [r7, #4]
 8003aa0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003aa2:	2b00      	cmp	r3, #0
 8003aa4:	d002      	beq.n	8003aac <HAL_ADC_Init+0x118>
 8003aa6:	2380      	movs	r3, #128	; 0x80
 8003aa8:	015b      	lsls	r3, r3, #5
 8003aaa:	e000      	b.n	8003aae <HAL_ADC_Init+0x11a>
 8003aac:	2300      	movs	r3, #0
                   ADC_CFGR1_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)  |
 8003aae:	431a      	orrs	r2, r3
                   hadc->Init.DataAlign                                           |
 8003ab0:	687b      	ldr	r3, [r7, #4]
 8003ab2:	68db      	ldr	r3, [r3, #12]
                   ADC_CFGR1_OVERRUN(hadc->Init.Overrun)                          |
 8003ab4:	431a      	orrs	r2, r3
                   ADC_SCAN_SEQ_MODE(hadc->Init.ScanConvMode)                     |
 8003ab6:	687b      	ldr	r3, [r7, #4]
 8003ab8:	691b      	ldr	r3, [r3, #16]
 8003aba:	2b00      	cmp	r3, #0
 8003abc:	da04      	bge.n	8003ac8 <HAL_ADC_Init+0x134>
 8003abe:	687b      	ldr	r3, [r7, #4]
 8003ac0:	691b      	ldr	r3, [r3, #16]
 8003ac2:	005b      	lsls	r3, r3, #1
 8003ac4:	085b      	lsrs	r3, r3, #1
 8003ac6:	e001      	b.n	8003acc <HAL_ADC_Init+0x138>
 8003ac8:	2380      	movs	r3, #128	; 0x80
 8003aca:	039b      	lsls	r3, r3, #14
                   hadc->Init.DataAlign                                           |
 8003acc:	431a      	orrs	r2, r3
                   ADC_CFGR1_DMACONTREQ((uint32_t)hadc->Init.DMAContinuousRequests));
 8003ace:	687b      	ldr	r3, [r7, #4]
 8003ad0:	212c      	movs	r1, #44	; 0x2c
 8003ad2:	5c5b      	ldrb	r3, [r3, r1]
 8003ad4:	005b      	lsls	r3, r3, #1
                   ADC_SCAN_SEQ_MODE(hadc->Init.ScanConvMode)                     |
 8003ad6:	4313      	orrs	r3, r2
      tmpCFGR1 |= (hadc->Init.Resolution                                          |
 8003ad8:	69ba      	ldr	r2, [r7, #24]
 8003ada:	4313      	orrs	r3, r2
 8003adc:	61bb      	str	r3, [r7, #24]

      /* Update setting of discontinuous mode only if continuous mode is disabled */
      if (hadc->Init.DiscontinuousConvMode == ENABLE)
 8003ade:	687b      	ldr	r3, [r7, #4]
 8003ae0:	2220      	movs	r2, #32
 8003ae2:	5c9b      	ldrb	r3, [r3, r2]
 8003ae4:	2b01      	cmp	r3, #1
 8003ae6:	d115      	bne.n	8003b14 <HAL_ADC_Init+0x180>
      {
        if (hadc->Init.ContinuousConvMode == DISABLE)
 8003ae8:	687b      	ldr	r3, [r7, #4]
 8003aea:	7e9b      	ldrb	r3, [r3, #26]
 8003aec:	2b00      	cmp	r3, #0
 8003aee:	d105      	bne.n	8003afc <HAL_ADC_Init+0x168>
        {
          /* Enable the selected ADC group regular discontinuous mode */
          tmpCFGR1 |= ADC_CFGR1_DISCEN;
 8003af0:	69bb      	ldr	r3, [r7, #24]
 8003af2:	2280      	movs	r2, #128	; 0x80
 8003af4:	0252      	lsls	r2, r2, #9
 8003af6:	4313      	orrs	r3, r2
 8003af8:	61bb      	str	r3, [r7, #24]
 8003afa:	e00b      	b.n	8003b14 <HAL_ADC_Init+0x180>
          /* ADC regular group discontinuous was intended to be enabled,        */
          /* but ADC regular group modes continuous and sequencer discontinuous */
          /* cannot be enabled simultaneously.                                  */

          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8003afc:	687b      	ldr	r3, [r7, #4]
 8003afe:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003b00:	2220      	movs	r2, #32
 8003b02:	431a      	orrs	r2, r3
 8003b04:	687b      	ldr	r3, [r7, #4]
 8003b06:	659a      	str	r2, [r3, #88]	; 0x58

          /* Set ADC error code to ADC peripheral internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8003b08:	687b      	ldr	r3, [r7, #4]
 8003b0a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003b0c:	2201      	movs	r2, #1
 8003b0e:	431a      	orrs	r2, r3
 8003b10:	687b      	ldr	r3, [r7, #4]
 8003b12:	65da      	str	r2, [r3, #92]	; 0x5c
      /* Enable external trigger if trigger selection is different of software  */
      /* start.                                                                 */
      /* Note: This configuration keeps the hardware feature of parameter       */
      /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
      /*       software start.                                                  */
      if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 8003b14:	687b      	ldr	r3, [r7, #4]
 8003b16:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003b18:	2b00      	cmp	r3, #0
 8003b1a:	d00a      	beq.n	8003b32 <HAL_ADC_Init+0x19e>
      {
        tmpCFGR1 |= ((hadc->Init.ExternalTrigConv & ADC_CFGR1_EXTSEL) |
 8003b1c:	687b      	ldr	r3, [r7, #4]
 8003b1e:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8003b20:	23e0      	movs	r3, #224	; 0xe0
 8003b22:	005b      	lsls	r3, r3, #1
 8003b24:	401a      	ands	r2, r3
                     hadc->Init.ExternalTrigConvEdge);
 8003b26:	687b      	ldr	r3, [r7, #4]
 8003b28:	6a9b      	ldr	r3, [r3, #40]	; 0x28
        tmpCFGR1 |= ((hadc->Init.ExternalTrigConv & ADC_CFGR1_EXTSEL) |
 8003b2a:	4313      	orrs	r3, r2
 8003b2c:	69ba      	ldr	r2, [r7, #24]
 8003b2e:	4313      	orrs	r3, r2
 8003b30:	61bb      	str	r3, [r7, #24]
      }

      /* Update ADC configuration register with previous settings */
      MODIFY_REG(hadc->Instance->CFGR1,
 8003b32:	687b      	ldr	r3, [r7, #4]
 8003b34:	681b      	ldr	r3, [r3, #0]
 8003b36:	68db      	ldr	r3, [r3, #12]
 8003b38:	4a65      	ldr	r2, [pc, #404]	; (8003cd0 <HAL_ADC_Init+0x33c>)
 8003b3a:	4013      	ands	r3, r2
 8003b3c:	0019      	movs	r1, r3
 8003b3e:	687b      	ldr	r3, [r7, #4]
 8003b40:	681b      	ldr	r3, [r3, #0]
 8003b42:	69ba      	ldr	r2, [r7, #24]
 8003b44:	430a      	orrs	r2, r1
 8003b46:	60da      	str	r2, [r3, #12]
                 ADC_CFGR1_ALIGN   |
                 ADC_CFGR1_SCANDIR |
                 ADC_CFGR1_DMACFG,
                 tmpCFGR1);

      tmpCFGR2 |= ((hadc->Init.ClockPrescaler & ADC_CFGR2_CKMODE) |
 8003b48:	687b      	ldr	r3, [r7, #4]
 8003b4a:	685b      	ldr	r3, [r3, #4]
 8003b4c:	0f9b      	lsrs	r3, r3, #30
 8003b4e:	079a      	lsls	r2, r3, #30
                   hadc->Init.TriggerFrequencyMode
 8003b50:	687b      	ldr	r3, [r7, #4]
 8003b52:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
      tmpCFGR2 |= ((hadc->Init.ClockPrescaler & ADC_CFGR2_CKMODE) |
 8003b54:	4313      	orrs	r3, r2
 8003b56:	697a      	ldr	r2, [r7, #20]
 8003b58:	4313      	orrs	r3, r2
 8003b5a:	617b      	str	r3, [r7, #20]
                  );

      if (hadc->Init.OversamplingMode == ENABLE)
 8003b5c:	687b      	ldr	r3, [r7, #4]
 8003b5e:	223c      	movs	r2, #60	; 0x3c
 8003b60:	5c9b      	ldrb	r3, [r3, r2]
 8003b62:	2b01      	cmp	r3, #1
 8003b64:	d111      	bne.n	8003b8a <HAL_ADC_Init+0x1f6>
      {
        tmpCFGR2 |= (ADC_CFGR2_OVSE |
                     (hadc->Init.ClockPrescaler & ADC_CFGR2_CKMODE) |
 8003b66:	687b      	ldr	r3, [r7, #4]
 8003b68:	685b      	ldr	r3, [r3, #4]
 8003b6a:	0f9b      	lsrs	r3, r3, #30
 8003b6c:	079a      	lsls	r2, r3, #30
                     hadc->Init.Oversampling.Ratio         |
 8003b6e:	687b      	ldr	r3, [r7, #4]
 8003b70:	6c1b      	ldr	r3, [r3, #64]	; 0x40
                     (hadc->Init.ClockPrescaler & ADC_CFGR2_CKMODE) |
 8003b72:	431a      	orrs	r2, r3
                     hadc->Init.Oversampling.RightBitShift |
 8003b74:	687b      	ldr	r3, [r7, #4]
 8003b76:	6c5b      	ldr	r3, [r3, #68]	; 0x44
                     hadc->Init.Oversampling.Ratio         |
 8003b78:	431a      	orrs	r2, r3
                     hadc->Init.Oversampling.TriggeredMode
 8003b7a:	687b      	ldr	r3, [r7, #4]
 8003b7c:	6c9b      	ldr	r3, [r3, #72]	; 0x48
                     hadc->Init.Oversampling.RightBitShift |
 8003b7e:	431a      	orrs	r2, r3
        tmpCFGR2 |= (ADC_CFGR2_OVSE |
 8003b80:	697b      	ldr	r3, [r7, #20]
 8003b82:	4313      	orrs	r3, r2
 8003b84:	2201      	movs	r2, #1
 8003b86:	4313      	orrs	r3, r2
 8003b88:	617b      	str	r3, [r7, #20]
                    );
      }

      MODIFY_REG(hadc->Instance->CFGR2,
 8003b8a:	687b      	ldr	r3, [r7, #4]
 8003b8c:	681b      	ldr	r3, [r3, #0]
 8003b8e:	691b      	ldr	r3, [r3, #16]
 8003b90:	4a50      	ldr	r2, [pc, #320]	; (8003cd4 <HAL_ADC_Init+0x340>)
 8003b92:	4013      	ands	r3, r2
 8003b94:	0019      	movs	r1, r3
 8003b96:	687b      	ldr	r3, [r7, #4]
 8003b98:	681b      	ldr	r3, [r3, #0]
 8003b9a:	697a      	ldr	r2, [r7, #20]
 8003b9c:	430a      	orrs	r2, r1
 8003b9e:	611a      	str	r2, [r3, #16]
                 ADC_CFGR2_TOVS,
                 tmpCFGR2);

      /* Configuration of ADC clock mode: asynchronous clock source           */
      /* with selectable prescaler.                                           */
      if (((hadc->Init.ClockPrescaler) != ADC_CLOCK_SYNC_PCLK_DIV1) &&
 8003ba0:	687b      	ldr	r3, [r7, #4]
 8003ba2:	685a      	ldr	r2, [r3, #4]
 8003ba4:	23c0      	movs	r3, #192	; 0xc0
 8003ba6:	061b      	lsls	r3, r3, #24
 8003ba8:	429a      	cmp	r2, r3
 8003baa:	d018      	beq.n	8003bde <HAL_ADC_Init+0x24a>
          ((hadc->Init.ClockPrescaler) != ADC_CLOCK_SYNC_PCLK_DIV2) &&
 8003bac:	687b      	ldr	r3, [r7, #4]
 8003bae:	685a      	ldr	r2, [r3, #4]
      if (((hadc->Init.ClockPrescaler) != ADC_CLOCK_SYNC_PCLK_DIV1) &&
 8003bb0:	2380      	movs	r3, #128	; 0x80
 8003bb2:	05db      	lsls	r3, r3, #23
 8003bb4:	429a      	cmp	r2, r3
 8003bb6:	d012      	beq.n	8003bde <HAL_ADC_Init+0x24a>
          ((hadc->Init.ClockPrescaler) != ADC_CLOCK_SYNC_PCLK_DIV4))
 8003bb8:	687b      	ldr	r3, [r7, #4]
 8003bba:	685a      	ldr	r2, [r3, #4]
          ((hadc->Init.ClockPrescaler) != ADC_CLOCK_SYNC_PCLK_DIV2) &&
 8003bbc:	2380      	movs	r3, #128	; 0x80
 8003bbe:	061b      	lsls	r3, r3, #24
 8003bc0:	429a      	cmp	r2, r3
 8003bc2:	d00c      	beq.n	8003bde <HAL_ADC_Init+0x24a>
      {
        MODIFY_REG(ADC1_COMMON->CCR,
 8003bc4:	4b44      	ldr	r3, [pc, #272]	; (8003cd8 <HAL_ADC_Init+0x344>)
 8003bc6:	681b      	ldr	r3, [r3, #0]
 8003bc8:	4a44      	ldr	r2, [pc, #272]	; (8003cdc <HAL_ADC_Init+0x348>)
 8003bca:	4013      	ands	r3, r2
 8003bcc:	0019      	movs	r1, r3
 8003bce:	687b      	ldr	r3, [r7, #4]
 8003bd0:	685a      	ldr	r2, [r3, #4]
 8003bd2:	23f0      	movs	r3, #240	; 0xf0
 8003bd4:	039b      	lsls	r3, r3, #14
 8003bd6:	401a      	ands	r2, r3
 8003bd8:	4b3f      	ldr	r3, [pc, #252]	; (8003cd8 <HAL_ADC_Init+0x344>)
 8003bda:	430a      	orrs	r2, r1
 8003bdc:	601a      	str	r2, [r3, #0]
                   hadc->Init.ClockPrescaler & ADC_CCR_PRESC);
      }
    }

    /* Channel sampling time configuration */
    LL_ADC_SetSamplingTimeCommonChannels(hadc->Instance, LL_ADC_SAMPLINGTIME_COMMON_1, hadc->Init.SamplingTimeCommon1);
 8003bde:	687b      	ldr	r3, [r7, #4]
 8003be0:	6818      	ldr	r0, [r3, #0]
 8003be2:	687b      	ldr	r3, [r7, #4]
 8003be4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003be6:	001a      	movs	r2, r3
 8003be8:	2100      	movs	r1, #0
 8003bea:	f7ff fdbe 	bl	800376a <LL_ADC_SetSamplingTimeCommonChannels>
    LL_ADC_SetSamplingTimeCommonChannels(hadc->Instance, LL_ADC_SAMPLINGTIME_COMMON_2, hadc->Init.SamplingTimeCommon2);
 8003bee:	687b      	ldr	r3, [r7, #4]
 8003bf0:	6818      	ldr	r0, [r3, #0]
 8003bf2:	687b      	ldr	r3, [r7, #4]
 8003bf4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003bf6:	493a      	ldr	r1, [pc, #232]	; (8003ce0 <HAL_ADC_Init+0x34c>)
 8003bf8:	001a      	movs	r2, r3
 8003bfa:	f7ff fdb6 	bl	800376a <LL_ADC_SetSamplingTimeCommonChannels>
    /*   emulated by software for alignment over all STM32 devices.           */
    /* - if scan mode is enabled, regular channels sequence length is set to  */
    /*   parameter "NbrOfConversion".                                         */
    /*   Channels must be configured into each rank using function            */
    /*   "HAL_ADC_ConfigChannel()".                                           */
    if (hadc->Init.ScanConvMode == ADC_SCAN_DISABLE)
 8003bfe:	687b      	ldr	r3, [r7, #4]
 8003c00:	691b      	ldr	r3, [r3, #16]
 8003c02:	2b00      	cmp	r3, #0
 8003c04:	d109      	bne.n	8003c1a <HAL_ADC_Init+0x286>
    {
      /* Set sequencer scan length by clearing ranks above rank 1             */
      /* and do not modify rank 1 value.                                      */
      SET_BIT(hadc->Instance->CHSELR,
 8003c06:	687b      	ldr	r3, [r7, #4]
 8003c08:	681b      	ldr	r3, [r3, #0]
 8003c0a:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8003c0c:	687b      	ldr	r3, [r7, #4]
 8003c0e:	681b      	ldr	r3, [r3, #0]
 8003c10:	2110      	movs	r1, #16
 8003c12:	4249      	negs	r1, r1
 8003c14:	430a      	orrs	r2, r1
 8003c16:	629a      	str	r2, [r3, #40]	; 0x28
 8003c18:	e018      	b.n	8003c4c <HAL_ADC_Init+0x2b8>
              ADC_CHSELR_SQ2_TO_SQ8);
    }
    else if (hadc->Init.ScanConvMode == ADC_SCAN_ENABLE)
 8003c1a:	687b      	ldr	r3, [r7, #4]
 8003c1c:	691a      	ldr	r2, [r3, #16]
 8003c1e:	2380      	movs	r3, #128	; 0x80
 8003c20:	039b      	lsls	r3, r3, #14
 8003c22:	429a      	cmp	r2, r3
 8003c24:	d112      	bne.n	8003c4c <HAL_ADC_Init+0x2b8>
      /*          therefore after the first call of "HAL_ADC_Init()",       */
      /*          each rank corresponding to parameter "NbrOfConversion"    */
      /*          must be set using "HAL_ADC_ConfigChannel()".              */
      /*  - Set sequencer scan length by clearing ranks above maximum rank  */
      /*    and do not modify other ranks value.                            */
      MODIFY_REG(hadc->Instance->CHSELR,
 8003c26:	687b      	ldr	r3, [r7, #4]
 8003c28:	681b      	ldr	r3, [r3, #0]
 8003c2a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003c2c:	687b      	ldr	r3, [r7, #4]
 8003c2e:	69db      	ldr	r3, [r3, #28]
 8003c30:	3b01      	subs	r3, #1
 8003c32:	009b      	lsls	r3, r3, #2
 8003c34:	221c      	movs	r2, #28
 8003c36:	4013      	ands	r3, r2
 8003c38:	2210      	movs	r2, #16
 8003c3a:	4252      	negs	r2, r2
 8003c3c:	409a      	lsls	r2, r3
 8003c3e:	0011      	movs	r1, r2
 8003c40:	687b      	ldr	r3, [r7, #4]
 8003c42:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 8003c44:	687b      	ldr	r3, [r7, #4]
 8003c46:	681b      	ldr	r3, [r3, #0]
 8003c48:	430a      	orrs	r2, r1
 8003c4a:	629a      	str	r2, [r3, #40]	; 0x28
                );
    }

    /* Check back that ADC registers have effectively been configured to      */
    /* ensure of no potential problem of ADC core peripheral clocking.        */
    if(LL_ADC_GetSamplingTimeCommonChannels(hadc->Instance, LL_ADC_SAMPLINGTIME_COMMON_1)
 8003c4c:	687b      	ldr	r3, [r7, #4]
 8003c4e:	681b      	ldr	r3, [r3, #0]
 8003c50:	2100      	movs	r1, #0
 8003c52:	0018      	movs	r0, r3
 8003c54:	f7ff fda6 	bl	80037a4 <LL_ADC_GetSamplingTimeCommonChannels>
 8003c58:	0002      	movs	r2, r0
      == hadc->Init.SamplingTimeCommon1)
 8003c5a:	687b      	ldr	r3, [r7, #4]
 8003c5c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
    if(LL_ADC_GetSamplingTimeCommonChannels(hadc->Instance, LL_ADC_SAMPLINGTIME_COMMON_1)
 8003c5e:	429a      	cmp	r2, r3
 8003c60:	d10b      	bne.n	8003c7a <HAL_ADC_Init+0x2e6>
    {
      /* Set ADC error code to none */
      ADC_CLEAR_ERRORCODE(hadc);
 8003c62:	687b      	ldr	r3, [r7, #4]
 8003c64:	2200      	movs	r2, #0
 8003c66:	65da      	str	r2, [r3, #92]	; 0x5c

      /* Set the ADC state */
      ADC_STATE_CLR_SET(hadc->State,
 8003c68:	687b      	ldr	r3, [r7, #4]
 8003c6a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003c6c:	2203      	movs	r2, #3
 8003c6e:	4393      	bics	r3, r2
 8003c70:	2201      	movs	r2, #1
 8003c72:	431a      	orrs	r2, r3
 8003c74:	687b      	ldr	r3, [r7, #4]
 8003c76:	659a      	str	r2, [r3, #88]	; 0x58
    if(LL_ADC_GetSamplingTimeCommonChannels(hadc->Instance, LL_ADC_SAMPLINGTIME_COMMON_1)
 8003c78:	e01c      	b.n	8003cb4 <HAL_ADC_Init+0x320>
                        HAL_ADC_STATE_READY);
    }
    else
    {
      /* Update ADC state machine to error */
      ADC_STATE_CLR_SET(hadc->State,
 8003c7a:	687b      	ldr	r3, [r7, #4]
 8003c7c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003c7e:	2212      	movs	r2, #18
 8003c80:	4393      	bics	r3, r2
 8003c82:	2210      	movs	r2, #16
 8003c84:	431a      	orrs	r2, r3
 8003c86:	687b      	ldr	r3, [r7, #4]
 8003c88:	659a      	str	r2, [r3, #88]	; 0x58
                        HAL_ADC_STATE_BUSY_INTERNAL,
                        HAL_ADC_STATE_ERROR_INTERNAL);

      /* Set ADC error code to ADC peripheral internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8003c8a:	687b      	ldr	r3, [r7, #4]
 8003c8c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003c8e:	2201      	movs	r2, #1
 8003c90:	431a      	orrs	r2, r3
 8003c92:	687b      	ldr	r3, [r7, #4]
 8003c94:	65da      	str	r2, [r3, #92]	; 0x5c

      tmp_hal_status = HAL_ERROR;
 8003c96:	231f      	movs	r3, #31
 8003c98:	18fb      	adds	r3, r7, r3
 8003c9a:	2201      	movs	r2, #1
 8003c9c:	701a      	strb	r2, [r3, #0]
    if(LL_ADC_GetSamplingTimeCommonChannels(hadc->Instance, LL_ADC_SAMPLINGTIME_COMMON_1)
 8003c9e:	e009      	b.n	8003cb4 <HAL_ADC_Init+0x320>

  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8003ca0:	687b      	ldr	r3, [r7, #4]
 8003ca2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003ca4:	2210      	movs	r2, #16
 8003ca6:	431a      	orrs	r2, r3
 8003ca8:	687b      	ldr	r3, [r7, #4]
 8003caa:	659a      	str	r2, [r3, #88]	; 0x58

    tmp_hal_status = HAL_ERROR;
 8003cac:	231f      	movs	r3, #31
 8003cae:	18fb      	adds	r3, r7, r3
 8003cb0:	2201      	movs	r2, #1
 8003cb2:	701a      	strb	r2, [r3, #0]
  }

  return tmp_hal_status;
 8003cb4:	231f      	movs	r3, #31
 8003cb6:	18fb      	adds	r3, r7, r3
 8003cb8:	781b      	ldrb	r3, [r3, #0]
}
 8003cba:	0018      	movs	r0, r3
 8003cbc:	46bd      	mov	sp, r7
 8003cbe:	b008      	add	sp, #32
 8003cc0:	bd80      	pop	{r7, pc}
 8003cc2:	46c0      	nop			; (mov r8, r8)
 8003cc4:	20000008 	.word	0x20000008
 8003cc8:	00030d40 	.word	0x00030d40
 8003ccc:	fffffefd 	.word	0xfffffefd
 8003cd0:	fffe0201 	.word	0xfffe0201
 8003cd4:	1ffffc02 	.word	0x1ffffc02
 8003cd8:	40012708 	.word	0x40012708
 8003cdc:	ffc3ffff 	.word	0xffc3ffff
 8003ce0:	07ffff04 	.word	0x07ffff04

08003ce4 <HAL_ADC_Start>:
  * @note   Interruptions enabled in this function: None.
  * @param hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Start(ADC_HandleTypeDef *hadc)
{
 8003ce4:	b5b0      	push	{r4, r5, r7, lr}
 8003ce6:	b084      	sub	sp, #16
 8003ce8:	af00      	add	r7, sp, #0
 8003cea:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));

  /* Perform ADC enable and conversion start if no conversion is on going */
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 8003cec:	687b      	ldr	r3, [r7, #4]
 8003cee:	681b      	ldr	r3, [r3, #0]
 8003cf0:	0018      	movs	r0, r3
 8003cf2:	f7ff fe3d 	bl	8003970 <LL_ADC_REG_IsConversionOngoing>
 8003cf6:	1e03      	subs	r3, r0, #0
 8003cf8:	d135      	bne.n	8003d66 <HAL_ADC_Start+0x82>
  {
    __HAL_LOCK(hadc);
 8003cfa:	687b      	ldr	r3, [r7, #4]
 8003cfc:	2254      	movs	r2, #84	; 0x54
 8003cfe:	5c9b      	ldrb	r3, [r3, r2]
 8003d00:	2b01      	cmp	r3, #1
 8003d02:	d101      	bne.n	8003d08 <HAL_ADC_Start+0x24>
 8003d04:	2302      	movs	r3, #2
 8003d06:	e035      	b.n	8003d74 <HAL_ADC_Start+0x90>
 8003d08:	687b      	ldr	r3, [r7, #4]
 8003d0a:	2254      	movs	r2, #84	; 0x54
 8003d0c:	2101      	movs	r1, #1
 8003d0e:	5499      	strb	r1, [r3, r2]

    /* Enable the ADC peripheral */
    tmp_hal_status = ADC_Enable(hadc);
 8003d10:	250f      	movs	r5, #15
 8003d12:	197c      	adds	r4, r7, r5
 8003d14:	687b      	ldr	r3, [r7, #4]
 8003d16:	0018      	movs	r0, r3
 8003d18:	f000 faaa 	bl	8004270 <ADC_Enable>
 8003d1c:	0003      	movs	r3, r0
 8003d1e:	7023      	strb	r3, [r4, #0]

    /* Start conversion if ADC is effectively enabled */
    if (tmp_hal_status == HAL_OK)
 8003d20:	197b      	adds	r3, r7, r5
 8003d22:	781b      	ldrb	r3, [r3, #0]
 8003d24:	2b00      	cmp	r3, #0
 8003d26:	d119      	bne.n	8003d5c <HAL_ADC_Start+0x78>
    {
      /* Set ADC state                                                        */
      /* - Clear state bitfield related to regular group conversion results   */
      /* - Set state bitfield related to regular operation                    */
      ADC_STATE_CLR_SET(hadc->State,
 8003d28:	687b      	ldr	r3, [r7, #4]
 8003d2a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003d2c:	4a13      	ldr	r2, [pc, #76]	; (8003d7c <HAL_ADC_Start+0x98>)
 8003d2e:	4013      	ands	r3, r2
 8003d30:	2280      	movs	r2, #128	; 0x80
 8003d32:	0052      	lsls	r2, r2, #1
 8003d34:	431a      	orrs	r2, r3
 8003d36:	687b      	ldr	r3, [r7, #4]
 8003d38:	659a      	str	r2, [r3, #88]	; 0x58
                        HAL_ADC_STATE_READY | HAL_ADC_STATE_REG_EOC | HAL_ADC_STATE_REG_OVR | HAL_ADC_STATE_REG_EOSMP,
                        HAL_ADC_STATE_REG_BUSY);

      /* Set ADC error code */
      /* Reset all ADC error code fields */
      ADC_CLEAR_ERRORCODE(hadc);
 8003d3a:	687b      	ldr	r3, [r7, #4]
 8003d3c:	2200      	movs	r2, #0
 8003d3e:	65da      	str	r2, [r3, #92]	; 0x5c

      /* Clear ADC group regular conversion flag and overrun flag               */
      /* (To ensure of no unknown state from potential previous ADC operations) */
      __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOC | ADC_FLAG_EOS | ADC_FLAG_OVR));
 8003d40:	687b      	ldr	r3, [r7, #4]
 8003d42:	681b      	ldr	r3, [r3, #0]
 8003d44:	221c      	movs	r2, #28
 8003d46:	601a      	str	r2, [r3, #0]

      /* Process unlocked */
      /* Unlock before starting ADC conversions: in case of potential         */
      /* interruption, to let the process to ADC IRQ Handler.                 */
      __HAL_UNLOCK(hadc);
 8003d48:	687b      	ldr	r3, [r7, #4]
 8003d4a:	2254      	movs	r2, #84	; 0x54
 8003d4c:	2100      	movs	r1, #0
 8003d4e:	5499      	strb	r1, [r3, r2]
      /* Enable conversion of regular group.                                  */
      /* If software start has been selected, conversion starts immediately.  */
      /* If external trigger has been selected, conversion will start at next */
      /* trigger event.                                                       */
      /* Start ADC group regular conversion */
      LL_ADC_REG_StartConversion(hadc->Instance);
 8003d50:	687b      	ldr	r3, [r7, #4]
 8003d52:	681b      	ldr	r3, [r3, #0]
 8003d54:	0018      	movs	r0, r3
 8003d56:	f7ff fdf9 	bl	800394c <LL_ADC_REG_StartConversion>
 8003d5a:	e008      	b.n	8003d6e <HAL_ADC_Start+0x8a>
    }
    else
    {
      __HAL_UNLOCK(hadc);
 8003d5c:	687b      	ldr	r3, [r7, #4]
 8003d5e:	2254      	movs	r2, #84	; 0x54
 8003d60:	2100      	movs	r1, #0
 8003d62:	5499      	strb	r1, [r3, r2]
 8003d64:	e003      	b.n	8003d6e <HAL_ADC_Start+0x8a>
    }
  }
  else
  {
    tmp_hal_status = HAL_BUSY;
 8003d66:	230f      	movs	r3, #15
 8003d68:	18fb      	adds	r3, r7, r3
 8003d6a:	2202      	movs	r2, #2
 8003d6c:	701a      	strb	r2, [r3, #0]
  }

  return tmp_hal_status;
 8003d6e:	230f      	movs	r3, #15
 8003d70:	18fb      	adds	r3, r7, r3
 8003d72:	781b      	ldrb	r3, [r3, #0]
}
 8003d74:	0018      	movs	r0, r3
 8003d76:	46bd      	mov	sp, r7
 8003d78:	b004      	add	sp, #16
 8003d7a:	bdb0      	pop	{r4, r5, r7, pc}
 8003d7c:	fffff0fe 	.word	0xfffff0fe

08003d80 <HAL_ADC_PollForConversion>:
  * @param hadc ADC handle
  * @param Timeout Timeout value in millisecond.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_PollForConversion(ADC_HandleTypeDef *hadc, uint32_t Timeout)
{
 8003d80:	b580      	push	{r7, lr}
 8003d82:	b084      	sub	sp, #16
 8003d84:	af00      	add	r7, sp, #0
 8003d86:	6078      	str	r0, [r7, #4]
 8003d88:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));

  /* If end of conversion selected to end of sequence conversions */
  if (hadc->Init.EOCSelection == ADC_EOC_SEQ_CONV)
 8003d8a:	687b      	ldr	r3, [r7, #4]
 8003d8c:	695b      	ldr	r3, [r3, #20]
 8003d8e:	2b08      	cmp	r3, #8
 8003d90:	d102      	bne.n	8003d98 <HAL_ADC_PollForConversion+0x18>
  {
    tmp_flag_end = ADC_FLAG_EOS;
 8003d92:	2308      	movs	r3, #8
 8003d94:	60fb      	str	r3, [r7, #12]
 8003d96:	e00f      	b.n	8003db8 <HAL_ADC_PollForConversion+0x38>
    /* each conversion:                                                       */
    /* Particular case is ADC configured in DMA mode and ADC sequencer with   */
    /* several ranks and polling for end of each conversion.                  */
    /* For code simplicity sake, this particular case is generalized to       */
    /* ADC configured in DMA mode and and polling for end of each conversion. */
    if ((hadc->Instance->CFGR1 & ADC_CFGR1_DMAEN) != 0UL)
 8003d98:	687b      	ldr	r3, [r7, #4]
 8003d9a:	681b      	ldr	r3, [r3, #0]
 8003d9c:	68db      	ldr	r3, [r3, #12]
 8003d9e:	2201      	movs	r2, #1
 8003da0:	4013      	ands	r3, r2
 8003da2:	d007      	beq.n	8003db4 <HAL_ADC_PollForConversion+0x34>
    {
      /* Update ADC state machine to error */
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8003da4:	687b      	ldr	r3, [r7, #4]
 8003da6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003da8:	2220      	movs	r2, #32
 8003daa:	431a      	orrs	r2, r3
 8003dac:	687b      	ldr	r3, [r7, #4]
 8003dae:	659a      	str	r2, [r3, #88]	; 0x58

      return HAL_ERROR;
 8003db0:	2301      	movs	r3, #1
 8003db2:	e072      	b.n	8003e9a <HAL_ADC_PollForConversion+0x11a>
    }
    else
    {
      tmp_flag_end = (ADC_FLAG_EOC);
 8003db4:	2304      	movs	r3, #4
 8003db6:	60fb      	str	r3, [r7, #12]
    }
  }

  /* Get tick count */
  tickstart = HAL_GetTick();
 8003db8:	f7ff fc88 	bl	80036cc <HAL_GetTick>
 8003dbc:	0003      	movs	r3, r0
 8003dbe:	60bb      	str	r3, [r7, #8]

  /* Wait until End of unitary conversion or sequence conversions flag is raised */
  while ((hadc->Instance->ISR & tmp_flag_end) == 0UL)
 8003dc0:	e01f      	b.n	8003e02 <HAL_ADC_PollForConversion+0x82>
  {
    /* Check if timeout is disabled (set to infinite wait) */
    if (Timeout != HAL_MAX_DELAY)
 8003dc2:	683b      	ldr	r3, [r7, #0]
 8003dc4:	3301      	adds	r3, #1
 8003dc6:	d01c      	beq.n	8003e02 <HAL_ADC_PollForConversion+0x82>
    {
      if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0UL))
 8003dc8:	f7ff fc80 	bl	80036cc <HAL_GetTick>
 8003dcc:	0002      	movs	r2, r0
 8003dce:	68bb      	ldr	r3, [r7, #8]
 8003dd0:	1ad3      	subs	r3, r2, r3
 8003dd2:	683a      	ldr	r2, [r7, #0]
 8003dd4:	429a      	cmp	r2, r3
 8003dd6:	d302      	bcc.n	8003dde <HAL_ADC_PollForConversion+0x5e>
 8003dd8:	683b      	ldr	r3, [r7, #0]
 8003dda:	2b00      	cmp	r3, #0
 8003ddc:	d111      	bne.n	8003e02 <HAL_ADC_PollForConversion+0x82>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if ((hadc->Instance->ISR & tmp_flag_end) == 0UL)
 8003dde:	687b      	ldr	r3, [r7, #4]
 8003de0:	681b      	ldr	r3, [r3, #0]
 8003de2:	681b      	ldr	r3, [r3, #0]
 8003de4:	68fa      	ldr	r2, [r7, #12]
 8003de6:	4013      	ands	r3, r2
 8003de8:	d10b      	bne.n	8003e02 <HAL_ADC_PollForConversion+0x82>
        {
          /* Update ADC state machine to timeout */
          SET_BIT(hadc->State, HAL_ADC_STATE_TIMEOUT);
 8003dea:	687b      	ldr	r3, [r7, #4]
 8003dec:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003dee:	2204      	movs	r2, #4
 8003df0:	431a      	orrs	r2, r3
 8003df2:	687b      	ldr	r3, [r7, #4]
 8003df4:	659a      	str	r2, [r3, #88]	; 0x58

          __HAL_UNLOCK(hadc);
 8003df6:	687b      	ldr	r3, [r7, #4]
 8003df8:	2254      	movs	r2, #84	; 0x54
 8003dfa:	2100      	movs	r1, #0
 8003dfc:	5499      	strb	r1, [r3, r2]

          return HAL_TIMEOUT;
 8003dfe:	2303      	movs	r3, #3
 8003e00:	e04b      	b.n	8003e9a <HAL_ADC_PollForConversion+0x11a>
  while ((hadc->Instance->ISR & tmp_flag_end) == 0UL)
 8003e02:	687b      	ldr	r3, [r7, #4]
 8003e04:	681b      	ldr	r3, [r3, #0]
 8003e06:	681b      	ldr	r3, [r3, #0]
 8003e08:	68fa      	ldr	r2, [r7, #12]
 8003e0a:	4013      	ands	r3, r2
 8003e0c:	d0d9      	beq.n	8003dc2 <HAL_ADC_PollForConversion+0x42>
      }
    }
  }

  /* Update ADC state machine */
  SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 8003e0e:	687b      	ldr	r3, [r7, #4]
 8003e10:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003e12:	2280      	movs	r2, #128	; 0x80
 8003e14:	0092      	lsls	r2, r2, #2
 8003e16:	431a      	orrs	r2, r3
 8003e18:	687b      	ldr	r3, [r7, #4]
 8003e1a:	659a      	str	r2, [r3, #88]	; 0x58

  /* Determine whether any further conversion upcoming on group regular       */
  /* by external trigger, continuous mode or scan sequence on going.          */
  if ((LL_ADC_REG_IsTriggerSourceSWStart(hadc->Instance) != 0UL)
 8003e1c:	687b      	ldr	r3, [r7, #4]
 8003e1e:	681b      	ldr	r3, [r3, #0]
 8003e20:	0018      	movs	r0, r3
 8003e22:	f7ff fcd6 	bl	80037d2 <LL_ADC_REG_IsTriggerSourceSWStart>
 8003e26:	1e03      	subs	r3, r0, #0
 8003e28:	d02e      	beq.n	8003e88 <HAL_ADC_PollForConversion+0x108>
      && (hadc->Init.ContinuousConvMode == DISABLE)
 8003e2a:	687b      	ldr	r3, [r7, #4]
 8003e2c:	7e9b      	ldrb	r3, [r3, #26]
 8003e2e:	2b00      	cmp	r3, #0
 8003e30:	d12a      	bne.n	8003e88 <HAL_ADC_PollForConversion+0x108>
     )
  {
    /* Check whether end of sequence is reached */
    if (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOS))
 8003e32:	687b      	ldr	r3, [r7, #4]
 8003e34:	681b      	ldr	r3, [r3, #0]
 8003e36:	681b      	ldr	r3, [r3, #0]
 8003e38:	2208      	movs	r2, #8
 8003e3a:	4013      	ands	r3, r2
 8003e3c:	2b08      	cmp	r3, #8
 8003e3e:	d123      	bne.n	8003e88 <HAL_ADC_PollForConversion+0x108>
    {
      /* Allowed to modify bits ADC_IT_EOC/ADC_IT_EOS only if bit             */
      /* ADSTART==0 (no conversion on going)                                  */
      if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 8003e40:	687b      	ldr	r3, [r7, #4]
 8003e42:	681b      	ldr	r3, [r3, #0]
 8003e44:	0018      	movs	r0, r3
 8003e46:	f7ff fd93 	bl	8003970 <LL_ADC_REG_IsConversionOngoing>
 8003e4a:	1e03      	subs	r3, r0, #0
 8003e4c:	d110      	bne.n	8003e70 <HAL_ADC_PollForConversion+0xf0>
      {
        /* Disable ADC end of single conversion interrupt on group regular */
        /* Note: Overrun interrupt was enabled with EOC interrupt in          */
        /* HAL_Start_IT(), but is not disabled here because can be used       */
        /* by overrun IRQ process below.                                      */
        __HAL_ADC_DISABLE_IT(hadc, ADC_IT_EOC | ADC_IT_EOS);
 8003e4e:	687b      	ldr	r3, [r7, #4]
 8003e50:	681b      	ldr	r3, [r3, #0]
 8003e52:	685a      	ldr	r2, [r3, #4]
 8003e54:	687b      	ldr	r3, [r7, #4]
 8003e56:	681b      	ldr	r3, [r3, #0]
 8003e58:	210c      	movs	r1, #12
 8003e5a:	438a      	bics	r2, r1
 8003e5c:	605a      	str	r2, [r3, #4]

        /* Set ADC state */
        ADC_STATE_CLR_SET(hadc->State,
 8003e5e:	687b      	ldr	r3, [r7, #4]
 8003e60:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003e62:	4a10      	ldr	r2, [pc, #64]	; (8003ea4 <HAL_ADC_PollForConversion+0x124>)
 8003e64:	4013      	ands	r3, r2
 8003e66:	2201      	movs	r2, #1
 8003e68:	431a      	orrs	r2, r3
 8003e6a:	687b      	ldr	r3, [r7, #4]
 8003e6c:	659a      	str	r2, [r3, #88]	; 0x58
 8003e6e:	e00b      	b.n	8003e88 <HAL_ADC_PollForConversion+0x108>
                          HAL_ADC_STATE_READY);
      }
      else
      {
        /* Change ADC state to error state */
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8003e70:	687b      	ldr	r3, [r7, #4]
 8003e72:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003e74:	2220      	movs	r2, #32
 8003e76:	431a      	orrs	r2, r3
 8003e78:	687b      	ldr	r3, [r7, #4]
 8003e7a:	659a      	str	r2, [r3, #88]	; 0x58

        /* Set ADC error code to ADC peripheral internal error */
        SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8003e7c:	687b      	ldr	r3, [r7, #4]
 8003e7e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003e80:	2201      	movs	r2, #1
 8003e82:	431a      	orrs	r2, r3
 8003e84:	687b      	ldr	r3, [r7, #4]
 8003e86:	65da      	str	r2, [r3, #92]	; 0x5c
  }

  /* Clear end of conversion flag of regular group if low power feature       */
  /* "LowPowerAutoWait " is disabled, to not interfere with this feature      */
  /* until data register is read using function HAL_ADC_GetValue().           */
  if (hadc->Init.LowPowerAutoWait == DISABLE)
 8003e88:	687b      	ldr	r3, [r7, #4]
 8003e8a:	7e1b      	ldrb	r3, [r3, #24]
 8003e8c:	2b00      	cmp	r3, #0
 8003e8e:	d103      	bne.n	8003e98 <HAL_ADC_PollForConversion+0x118>
  {
    /* Clear regular group conversion flag */
    __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOC | ADC_FLAG_EOS));
 8003e90:	687b      	ldr	r3, [r7, #4]
 8003e92:	681b      	ldr	r3, [r3, #0]
 8003e94:	220c      	movs	r2, #12
 8003e96:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8003e98:	2300      	movs	r3, #0
}
 8003e9a:	0018      	movs	r0, r3
 8003e9c:	46bd      	mov	sp, r7
 8003e9e:	b004      	add	sp, #16
 8003ea0:	bd80      	pop	{r7, pc}
 8003ea2:	46c0      	nop			; (mov r8, r8)
 8003ea4:	fffffefe 	.word	0xfffffefe

08003ea8 <HAL_ADC_GetValue>:
  *         or @ref __HAL_ADC_CLEAR_FLAG(&hadc, ADC_FLAG_EOS).
  * @param hadc ADC handle
  * @retval ADC group regular conversion data
  */
uint32_t HAL_ADC_GetValue(ADC_HandleTypeDef *hadc)
{
 8003ea8:	b580      	push	{r7, lr}
 8003eaa:	b082      	sub	sp, #8
 8003eac:	af00      	add	r7, sp, #0
 8003eae:	6078      	str	r0, [r7, #4]

  /* Note: EOC flag is not cleared here by software because automatically     */
  /*       cleared by hardware when reading register DR.                      */

  /* Return ADC converted value */
  return hadc->Instance->DR;
 8003eb0:	687b      	ldr	r3, [r7, #4]
 8003eb2:	681b      	ldr	r3, [r3, #0]
 8003eb4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
}
 8003eb6:	0018      	movs	r0, r3
 8003eb8:	46bd      	mov	sp, r7
 8003eba:	b002      	add	sp, #8
 8003ebc:	bd80      	pop	{r7, pc}
	...

08003ec0 <HAL_ADC_ConfigChannel>:
  * @param hadc ADC handle
  * @param pConfig Structure of ADC channel assigned to ADC group regular.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef *hadc, ADC_ChannelConfTypeDef *pConfig)
{
 8003ec0:	b580      	push	{r7, lr}
 8003ec2:	b086      	sub	sp, #24
 8003ec4:	af00      	add	r7, sp, #0
 8003ec6:	6078      	str	r0, [r7, #4]
 8003ec8:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8003eca:	2317      	movs	r3, #23
 8003ecc:	18fb      	adds	r3, r7, r3
 8003ece:	2200      	movs	r2, #0
 8003ed0:	701a      	strb	r2, [r3, #0]
  uint32_t tmp_config_internal_channel;
  __IO uint32_t wait_loop_index = 0UL;
 8003ed2:	2300      	movs	r3, #0
 8003ed4:	60fb      	str	r3, [r7, #12]
    assert_param(IS_ADC_REGULAR_NB_CONV(hadc->Init.NbrOfConversion));

    assert_param(IS_ADC_REGULAR_RANK(pConfig->Rank));
  }

  __HAL_LOCK(hadc);
 8003ed6:	687b      	ldr	r3, [r7, #4]
 8003ed8:	2254      	movs	r2, #84	; 0x54
 8003eda:	5c9b      	ldrb	r3, [r3, r2]
 8003edc:	2b01      	cmp	r3, #1
 8003ede:	d101      	bne.n	8003ee4 <HAL_ADC_ConfigChannel+0x24>
 8003ee0:	2302      	movs	r3, #2
 8003ee2:	e1c0      	b.n	8004266 <HAL_ADC_ConfigChannel+0x3a6>
 8003ee4:	687b      	ldr	r3, [r7, #4]
 8003ee6:	2254      	movs	r2, #84	; 0x54
 8003ee8:	2101      	movs	r1, #1
 8003eea:	5499      	strb	r1, [r3, r2]
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Channel number                                                        */
  /*  - Channel sampling time                                                 */
  /*  - Management of internal measurement channels: VrefInt/TempSensor/Vbat  */
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 8003eec:	687b      	ldr	r3, [r7, #4]
 8003eee:	681b      	ldr	r3, [r3, #0]
 8003ef0:	0018      	movs	r0, r3
 8003ef2:	f7ff fd3d 	bl	8003970 <LL_ADC_REG_IsConversionOngoing>
 8003ef6:	1e03      	subs	r3, r0, #0
 8003ef8:	d000      	beq.n	8003efc <HAL_ADC_ConfigChannel+0x3c>
 8003efa:	e1a3      	b.n	8004244 <HAL_ADC_ConfigChannel+0x384>
    /* If sequencer set to not fully configurable with channel rank set to    */
    /* none, remove the channel from the sequencer.                           */
    /* Otherwise (sequencer set to fully configurable or to to not fully      */
    /* configurable with channel rank to be set), configure the selected      */
    /* channel.                                                               */
    if (pConfig->Rank != ADC_RANK_NONE)
 8003efc:	683b      	ldr	r3, [r7, #0]
 8003efe:	685b      	ldr	r3, [r3, #4]
 8003f00:	2b02      	cmp	r3, #2
 8003f02:	d100      	bne.n	8003f06 <HAL_ADC_ConfigChannel+0x46>
 8003f04:	e143      	b.n	800418e <HAL_ADC_ConfigChannel+0x2ce>
      /* Note: ADC channel configuration requires few ADC clock cycles        */
      /*       to be ready. Processing of ADC settings in this function       */
      /*       induce that a specific wait time is not necessary.             */
      /*       For more details on ADC channel configuration ready,           */
      /*       refer to function "LL_ADC_IsActiveFlag_CCRDY()".               */
      if ((hadc->Init.ScanConvMode == ADC_SCAN_SEQ_FIXED)       ||
 8003f06:	687b      	ldr	r3, [r7, #4]
 8003f08:	691a      	ldr	r2, [r3, #16]
 8003f0a:	2380      	movs	r3, #128	; 0x80
 8003f0c:	061b      	lsls	r3, r3, #24
 8003f0e:	429a      	cmp	r2, r3
 8003f10:	d004      	beq.n	8003f1c <HAL_ADC_ConfigChannel+0x5c>
          (hadc->Init.ScanConvMode == ADC_SCAN_SEQ_FIXED_BACKWARD))
 8003f12:	687b      	ldr	r3, [r7, #4]
 8003f14:	691b      	ldr	r3, [r3, #16]
      if ((hadc->Init.ScanConvMode == ADC_SCAN_SEQ_FIXED)       ||
 8003f16:	4ac1      	ldr	r2, [pc, #772]	; (800421c <HAL_ADC_ConfigChannel+0x35c>)
 8003f18:	4293      	cmp	r3, r2
 8003f1a:	d108      	bne.n	8003f2e <HAL_ADC_ConfigChannel+0x6e>
      {
        /* Sequencer set to not fully configurable:                           */
        /* Set the channel by enabling the corresponding bitfield.            */
        LL_ADC_REG_SetSequencerChAdd(hadc->Instance, pConfig->Channel);
 8003f1c:	687b      	ldr	r3, [r7, #4]
 8003f1e:	681a      	ldr	r2, [r3, #0]
 8003f20:	683b      	ldr	r3, [r7, #0]
 8003f22:	681b      	ldr	r3, [r3, #0]
 8003f24:	0019      	movs	r1, r3
 8003f26:	0010      	movs	r0, r2
 8003f28:	f7ff fc84 	bl	8003834 <LL_ADC_REG_SetSequencerChAdd>
 8003f2c:	e0c9      	b.n	80040c2 <HAL_ADC_ConfigChannel+0x202>
      {
        /* Sequencer set to fully configurable:                               */
        /* Set the channel by entering it into the selected rank.             */

        /* Memorize the channel set into variable in HAL ADC handle */
        MODIFY_REG(hadc->ADCGroupRegularSequencerRanks,
 8003f2e:	687b      	ldr	r3, [r7, #4]
 8003f30:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 8003f32:	683b      	ldr	r3, [r7, #0]
 8003f34:	685b      	ldr	r3, [r3, #4]
 8003f36:	211f      	movs	r1, #31
 8003f38:	400b      	ands	r3, r1
 8003f3a:	210f      	movs	r1, #15
 8003f3c:	4099      	lsls	r1, r3
 8003f3e:	000b      	movs	r3, r1
 8003f40:	43db      	mvns	r3, r3
 8003f42:	4013      	ands	r3, r2
 8003f44:	0019      	movs	r1, r3
 8003f46:	683b      	ldr	r3, [r7, #0]
 8003f48:	681b      	ldr	r3, [r3, #0]
 8003f4a:	035b      	lsls	r3, r3, #13
 8003f4c:	0b5b      	lsrs	r3, r3, #13
 8003f4e:	d105      	bne.n	8003f5c <HAL_ADC_ConfigChannel+0x9c>
 8003f50:	683b      	ldr	r3, [r7, #0]
 8003f52:	681b      	ldr	r3, [r3, #0]
 8003f54:	0e9b      	lsrs	r3, r3, #26
 8003f56:	221f      	movs	r2, #31
 8003f58:	4013      	ands	r3, r2
 8003f5a:	e098      	b.n	800408e <HAL_ADC_ConfigChannel+0x1ce>
 8003f5c:	683b      	ldr	r3, [r7, #0]
 8003f5e:	681b      	ldr	r3, [r3, #0]
 8003f60:	2201      	movs	r2, #1
 8003f62:	4013      	ands	r3, r2
 8003f64:	d000      	beq.n	8003f68 <HAL_ADC_ConfigChannel+0xa8>
 8003f66:	e091      	b.n	800408c <HAL_ADC_ConfigChannel+0x1cc>
 8003f68:	683b      	ldr	r3, [r7, #0]
 8003f6a:	681b      	ldr	r3, [r3, #0]
 8003f6c:	2202      	movs	r2, #2
 8003f6e:	4013      	ands	r3, r2
 8003f70:	d000      	beq.n	8003f74 <HAL_ADC_ConfigChannel+0xb4>
 8003f72:	e089      	b.n	8004088 <HAL_ADC_ConfigChannel+0x1c8>
 8003f74:	683b      	ldr	r3, [r7, #0]
 8003f76:	681b      	ldr	r3, [r3, #0]
 8003f78:	2204      	movs	r2, #4
 8003f7a:	4013      	ands	r3, r2
 8003f7c:	d000      	beq.n	8003f80 <HAL_ADC_ConfigChannel+0xc0>
 8003f7e:	e081      	b.n	8004084 <HAL_ADC_ConfigChannel+0x1c4>
 8003f80:	683b      	ldr	r3, [r7, #0]
 8003f82:	681b      	ldr	r3, [r3, #0]
 8003f84:	2208      	movs	r2, #8
 8003f86:	4013      	ands	r3, r2
 8003f88:	d000      	beq.n	8003f8c <HAL_ADC_ConfigChannel+0xcc>
 8003f8a:	e079      	b.n	8004080 <HAL_ADC_ConfigChannel+0x1c0>
 8003f8c:	683b      	ldr	r3, [r7, #0]
 8003f8e:	681b      	ldr	r3, [r3, #0]
 8003f90:	2210      	movs	r2, #16
 8003f92:	4013      	ands	r3, r2
 8003f94:	d000      	beq.n	8003f98 <HAL_ADC_ConfigChannel+0xd8>
 8003f96:	e071      	b.n	800407c <HAL_ADC_ConfigChannel+0x1bc>
 8003f98:	683b      	ldr	r3, [r7, #0]
 8003f9a:	681b      	ldr	r3, [r3, #0]
 8003f9c:	2220      	movs	r2, #32
 8003f9e:	4013      	ands	r3, r2
 8003fa0:	d000      	beq.n	8003fa4 <HAL_ADC_ConfigChannel+0xe4>
 8003fa2:	e069      	b.n	8004078 <HAL_ADC_ConfigChannel+0x1b8>
 8003fa4:	683b      	ldr	r3, [r7, #0]
 8003fa6:	681b      	ldr	r3, [r3, #0]
 8003fa8:	2240      	movs	r2, #64	; 0x40
 8003faa:	4013      	ands	r3, r2
 8003fac:	d000      	beq.n	8003fb0 <HAL_ADC_ConfigChannel+0xf0>
 8003fae:	e061      	b.n	8004074 <HAL_ADC_ConfigChannel+0x1b4>
 8003fb0:	683b      	ldr	r3, [r7, #0]
 8003fb2:	681b      	ldr	r3, [r3, #0]
 8003fb4:	2280      	movs	r2, #128	; 0x80
 8003fb6:	4013      	ands	r3, r2
 8003fb8:	d000      	beq.n	8003fbc <HAL_ADC_ConfigChannel+0xfc>
 8003fba:	e059      	b.n	8004070 <HAL_ADC_ConfigChannel+0x1b0>
 8003fbc:	683b      	ldr	r3, [r7, #0]
 8003fbe:	681a      	ldr	r2, [r3, #0]
 8003fc0:	2380      	movs	r3, #128	; 0x80
 8003fc2:	005b      	lsls	r3, r3, #1
 8003fc4:	4013      	ands	r3, r2
 8003fc6:	d151      	bne.n	800406c <HAL_ADC_ConfigChannel+0x1ac>
 8003fc8:	683b      	ldr	r3, [r7, #0]
 8003fca:	681a      	ldr	r2, [r3, #0]
 8003fcc:	2380      	movs	r3, #128	; 0x80
 8003fce:	009b      	lsls	r3, r3, #2
 8003fd0:	4013      	ands	r3, r2
 8003fd2:	d149      	bne.n	8004068 <HAL_ADC_ConfigChannel+0x1a8>
 8003fd4:	683b      	ldr	r3, [r7, #0]
 8003fd6:	681a      	ldr	r2, [r3, #0]
 8003fd8:	2380      	movs	r3, #128	; 0x80
 8003fda:	00db      	lsls	r3, r3, #3
 8003fdc:	4013      	ands	r3, r2
 8003fde:	d141      	bne.n	8004064 <HAL_ADC_ConfigChannel+0x1a4>
 8003fe0:	683b      	ldr	r3, [r7, #0]
 8003fe2:	681a      	ldr	r2, [r3, #0]
 8003fe4:	2380      	movs	r3, #128	; 0x80
 8003fe6:	011b      	lsls	r3, r3, #4
 8003fe8:	4013      	ands	r3, r2
 8003fea:	d139      	bne.n	8004060 <HAL_ADC_ConfigChannel+0x1a0>
 8003fec:	683b      	ldr	r3, [r7, #0]
 8003fee:	681a      	ldr	r2, [r3, #0]
 8003ff0:	2380      	movs	r3, #128	; 0x80
 8003ff2:	015b      	lsls	r3, r3, #5
 8003ff4:	4013      	ands	r3, r2
 8003ff6:	d131      	bne.n	800405c <HAL_ADC_ConfigChannel+0x19c>
 8003ff8:	683b      	ldr	r3, [r7, #0]
 8003ffa:	681a      	ldr	r2, [r3, #0]
 8003ffc:	2380      	movs	r3, #128	; 0x80
 8003ffe:	019b      	lsls	r3, r3, #6
 8004000:	4013      	ands	r3, r2
 8004002:	d129      	bne.n	8004058 <HAL_ADC_ConfigChannel+0x198>
 8004004:	683b      	ldr	r3, [r7, #0]
 8004006:	681a      	ldr	r2, [r3, #0]
 8004008:	2380      	movs	r3, #128	; 0x80
 800400a:	01db      	lsls	r3, r3, #7
 800400c:	4013      	ands	r3, r2
 800400e:	d121      	bne.n	8004054 <HAL_ADC_ConfigChannel+0x194>
 8004010:	683b      	ldr	r3, [r7, #0]
 8004012:	681a      	ldr	r2, [r3, #0]
 8004014:	2380      	movs	r3, #128	; 0x80
 8004016:	021b      	lsls	r3, r3, #8
 8004018:	4013      	ands	r3, r2
 800401a:	d119      	bne.n	8004050 <HAL_ADC_ConfigChannel+0x190>
 800401c:	683b      	ldr	r3, [r7, #0]
 800401e:	681a      	ldr	r2, [r3, #0]
 8004020:	2380      	movs	r3, #128	; 0x80
 8004022:	025b      	lsls	r3, r3, #9
 8004024:	4013      	ands	r3, r2
 8004026:	d111      	bne.n	800404c <HAL_ADC_ConfigChannel+0x18c>
 8004028:	683b      	ldr	r3, [r7, #0]
 800402a:	681a      	ldr	r2, [r3, #0]
 800402c:	2380      	movs	r3, #128	; 0x80
 800402e:	029b      	lsls	r3, r3, #10
 8004030:	4013      	ands	r3, r2
 8004032:	d109      	bne.n	8004048 <HAL_ADC_ConfigChannel+0x188>
 8004034:	683b      	ldr	r3, [r7, #0]
 8004036:	681a      	ldr	r2, [r3, #0]
 8004038:	2380      	movs	r3, #128	; 0x80
 800403a:	02db      	lsls	r3, r3, #11
 800403c:	4013      	ands	r3, r2
 800403e:	d001      	beq.n	8004044 <HAL_ADC_ConfigChannel+0x184>
 8004040:	2312      	movs	r3, #18
 8004042:	e024      	b.n	800408e <HAL_ADC_ConfigChannel+0x1ce>
 8004044:	2300      	movs	r3, #0
 8004046:	e022      	b.n	800408e <HAL_ADC_ConfigChannel+0x1ce>
 8004048:	2311      	movs	r3, #17
 800404a:	e020      	b.n	800408e <HAL_ADC_ConfigChannel+0x1ce>
 800404c:	2310      	movs	r3, #16
 800404e:	e01e      	b.n	800408e <HAL_ADC_ConfigChannel+0x1ce>
 8004050:	230f      	movs	r3, #15
 8004052:	e01c      	b.n	800408e <HAL_ADC_ConfigChannel+0x1ce>
 8004054:	230e      	movs	r3, #14
 8004056:	e01a      	b.n	800408e <HAL_ADC_ConfigChannel+0x1ce>
 8004058:	230d      	movs	r3, #13
 800405a:	e018      	b.n	800408e <HAL_ADC_ConfigChannel+0x1ce>
 800405c:	230c      	movs	r3, #12
 800405e:	e016      	b.n	800408e <HAL_ADC_ConfigChannel+0x1ce>
 8004060:	230b      	movs	r3, #11
 8004062:	e014      	b.n	800408e <HAL_ADC_ConfigChannel+0x1ce>
 8004064:	230a      	movs	r3, #10
 8004066:	e012      	b.n	800408e <HAL_ADC_ConfigChannel+0x1ce>
 8004068:	2309      	movs	r3, #9
 800406a:	e010      	b.n	800408e <HAL_ADC_ConfigChannel+0x1ce>
 800406c:	2308      	movs	r3, #8
 800406e:	e00e      	b.n	800408e <HAL_ADC_ConfigChannel+0x1ce>
 8004070:	2307      	movs	r3, #7
 8004072:	e00c      	b.n	800408e <HAL_ADC_ConfigChannel+0x1ce>
 8004074:	2306      	movs	r3, #6
 8004076:	e00a      	b.n	800408e <HAL_ADC_ConfigChannel+0x1ce>
 8004078:	2305      	movs	r3, #5
 800407a:	e008      	b.n	800408e <HAL_ADC_ConfigChannel+0x1ce>
 800407c:	2304      	movs	r3, #4
 800407e:	e006      	b.n	800408e <HAL_ADC_ConfigChannel+0x1ce>
 8004080:	2303      	movs	r3, #3
 8004082:	e004      	b.n	800408e <HAL_ADC_ConfigChannel+0x1ce>
 8004084:	2302      	movs	r3, #2
 8004086:	e002      	b.n	800408e <HAL_ADC_ConfigChannel+0x1ce>
 8004088:	2301      	movs	r3, #1
 800408a:	e000      	b.n	800408e <HAL_ADC_ConfigChannel+0x1ce>
 800408c:	2300      	movs	r3, #0
 800408e:	683a      	ldr	r2, [r7, #0]
 8004090:	6852      	ldr	r2, [r2, #4]
 8004092:	201f      	movs	r0, #31
 8004094:	4002      	ands	r2, r0
 8004096:	4093      	lsls	r3, r2
 8004098:	000a      	movs	r2, r1
 800409a:	431a      	orrs	r2, r3
 800409c:	687b      	ldr	r3, [r7, #4]
 800409e:	661a      	str	r2, [r3, #96]	; 0x60

        /* If the selected rank is below ADC group regular sequencer length,  */
        /* apply the configuration in ADC register.                           */
        /* Note: Otherwise, configuration is not applied.                     */
        /*       To apply it, parameter'NbrOfConversion' must be increased.   */
        if (((pConfig->Rank >> 2UL) + 1UL) <= hadc->Init.NbrOfConversion)
 80040a0:	683b      	ldr	r3, [r7, #0]
 80040a2:	685b      	ldr	r3, [r3, #4]
 80040a4:	089b      	lsrs	r3, r3, #2
 80040a6:	1c5a      	adds	r2, r3, #1
 80040a8:	687b      	ldr	r3, [r7, #4]
 80040aa:	69db      	ldr	r3, [r3, #28]
 80040ac:	429a      	cmp	r2, r3
 80040ae:	d808      	bhi.n	80040c2 <HAL_ADC_ConfigChannel+0x202>
        {
          LL_ADC_REG_SetSequencerRanks(hadc->Instance, pConfig->Rank, pConfig->Channel);
 80040b0:	687b      	ldr	r3, [r7, #4]
 80040b2:	6818      	ldr	r0, [r3, #0]
 80040b4:	683b      	ldr	r3, [r7, #0]
 80040b6:	6859      	ldr	r1, [r3, #4]
 80040b8:	683b      	ldr	r3, [r7, #0]
 80040ba:	681b      	ldr	r3, [r3, #0]
 80040bc:	001a      	movs	r2, r3
 80040be:	f7ff fb99 	bl	80037f4 <LL_ADC_REG_SetSequencerRanks>
        }
      }

      /* Set sampling time of the selected ADC channel */
      LL_ADC_SetChannelSamplingTime(hadc->Instance, pConfig->Channel, pConfig->SamplingTime);
 80040c2:	687b      	ldr	r3, [r7, #4]
 80040c4:	6818      	ldr	r0, [r3, #0]
 80040c6:	683b      	ldr	r3, [r7, #0]
 80040c8:	6819      	ldr	r1, [r3, #0]
 80040ca:	683b      	ldr	r3, [r7, #0]
 80040cc:	689b      	ldr	r3, [r3, #8]
 80040ce:	001a      	movs	r2, r3
 80040d0:	f7ff fbd4 	bl	800387c <LL_ADC_SetChannelSamplingTime>
      /* internal measurement paths enable: If internal channel selected,     */
      /* enable dedicated internal buffers and path.                          */
      /* Note: these internal measurement paths can be disabled using         */
      /*       HAL_ADC_DeInit() or removing the channel from sequencer with   */
      /*       channel configuration parameter "Rank".                        */
      if (__LL_ADC_IS_CHANNEL_INTERNAL(pConfig->Channel))
 80040d4:	683b      	ldr	r3, [r7, #0]
 80040d6:	681b      	ldr	r3, [r3, #0]
 80040d8:	2b00      	cmp	r3, #0
 80040da:	db00      	blt.n	80040de <HAL_ADC_ConfigChannel+0x21e>
 80040dc:	e0bc      	b.n	8004258 <HAL_ADC_ConfigChannel+0x398>
      {
        tmp_config_internal_channel = LL_ADC_GetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 80040de:	4b50      	ldr	r3, [pc, #320]	; (8004220 <HAL_ADC_ConfigChannel+0x360>)
 80040e0:	0018      	movs	r0, r3
 80040e2:	f7ff fb35 	bl	8003750 <LL_ADC_GetCommonPathInternalCh>
 80040e6:	0003      	movs	r3, r0
 80040e8:	613b      	str	r3, [r7, #16]

        /* If the requested internal measurement path has already been enabled,   */
        /* bypass the configuration processing.                                   */
        if ((pConfig->Channel == ADC_CHANNEL_TEMPSENSOR) &&
 80040ea:	683b      	ldr	r3, [r7, #0]
 80040ec:	681b      	ldr	r3, [r3, #0]
 80040ee:	4a4d      	ldr	r2, [pc, #308]	; (8004224 <HAL_ADC_ConfigChannel+0x364>)
 80040f0:	4293      	cmp	r3, r2
 80040f2:	d122      	bne.n	800413a <HAL_ADC_ConfigChannel+0x27a>
            ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_TEMPSENSOR) == 0UL))
 80040f4:	693a      	ldr	r2, [r7, #16]
 80040f6:	2380      	movs	r3, #128	; 0x80
 80040f8:	041b      	lsls	r3, r3, #16
 80040fa:	4013      	ands	r3, r2
        if ((pConfig->Channel == ADC_CHANNEL_TEMPSENSOR) &&
 80040fc:	d11d      	bne.n	800413a <HAL_ADC_ConfigChannel+0x27a>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 80040fe:	693b      	ldr	r3, [r7, #16]
 8004100:	2280      	movs	r2, #128	; 0x80
 8004102:	0412      	lsls	r2, r2, #16
 8004104:	4313      	orrs	r3, r2
 8004106:	4a46      	ldr	r2, [pc, #280]	; (8004220 <HAL_ADC_ConfigChannel+0x360>)
 8004108:	0019      	movs	r1, r3
 800410a:	0010      	movs	r0, r2
 800410c:	f7ff fb0c 	bl	8003728 <LL_ADC_SetCommonPathInternalCh>
          /* Delay for temperature sensor stabilization time */
          /* Wait loop initialization and execution */
          /* Note: Variable divided by 2 to compensate partially              */
          /*       CPU processing cycles, scaling in us split to not          */
          /*       exceed 32 bits register capacity and handle low frequency. */
          wait_loop_index = ((LL_ADC_DELAY_TEMPSENSOR_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 8004110:	4b45      	ldr	r3, [pc, #276]	; (8004228 <HAL_ADC_ConfigChannel+0x368>)
 8004112:	681b      	ldr	r3, [r3, #0]
 8004114:	4945      	ldr	r1, [pc, #276]	; (800422c <HAL_ADC_ConfigChannel+0x36c>)
 8004116:	0018      	movs	r0, r3
 8004118:	f7fc f810 	bl	800013c <__udivsi3>
 800411c:	0003      	movs	r3, r0
 800411e:	1c5a      	adds	r2, r3, #1
 8004120:	0013      	movs	r3, r2
 8004122:	005b      	lsls	r3, r3, #1
 8004124:	189b      	adds	r3, r3, r2
 8004126:	009b      	lsls	r3, r3, #2
 8004128:	60fb      	str	r3, [r7, #12]
          while (wait_loop_index != 0UL)
 800412a:	e002      	b.n	8004132 <HAL_ADC_ConfigChannel+0x272>
          {
            wait_loop_index--;
 800412c:	68fb      	ldr	r3, [r7, #12]
 800412e:	3b01      	subs	r3, #1
 8004130:	60fb      	str	r3, [r7, #12]
          while (wait_loop_index != 0UL)
 8004132:	68fb      	ldr	r3, [r7, #12]
 8004134:	2b00      	cmp	r3, #0
 8004136:	d1f9      	bne.n	800412c <HAL_ADC_ConfigChannel+0x26c>
        if ((pConfig->Channel == ADC_CHANNEL_TEMPSENSOR) &&
 8004138:	e08e      	b.n	8004258 <HAL_ADC_ConfigChannel+0x398>
          }
        }
        else if ((pConfig->Channel == ADC_CHANNEL_VBAT)
 800413a:	683b      	ldr	r3, [r7, #0]
 800413c:	681b      	ldr	r3, [r3, #0]
 800413e:	4a3c      	ldr	r2, [pc, #240]	; (8004230 <HAL_ADC_ConfigChannel+0x370>)
 8004140:	4293      	cmp	r3, r2
 8004142:	d10e      	bne.n	8004162 <HAL_ADC_ConfigChannel+0x2a2>
                 && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VBAT) == 0UL))
 8004144:	693a      	ldr	r2, [r7, #16]
 8004146:	2380      	movs	r3, #128	; 0x80
 8004148:	045b      	lsls	r3, r3, #17
 800414a:	4013      	ands	r3, r2
 800414c:	d109      	bne.n	8004162 <HAL_ADC_ConfigChannel+0x2a2>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 800414e:	693b      	ldr	r3, [r7, #16]
 8004150:	2280      	movs	r2, #128	; 0x80
 8004152:	0452      	lsls	r2, r2, #17
 8004154:	4313      	orrs	r3, r2
 8004156:	4a32      	ldr	r2, [pc, #200]	; (8004220 <HAL_ADC_ConfigChannel+0x360>)
 8004158:	0019      	movs	r1, r3
 800415a:	0010      	movs	r0, r2
 800415c:	f7ff fae4 	bl	8003728 <LL_ADC_SetCommonPathInternalCh>
 8004160:	e07a      	b.n	8004258 <HAL_ADC_ConfigChannel+0x398>
                                         LL_ADC_PATH_INTERNAL_VBAT | tmp_config_internal_channel);
        }
        else if ((pConfig->Channel == ADC_CHANNEL_VREFINT) &&
 8004162:	683b      	ldr	r3, [r7, #0]
 8004164:	681b      	ldr	r3, [r3, #0]
 8004166:	4a33      	ldr	r2, [pc, #204]	; (8004234 <HAL_ADC_ConfigChannel+0x374>)
 8004168:	4293      	cmp	r3, r2
 800416a:	d000      	beq.n	800416e <HAL_ADC_ConfigChannel+0x2ae>
 800416c:	e074      	b.n	8004258 <HAL_ADC_ConfigChannel+0x398>
                 ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VREFINT) == 0UL))
 800416e:	693a      	ldr	r2, [r7, #16]
 8004170:	2380      	movs	r3, #128	; 0x80
 8004172:	03db      	lsls	r3, r3, #15
 8004174:	4013      	ands	r3, r2
        else if ((pConfig->Channel == ADC_CHANNEL_VREFINT) &&
 8004176:	d000      	beq.n	800417a <HAL_ADC_ConfigChannel+0x2ba>
 8004178:	e06e      	b.n	8004258 <HAL_ADC_ConfigChannel+0x398>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 800417a:	693b      	ldr	r3, [r7, #16]
 800417c:	2280      	movs	r2, #128	; 0x80
 800417e:	03d2      	lsls	r2, r2, #15
 8004180:	4313      	orrs	r3, r2
 8004182:	4a27      	ldr	r2, [pc, #156]	; (8004220 <HAL_ADC_ConfigChannel+0x360>)
 8004184:	0019      	movs	r1, r3
 8004186:	0010      	movs	r0, r2
 8004188:	f7ff face 	bl	8003728 <LL_ADC_SetCommonPathInternalCh>
 800418c:	e064      	b.n	8004258 <HAL_ADC_ConfigChannel+0x398>
      /* Regular sequencer configuration */
      /* Note: Case of sequencer set to fully configurable:                   */
      /*       Sequencer rank cannot be disabled, only affected to            */
      /*       another channel.                                               */
      /*       To remove a rank, use parameter 'NbrOfConversion".             */
      if ((hadc->Init.ScanConvMode == ADC_SCAN_SEQ_FIXED)       ||
 800418e:	687b      	ldr	r3, [r7, #4]
 8004190:	691a      	ldr	r2, [r3, #16]
 8004192:	2380      	movs	r3, #128	; 0x80
 8004194:	061b      	lsls	r3, r3, #24
 8004196:	429a      	cmp	r2, r3
 8004198:	d004      	beq.n	80041a4 <HAL_ADC_ConfigChannel+0x2e4>
          (hadc->Init.ScanConvMode == ADC_SCAN_SEQ_FIXED_BACKWARD))
 800419a:	687b      	ldr	r3, [r7, #4]
 800419c:	691b      	ldr	r3, [r3, #16]
      if ((hadc->Init.ScanConvMode == ADC_SCAN_SEQ_FIXED)       ||
 800419e:	4a1f      	ldr	r2, [pc, #124]	; (800421c <HAL_ADC_ConfigChannel+0x35c>)
 80041a0:	4293      	cmp	r3, r2
 80041a2:	d107      	bne.n	80041b4 <HAL_ADC_ConfigChannel+0x2f4>
      {
        /* Sequencer set to not fully configurable:                           */
        /* Reset the channel by disabling the corresponding bitfield.         */
        LL_ADC_REG_SetSequencerChRem(hadc->Instance, pConfig->Channel);
 80041a4:	687b      	ldr	r3, [r7, #4]
 80041a6:	681a      	ldr	r2, [r3, #0]
 80041a8:	683b      	ldr	r3, [r7, #0]
 80041aa:	681b      	ldr	r3, [r3, #0]
 80041ac:	0019      	movs	r1, r3
 80041ae:	0010      	movs	r0, r2
 80041b0:	f7ff fb51 	bl	8003856 <LL_ADC_REG_SetSequencerChRem>
      }

      /* Management of internal measurement channels: Vbat/VrefInt/TempSensor.  */
      /* If internal channel selected, enable dedicated internal buffers and    */
      /* paths.                                                                 */
      if (__LL_ADC_IS_CHANNEL_INTERNAL(pConfig->Channel))
 80041b4:	683b      	ldr	r3, [r7, #0]
 80041b6:	681b      	ldr	r3, [r3, #0]
 80041b8:	2b00      	cmp	r3, #0
 80041ba:	da4d      	bge.n	8004258 <HAL_ADC_ConfigChannel+0x398>
      {
        tmp_config_internal_channel = LL_ADC_GetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 80041bc:	4b18      	ldr	r3, [pc, #96]	; (8004220 <HAL_ADC_ConfigChannel+0x360>)
 80041be:	0018      	movs	r0, r3
 80041c0:	f7ff fac6 	bl	8003750 <LL_ADC_GetCommonPathInternalCh>
 80041c4:	0003      	movs	r3, r0
 80041c6:	613b      	str	r3, [r7, #16]

        if (pConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 80041c8:	683b      	ldr	r3, [r7, #0]
 80041ca:	681b      	ldr	r3, [r3, #0]
 80041cc:	4a15      	ldr	r2, [pc, #84]	; (8004224 <HAL_ADC_ConfigChannel+0x364>)
 80041ce:	4293      	cmp	r3, r2
 80041d0:	d108      	bne.n	80041e4 <HAL_ADC_ConfigChannel+0x324>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 80041d2:	693b      	ldr	r3, [r7, #16]
 80041d4:	4a18      	ldr	r2, [pc, #96]	; (8004238 <HAL_ADC_ConfigChannel+0x378>)
 80041d6:	4013      	ands	r3, r2
 80041d8:	4a11      	ldr	r2, [pc, #68]	; (8004220 <HAL_ADC_ConfigChannel+0x360>)
 80041da:	0019      	movs	r1, r3
 80041dc:	0010      	movs	r0, r2
 80041de:	f7ff faa3 	bl	8003728 <LL_ADC_SetCommonPathInternalCh>
 80041e2:	e039      	b.n	8004258 <HAL_ADC_ConfigChannel+0x398>
                                         ~LL_ADC_PATH_INTERNAL_TEMPSENSOR & tmp_config_internal_channel);
        }
        else if (pConfig->Channel == ADC_CHANNEL_VBAT)
 80041e4:	683b      	ldr	r3, [r7, #0]
 80041e6:	681b      	ldr	r3, [r3, #0]
 80041e8:	4a11      	ldr	r2, [pc, #68]	; (8004230 <HAL_ADC_ConfigChannel+0x370>)
 80041ea:	4293      	cmp	r3, r2
 80041ec:	d108      	bne.n	8004200 <HAL_ADC_ConfigChannel+0x340>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 80041ee:	693b      	ldr	r3, [r7, #16]
 80041f0:	4a12      	ldr	r2, [pc, #72]	; (800423c <HAL_ADC_ConfigChannel+0x37c>)
 80041f2:	4013      	ands	r3, r2
 80041f4:	4a0a      	ldr	r2, [pc, #40]	; (8004220 <HAL_ADC_ConfigChannel+0x360>)
 80041f6:	0019      	movs	r1, r3
 80041f8:	0010      	movs	r0, r2
 80041fa:	f7ff fa95 	bl	8003728 <LL_ADC_SetCommonPathInternalCh>
 80041fe:	e02b      	b.n	8004258 <HAL_ADC_ConfigChannel+0x398>
                                         ~LL_ADC_PATH_INTERNAL_VBAT & tmp_config_internal_channel);
        }
        else if (pConfig->Channel == ADC_CHANNEL_VREFINT)
 8004200:	683b      	ldr	r3, [r7, #0]
 8004202:	681b      	ldr	r3, [r3, #0]
 8004204:	4a0b      	ldr	r2, [pc, #44]	; (8004234 <HAL_ADC_ConfigChannel+0x374>)
 8004206:	4293      	cmp	r3, r2
 8004208:	d126      	bne.n	8004258 <HAL_ADC_ConfigChannel+0x398>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 800420a:	693b      	ldr	r3, [r7, #16]
 800420c:	4a0c      	ldr	r2, [pc, #48]	; (8004240 <HAL_ADC_ConfigChannel+0x380>)
 800420e:	4013      	ands	r3, r2
 8004210:	4a03      	ldr	r2, [pc, #12]	; (8004220 <HAL_ADC_ConfigChannel+0x360>)
 8004212:	0019      	movs	r1, r3
 8004214:	0010      	movs	r0, r2
 8004216:	f7ff fa87 	bl	8003728 <LL_ADC_SetCommonPathInternalCh>
 800421a:	e01d      	b.n	8004258 <HAL_ADC_ConfigChannel+0x398>
 800421c:	80000004 	.word	0x80000004
 8004220:	40012708 	.word	0x40012708
 8004224:	b0001000 	.word	0xb0001000
 8004228:	20000008 	.word	0x20000008
 800422c:	00030d40 	.word	0x00030d40
 8004230:	b8004000 	.word	0xb8004000
 8004234:	b4002000 	.word	0xb4002000
 8004238:	ff7fffff 	.word	0xff7fffff
 800423c:	feffffff 	.word	0xfeffffff
 8004240:	ffbfffff 	.word	0xffbfffff
  /* channel could be done on neither of the channel configuration structure  */
  /* parameters.                                                              */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8004244:	687b      	ldr	r3, [r7, #4]
 8004246:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004248:	2220      	movs	r2, #32
 800424a:	431a      	orrs	r2, r3
 800424c:	687b      	ldr	r3, [r7, #4]
 800424e:	659a      	str	r2, [r3, #88]	; 0x58

    tmp_hal_status = HAL_ERROR;
 8004250:	2317      	movs	r3, #23
 8004252:	18fb      	adds	r3, r7, r3
 8004254:	2201      	movs	r2, #1
 8004256:	701a      	strb	r2, [r3, #0]
  }

  __HAL_UNLOCK(hadc);
 8004258:	687b      	ldr	r3, [r7, #4]
 800425a:	2254      	movs	r2, #84	; 0x54
 800425c:	2100      	movs	r1, #0
 800425e:	5499      	strb	r1, [r3, r2]

  return tmp_hal_status;
 8004260:	2317      	movs	r3, #23
 8004262:	18fb      	adds	r3, r7, r3
 8004264:	781b      	ldrb	r3, [r3, #0]
}
 8004266:	0018      	movs	r0, r3
 8004268:	46bd      	mov	sp, r7
 800426a:	b006      	add	sp, #24
 800426c:	bd80      	pop	{r7, pc}
 800426e:	46c0      	nop			; (mov r8, r8)

08004270 <ADC_Enable>:
  *         and voltage regulator must be enabled (done into HAL_ADC_Init()).
  * @param hadc ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_Enable(ADC_HandleTypeDef *hadc)
{
 8004270:	b580      	push	{r7, lr}
 8004272:	b084      	sub	sp, #16
 8004274:	af00      	add	r7, sp, #0
 8004276:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  __IO uint32_t wait_loop_index = 0UL;
 8004278:	2300      	movs	r3, #0
 800427a:	60bb      	str	r3, [r7, #8]

  /* ADC enable and wait for ADC ready (in case of ADC is disabled or         */
  /* enabling phase not yet completed: flag ADC ready not yet set).           */
  /* Timeout implemented to not be stuck if ADC cannot be enabled (possible   */
  /* causes: ADC clock not running, ...).                                     */
  if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 800427c:	687b      	ldr	r3, [r7, #4]
 800427e:	681b      	ldr	r3, [r3, #0]
 8004280:	0018      	movs	r0, r3
 8004282:	f7ff fb51 	bl	8003928 <LL_ADC_IsEnabled>
 8004286:	1e03      	subs	r3, r0, #0
 8004288:	d000      	beq.n	800428c <ADC_Enable+0x1c>
 800428a:	e069      	b.n	8004360 <ADC_Enable+0xf0>
  {
    /* Check if conditions to enable the ADC are fulfilled */
    if ((hadc->Instance->CR & (ADC_CR_ADCAL | ADC_CR_ADSTP | ADC_CR_ADSTART | ADC_CR_ADDIS | ADC_CR_ADEN)) != 0UL)
 800428c:	687b      	ldr	r3, [r7, #4]
 800428e:	681b      	ldr	r3, [r3, #0]
 8004290:	689b      	ldr	r3, [r3, #8]
 8004292:	4a36      	ldr	r2, [pc, #216]	; (800436c <ADC_Enable+0xfc>)
 8004294:	4013      	ands	r3, r2
 8004296:	d00d      	beq.n	80042b4 <ADC_Enable+0x44>
    {
      /* Update ADC state machine to error */
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8004298:	687b      	ldr	r3, [r7, #4]
 800429a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800429c:	2210      	movs	r2, #16
 800429e:	431a      	orrs	r2, r3
 80042a0:	687b      	ldr	r3, [r7, #4]
 80042a2:	659a      	str	r2, [r3, #88]	; 0x58

      /* Set ADC error code to ADC peripheral internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80042a4:	687b      	ldr	r3, [r7, #4]
 80042a6:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80042a8:	2201      	movs	r2, #1
 80042aa:	431a      	orrs	r2, r3
 80042ac:	687b      	ldr	r3, [r7, #4]
 80042ae:	65da      	str	r2, [r3, #92]	; 0x5c

      return HAL_ERROR;
 80042b0:	2301      	movs	r3, #1
 80042b2:	e056      	b.n	8004362 <ADC_Enable+0xf2>
    }

    /* Enable the ADC peripheral */
    LL_ADC_Enable(hadc->Instance);
 80042b4:	687b      	ldr	r3, [r7, #4]
 80042b6:	681b      	ldr	r3, [r3, #0]
 80042b8:	0018      	movs	r0, r3
 80042ba:	f7ff fb23 	bl	8003904 <LL_ADC_Enable>

    if ((LL_ADC_GetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) & LL_ADC_PATH_INTERNAL_TEMPSENSOR) 
 80042be:	4b2c      	ldr	r3, [pc, #176]	; (8004370 <ADC_Enable+0x100>)
 80042c0:	0018      	movs	r0, r3
 80042c2:	f7ff fa45 	bl	8003750 <LL_ADC_GetCommonPathInternalCh>
 80042c6:	0002      	movs	r2, r0
 80042c8:	2380      	movs	r3, #128	; 0x80
 80042ca:	041b      	lsls	r3, r3, #16
 80042cc:	4013      	ands	r3, r2
 80042ce:	d00f      	beq.n	80042f0 <ADC_Enable+0x80>
      /* Wait loop initialization and execution */
      /* Note: Variable divided by 2 to compensate partially              */
      /*       CPU processing cycles, scaling in us split to not          */
      /*       exceed 32 bits register capacity and handle low frequency. */
      wait_loop_index = ((LL_ADC_DELAY_TEMPSENSOR_BUFFER_STAB_US / 10UL) 
                         * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 80042d0:	4b28      	ldr	r3, [pc, #160]	; (8004374 <ADC_Enable+0x104>)
 80042d2:	681b      	ldr	r3, [r3, #0]
 80042d4:	4928      	ldr	r1, [pc, #160]	; (8004378 <ADC_Enable+0x108>)
 80042d6:	0018      	movs	r0, r3
 80042d8:	f7fb ff30 	bl	800013c <__udivsi3>
 80042dc:	0003      	movs	r3, r0
 80042de:	3301      	adds	r3, #1
      wait_loop_index = ((LL_ADC_DELAY_TEMPSENSOR_BUFFER_STAB_US / 10UL) 
 80042e0:	60bb      	str	r3, [r7, #8]
      while (wait_loop_index != 0UL)
 80042e2:	e002      	b.n	80042ea <ADC_Enable+0x7a>
      {
        wait_loop_index--;
 80042e4:	68bb      	ldr	r3, [r7, #8]
 80042e6:	3b01      	subs	r3, #1
 80042e8:	60bb      	str	r3, [r7, #8]
      while (wait_loop_index != 0UL)
 80042ea:	68bb      	ldr	r3, [r7, #8]
 80042ec:	2b00      	cmp	r3, #0
 80042ee:	d1f9      	bne.n	80042e4 <ADC_Enable+0x74>
      }
    }

    /* If low power mode AutoPowerOff is enabled, power-on/off phases are     */
    /* performed automatically by hardware and flag ADC ready is not set.     */
    if (hadc->Init.LowPowerAutoPowerOff != ENABLE)
 80042f0:	687b      	ldr	r3, [r7, #4]
 80042f2:	7e5b      	ldrb	r3, [r3, #25]
 80042f4:	2b01      	cmp	r3, #1
 80042f6:	d033      	beq.n	8004360 <ADC_Enable+0xf0>
    {
      /* Wait for ADC effectively enabled */
      tickstart = HAL_GetTick();
 80042f8:	f7ff f9e8 	bl	80036cc <HAL_GetTick>
 80042fc:	0003      	movs	r3, r0
 80042fe:	60fb      	str	r3, [r7, #12]

      while (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 8004300:	e027      	b.n	8004352 <ADC_Enable+0xe2>
            The workaround is to continue setting ADEN until ADRDY is becomes 1.
            Additionally, ADC_ENABLE_TIMEOUT is defined to encompass this
            4 ADC clock cycle duration */
        /* Note: Test of ADC enabled required due to hardware constraint to     */
        /*       not enable ADC if already enabled.                             */
        if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8004302:	687b      	ldr	r3, [r7, #4]
 8004304:	681b      	ldr	r3, [r3, #0]
 8004306:	0018      	movs	r0, r3
 8004308:	f7ff fb0e 	bl	8003928 <LL_ADC_IsEnabled>
 800430c:	1e03      	subs	r3, r0, #0
 800430e:	d104      	bne.n	800431a <ADC_Enable+0xaa>
        {
          LL_ADC_Enable(hadc->Instance);
 8004310:	687b      	ldr	r3, [r7, #4]
 8004312:	681b      	ldr	r3, [r3, #0]
 8004314:	0018      	movs	r0, r3
 8004316:	f7ff faf5 	bl	8003904 <LL_ADC_Enable>
        }

        if ((HAL_GetTick() - tickstart) > ADC_ENABLE_TIMEOUT)
 800431a:	f7ff f9d7 	bl	80036cc <HAL_GetTick>
 800431e:	0002      	movs	r2, r0
 8004320:	68fb      	ldr	r3, [r7, #12]
 8004322:	1ad3      	subs	r3, r2, r3
 8004324:	2b02      	cmp	r3, #2
 8004326:	d914      	bls.n	8004352 <ADC_Enable+0xe2>
        {
          /* New check to avoid false timeout detection in case of preemption */
          if (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 8004328:	687b      	ldr	r3, [r7, #4]
 800432a:	681b      	ldr	r3, [r3, #0]
 800432c:	681b      	ldr	r3, [r3, #0]
 800432e:	2201      	movs	r2, #1
 8004330:	4013      	ands	r3, r2
 8004332:	2b01      	cmp	r3, #1
 8004334:	d00d      	beq.n	8004352 <ADC_Enable+0xe2>
          {
            /* Update ADC state machine to error */
            SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8004336:	687b      	ldr	r3, [r7, #4]
 8004338:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800433a:	2210      	movs	r2, #16
 800433c:	431a      	orrs	r2, r3
 800433e:	687b      	ldr	r3, [r7, #4]
 8004340:	659a      	str	r2, [r3, #88]	; 0x58

            /* Set ADC error code to ADC peripheral internal error */
            SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8004342:	687b      	ldr	r3, [r7, #4]
 8004344:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004346:	2201      	movs	r2, #1
 8004348:	431a      	orrs	r2, r3
 800434a:	687b      	ldr	r3, [r7, #4]
 800434c:	65da      	str	r2, [r3, #92]	; 0x5c

            return HAL_ERROR;
 800434e:	2301      	movs	r3, #1
 8004350:	e007      	b.n	8004362 <ADC_Enable+0xf2>
      while (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 8004352:	687b      	ldr	r3, [r7, #4]
 8004354:	681b      	ldr	r3, [r3, #0]
 8004356:	681b      	ldr	r3, [r3, #0]
 8004358:	2201      	movs	r2, #1
 800435a:	4013      	ands	r3, r2
 800435c:	2b01      	cmp	r3, #1
 800435e:	d1d0      	bne.n	8004302 <ADC_Enable+0x92>
      }
    }
  }

  /* Return HAL status */
  return HAL_OK;
 8004360:	2300      	movs	r3, #0
}
 8004362:	0018      	movs	r0, r3
 8004364:	46bd      	mov	sp, r7
 8004366:	b004      	add	sp, #16
 8004368:	bd80      	pop	{r7, pc}
 800436a:	46c0      	nop			; (mov r8, r8)
 800436c:	80000017 	.word	0x80000017
 8004370:	40012708 	.word	0x40012708
 8004374:	20000008 	.word	0x20000008
 8004378:	00030d40 	.word	0x00030d40

0800437c <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 800437c:	b590      	push	{r4, r7, lr}
 800437e:	b083      	sub	sp, #12
 8004380:	af00      	add	r7, sp, #0
 8004382:	0002      	movs	r2, r0
 8004384:	6039      	str	r1, [r7, #0]
 8004386:	1dfb      	adds	r3, r7, #7
 8004388:	701a      	strb	r2, [r3, #0]
  if ((int32_t)(IRQn) >= 0)
 800438a:	1dfb      	adds	r3, r7, #7
 800438c:	781b      	ldrb	r3, [r3, #0]
 800438e:	2b7f      	cmp	r3, #127	; 0x7f
 8004390:	d828      	bhi.n	80043e4 <__NVIC_SetPriority+0x68>
  {
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8004392:	4a2f      	ldr	r2, [pc, #188]	; (8004450 <__NVIC_SetPriority+0xd4>)
 8004394:	1dfb      	adds	r3, r7, #7
 8004396:	781b      	ldrb	r3, [r3, #0]
 8004398:	b25b      	sxtb	r3, r3
 800439a:	089b      	lsrs	r3, r3, #2
 800439c:	33c0      	adds	r3, #192	; 0xc0
 800439e:	009b      	lsls	r3, r3, #2
 80043a0:	589b      	ldr	r3, [r3, r2]
 80043a2:	1dfa      	adds	r2, r7, #7
 80043a4:	7812      	ldrb	r2, [r2, #0]
 80043a6:	0011      	movs	r1, r2
 80043a8:	2203      	movs	r2, #3
 80043aa:	400a      	ands	r2, r1
 80043ac:	00d2      	lsls	r2, r2, #3
 80043ae:	21ff      	movs	r1, #255	; 0xff
 80043b0:	4091      	lsls	r1, r2
 80043b2:	000a      	movs	r2, r1
 80043b4:	43d2      	mvns	r2, r2
 80043b6:	401a      	ands	r2, r3
 80043b8:	0011      	movs	r1, r2
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 80043ba:	683b      	ldr	r3, [r7, #0]
 80043bc:	019b      	lsls	r3, r3, #6
 80043be:	22ff      	movs	r2, #255	; 0xff
 80043c0:	401a      	ands	r2, r3
 80043c2:	1dfb      	adds	r3, r7, #7
 80043c4:	781b      	ldrb	r3, [r3, #0]
 80043c6:	0018      	movs	r0, r3
 80043c8:	2303      	movs	r3, #3
 80043ca:	4003      	ands	r3, r0
 80043cc:	00db      	lsls	r3, r3, #3
 80043ce:	409a      	lsls	r2, r3
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 80043d0:	481f      	ldr	r0, [pc, #124]	; (8004450 <__NVIC_SetPriority+0xd4>)
 80043d2:	1dfb      	adds	r3, r7, #7
 80043d4:	781b      	ldrb	r3, [r3, #0]
 80043d6:	b25b      	sxtb	r3, r3
 80043d8:	089b      	lsrs	r3, r3, #2
 80043da:	430a      	orrs	r2, r1
 80043dc:	33c0      	adds	r3, #192	; 0xc0
 80043de:	009b      	lsls	r3, r3, #2
 80043e0:	501a      	str	r2, [r3, r0]
  else
  {
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
  }
}
 80043e2:	e031      	b.n	8004448 <__NVIC_SetPriority+0xcc>
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 80043e4:	4a1b      	ldr	r2, [pc, #108]	; (8004454 <__NVIC_SetPriority+0xd8>)
 80043e6:	1dfb      	adds	r3, r7, #7
 80043e8:	781b      	ldrb	r3, [r3, #0]
 80043ea:	0019      	movs	r1, r3
 80043ec:	230f      	movs	r3, #15
 80043ee:	400b      	ands	r3, r1
 80043f0:	3b08      	subs	r3, #8
 80043f2:	089b      	lsrs	r3, r3, #2
 80043f4:	3306      	adds	r3, #6
 80043f6:	009b      	lsls	r3, r3, #2
 80043f8:	18d3      	adds	r3, r2, r3
 80043fa:	3304      	adds	r3, #4
 80043fc:	681b      	ldr	r3, [r3, #0]
 80043fe:	1dfa      	adds	r2, r7, #7
 8004400:	7812      	ldrb	r2, [r2, #0]
 8004402:	0011      	movs	r1, r2
 8004404:	2203      	movs	r2, #3
 8004406:	400a      	ands	r2, r1
 8004408:	00d2      	lsls	r2, r2, #3
 800440a:	21ff      	movs	r1, #255	; 0xff
 800440c:	4091      	lsls	r1, r2
 800440e:	000a      	movs	r2, r1
 8004410:	43d2      	mvns	r2, r2
 8004412:	401a      	ands	r2, r3
 8004414:	0011      	movs	r1, r2
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 8004416:	683b      	ldr	r3, [r7, #0]
 8004418:	019b      	lsls	r3, r3, #6
 800441a:	22ff      	movs	r2, #255	; 0xff
 800441c:	401a      	ands	r2, r3
 800441e:	1dfb      	adds	r3, r7, #7
 8004420:	781b      	ldrb	r3, [r3, #0]
 8004422:	0018      	movs	r0, r3
 8004424:	2303      	movs	r3, #3
 8004426:	4003      	ands	r3, r0
 8004428:	00db      	lsls	r3, r3, #3
 800442a:	409a      	lsls	r2, r3
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 800442c:	4809      	ldr	r0, [pc, #36]	; (8004454 <__NVIC_SetPriority+0xd8>)
 800442e:	1dfb      	adds	r3, r7, #7
 8004430:	781b      	ldrb	r3, [r3, #0]
 8004432:	001c      	movs	r4, r3
 8004434:	230f      	movs	r3, #15
 8004436:	4023      	ands	r3, r4
 8004438:	3b08      	subs	r3, #8
 800443a:	089b      	lsrs	r3, r3, #2
 800443c:	430a      	orrs	r2, r1
 800443e:	3306      	adds	r3, #6
 8004440:	009b      	lsls	r3, r3, #2
 8004442:	18c3      	adds	r3, r0, r3
 8004444:	3304      	adds	r3, #4
 8004446:	601a      	str	r2, [r3, #0]
}
 8004448:	46c0      	nop			; (mov r8, r8)
 800444a:	46bd      	mov	sp, r7
 800444c:	b003      	add	sp, #12
 800444e:	bd90      	pop	{r4, r7, pc}
 8004450:	e000e100 	.word	0xe000e100
 8004454:	e000ed00 	.word	0xe000ed00

08004458 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8004458:	b580      	push	{r7, lr}
 800445a:	b082      	sub	sp, #8
 800445c:	af00      	add	r7, sp, #0
 800445e:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8004460:	687b      	ldr	r3, [r7, #4]
 8004462:	1e5a      	subs	r2, r3, #1
 8004464:	2380      	movs	r3, #128	; 0x80
 8004466:	045b      	lsls	r3, r3, #17
 8004468:	429a      	cmp	r2, r3
 800446a:	d301      	bcc.n	8004470 <SysTick_Config+0x18>
  {
    return (1UL);                                                   /* Reload value impossible */
 800446c:	2301      	movs	r3, #1
 800446e:	e010      	b.n	8004492 <SysTick_Config+0x3a>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8004470:	4b0a      	ldr	r3, [pc, #40]	; (800449c <SysTick_Config+0x44>)
 8004472:	687a      	ldr	r2, [r7, #4]
 8004474:	3a01      	subs	r2, #1
 8004476:	605a      	str	r2, [r3, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8004478:	2301      	movs	r3, #1
 800447a:	425b      	negs	r3, r3
 800447c:	2103      	movs	r1, #3
 800447e:	0018      	movs	r0, r3
 8004480:	f7ff ff7c 	bl	800437c <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8004484:	4b05      	ldr	r3, [pc, #20]	; (800449c <SysTick_Config+0x44>)
 8004486:	2200      	movs	r2, #0
 8004488:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 800448a:	4b04      	ldr	r3, [pc, #16]	; (800449c <SysTick_Config+0x44>)
 800448c:	2207      	movs	r2, #7
 800448e:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8004490:	2300      	movs	r3, #0
}
 8004492:	0018      	movs	r0, r3
 8004494:	46bd      	mov	sp, r7
 8004496:	b002      	add	sp, #8
 8004498:	bd80      	pop	{r7, pc}
 800449a:	46c0      	nop			; (mov r8, r8)
 800449c:	e000e010 	.word	0xe000e010

080044a0 <HAL_NVIC_SetPriority>:
  *         with stm32g0xx devices, this parameter is a dummy value and it is ignored, because
  *         no subpriority supported in Cortex M0+ based products.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80044a0:	b580      	push	{r7, lr}
 80044a2:	b084      	sub	sp, #16
 80044a4:	af00      	add	r7, sp, #0
 80044a6:	60b9      	str	r1, [r7, #8]
 80044a8:	607a      	str	r2, [r7, #4]
 80044aa:	210f      	movs	r1, #15
 80044ac:	187b      	adds	r3, r7, r1
 80044ae:	1c02      	adds	r2, r0, #0
 80044b0:	701a      	strb	r2, [r3, #0]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(SubPriority);

  /* Check the parameters */
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  NVIC_SetPriority(IRQn, PreemptPriority);
 80044b2:	68ba      	ldr	r2, [r7, #8]
 80044b4:	187b      	adds	r3, r7, r1
 80044b6:	781b      	ldrb	r3, [r3, #0]
 80044b8:	b25b      	sxtb	r3, r3
 80044ba:	0011      	movs	r1, r2
 80044bc:	0018      	movs	r0, r3
 80044be:	f7ff ff5d 	bl	800437c <__NVIC_SetPriority>
}
 80044c2:	46c0      	nop			; (mov r8, r8)
 80044c4:	46bd      	mov	sp, r7
 80044c6:	b004      	add	sp, #16
 80044c8:	bd80      	pop	{r7, pc}

080044ca <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 80044ca:	b580      	push	{r7, lr}
 80044cc:	b082      	sub	sp, #8
 80044ce:	af00      	add	r7, sp, #0
 80044d0:	6078      	str	r0, [r7, #4]
  return SysTick_Config(TicksNumb);
 80044d2:	687b      	ldr	r3, [r7, #4]
 80044d4:	0018      	movs	r0, r3
 80044d6:	f7ff ffbf 	bl	8004458 <SysTick_Config>
 80044da:	0003      	movs	r3, r0
}
 80044dc:	0018      	movs	r0, r3
 80044de:	46bd      	mov	sp, r7
 80044e0:	b002      	add	sp, #8
 80044e2:	bd80      	pop	{r7, pc}

080044e4 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80044e4:	b580      	push	{r7, lr}
 80044e6:	b086      	sub	sp, #24
 80044e8:	af00      	add	r7, sp, #0
 80044ea:	6078      	str	r0, [r7, #4]
 80044ec:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 80044ee:	2300      	movs	r3, #0
 80044f0:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 80044f2:	e147      	b.n	8004784 <HAL_GPIO_Init+0x2a0>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 80044f4:	683b      	ldr	r3, [r7, #0]
 80044f6:	681b      	ldr	r3, [r3, #0]
 80044f8:	2101      	movs	r1, #1
 80044fa:	697a      	ldr	r2, [r7, #20]
 80044fc:	4091      	lsls	r1, r2
 80044fe:	000a      	movs	r2, r1
 8004500:	4013      	ands	r3, r2
 8004502:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8004504:	68fb      	ldr	r3, [r7, #12]
 8004506:	2b00      	cmp	r3, #0
 8004508:	d100      	bne.n	800450c <HAL_GPIO_Init+0x28>
 800450a:	e138      	b.n	800477e <HAL_GPIO_Init+0x29a>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 800450c:	683b      	ldr	r3, [r7, #0]
 800450e:	685b      	ldr	r3, [r3, #4]
 8004510:	2203      	movs	r2, #3
 8004512:	4013      	ands	r3, r2
 8004514:	2b01      	cmp	r3, #1
 8004516:	d005      	beq.n	8004524 <HAL_GPIO_Init+0x40>
 8004518:	683b      	ldr	r3, [r7, #0]
 800451a:	685b      	ldr	r3, [r3, #4]
 800451c:	2203      	movs	r2, #3
 800451e:	4013      	ands	r3, r2
 8004520:	2b02      	cmp	r3, #2
 8004522:	d130      	bne.n	8004586 <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));

        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8004524:	687b      	ldr	r3, [r7, #4]
 8004526:	689b      	ldr	r3, [r3, #8]
 8004528:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2u));
 800452a:	697b      	ldr	r3, [r7, #20]
 800452c:	005b      	lsls	r3, r3, #1
 800452e:	2203      	movs	r2, #3
 8004530:	409a      	lsls	r2, r3
 8004532:	0013      	movs	r3, r2
 8004534:	43da      	mvns	r2, r3
 8004536:	693b      	ldr	r3, [r7, #16]
 8004538:	4013      	ands	r3, r2
 800453a:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 800453c:	683b      	ldr	r3, [r7, #0]
 800453e:	68da      	ldr	r2, [r3, #12]
 8004540:	697b      	ldr	r3, [r7, #20]
 8004542:	005b      	lsls	r3, r3, #1
 8004544:	409a      	lsls	r2, r3
 8004546:	0013      	movs	r3, r2
 8004548:	693a      	ldr	r2, [r7, #16]
 800454a:	4313      	orrs	r3, r2
 800454c:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 800454e:	687b      	ldr	r3, [r7, #4]
 8004550:	693a      	ldr	r2, [r7, #16]
 8004552:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8004554:	687b      	ldr	r3, [r7, #4]
 8004556:	685b      	ldr	r3, [r3, #4]
 8004558:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 800455a:	2201      	movs	r2, #1
 800455c:	697b      	ldr	r3, [r7, #20]
 800455e:	409a      	lsls	r2, r3
 8004560:	0013      	movs	r3, r2
 8004562:	43da      	mvns	r2, r3
 8004564:	693b      	ldr	r3, [r7, #16]
 8004566:	4013      	ands	r3, r2
 8004568:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 800456a:	683b      	ldr	r3, [r7, #0]
 800456c:	685b      	ldr	r3, [r3, #4]
 800456e:	091b      	lsrs	r3, r3, #4
 8004570:	2201      	movs	r2, #1
 8004572:	401a      	ands	r2, r3
 8004574:	697b      	ldr	r3, [r7, #20]
 8004576:	409a      	lsls	r2, r3
 8004578:	0013      	movs	r3, r2
 800457a:	693a      	ldr	r2, [r7, #16]
 800457c:	4313      	orrs	r3, r2
 800457e:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8004580:	687b      	ldr	r3, [r7, #4]
 8004582:	693a      	ldr	r2, [r7, #16]
 8004584:	605a      	str	r2, [r3, #4]
      }

      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8004586:	683b      	ldr	r3, [r7, #0]
 8004588:	685b      	ldr	r3, [r3, #4]
 800458a:	2203      	movs	r2, #3
 800458c:	4013      	ands	r3, r2
 800458e:	2b03      	cmp	r3, #3
 8004590:	d017      	beq.n	80045c2 <HAL_GPIO_Init+0xde>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8004592:	687b      	ldr	r3, [r7, #4]
 8004594:	68db      	ldr	r3, [r3, #12]
 8004596:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2u));
 8004598:	697b      	ldr	r3, [r7, #20]
 800459a:	005b      	lsls	r3, r3, #1
 800459c:	2203      	movs	r2, #3
 800459e:	409a      	lsls	r2, r3
 80045a0:	0013      	movs	r3, r2
 80045a2:	43da      	mvns	r2, r3
 80045a4:	693b      	ldr	r3, [r7, #16]
 80045a6:	4013      	ands	r3, r2
 80045a8:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2u));
 80045aa:	683b      	ldr	r3, [r7, #0]
 80045ac:	689a      	ldr	r2, [r3, #8]
 80045ae:	697b      	ldr	r3, [r7, #20]
 80045b0:	005b      	lsls	r3, r3, #1
 80045b2:	409a      	lsls	r2, r3
 80045b4:	0013      	movs	r3, r2
 80045b6:	693a      	ldr	r2, [r7, #16]
 80045b8:	4313      	orrs	r3, r2
 80045ba:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 80045bc:	687b      	ldr	r3, [r7, #4]
 80045be:	693a      	ldr	r2, [r7, #16]
 80045c0:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80045c2:	683b      	ldr	r3, [r7, #0]
 80045c4:	685b      	ldr	r3, [r3, #4]
 80045c6:	2203      	movs	r2, #3
 80045c8:	4013      	ands	r3, r2
 80045ca:	2b02      	cmp	r3, #2
 80045cc:	d123      	bne.n	8004616 <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 80045ce:	697b      	ldr	r3, [r7, #20]
 80045d0:	08da      	lsrs	r2, r3, #3
 80045d2:	687b      	ldr	r3, [r7, #4]
 80045d4:	3208      	adds	r2, #8
 80045d6:	0092      	lsls	r2, r2, #2
 80045d8:	58d3      	ldr	r3, [r2, r3]
 80045da:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 80045dc:	697b      	ldr	r3, [r7, #20]
 80045de:	2207      	movs	r2, #7
 80045e0:	4013      	ands	r3, r2
 80045e2:	009b      	lsls	r3, r3, #2
 80045e4:	220f      	movs	r2, #15
 80045e6:	409a      	lsls	r2, r3
 80045e8:	0013      	movs	r3, r2
 80045ea:	43da      	mvns	r2, r3
 80045ec:	693b      	ldr	r3, [r7, #16]
 80045ee:	4013      	ands	r3, r2
 80045f0:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 80045f2:	683b      	ldr	r3, [r7, #0]
 80045f4:	691a      	ldr	r2, [r3, #16]
 80045f6:	697b      	ldr	r3, [r7, #20]
 80045f8:	2107      	movs	r1, #7
 80045fa:	400b      	ands	r3, r1
 80045fc:	009b      	lsls	r3, r3, #2
 80045fe:	409a      	lsls	r2, r3
 8004600:	0013      	movs	r3, r2
 8004602:	693a      	ldr	r2, [r7, #16]
 8004604:	4313      	orrs	r3, r2
 8004606:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 8004608:	697b      	ldr	r3, [r7, #20]
 800460a:	08da      	lsrs	r2, r3, #3
 800460c:	687b      	ldr	r3, [r7, #4]
 800460e:	3208      	adds	r2, #8
 8004610:	0092      	lsls	r2, r2, #2
 8004612:	6939      	ldr	r1, [r7, #16]
 8004614:	50d1      	str	r1, [r2, r3]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8004616:	687b      	ldr	r3, [r7, #4]
 8004618:	681b      	ldr	r3, [r3, #0]
 800461a:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2u));
 800461c:	697b      	ldr	r3, [r7, #20]
 800461e:	005b      	lsls	r3, r3, #1
 8004620:	2203      	movs	r2, #3
 8004622:	409a      	lsls	r2, r3
 8004624:	0013      	movs	r3, r2
 8004626:	43da      	mvns	r2, r3
 8004628:	693b      	ldr	r3, [r7, #16]
 800462a:	4013      	ands	r3, r2
 800462c:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 800462e:	683b      	ldr	r3, [r7, #0]
 8004630:	685b      	ldr	r3, [r3, #4]
 8004632:	2203      	movs	r2, #3
 8004634:	401a      	ands	r2, r3
 8004636:	697b      	ldr	r3, [r7, #20]
 8004638:	005b      	lsls	r3, r3, #1
 800463a:	409a      	lsls	r2, r3
 800463c:	0013      	movs	r3, r2
 800463e:	693a      	ldr	r2, [r7, #16]
 8004640:	4313      	orrs	r3, r2
 8004642:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8004644:	687b      	ldr	r3, [r7, #4]
 8004646:	693a      	ldr	r2, [r7, #16]
 8004648:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 800464a:	683b      	ldr	r3, [r7, #0]
 800464c:	685a      	ldr	r2, [r3, #4]
 800464e:	23c0      	movs	r3, #192	; 0xc0
 8004650:	029b      	lsls	r3, r3, #10
 8004652:	4013      	ands	r3, r2
 8004654:	d100      	bne.n	8004658 <HAL_GPIO_Init+0x174>
 8004656:	e092      	b.n	800477e <HAL_GPIO_Init+0x29a>
      {
        temp = EXTI->EXTICR[position >> 2u];
 8004658:	4a50      	ldr	r2, [pc, #320]	; (800479c <HAL_GPIO_Init+0x2b8>)
 800465a:	697b      	ldr	r3, [r7, #20]
 800465c:	089b      	lsrs	r3, r3, #2
 800465e:	3318      	adds	r3, #24
 8004660:	009b      	lsls	r3, r3, #2
 8004662:	589b      	ldr	r3, [r3, r2]
 8004664:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (8u * (position & 0x03u)));
 8004666:	697b      	ldr	r3, [r7, #20]
 8004668:	2203      	movs	r2, #3
 800466a:	4013      	ands	r3, r2
 800466c:	00db      	lsls	r3, r3, #3
 800466e:	220f      	movs	r2, #15
 8004670:	409a      	lsls	r2, r3
 8004672:	0013      	movs	r3, r2
 8004674:	43da      	mvns	r2, r3
 8004676:	693b      	ldr	r3, [r7, #16]
 8004678:	4013      	ands	r3, r2
 800467a:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (8u * (position & 0x03u)));
 800467c:	687a      	ldr	r2, [r7, #4]
 800467e:	23a0      	movs	r3, #160	; 0xa0
 8004680:	05db      	lsls	r3, r3, #23
 8004682:	429a      	cmp	r2, r3
 8004684:	d013      	beq.n	80046ae <HAL_GPIO_Init+0x1ca>
 8004686:	687b      	ldr	r3, [r7, #4]
 8004688:	4a45      	ldr	r2, [pc, #276]	; (80047a0 <HAL_GPIO_Init+0x2bc>)
 800468a:	4293      	cmp	r3, r2
 800468c:	d00d      	beq.n	80046aa <HAL_GPIO_Init+0x1c6>
 800468e:	687b      	ldr	r3, [r7, #4]
 8004690:	4a44      	ldr	r2, [pc, #272]	; (80047a4 <HAL_GPIO_Init+0x2c0>)
 8004692:	4293      	cmp	r3, r2
 8004694:	d007      	beq.n	80046a6 <HAL_GPIO_Init+0x1c2>
 8004696:	687b      	ldr	r3, [r7, #4]
 8004698:	4a43      	ldr	r2, [pc, #268]	; (80047a8 <HAL_GPIO_Init+0x2c4>)
 800469a:	4293      	cmp	r3, r2
 800469c:	d101      	bne.n	80046a2 <HAL_GPIO_Init+0x1be>
 800469e:	2303      	movs	r3, #3
 80046a0:	e006      	b.n	80046b0 <HAL_GPIO_Init+0x1cc>
 80046a2:	2305      	movs	r3, #5
 80046a4:	e004      	b.n	80046b0 <HAL_GPIO_Init+0x1cc>
 80046a6:	2302      	movs	r3, #2
 80046a8:	e002      	b.n	80046b0 <HAL_GPIO_Init+0x1cc>
 80046aa:	2301      	movs	r3, #1
 80046ac:	e000      	b.n	80046b0 <HAL_GPIO_Init+0x1cc>
 80046ae:	2300      	movs	r3, #0
 80046b0:	697a      	ldr	r2, [r7, #20]
 80046b2:	2103      	movs	r1, #3
 80046b4:	400a      	ands	r2, r1
 80046b6:	00d2      	lsls	r2, r2, #3
 80046b8:	4093      	lsls	r3, r2
 80046ba:	693a      	ldr	r2, [r7, #16]
 80046bc:	4313      	orrs	r3, r2
 80046be:	613b      	str	r3, [r7, #16]
        EXTI->EXTICR[position >> 2u] = temp;
 80046c0:	4936      	ldr	r1, [pc, #216]	; (800479c <HAL_GPIO_Init+0x2b8>)
 80046c2:	697b      	ldr	r3, [r7, #20]
 80046c4:	089b      	lsrs	r3, r3, #2
 80046c6:	3318      	adds	r3, #24
 80046c8:	009b      	lsls	r3, r3, #2
 80046ca:	693a      	ldr	r2, [r7, #16]
 80046cc:	505a      	str	r2, [r3, r1]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 80046ce:	4b33      	ldr	r3, [pc, #204]	; (800479c <HAL_GPIO_Init+0x2b8>)
 80046d0:	681b      	ldr	r3, [r3, #0]
 80046d2:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80046d4:	68fb      	ldr	r3, [r7, #12]
 80046d6:	43da      	mvns	r2, r3
 80046d8:	693b      	ldr	r3, [r7, #16]
 80046da:	4013      	ands	r3, r2
 80046dc:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 80046de:	683b      	ldr	r3, [r7, #0]
 80046e0:	685a      	ldr	r2, [r3, #4]
 80046e2:	2380      	movs	r3, #128	; 0x80
 80046e4:	035b      	lsls	r3, r3, #13
 80046e6:	4013      	ands	r3, r2
 80046e8:	d003      	beq.n	80046f2 <HAL_GPIO_Init+0x20e>
        {
          temp |= iocurrent;
 80046ea:	693a      	ldr	r2, [r7, #16]
 80046ec:	68fb      	ldr	r3, [r7, #12]
 80046ee:	4313      	orrs	r3, r2
 80046f0:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 80046f2:	4b2a      	ldr	r3, [pc, #168]	; (800479c <HAL_GPIO_Init+0x2b8>)
 80046f4:	693a      	ldr	r2, [r7, #16]
 80046f6:	601a      	str	r2, [r3, #0]

        temp = EXTI->FTSR1;
 80046f8:	4b28      	ldr	r3, [pc, #160]	; (800479c <HAL_GPIO_Init+0x2b8>)
 80046fa:	685b      	ldr	r3, [r3, #4]
 80046fc:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80046fe:	68fb      	ldr	r3, [r7, #12]
 8004700:	43da      	mvns	r2, r3
 8004702:	693b      	ldr	r3, [r7, #16]
 8004704:	4013      	ands	r3, r2
 8004706:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 8004708:	683b      	ldr	r3, [r7, #0]
 800470a:	685a      	ldr	r2, [r3, #4]
 800470c:	2380      	movs	r3, #128	; 0x80
 800470e:	039b      	lsls	r3, r3, #14
 8004710:	4013      	ands	r3, r2
 8004712:	d003      	beq.n	800471c <HAL_GPIO_Init+0x238>
        {
          temp |= iocurrent;
 8004714:	693a      	ldr	r2, [r7, #16]
 8004716:	68fb      	ldr	r3, [r7, #12]
 8004718:	4313      	orrs	r3, r2
 800471a:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 800471c:	4b1f      	ldr	r3, [pc, #124]	; (800479c <HAL_GPIO_Init+0x2b8>)
 800471e:	693a      	ldr	r2, [r7, #16]
 8004720:	605a      	str	r2, [r3, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->EMR1;
 8004722:	4a1e      	ldr	r2, [pc, #120]	; (800479c <HAL_GPIO_Init+0x2b8>)
 8004724:	2384      	movs	r3, #132	; 0x84
 8004726:	58d3      	ldr	r3, [r2, r3]
 8004728:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 800472a:	68fb      	ldr	r3, [r7, #12]
 800472c:	43da      	mvns	r2, r3
 800472e:	693b      	ldr	r3, [r7, #16]
 8004730:	4013      	ands	r3, r2
 8004732:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 8004734:	683b      	ldr	r3, [r7, #0]
 8004736:	685a      	ldr	r2, [r3, #4]
 8004738:	2380      	movs	r3, #128	; 0x80
 800473a:	029b      	lsls	r3, r3, #10
 800473c:	4013      	ands	r3, r2
 800473e:	d003      	beq.n	8004748 <HAL_GPIO_Init+0x264>
        {
          temp |= iocurrent;
 8004740:	693a      	ldr	r2, [r7, #16]
 8004742:	68fb      	ldr	r3, [r7, #12]
 8004744:	4313      	orrs	r3, r2
 8004746:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 8004748:	4914      	ldr	r1, [pc, #80]	; (800479c <HAL_GPIO_Init+0x2b8>)
 800474a:	2284      	movs	r2, #132	; 0x84
 800474c:	693b      	ldr	r3, [r7, #16]
 800474e:	508b      	str	r3, [r1, r2]

        temp = EXTI->IMR1;
 8004750:	4a12      	ldr	r2, [pc, #72]	; (800479c <HAL_GPIO_Init+0x2b8>)
 8004752:	2380      	movs	r3, #128	; 0x80
 8004754:	58d3      	ldr	r3, [r2, r3]
 8004756:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8004758:	68fb      	ldr	r3, [r7, #12]
 800475a:	43da      	mvns	r2, r3
 800475c:	693b      	ldr	r3, [r7, #16]
 800475e:	4013      	ands	r3, r2
 8004760:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 8004762:	683b      	ldr	r3, [r7, #0]
 8004764:	685a      	ldr	r2, [r3, #4]
 8004766:	2380      	movs	r3, #128	; 0x80
 8004768:	025b      	lsls	r3, r3, #9
 800476a:	4013      	ands	r3, r2
 800476c:	d003      	beq.n	8004776 <HAL_GPIO_Init+0x292>
        {
          temp |= iocurrent;
 800476e:	693a      	ldr	r2, [r7, #16]
 8004770:	68fb      	ldr	r3, [r7, #12]
 8004772:	4313      	orrs	r3, r2
 8004774:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 8004776:	4909      	ldr	r1, [pc, #36]	; (800479c <HAL_GPIO_Init+0x2b8>)
 8004778:	2280      	movs	r2, #128	; 0x80
 800477a:	693b      	ldr	r3, [r7, #16]
 800477c:	508b      	str	r3, [r1, r2]
      }
    }

    position++;
 800477e:	697b      	ldr	r3, [r7, #20]
 8004780:	3301      	adds	r3, #1
 8004782:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8004784:	683b      	ldr	r3, [r7, #0]
 8004786:	681a      	ldr	r2, [r3, #0]
 8004788:	697b      	ldr	r3, [r7, #20]
 800478a:	40da      	lsrs	r2, r3
 800478c:	1e13      	subs	r3, r2, #0
 800478e:	d000      	beq.n	8004792 <HAL_GPIO_Init+0x2ae>
 8004790:	e6b0      	b.n	80044f4 <HAL_GPIO_Init+0x10>
  }
}
 8004792:	46c0      	nop			; (mov r8, r8)
 8004794:	46c0      	nop			; (mov r8, r8)
 8004796:	46bd      	mov	sp, r7
 8004798:	b006      	add	sp, #24
 800479a:	bd80      	pop	{r7, pc}
 800479c:	40021800 	.word	0x40021800
 80047a0:	50000400 	.word	0x50000400
 80047a4:	50000800 	.word	0x50000800
 80047a8:	50000c00 	.word	0x50000c00

080047ac <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80047ac:	b580      	push	{r7, lr}
 80047ae:	b082      	sub	sp, #8
 80047b0:	af00      	add	r7, sp, #0
 80047b2:	6078      	str	r0, [r7, #4]
 80047b4:	0008      	movs	r0, r1
 80047b6:	0011      	movs	r1, r2
 80047b8:	1cbb      	adds	r3, r7, #2
 80047ba:	1c02      	adds	r2, r0, #0
 80047bc:	801a      	strh	r2, [r3, #0]
 80047be:	1c7b      	adds	r3, r7, #1
 80047c0:	1c0a      	adds	r2, r1, #0
 80047c2:	701a      	strb	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 80047c4:	1c7b      	adds	r3, r7, #1
 80047c6:	781b      	ldrb	r3, [r3, #0]
 80047c8:	2b00      	cmp	r3, #0
 80047ca:	d004      	beq.n	80047d6 <HAL_GPIO_WritePin+0x2a>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 80047cc:	1cbb      	adds	r3, r7, #2
 80047ce:	881a      	ldrh	r2, [r3, #0]
 80047d0:	687b      	ldr	r3, [r7, #4]
 80047d2:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 80047d4:	e003      	b.n	80047de <HAL_GPIO_WritePin+0x32>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 80047d6:	1cbb      	adds	r3, r7, #2
 80047d8:	881a      	ldrh	r2, [r3, #0]
 80047da:	687b      	ldr	r3, [r7, #4]
 80047dc:	629a      	str	r2, [r3, #40]	; 0x28
}
 80047de:	46c0      	nop			; (mov r8, r8)
 80047e0:	46bd      	mov	sp, r7
 80047e2:	b002      	add	sp, #8
 80047e4:	bd80      	pop	{r7, pc}
	...

080047e8 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 80047e8:	b580      	push	{r7, lr}
 80047ea:	b082      	sub	sp, #8
 80047ec:	af00      	add	r7, sp, #0
 80047ee:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 80047f0:	687b      	ldr	r3, [r7, #4]
 80047f2:	2b00      	cmp	r3, #0
 80047f4:	d101      	bne.n	80047fa <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 80047f6:	2301      	movs	r3, #1
 80047f8:	e082      	b.n	8004900 <HAL_I2C_Init+0x118>
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_OWN_ADDRESS2_MASK(hi2c->Init.OwnAddress2Masks));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 80047fa:	687b      	ldr	r3, [r7, #4]
 80047fc:	2241      	movs	r2, #65	; 0x41
 80047fe:	5c9b      	ldrb	r3, [r3, r2]
 8004800:	b2db      	uxtb	r3, r3
 8004802:	2b00      	cmp	r3, #0
 8004804:	d107      	bne.n	8004816 <HAL_I2C_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8004806:	687b      	ldr	r3, [r7, #4]
 8004808:	2240      	movs	r2, #64	; 0x40
 800480a:	2100      	movs	r1, #0
 800480c:	5499      	strb	r1, [r3, r2]

    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2C_MspInit(hi2c);
 800480e:	687b      	ldr	r3, [r7, #4]
 8004810:	0018      	movs	r0, r3
 8004812:	f7fe fc95 	bl	8003140 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8004816:	687b      	ldr	r3, [r7, #4]
 8004818:	2241      	movs	r2, #65	; 0x41
 800481a:	2124      	movs	r1, #36	; 0x24
 800481c:	5499      	strb	r1, [r3, r2]

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 800481e:	687b      	ldr	r3, [r7, #4]
 8004820:	681b      	ldr	r3, [r3, #0]
 8004822:	681a      	ldr	r2, [r3, #0]
 8004824:	687b      	ldr	r3, [r7, #4]
 8004826:	681b      	ldr	r3, [r3, #0]
 8004828:	2101      	movs	r1, #1
 800482a:	438a      	bics	r2, r1
 800482c:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx TIMINGR Configuration ------------------*/
  /* Configure I2Cx: Frequency range */
  hi2c->Instance->TIMINGR = hi2c->Init.Timing & TIMING_CLEAR_MASK;
 800482e:	687b      	ldr	r3, [r7, #4]
 8004830:	685a      	ldr	r2, [r3, #4]
 8004832:	687b      	ldr	r3, [r7, #4]
 8004834:	681b      	ldr	r3, [r3, #0]
 8004836:	4934      	ldr	r1, [pc, #208]	; (8004908 <HAL_I2C_Init+0x120>)
 8004838:	400a      	ands	r2, r1
 800483a:	611a      	str	r2, [r3, #16]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Disable Own Address1 before set the Own Address1 configuration */
  hi2c->Instance->OAR1 &= ~I2C_OAR1_OA1EN;
 800483c:	687b      	ldr	r3, [r7, #4]
 800483e:	681b      	ldr	r3, [r3, #0]
 8004840:	689a      	ldr	r2, [r3, #8]
 8004842:	687b      	ldr	r3, [r7, #4]
 8004844:	681b      	ldr	r3, [r3, #0]
 8004846:	4931      	ldr	r1, [pc, #196]	; (800490c <HAL_I2C_Init+0x124>)
 8004848:	400a      	ands	r2, r1
 800484a:	609a      	str	r2, [r3, #8]

  /* Configure I2Cx: Own Address1 and ack own address1 mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 800484c:	687b      	ldr	r3, [r7, #4]
 800484e:	68db      	ldr	r3, [r3, #12]
 8004850:	2b01      	cmp	r3, #1
 8004852:	d108      	bne.n	8004866 <HAL_I2C_Init+0x7e>
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | hi2c->Init.OwnAddress1);
 8004854:	687b      	ldr	r3, [r7, #4]
 8004856:	689a      	ldr	r2, [r3, #8]
 8004858:	687b      	ldr	r3, [r7, #4]
 800485a:	681b      	ldr	r3, [r3, #0]
 800485c:	2180      	movs	r1, #128	; 0x80
 800485e:	0209      	lsls	r1, r1, #8
 8004860:	430a      	orrs	r2, r1
 8004862:	609a      	str	r2, [r3, #8]
 8004864:	e007      	b.n	8004876 <HAL_I2C_Init+0x8e>
  }
  else /* I2C_ADDRESSINGMODE_10BIT */
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
 8004866:	687b      	ldr	r3, [r7, #4]
 8004868:	689a      	ldr	r2, [r3, #8]
 800486a:	687b      	ldr	r3, [r7, #4]
 800486c:	681b      	ldr	r3, [r3, #0]
 800486e:	2184      	movs	r1, #132	; 0x84
 8004870:	0209      	lsls	r1, r1, #8
 8004872:	430a      	orrs	r2, r1
 8004874:	609a      	str	r2, [r3, #8]
  }

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Addressing Master mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 8004876:	687b      	ldr	r3, [r7, #4]
 8004878:	68db      	ldr	r3, [r3, #12]
 800487a:	2b02      	cmp	r3, #2
 800487c:	d104      	bne.n	8004888 <HAL_I2C_Init+0xa0>
  {
    hi2c->Instance->CR2 = (I2C_CR2_ADD10);
 800487e:	687b      	ldr	r3, [r7, #4]
 8004880:	681b      	ldr	r3, [r3, #0]
 8004882:	2280      	movs	r2, #128	; 0x80
 8004884:	0112      	lsls	r2, r2, #4
 8004886:	605a      	str	r2, [r3, #4]
  }
  /* Enable the AUTOEND by default, and enable NACK (should be disable only during Slave process */
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 8004888:	687b      	ldr	r3, [r7, #4]
 800488a:	681b      	ldr	r3, [r3, #0]
 800488c:	685a      	ldr	r2, [r3, #4]
 800488e:	687b      	ldr	r3, [r7, #4]
 8004890:	681b      	ldr	r3, [r3, #0]
 8004892:	491f      	ldr	r1, [pc, #124]	; (8004910 <HAL_I2C_Init+0x128>)
 8004894:	430a      	orrs	r2, r1
 8004896:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Disable Own Address2 before set the Own Address2 configuration */
  hi2c->Instance->OAR2 &= ~I2C_DUALADDRESS_ENABLE;
 8004898:	687b      	ldr	r3, [r7, #4]
 800489a:	681b      	ldr	r3, [r3, #0]
 800489c:	68da      	ldr	r2, [r3, #12]
 800489e:	687b      	ldr	r3, [r7, #4]
 80048a0:	681b      	ldr	r3, [r3, #0]
 80048a2:	491a      	ldr	r1, [pc, #104]	; (800490c <HAL_I2C_Init+0x124>)
 80048a4:	400a      	ands	r2, r1
 80048a6:	60da      	str	r2, [r3, #12]

  /* Configure I2Cx: Dual mode and Own Address2 */
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 80048a8:	687b      	ldr	r3, [r7, #4]
 80048aa:	691a      	ldr	r2, [r3, #16]
 80048ac:	687b      	ldr	r3, [r7, #4]
 80048ae:	695b      	ldr	r3, [r3, #20]
 80048b0:	431a      	orrs	r2, r3
 80048b2:	0011      	movs	r1, r2
                          (hi2c->Init.OwnAddress2Masks << 8));
 80048b4:	687b      	ldr	r3, [r7, #4]
 80048b6:	699b      	ldr	r3, [r3, #24]
 80048b8:	021a      	lsls	r2, r3, #8
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 80048ba:	687b      	ldr	r3, [r7, #4]
 80048bc:	681b      	ldr	r3, [r3, #0]
 80048be:	430a      	orrs	r2, r1
 80048c0:	60da      	str	r2, [r3, #12]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 80048c2:	687b      	ldr	r3, [r7, #4]
 80048c4:	69d9      	ldr	r1, [r3, #28]
 80048c6:	687b      	ldr	r3, [r7, #4]
 80048c8:	6a1a      	ldr	r2, [r3, #32]
 80048ca:	687b      	ldr	r3, [r7, #4]
 80048cc:	681b      	ldr	r3, [r3, #0]
 80048ce:	430a      	orrs	r2, r1
 80048d0:	601a      	str	r2, [r3, #0]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 80048d2:	687b      	ldr	r3, [r7, #4]
 80048d4:	681b      	ldr	r3, [r3, #0]
 80048d6:	681a      	ldr	r2, [r3, #0]
 80048d8:	687b      	ldr	r3, [r7, #4]
 80048da:	681b      	ldr	r3, [r3, #0]
 80048dc:	2101      	movs	r1, #1
 80048de:	430a      	orrs	r2, r1
 80048e0:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80048e2:	687b      	ldr	r3, [r7, #4]
 80048e4:	2200      	movs	r2, #0
 80048e6:	645a      	str	r2, [r3, #68]	; 0x44
  hi2c->State = HAL_I2C_STATE_READY;
 80048e8:	687b      	ldr	r3, [r7, #4]
 80048ea:	2241      	movs	r2, #65	; 0x41
 80048ec:	2120      	movs	r1, #32
 80048ee:	5499      	strb	r1, [r3, r2]
  hi2c->PreviousState = I2C_STATE_NONE;
 80048f0:	687b      	ldr	r3, [r7, #4]
 80048f2:	2200      	movs	r2, #0
 80048f4:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 80048f6:	687b      	ldr	r3, [r7, #4]
 80048f8:	2242      	movs	r2, #66	; 0x42
 80048fa:	2100      	movs	r1, #0
 80048fc:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 80048fe:	2300      	movs	r3, #0
}
 8004900:	0018      	movs	r0, r3
 8004902:	46bd      	mov	sp, r7
 8004904:	b002      	add	sp, #8
 8004906:	bd80      	pop	{r7, pc}
 8004908:	f0ffffff 	.word	0xf0ffffff
 800490c:	ffff7fff 	.word	0xffff7fff
 8004910:	02008000 	.word	0x02008000

08004914 <HAL_I2C_Master_Transmit>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Transmit(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData,
                                          uint16_t Size, uint32_t Timeout)
{
 8004914:	b590      	push	{r4, r7, lr}
 8004916:	b089      	sub	sp, #36	; 0x24
 8004918:	af02      	add	r7, sp, #8
 800491a:	60f8      	str	r0, [r7, #12]
 800491c:	0008      	movs	r0, r1
 800491e:	607a      	str	r2, [r7, #4]
 8004920:	0019      	movs	r1, r3
 8004922:	230a      	movs	r3, #10
 8004924:	18fb      	adds	r3, r7, r3
 8004926:	1c02      	adds	r2, r0, #0
 8004928:	801a      	strh	r2, [r3, #0]
 800492a:	2308      	movs	r3, #8
 800492c:	18fb      	adds	r3, r7, r3
 800492e:	1c0a      	adds	r2, r1, #0
 8004930:	801a      	strh	r2, [r3, #0]
  uint32_t tickstart;

  if (hi2c->State == HAL_I2C_STATE_READY)
 8004932:	68fb      	ldr	r3, [r7, #12]
 8004934:	2241      	movs	r2, #65	; 0x41
 8004936:	5c9b      	ldrb	r3, [r3, r2]
 8004938:	b2db      	uxtb	r3, r3
 800493a:	2b20      	cmp	r3, #32
 800493c:	d000      	beq.n	8004940 <HAL_I2C_Master_Transmit+0x2c>
 800493e:	e0e7      	b.n	8004b10 <HAL_I2C_Master_Transmit+0x1fc>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8004940:	68fb      	ldr	r3, [r7, #12]
 8004942:	2240      	movs	r2, #64	; 0x40
 8004944:	5c9b      	ldrb	r3, [r3, r2]
 8004946:	2b01      	cmp	r3, #1
 8004948:	d101      	bne.n	800494e <HAL_I2C_Master_Transmit+0x3a>
 800494a:	2302      	movs	r3, #2
 800494c:	e0e1      	b.n	8004b12 <HAL_I2C_Master_Transmit+0x1fe>
 800494e:	68fb      	ldr	r3, [r7, #12]
 8004950:	2240      	movs	r2, #64	; 0x40
 8004952:	2101      	movs	r1, #1
 8004954:	5499      	strb	r1, [r3, r2]

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 8004956:	f7fe feb9 	bl	80036cc <HAL_GetTick>
 800495a:	0003      	movs	r3, r0
 800495c:	617b      	str	r3, [r7, #20]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 800495e:	2380      	movs	r3, #128	; 0x80
 8004960:	0219      	lsls	r1, r3, #8
 8004962:	68f8      	ldr	r0, [r7, #12]
 8004964:	697b      	ldr	r3, [r7, #20]
 8004966:	9300      	str	r3, [sp, #0]
 8004968:	2319      	movs	r3, #25
 800496a:	2201      	movs	r2, #1
 800496c:	f000 f8fc 	bl	8004b68 <I2C_WaitOnFlagUntilTimeout>
 8004970:	1e03      	subs	r3, r0, #0
 8004972:	d001      	beq.n	8004978 <HAL_I2C_Master_Transmit+0x64>
    {
      return HAL_ERROR;
 8004974:	2301      	movs	r3, #1
 8004976:	e0cc      	b.n	8004b12 <HAL_I2C_Master_Transmit+0x1fe>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 8004978:	68fb      	ldr	r3, [r7, #12]
 800497a:	2241      	movs	r2, #65	; 0x41
 800497c:	2121      	movs	r1, #33	; 0x21
 800497e:	5499      	strb	r1, [r3, r2]
    hi2c->Mode      = HAL_I2C_MODE_MASTER;
 8004980:	68fb      	ldr	r3, [r7, #12]
 8004982:	2242      	movs	r2, #66	; 0x42
 8004984:	2110      	movs	r1, #16
 8004986:	5499      	strb	r1, [r3, r2]
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8004988:	68fb      	ldr	r3, [r7, #12]
 800498a:	2200      	movs	r2, #0
 800498c:	645a      	str	r2, [r3, #68]	; 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 800498e:	68fb      	ldr	r3, [r7, #12]
 8004990:	687a      	ldr	r2, [r7, #4]
 8004992:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount = Size;
 8004994:	68fb      	ldr	r3, [r7, #12]
 8004996:	2208      	movs	r2, #8
 8004998:	18ba      	adds	r2, r7, r2
 800499a:	8812      	ldrh	r2, [r2, #0]
 800499c:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferISR   = NULL;
 800499e:	68fb      	ldr	r3, [r7, #12]
 80049a0:	2200      	movs	r2, #0
 80049a2:	635a      	str	r2, [r3, #52]	; 0x34

    /* Send Slave Address */
    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE and generate RESTART */
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 80049a4:	68fb      	ldr	r3, [r7, #12]
 80049a6:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80049a8:	b29b      	uxth	r3, r3
 80049aa:	2bff      	cmp	r3, #255	; 0xff
 80049ac:	d911      	bls.n	80049d2 <HAL_I2C_Master_Transmit+0xbe>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 80049ae:	68fb      	ldr	r3, [r7, #12]
 80049b0:	22ff      	movs	r2, #255	; 0xff
 80049b2:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 80049b4:	68fb      	ldr	r3, [r7, #12]
 80049b6:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80049b8:	b2da      	uxtb	r2, r3
 80049ba:	2380      	movs	r3, #128	; 0x80
 80049bc:	045c      	lsls	r4, r3, #17
 80049be:	230a      	movs	r3, #10
 80049c0:	18fb      	adds	r3, r7, r3
 80049c2:	8819      	ldrh	r1, [r3, #0]
 80049c4:	68f8      	ldr	r0, [r7, #12]
 80049c6:	4b55      	ldr	r3, [pc, #340]	; (8004b1c <HAL_I2C_Master_Transmit+0x208>)
 80049c8:	9300      	str	r3, [sp, #0]
 80049ca:	0023      	movs	r3, r4
 80049cc:	f000 fa86 	bl	8004edc <I2C_TransferConfig>
 80049d0:	e075      	b.n	8004abe <HAL_I2C_Master_Transmit+0x1aa>
                         I2C_GENERATE_START_WRITE);
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 80049d2:	68fb      	ldr	r3, [r7, #12]
 80049d4:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80049d6:	b29a      	uxth	r2, r3
 80049d8:	68fb      	ldr	r3, [r7, #12]
 80049da:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 80049dc:	68fb      	ldr	r3, [r7, #12]
 80049de:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80049e0:	b2da      	uxtb	r2, r3
 80049e2:	2380      	movs	r3, #128	; 0x80
 80049e4:	049c      	lsls	r4, r3, #18
 80049e6:	230a      	movs	r3, #10
 80049e8:	18fb      	adds	r3, r7, r3
 80049ea:	8819      	ldrh	r1, [r3, #0]
 80049ec:	68f8      	ldr	r0, [r7, #12]
 80049ee:	4b4b      	ldr	r3, [pc, #300]	; (8004b1c <HAL_I2C_Master_Transmit+0x208>)
 80049f0:	9300      	str	r3, [sp, #0]
 80049f2:	0023      	movs	r3, r4
 80049f4:	f000 fa72 	bl	8004edc <I2C_TransferConfig>
                         I2C_GENERATE_START_WRITE);
    }

    while (hi2c->XferCount > 0U)
 80049f8:	e061      	b.n	8004abe <HAL_I2C_Master_Transmit+0x1aa>
    {
      /* Wait until TXIS flag is set */
      if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80049fa:	697a      	ldr	r2, [r7, #20]
 80049fc:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 80049fe:	68fb      	ldr	r3, [r7, #12]
 8004a00:	0018      	movs	r0, r3
 8004a02:	f000 f8f0 	bl	8004be6 <I2C_WaitOnTXISFlagUntilTimeout>
 8004a06:	1e03      	subs	r3, r0, #0
 8004a08:	d001      	beq.n	8004a0e <HAL_I2C_Master_Transmit+0xfa>
      {
        return HAL_ERROR;
 8004a0a:	2301      	movs	r3, #1
 8004a0c:	e081      	b.n	8004b12 <HAL_I2C_Master_Transmit+0x1fe>
      }
      /* Write data to TXDR */
      hi2c->Instance->TXDR = *hi2c->pBuffPtr;
 8004a0e:	68fb      	ldr	r3, [r7, #12]
 8004a10:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004a12:	781a      	ldrb	r2, [r3, #0]
 8004a14:	68fb      	ldr	r3, [r7, #12]
 8004a16:	681b      	ldr	r3, [r3, #0]
 8004a18:	629a      	str	r2, [r3, #40]	; 0x28

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8004a1a:	68fb      	ldr	r3, [r7, #12]
 8004a1c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004a1e:	1c5a      	adds	r2, r3, #1
 8004a20:	68fb      	ldr	r3, [r7, #12]
 8004a22:	625a      	str	r2, [r3, #36]	; 0x24

      hi2c->XferCount--;
 8004a24:	68fb      	ldr	r3, [r7, #12]
 8004a26:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004a28:	b29b      	uxth	r3, r3
 8004a2a:	3b01      	subs	r3, #1
 8004a2c:	b29a      	uxth	r2, r3
 8004a2e:	68fb      	ldr	r3, [r7, #12]
 8004a30:	855a      	strh	r2, [r3, #42]	; 0x2a
      hi2c->XferSize--;
 8004a32:	68fb      	ldr	r3, [r7, #12]
 8004a34:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004a36:	3b01      	subs	r3, #1
 8004a38:	b29a      	uxth	r2, r3
 8004a3a:	68fb      	ldr	r3, [r7, #12]
 8004a3c:	851a      	strh	r2, [r3, #40]	; 0x28

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 8004a3e:	68fb      	ldr	r3, [r7, #12]
 8004a40:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004a42:	b29b      	uxth	r3, r3
 8004a44:	2b00      	cmp	r3, #0
 8004a46:	d03a      	beq.n	8004abe <HAL_I2C_Master_Transmit+0x1aa>
 8004a48:	68fb      	ldr	r3, [r7, #12]
 8004a4a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004a4c:	2b00      	cmp	r3, #0
 8004a4e:	d136      	bne.n	8004abe <HAL_I2C_Master_Transmit+0x1aa>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 8004a50:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8004a52:	68f8      	ldr	r0, [r7, #12]
 8004a54:	697b      	ldr	r3, [r7, #20]
 8004a56:	9300      	str	r3, [sp, #0]
 8004a58:	0013      	movs	r3, r2
 8004a5a:	2200      	movs	r2, #0
 8004a5c:	2180      	movs	r1, #128	; 0x80
 8004a5e:	f000 f883 	bl	8004b68 <I2C_WaitOnFlagUntilTimeout>
 8004a62:	1e03      	subs	r3, r0, #0
 8004a64:	d001      	beq.n	8004a6a <HAL_I2C_Master_Transmit+0x156>
        {
          return HAL_ERROR;
 8004a66:	2301      	movs	r3, #1
 8004a68:	e053      	b.n	8004b12 <HAL_I2C_Master_Transmit+0x1fe>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8004a6a:	68fb      	ldr	r3, [r7, #12]
 8004a6c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004a6e:	b29b      	uxth	r3, r3
 8004a70:	2bff      	cmp	r3, #255	; 0xff
 8004a72:	d911      	bls.n	8004a98 <HAL_I2C_Master_Transmit+0x184>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 8004a74:	68fb      	ldr	r3, [r7, #12]
 8004a76:	22ff      	movs	r2, #255	; 0xff
 8004a78:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 8004a7a:	68fb      	ldr	r3, [r7, #12]
 8004a7c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004a7e:	b2da      	uxtb	r2, r3
 8004a80:	2380      	movs	r3, #128	; 0x80
 8004a82:	045c      	lsls	r4, r3, #17
 8004a84:	230a      	movs	r3, #10
 8004a86:	18fb      	adds	r3, r7, r3
 8004a88:	8819      	ldrh	r1, [r3, #0]
 8004a8a:	68f8      	ldr	r0, [r7, #12]
 8004a8c:	2300      	movs	r3, #0
 8004a8e:	9300      	str	r3, [sp, #0]
 8004a90:	0023      	movs	r3, r4
 8004a92:	f000 fa23 	bl	8004edc <I2C_TransferConfig>
 8004a96:	e012      	b.n	8004abe <HAL_I2C_Master_Transmit+0x1aa>
                             I2C_NO_STARTSTOP);
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 8004a98:	68fb      	ldr	r3, [r7, #12]
 8004a9a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004a9c:	b29a      	uxth	r2, r3
 8004a9e:	68fb      	ldr	r3, [r7, #12]
 8004aa0:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 8004aa2:	68fb      	ldr	r3, [r7, #12]
 8004aa4:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004aa6:	b2da      	uxtb	r2, r3
 8004aa8:	2380      	movs	r3, #128	; 0x80
 8004aaa:	049c      	lsls	r4, r3, #18
 8004aac:	230a      	movs	r3, #10
 8004aae:	18fb      	adds	r3, r7, r3
 8004ab0:	8819      	ldrh	r1, [r3, #0]
 8004ab2:	68f8      	ldr	r0, [r7, #12]
 8004ab4:	2300      	movs	r3, #0
 8004ab6:	9300      	str	r3, [sp, #0]
 8004ab8:	0023      	movs	r3, r4
 8004aba:	f000 fa0f 	bl	8004edc <I2C_TransferConfig>
    while (hi2c->XferCount > 0U)
 8004abe:	68fb      	ldr	r3, [r7, #12]
 8004ac0:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004ac2:	b29b      	uxth	r3, r3
 8004ac4:	2b00      	cmp	r3, #0
 8004ac6:	d198      	bne.n	80049fa <HAL_I2C_Master_Transmit+0xe6>
      }
    }

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is set */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8004ac8:	697a      	ldr	r2, [r7, #20]
 8004aca:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8004acc:	68fb      	ldr	r3, [r7, #12]
 8004ace:	0018      	movs	r0, r3
 8004ad0:	f000 f8c8 	bl	8004c64 <I2C_WaitOnSTOPFlagUntilTimeout>
 8004ad4:	1e03      	subs	r3, r0, #0
 8004ad6:	d001      	beq.n	8004adc <HAL_I2C_Master_Transmit+0x1c8>
    {
      return HAL_ERROR;
 8004ad8:	2301      	movs	r3, #1
 8004ada:	e01a      	b.n	8004b12 <HAL_I2C_Master_Transmit+0x1fe>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8004adc:	68fb      	ldr	r3, [r7, #12]
 8004ade:	681b      	ldr	r3, [r3, #0]
 8004ae0:	2220      	movs	r2, #32
 8004ae2:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 8004ae4:	68fb      	ldr	r3, [r7, #12]
 8004ae6:	681b      	ldr	r3, [r3, #0]
 8004ae8:	685a      	ldr	r2, [r3, #4]
 8004aea:	68fb      	ldr	r3, [r7, #12]
 8004aec:	681b      	ldr	r3, [r3, #0]
 8004aee:	490c      	ldr	r1, [pc, #48]	; (8004b20 <HAL_I2C_Master_Transmit+0x20c>)
 8004af0:	400a      	ands	r2, r1
 8004af2:	605a      	str	r2, [r3, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 8004af4:	68fb      	ldr	r3, [r7, #12]
 8004af6:	2241      	movs	r2, #65	; 0x41
 8004af8:	2120      	movs	r1, #32
 8004afa:	5499      	strb	r1, [r3, r2]
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 8004afc:	68fb      	ldr	r3, [r7, #12]
 8004afe:	2242      	movs	r2, #66	; 0x42
 8004b00:	2100      	movs	r1, #0
 8004b02:	5499      	strb	r1, [r3, r2]

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8004b04:	68fb      	ldr	r3, [r7, #12]
 8004b06:	2240      	movs	r2, #64	; 0x40
 8004b08:	2100      	movs	r1, #0
 8004b0a:	5499      	strb	r1, [r3, r2]

    return HAL_OK;
 8004b0c:	2300      	movs	r3, #0
 8004b0e:	e000      	b.n	8004b12 <HAL_I2C_Master_Transmit+0x1fe>
  }
  else
  {
    return HAL_BUSY;
 8004b10:	2302      	movs	r3, #2
  }
}
 8004b12:	0018      	movs	r0, r3
 8004b14:	46bd      	mov	sp, r7
 8004b16:	b007      	add	sp, #28
 8004b18:	bd90      	pop	{r4, r7, pc}
 8004b1a:	46c0      	nop			; (mov r8, r8)
 8004b1c:	80002000 	.word	0x80002000
 8004b20:	fe00e800 	.word	0xfe00e800

08004b24 <I2C_Flush_TXDR>:
  * @brief  I2C Tx data register flush process.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_Flush_TXDR(I2C_HandleTypeDef *hi2c)
{
 8004b24:	b580      	push	{r7, lr}
 8004b26:	b082      	sub	sp, #8
 8004b28:	af00      	add	r7, sp, #0
 8004b2a:	6078      	str	r0, [r7, #4]
  /* If a pending TXIS flag is set */
  /* Write a dummy data in TXDR to clear it */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) != RESET)
 8004b2c:	687b      	ldr	r3, [r7, #4]
 8004b2e:	681b      	ldr	r3, [r3, #0]
 8004b30:	699b      	ldr	r3, [r3, #24]
 8004b32:	2202      	movs	r2, #2
 8004b34:	4013      	ands	r3, r2
 8004b36:	2b02      	cmp	r3, #2
 8004b38:	d103      	bne.n	8004b42 <I2C_Flush_TXDR+0x1e>
  {
    hi2c->Instance->TXDR = 0x00U;
 8004b3a:	687b      	ldr	r3, [r7, #4]
 8004b3c:	681b      	ldr	r3, [r3, #0]
 8004b3e:	2200      	movs	r2, #0
 8004b40:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /* Flush TX register if not empty */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8004b42:	687b      	ldr	r3, [r7, #4]
 8004b44:	681b      	ldr	r3, [r3, #0]
 8004b46:	699b      	ldr	r3, [r3, #24]
 8004b48:	2201      	movs	r2, #1
 8004b4a:	4013      	ands	r3, r2
 8004b4c:	2b01      	cmp	r3, #1
 8004b4e:	d007      	beq.n	8004b60 <I2C_Flush_TXDR+0x3c>
  {
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_TXE);
 8004b50:	687b      	ldr	r3, [r7, #4]
 8004b52:	681b      	ldr	r3, [r3, #0]
 8004b54:	699a      	ldr	r2, [r3, #24]
 8004b56:	687b      	ldr	r3, [r7, #4]
 8004b58:	681b      	ldr	r3, [r3, #0]
 8004b5a:	2101      	movs	r1, #1
 8004b5c:	430a      	orrs	r2, r1
 8004b5e:	619a      	str	r2, [r3, #24]
  }
}
 8004b60:	46c0      	nop			; (mov r8, r8)
 8004b62:	46bd      	mov	sp, r7
 8004b64:	b002      	add	sp, #8
 8004b66:	bd80      	pop	{r7, pc}

08004b68 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status,
                                                    uint32_t Timeout, uint32_t Tickstart)
{
 8004b68:	b580      	push	{r7, lr}
 8004b6a:	b084      	sub	sp, #16
 8004b6c:	af00      	add	r7, sp, #0
 8004b6e:	60f8      	str	r0, [r7, #12]
 8004b70:	60b9      	str	r1, [r7, #8]
 8004b72:	603b      	str	r3, [r7, #0]
 8004b74:	1dfb      	adds	r3, r7, #7
 8004b76:	701a      	strb	r2, [r3, #0]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8004b78:	e021      	b.n	8004bbe <I2C_WaitOnFlagUntilTimeout+0x56>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8004b7a:	683b      	ldr	r3, [r7, #0]
 8004b7c:	3301      	adds	r3, #1
 8004b7e:	d01e      	beq.n	8004bbe <I2C_WaitOnFlagUntilTimeout+0x56>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8004b80:	f7fe fda4 	bl	80036cc <HAL_GetTick>
 8004b84:	0002      	movs	r2, r0
 8004b86:	69bb      	ldr	r3, [r7, #24]
 8004b88:	1ad3      	subs	r3, r2, r3
 8004b8a:	683a      	ldr	r2, [r7, #0]
 8004b8c:	429a      	cmp	r2, r3
 8004b8e:	d302      	bcc.n	8004b96 <I2C_WaitOnFlagUntilTimeout+0x2e>
 8004b90:	683b      	ldr	r3, [r7, #0]
 8004b92:	2b00      	cmp	r3, #0
 8004b94:	d113      	bne.n	8004bbe <I2C_WaitOnFlagUntilTimeout+0x56>
      {
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8004b96:	68fb      	ldr	r3, [r7, #12]
 8004b98:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004b9a:	2220      	movs	r2, #32
 8004b9c:	431a      	orrs	r2, r3
 8004b9e:	68fb      	ldr	r3, [r7, #12]
 8004ba0:	645a      	str	r2, [r3, #68]	; 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 8004ba2:	68fb      	ldr	r3, [r7, #12]
 8004ba4:	2241      	movs	r2, #65	; 0x41
 8004ba6:	2120      	movs	r1, #32
 8004ba8:	5499      	strb	r1, [r3, r2]
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8004baa:	68fb      	ldr	r3, [r7, #12]
 8004bac:	2242      	movs	r2, #66	; 0x42
 8004bae:	2100      	movs	r1, #0
 8004bb0:	5499      	strb	r1, [r3, r2]

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8004bb2:	68fb      	ldr	r3, [r7, #12]
 8004bb4:	2240      	movs	r2, #64	; 0x40
 8004bb6:	2100      	movs	r1, #0
 8004bb8:	5499      	strb	r1, [r3, r2]
        return HAL_ERROR;
 8004bba:	2301      	movs	r3, #1
 8004bbc:	e00f      	b.n	8004bde <I2C_WaitOnFlagUntilTimeout+0x76>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8004bbe:	68fb      	ldr	r3, [r7, #12]
 8004bc0:	681b      	ldr	r3, [r3, #0]
 8004bc2:	699b      	ldr	r3, [r3, #24]
 8004bc4:	68ba      	ldr	r2, [r7, #8]
 8004bc6:	4013      	ands	r3, r2
 8004bc8:	68ba      	ldr	r2, [r7, #8]
 8004bca:	1ad3      	subs	r3, r2, r3
 8004bcc:	425a      	negs	r2, r3
 8004bce:	4153      	adcs	r3, r2
 8004bd0:	b2db      	uxtb	r3, r3
 8004bd2:	001a      	movs	r2, r3
 8004bd4:	1dfb      	adds	r3, r7, #7
 8004bd6:	781b      	ldrb	r3, [r3, #0]
 8004bd8:	429a      	cmp	r2, r3
 8004bda:	d0ce      	beq.n	8004b7a <I2C_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8004bdc:	2300      	movs	r3, #0
}
 8004bde:	0018      	movs	r0, r3
 8004be0:	46bd      	mov	sp, r7
 8004be2:	b004      	add	sp, #16
 8004be4:	bd80      	pop	{r7, pc}

08004be6 <I2C_WaitOnTXISFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXISFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 8004be6:	b580      	push	{r7, lr}
 8004be8:	b084      	sub	sp, #16
 8004bea:	af00      	add	r7, sp, #0
 8004bec:	60f8      	str	r0, [r7, #12]
 8004bee:	60b9      	str	r1, [r7, #8]
 8004bf0:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 8004bf2:	e02b      	b.n	8004c4c <I2C_WaitOnTXISFlagUntilTimeout+0x66>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 8004bf4:	687a      	ldr	r2, [r7, #4]
 8004bf6:	68b9      	ldr	r1, [r7, #8]
 8004bf8:	68fb      	ldr	r3, [r7, #12]
 8004bfa:	0018      	movs	r0, r3
 8004bfc:	f000 f86e 	bl	8004cdc <I2C_IsErrorOccurred>
 8004c00:	1e03      	subs	r3, r0, #0
 8004c02:	d001      	beq.n	8004c08 <I2C_WaitOnTXISFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 8004c04:	2301      	movs	r3, #1
 8004c06:	e029      	b.n	8004c5c <I2C_WaitOnTXISFlagUntilTimeout+0x76>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8004c08:	68bb      	ldr	r3, [r7, #8]
 8004c0a:	3301      	adds	r3, #1
 8004c0c:	d01e      	beq.n	8004c4c <I2C_WaitOnTXISFlagUntilTimeout+0x66>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8004c0e:	f7fe fd5d 	bl	80036cc <HAL_GetTick>
 8004c12:	0002      	movs	r2, r0
 8004c14:	687b      	ldr	r3, [r7, #4]
 8004c16:	1ad3      	subs	r3, r2, r3
 8004c18:	68ba      	ldr	r2, [r7, #8]
 8004c1a:	429a      	cmp	r2, r3
 8004c1c:	d302      	bcc.n	8004c24 <I2C_WaitOnTXISFlagUntilTimeout+0x3e>
 8004c1e:	68bb      	ldr	r3, [r7, #8]
 8004c20:	2b00      	cmp	r3, #0
 8004c22:	d113      	bne.n	8004c4c <I2C_WaitOnTXISFlagUntilTimeout+0x66>
      {
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8004c24:	68fb      	ldr	r3, [r7, #12]
 8004c26:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004c28:	2220      	movs	r2, #32
 8004c2a:	431a      	orrs	r2, r3
 8004c2c:	68fb      	ldr	r3, [r7, #12]
 8004c2e:	645a      	str	r2, [r3, #68]	; 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 8004c30:	68fb      	ldr	r3, [r7, #12]
 8004c32:	2241      	movs	r2, #65	; 0x41
 8004c34:	2120      	movs	r1, #32
 8004c36:	5499      	strb	r1, [r3, r2]
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8004c38:	68fb      	ldr	r3, [r7, #12]
 8004c3a:	2242      	movs	r2, #66	; 0x42
 8004c3c:	2100      	movs	r1, #0
 8004c3e:	5499      	strb	r1, [r3, r2]

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8004c40:	68fb      	ldr	r3, [r7, #12]
 8004c42:	2240      	movs	r2, #64	; 0x40
 8004c44:	2100      	movs	r1, #0
 8004c46:	5499      	strb	r1, [r3, r2]

        return HAL_ERROR;
 8004c48:	2301      	movs	r3, #1
 8004c4a:	e007      	b.n	8004c5c <I2C_WaitOnTXISFlagUntilTimeout+0x76>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 8004c4c:	68fb      	ldr	r3, [r7, #12]
 8004c4e:	681b      	ldr	r3, [r3, #0]
 8004c50:	699b      	ldr	r3, [r3, #24]
 8004c52:	2202      	movs	r2, #2
 8004c54:	4013      	ands	r3, r2
 8004c56:	2b02      	cmp	r3, #2
 8004c58:	d1cc      	bne.n	8004bf4 <I2C_WaitOnTXISFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8004c5a:	2300      	movs	r3, #0
}
 8004c5c:	0018      	movs	r0, r3
 8004c5e:	46bd      	mov	sp, r7
 8004c60:	b004      	add	sp, #16
 8004c62:	bd80      	pop	{r7, pc}

08004c64 <I2C_WaitOnSTOPFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnSTOPFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 8004c64:	b580      	push	{r7, lr}
 8004c66:	b084      	sub	sp, #16
 8004c68:	af00      	add	r7, sp, #0
 8004c6a:	60f8      	str	r0, [r7, #12]
 8004c6c:	60b9      	str	r1, [r7, #8]
 8004c6e:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8004c70:	e028      	b.n	8004cc4 <I2C_WaitOnSTOPFlagUntilTimeout+0x60>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 8004c72:	687a      	ldr	r2, [r7, #4]
 8004c74:	68b9      	ldr	r1, [r7, #8]
 8004c76:	68fb      	ldr	r3, [r7, #12]
 8004c78:	0018      	movs	r0, r3
 8004c7a:	f000 f82f 	bl	8004cdc <I2C_IsErrorOccurred>
 8004c7e:	1e03      	subs	r3, r0, #0
 8004c80:	d001      	beq.n	8004c86 <I2C_WaitOnSTOPFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 8004c82:	2301      	movs	r3, #1
 8004c84:	e026      	b.n	8004cd4 <I2C_WaitOnSTOPFlagUntilTimeout+0x70>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8004c86:	f7fe fd21 	bl	80036cc <HAL_GetTick>
 8004c8a:	0002      	movs	r2, r0
 8004c8c:	687b      	ldr	r3, [r7, #4]
 8004c8e:	1ad3      	subs	r3, r2, r3
 8004c90:	68ba      	ldr	r2, [r7, #8]
 8004c92:	429a      	cmp	r2, r3
 8004c94:	d302      	bcc.n	8004c9c <I2C_WaitOnSTOPFlagUntilTimeout+0x38>
 8004c96:	68bb      	ldr	r3, [r7, #8]
 8004c98:	2b00      	cmp	r3, #0
 8004c9a:	d113      	bne.n	8004cc4 <I2C_WaitOnSTOPFlagUntilTimeout+0x60>
    {
      hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8004c9c:	68fb      	ldr	r3, [r7, #12]
 8004c9e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004ca0:	2220      	movs	r2, #32
 8004ca2:	431a      	orrs	r2, r3
 8004ca4:	68fb      	ldr	r3, [r7, #12]
 8004ca6:	645a      	str	r2, [r3, #68]	; 0x44
      hi2c->State = HAL_I2C_STATE_READY;
 8004ca8:	68fb      	ldr	r3, [r7, #12]
 8004caa:	2241      	movs	r2, #65	; 0x41
 8004cac:	2120      	movs	r1, #32
 8004cae:	5499      	strb	r1, [r3, r2]
      hi2c->Mode = HAL_I2C_MODE_NONE;
 8004cb0:	68fb      	ldr	r3, [r7, #12]
 8004cb2:	2242      	movs	r2, #66	; 0x42
 8004cb4:	2100      	movs	r1, #0
 8004cb6:	5499      	strb	r1, [r3, r2]

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8004cb8:	68fb      	ldr	r3, [r7, #12]
 8004cba:	2240      	movs	r2, #64	; 0x40
 8004cbc:	2100      	movs	r1, #0
 8004cbe:	5499      	strb	r1, [r3, r2]

      return HAL_ERROR;
 8004cc0:	2301      	movs	r3, #1
 8004cc2:	e007      	b.n	8004cd4 <I2C_WaitOnSTOPFlagUntilTimeout+0x70>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8004cc4:	68fb      	ldr	r3, [r7, #12]
 8004cc6:	681b      	ldr	r3, [r3, #0]
 8004cc8:	699b      	ldr	r3, [r3, #24]
 8004cca:	2220      	movs	r2, #32
 8004ccc:	4013      	ands	r3, r2
 8004cce:	2b20      	cmp	r3, #32
 8004cd0:	d1cf      	bne.n	8004c72 <I2C_WaitOnSTOPFlagUntilTimeout+0xe>
    }
  }
  return HAL_OK;
 8004cd2:	2300      	movs	r3, #0
}
 8004cd4:	0018      	movs	r0, r3
 8004cd6:	46bd      	mov	sp, r7
 8004cd8:	b004      	add	sp, #16
 8004cda:	bd80      	pop	{r7, pc}

08004cdc <I2C_IsErrorOccurred>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsErrorOccurred(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8004cdc:	b590      	push	{r4, r7, lr}
 8004cde:	b08b      	sub	sp, #44	; 0x2c
 8004ce0:	af00      	add	r7, sp, #0
 8004ce2:	60f8      	str	r0, [r7, #12]
 8004ce4:	60b9      	str	r1, [r7, #8]
 8004ce6:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8004ce8:	2327      	movs	r3, #39	; 0x27
 8004cea:	18fb      	adds	r3, r7, r3
 8004cec:	2200      	movs	r2, #0
 8004cee:	701a      	strb	r2, [r3, #0]
  uint32_t itflag   = hi2c->Instance->ISR;
 8004cf0:	68fb      	ldr	r3, [r7, #12]
 8004cf2:	681b      	ldr	r3, [r3, #0]
 8004cf4:	699b      	ldr	r3, [r3, #24]
 8004cf6:	61bb      	str	r3, [r7, #24]
  uint32_t error_code = 0;
 8004cf8:	2300      	movs	r3, #0
 8004cfa:	623b      	str	r3, [r7, #32]
  uint32_t tickstart = Tickstart;
 8004cfc:	687b      	ldr	r3, [r7, #4]
 8004cfe:	61fb      	str	r3, [r7, #28]
  uint32_t tmp1;
  HAL_I2C_ModeTypeDef tmp2;

  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_AF))
 8004d00:	69bb      	ldr	r3, [r7, #24]
 8004d02:	2210      	movs	r2, #16
 8004d04:	4013      	ands	r3, r2
 8004d06:	d100      	bne.n	8004d0a <I2C_IsErrorOccurred+0x2e>
 8004d08:	e082      	b.n	8004e10 <I2C_IsErrorOccurred+0x134>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8004d0a:	68fb      	ldr	r3, [r7, #12]
 8004d0c:	681b      	ldr	r3, [r3, #0]
 8004d0e:	2210      	movs	r2, #16
 8004d10:	61da      	str	r2, [r3, #28]

    /* Wait until STOP Flag is set or timeout occurred */
    /* AutoEnd should be initiate after AF */
    while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET) && (status == HAL_OK))
 8004d12:	e060      	b.n	8004dd6 <I2C_IsErrorOccurred+0xfa>
 8004d14:	2427      	movs	r4, #39	; 0x27
 8004d16:	193b      	adds	r3, r7, r4
 8004d18:	193a      	adds	r2, r7, r4
 8004d1a:	7812      	ldrb	r2, [r2, #0]
 8004d1c:	701a      	strb	r2, [r3, #0]
    {
      /* Check for the Timeout */
      if (Timeout != HAL_MAX_DELAY)
 8004d1e:	68bb      	ldr	r3, [r7, #8]
 8004d20:	3301      	adds	r3, #1
 8004d22:	d058      	beq.n	8004dd6 <I2C_IsErrorOccurred+0xfa>
      {
        if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0U))
 8004d24:	f7fe fcd2 	bl	80036cc <HAL_GetTick>
 8004d28:	0002      	movs	r2, r0
 8004d2a:	69fb      	ldr	r3, [r7, #28]
 8004d2c:	1ad3      	subs	r3, r2, r3
 8004d2e:	68ba      	ldr	r2, [r7, #8]
 8004d30:	429a      	cmp	r2, r3
 8004d32:	d306      	bcc.n	8004d42 <I2C_IsErrorOccurred+0x66>
 8004d34:	193b      	adds	r3, r7, r4
 8004d36:	193a      	adds	r2, r7, r4
 8004d38:	7812      	ldrb	r2, [r2, #0]
 8004d3a:	701a      	strb	r2, [r3, #0]
 8004d3c:	68bb      	ldr	r3, [r7, #8]
 8004d3e:	2b00      	cmp	r3, #0
 8004d40:	d149      	bne.n	8004dd6 <I2C_IsErrorOccurred+0xfa>
        {
          tmp1 = (uint32_t)(hi2c->Instance->CR2 & I2C_CR2_STOP);
 8004d42:	68fb      	ldr	r3, [r7, #12]
 8004d44:	681b      	ldr	r3, [r3, #0]
 8004d46:	685a      	ldr	r2, [r3, #4]
 8004d48:	2380      	movs	r3, #128	; 0x80
 8004d4a:	01db      	lsls	r3, r3, #7
 8004d4c:	4013      	ands	r3, r2
 8004d4e:	617b      	str	r3, [r7, #20]
          tmp2 = hi2c->Mode;
 8004d50:	2013      	movs	r0, #19
 8004d52:	183b      	adds	r3, r7, r0
 8004d54:	68fa      	ldr	r2, [r7, #12]
 8004d56:	2142      	movs	r1, #66	; 0x42
 8004d58:	5c52      	ldrb	r2, [r2, r1]
 8004d5a:	701a      	strb	r2, [r3, #0]

          /* In case of I2C still busy, try to regenerate a STOP manually */
          if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BUSY) != RESET) && \
 8004d5c:	68fb      	ldr	r3, [r7, #12]
 8004d5e:	681b      	ldr	r3, [r3, #0]
 8004d60:	699a      	ldr	r2, [r3, #24]
 8004d62:	2380      	movs	r3, #128	; 0x80
 8004d64:	021b      	lsls	r3, r3, #8
 8004d66:	401a      	ands	r2, r3
 8004d68:	2380      	movs	r3, #128	; 0x80
 8004d6a:	021b      	lsls	r3, r3, #8
 8004d6c:	429a      	cmp	r2, r3
 8004d6e:	d126      	bne.n	8004dbe <I2C_IsErrorOccurred+0xe2>
 8004d70:	697a      	ldr	r2, [r7, #20]
 8004d72:	2380      	movs	r3, #128	; 0x80
 8004d74:	01db      	lsls	r3, r3, #7
 8004d76:	429a      	cmp	r2, r3
 8004d78:	d021      	beq.n	8004dbe <I2C_IsErrorOccurred+0xe2>
              (tmp1 != I2C_CR2_STOP) && \
 8004d7a:	183b      	adds	r3, r7, r0
 8004d7c:	781b      	ldrb	r3, [r3, #0]
 8004d7e:	2b20      	cmp	r3, #32
 8004d80:	d01d      	beq.n	8004dbe <I2C_IsErrorOccurred+0xe2>
              (tmp2 != HAL_I2C_MODE_SLAVE))
          {
            /* Generate Stop */
            hi2c->Instance->CR2 |= I2C_CR2_STOP;
 8004d82:	68fb      	ldr	r3, [r7, #12]
 8004d84:	681b      	ldr	r3, [r3, #0]
 8004d86:	685a      	ldr	r2, [r3, #4]
 8004d88:	68fb      	ldr	r3, [r7, #12]
 8004d8a:	681b      	ldr	r3, [r3, #0]
 8004d8c:	2180      	movs	r1, #128	; 0x80
 8004d8e:	01c9      	lsls	r1, r1, #7
 8004d90:	430a      	orrs	r2, r1
 8004d92:	605a      	str	r2, [r3, #4]

            /* Update Tick with new reference */
            tickstart = HAL_GetTick();
 8004d94:	f7fe fc9a 	bl	80036cc <HAL_GetTick>
 8004d98:	0003      	movs	r3, r0
 8004d9a:	61fb      	str	r3, [r7, #28]
          }

          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8004d9c:	e00f      	b.n	8004dbe <I2C_IsErrorOccurred+0xe2>
          {
            /* Check for the Timeout */
            if ((HAL_GetTick() - tickstart) > I2C_TIMEOUT_STOPF)
 8004d9e:	f7fe fc95 	bl	80036cc <HAL_GetTick>
 8004da2:	0002      	movs	r2, r0
 8004da4:	69fb      	ldr	r3, [r7, #28]
 8004da6:	1ad3      	subs	r3, r2, r3
 8004da8:	2b19      	cmp	r3, #25
 8004daa:	d908      	bls.n	8004dbe <I2C_IsErrorOccurred+0xe2>
            {
              error_code |=HAL_I2C_ERROR_TIMEOUT;
 8004dac:	6a3b      	ldr	r3, [r7, #32]
 8004dae:	2220      	movs	r2, #32
 8004db0:	4313      	orrs	r3, r2
 8004db2:	623b      	str	r3, [r7, #32]

              status = HAL_ERROR;
 8004db4:	2327      	movs	r3, #39	; 0x27
 8004db6:	18fb      	adds	r3, r7, r3
 8004db8:	2201      	movs	r2, #1
 8004dba:	701a      	strb	r2, [r3, #0]

              break;
 8004dbc:	e00b      	b.n	8004dd6 <I2C_IsErrorOccurred+0xfa>
          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8004dbe:	68fb      	ldr	r3, [r7, #12]
 8004dc0:	681b      	ldr	r3, [r3, #0]
 8004dc2:	699b      	ldr	r3, [r3, #24]
 8004dc4:	2220      	movs	r2, #32
 8004dc6:	4013      	ands	r3, r2
 8004dc8:	2127      	movs	r1, #39	; 0x27
 8004dca:	187a      	adds	r2, r7, r1
 8004dcc:	1879      	adds	r1, r7, r1
 8004dce:	7809      	ldrb	r1, [r1, #0]
 8004dd0:	7011      	strb	r1, [r2, #0]
 8004dd2:	2b20      	cmp	r3, #32
 8004dd4:	d1e3      	bne.n	8004d9e <I2C_IsErrorOccurred+0xc2>
    while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET) && (status == HAL_OK))
 8004dd6:	68fb      	ldr	r3, [r7, #12]
 8004dd8:	681b      	ldr	r3, [r3, #0]
 8004dda:	699b      	ldr	r3, [r3, #24]
 8004ddc:	2220      	movs	r2, #32
 8004dde:	4013      	ands	r3, r2
 8004de0:	2b20      	cmp	r3, #32
 8004de2:	d004      	beq.n	8004dee <I2C_IsErrorOccurred+0x112>
 8004de4:	2327      	movs	r3, #39	; 0x27
 8004de6:	18fb      	adds	r3, r7, r3
 8004de8:	781b      	ldrb	r3, [r3, #0]
 8004dea:	2b00      	cmp	r3, #0
 8004dec:	d092      	beq.n	8004d14 <I2C_IsErrorOccurred+0x38>
        }
      }
    }

    /* In case STOP Flag is detected, clear it */
    if (status == HAL_OK)
 8004dee:	2327      	movs	r3, #39	; 0x27
 8004df0:	18fb      	adds	r3, r7, r3
 8004df2:	781b      	ldrb	r3, [r3, #0]
 8004df4:	2b00      	cmp	r3, #0
 8004df6:	d103      	bne.n	8004e00 <I2C_IsErrorOccurred+0x124>
    {
      /* Clear STOP Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8004df8:	68fb      	ldr	r3, [r7, #12]
 8004dfa:	681b      	ldr	r3, [r3, #0]
 8004dfc:	2220      	movs	r2, #32
 8004dfe:	61da      	str	r2, [r3, #28]
    }

    error_code |= HAL_I2C_ERROR_AF;
 8004e00:	6a3b      	ldr	r3, [r7, #32]
 8004e02:	2204      	movs	r2, #4
 8004e04:	4313      	orrs	r3, r2
 8004e06:	623b      	str	r3, [r7, #32]

    status = HAL_ERROR;
 8004e08:	2327      	movs	r3, #39	; 0x27
 8004e0a:	18fb      	adds	r3, r7, r3
 8004e0c:	2201      	movs	r2, #1
 8004e0e:	701a      	strb	r2, [r3, #0]
  }

  /* Refresh Content of Status register */
  itflag = hi2c->Instance->ISR;
 8004e10:	68fb      	ldr	r3, [r7, #12]
 8004e12:	681b      	ldr	r3, [r3, #0]
 8004e14:	699b      	ldr	r3, [r3, #24]
 8004e16:	61bb      	str	r3, [r7, #24]

  /* Then verify if an additional errors occurs */
  /* Check if a Bus error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_BERR))
 8004e18:	69ba      	ldr	r2, [r7, #24]
 8004e1a:	2380      	movs	r3, #128	; 0x80
 8004e1c:	005b      	lsls	r3, r3, #1
 8004e1e:	4013      	ands	r3, r2
 8004e20:	d00c      	beq.n	8004e3c <I2C_IsErrorOccurred+0x160>
  {
    error_code |= HAL_I2C_ERROR_BERR;
 8004e22:	6a3b      	ldr	r3, [r7, #32]
 8004e24:	2201      	movs	r2, #1
 8004e26:	4313      	orrs	r3, r2
 8004e28:	623b      	str	r3, [r7, #32]

    /* Clear BERR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_BERR);
 8004e2a:	68fb      	ldr	r3, [r7, #12]
 8004e2c:	681b      	ldr	r3, [r3, #0]
 8004e2e:	2280      	movs	r2, #128	; 0x80
 8004e30:	0052      	lsls	r2, r2, #1
 8004e32:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 8004e34:	2327      	movs	r3, #39	; 0x27
 8004e36:	18fb      	adds	r3, r7, r3
 8004e38:	2201      	movs	r2, #1
 8004e3a:	701a      	strb	r2, [r3, #0]
  }

  /* Check if an Over-Run/Under-Run error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_OVR))
 8004e3c:	69ba      	ldr	r2, [r7, #24]
 8004e3e:	2380      	movs	r3, #128	; 0x80
 8004e40:	00db      	lsls	r3, r3, #3
 8004e42:	4013      	ands	r3, r2
 8004e44:	d00c      	beq.n	8004e60 <I2C_IsErrorOccurred+0x184>
  {
    error_code |= HAL_I2C_ERROR_OVR;
 8004e46:	6a3b      	ldr	r3, [r7, #32]
 8004e48:	2208      	movs	r2, #8
 8004e4a:	4313      	orrs	r3, r2
 8004e4c:	623b      	str	r3, [r7, #32]

    /* Clear OVR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_OVR);
 8004e4e:	68fb      	ldr	r3, [r7, #12]
 8004e50:	681b      	ldr	r3, [r3, #0]
 8004e52:	2280      	movs	r2, #128	; 0x80
 8004e54:	00d2      	lsls	r2, r2, #3
 8004e56:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 8004e58:	2327      	movs	r3, #39	; 0x27
 8004e5a:	18fb      	adds	r3, r7, r3
 8004e5c:	2201      	movs	r2, #1
 8004e5e:	701a      	strb	r2, [r3, #0]
  }

  /* Check if an Arbitration Loss error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_ARLO))
 8004e60:	69ba      	ldr	r2, [r7, #24]
 8004e62:	2380      	movs	r3, #128	; 0x80
 8004e64:	009b      	lsls	r3, r3, #2
 8004e66:	4013      	ands	r3, r2
 8004e68:	d00c      	beq.n	8004e84 <I2C_IsErrorOccurred+0x1a8>
  {
    error_code |= HAL_I2C_ERROR_ARLO;
 8004e6a:	6a3b      	ldr	r3, [r7, #32]
 8004e6c:	2202      	movs	r2, #2
 8004e6e:	4313      	orrs	r3, r2
 8004e70:	623b      	str	r3, [r7, #32]

    /* Clear ARLO flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ARLO);
 8004e72:	68fb      	ldr	r3, [r7, #12]
 8004e74:	681b      	ldr	r3, [r3, #0]
 8004e76:	2280      	movs	r2, #128	; 0x80
 8004e78:	0092      	lsls	r2, r2, #2
 8004e7a:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 8004e7c:	2327      	movs	r3, #39	; 0x27
 8004e7e:	18fb      	adds	r3, r7, r3
 8004e80:	2201      	movs	r2, #1
 8004e82:	701a      	strb	r2, [r3, #0]
  }

  if (status != HAL_OK)
 8004e84:	2327      	movs	r3, #39	; 0x27
 8004e86:	18fb      	adds	r3, r7, r3
 8004e88:	781b      	ldrb	r3, [r3, #0]
 8004e8a:	2b00      	cmp	r3, #0
 8004e8c:	d01d      	beq.n	8004eca <I2C_IsErrorOccurred+0x1ee>
  {
    /* Flush TX register */
    I2C_Flush_TXDR(hi2c);
 8004e8e:	68fb      	ldr	r3, [r7, #12]
 8004e90:	0018      	movs	r0, r3
 8004e92:	f7ff fe47 	bl	8004b24 <I2C_Flush_TXDR>

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 8004e96:	68fb      	ldr	r3, [r7, #12]
 8004e98:	681b      	ldr	r3, [r3, #0]
 8004e9a:	685a      	ldr	r2, [r3, #4]
 8004e9c:	68fb      	ldr	r3, [r7, #12]
 8004e9e:	681b      	ldr	r3, [r3, #0]
 8004ea0:	490d      	ldr	r1, [pc, #52]	; (8004ed8 <I2C_IsErrorOccurred+0x1fc>)
 8004ea2:	400a      	ands	r2, r1
 8004ea4:	605a      	str	r2, [r3, #4]

    hi2c->ErrorCode |= error_code;
 8004ea6:	68fb      	ldr	r3, [r7, #12]
 8004ea8:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8004eaa:	6a3b      	ldr	r3, [r7, #32]
 8004eac:	431a      	orrs	r2, r3
 8004eae:	68fb      	ldr	r3, [r7, #12]
 8004eb0:	645a      	str	r2, [r3, #68]	; 0x44
    hi2c->State = HAL_I2C_STATE_READY;
 8004eb2:	68fb      	ldr	r3, [r7, #12]
 8004eb4:	2241      	movs	r2, #65	; 0x41
 8004eb6:	2120      	movs	r1, #32
 8004eb8:	5499      	strb	r1, [r3, r2]
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8004eba:	68fb      	ldr	r3, [r7, #12]
 8004ebc:	2242      	movs	r2, #66	; 0x42
 8004ebe:	2100      	movs	r1, #0
 8004ec0:	5499      	strb	r1, [r3, r2]

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8004ec2:	68fb      	ldr	r3, [r7, #12]
 8004ec4:	2240      	movs	r2, #64	; 0x40
 8004ec6:	2100      	movs	r1, #0
 8004ec8:	5499      	strb	r1, [r3, r2]
  }

  return status;
 8004eca:	2327      	movs	r3, #39	; 0x27
 8004ecc:	18fb      	adds	r3, r7, r3
 8004ece:	781b      	ldrb	r3, [r3, #0]
}
 8004ed0:	0018      	movs	r0, r3
 8004ed2:	46bd      	mov	sp, r7
 8004ed4:	b00b      	add	sp, #44	; 0x2c
 8004ed6:	bd90      	pop	{r4, r7, pc}
 8004ed8:	fe00e800 	.word	0xfe00e800

08004edc <I2C_TransferConfig>:
  *     @arg @ref I2C_GENERATE_START_WRITE Generate Restart for write request.
  * @retval None
  */
static void I2C_TransferConfig(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t Size, uint32_t Mode,
                               uint32_t Request)
{
 8004edc:	b590      	push	{r4, r7, lr}
 8004ede:	b087      	sub	sp, #28
 8004ee0:	af00      	add	r7, sp, #0
 8004ee2:	60f8      	str	r0, [r7, #12]
 8004ee4:	0008      	movs	r0, r1
 8004ee6:	0011      	movs	r1, r2
 8004ee8:	607b      	str	r3, [r7, #4]
 8004eea:	240a      	movs	r4, #10
 8004eec:	193b      	adds	r3, r7, r4
 8004eee:	1c02      	adds	r2, r0, #0
 8004ef0:	801a      	strh	r2, [r3, #0]
 8004ef2:	2009      	movs	r0, #9
 8004ef4:	183b      	adds	r3, r7, r0
 8004ef6:	1c0a      	adds	r2, r1, #0
 8004ef8:	701a      	strb	r2, [r3, #0]
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_TRANSFER_MODE(Mode));
  assert_param(IS_TRANSFER_REQUEST(Request));

  /* Declaration of tmp to prevent undefined behavior of volatile usage */
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 8004efa:	193b      	adds	r3, r7, r4
 8004efc:	881b      	ldrh	r3, [r3, #0]
 8004efe:	059b      	lsls	r3, r3, #22
 8004f00:	0d9a      	lsrs	r2, r3, #22
                             (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
 8004f02:	183b      	adds	r3, r7, r0
 8004f04:	781b      	ldrb	r3, [r3, #0]
 8004f06:	0419      	lsls	r1, r3, #16
 8004f08:	23ff      	movs	r3, #255	; 0xff
 8004f0a:	041b      	lsls	r3, r3, #16
 8004f0c:	400b      	ands	r3, r1
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 8004f0e:	431a      	orrs	r2, r3
                             (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
 8004f10:	687b      	ldr	r3, [r7, #4]
 8004f12:	431a      	orrs	r2, r3
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 8004f14:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004f16:	4313      	orrs	r3, r2
 8004f18:	005b      	lsls	r3, r3, #1
 8004f1a:	085b      	lsrs	r3, r3, #1
 8004f1c:	617b      	str	r3, [r7, #20]
                             (uint32_t)Mode | (uint32_t)Request) & (~0x80000000U));

  /* update CR2 register */
  MODIFY_REG(hi2c->Instance->CR2, \
 8004f1e:	68fb      	ldr	r3, [r7, #12]
 8004f20:	681b      	ldr	r3, [r3, #0]
 8004f22:	685b      	ldr	r3, [r3, #4]
 8004f24:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8004f26:	0d51      	lsrs	r1, r2, #21
 8004f28:	2280      	movs	r2, #128	; 0x80
 8004f2a:	00d2      	lsls	r2, r2, #3
 8004f2c:	400a      	ands	r2, r1
 8004f2e:	4907      	ldr	r1, [pc, #28]	; (8004f4c <I2C_TransferConfig+0x70>)
 8004f30:	430a      	orrs	r2, r1
 8004f32:	43d2      	mvns	r2, r2
 8004f34:	401a      	ands	r2, r3
 8004f36:	0011      	movs	r1, r2
 8004f38:	68fb      	ldr	r3, [r7, #12]
 8004f3a:	681b      	ldr	r3, [r3, #0]
 8004f3c:	697a      	ldr	r2, [r7, #20]
 8004f3e:	430a      	orrs	r2, r1
 8004f40:	605a      	str	r2, [r3, #4]
             ((I2C_CR2_SADD | I2C_CR2_NBYTES | I2C_CR2_RELOAD | I2C_CR2_AUTOEND | \
               (I2C_CR2_RD_WRN & (uint32_t)(Request >> (31U - I2C_CR2_RD_WRN_Pos))) | \
               I2C_CR2_START | I2C_CR2_STOP)), tmp);
}
 8004f42:	46c0      	nop			; (mov r8, r8)
 8004f44:	46bd      	mov	sp, r7
 8004f46:	b007      	add	sp, #28
 8004f48:	bd90      	pop	{r4, r7, pc}
 8004f4a:	46c0      	nop			; (mov r8, r8)
 8004f4c:	03ff63ff 	.word	0x03ff63ff

08004f50 <HAL_I2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  AnalogFilter New state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
{
 8004f50:	b580      	push	{r7, lr}
 8004f52:	b082      	sub	sp, #8
 8004f54:	af00      	add	r7, sp, #0
 8004f56:	6078      	str	r0, [r7, #4]
 8004f58:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8004f5a:	687b      	ldr	r3, [r7, #4]
 8004f5c:	2241      	movs	r2, #65	; 0x41
 8004f5e:	5c9b      	ldrb	r3, [r3, r2]
 8004f60:	b2db      	uxtb	r3, r3
 8004f62:	2b20      	cmp	r3, #32
 8004f64:	d138      	bne.n	8004fd8 <HAL_I2CEx_ConfigAnalogFilter+0x88>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8004f66:	687b      	ldr	r3, [r7, #4]
 8004f68:	2240      	movs	r2, #64	; 0x40
 8004f6a:	5c9b      	ldrb	r3, [r3, r2]
 8004f6c:	2b01      	cmp	r3, #1
 8004f6e:	d101      	bne.n	8004f74 <HAL_I2CEx_ConfigAnalogFilter+0x24>
 8004f70:	2302      	movs	r3, #2
 8004f72:	e032      	b.n	8004fda <HAL_I2CEx_ConfigAnalogFilter+0x8a>
 8004f74:	687b      	ldr	r3, [r7, #4]
 8004f76:	2240      	movs	r2, #64	; 0x40
 8004f78:	2101      	movs	r1, #1
 8004f7a:	5499      	strb	r1, [r3, r2]

    hi2c->State = HAL_I2C_STATE_BUSY;
 8004f7c:	687b      	ldr	r3, [r7, #4]
 8004f7e:	2241      	movs	r2, #65	; 0x41
 8004f80:	2124      	movs	r1, #36	; 0x24
 8004f82:	5499      	strb	r1, [r3, r2]

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8004f84:	687b      	ldr	r3, [r7, #4]
 8004f86:	681b      	ldr	r3, [r3, #0]
 8004f88:	681a      	ldr	r2, [r3, #0]
 8004f8a:	687b      	ldr	r3, [r7, #4]
 8004f8c:	681b      	ldr	r3, [r3, #0]
 8004f8e:	2101      	movs	r1, #1
 8004f90:	438a      	bics	r2, r1
 8004f92:	601a      	str	r2, [r3, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->CR1 &= ~(I2C_CR1_ANFOFF);
 8004f94:	687b      	ldr	r3, [r7, #4]
 8004f96:	681b      	ldr	r3, [r3, #0]
 8004f98:	681a      	ldr	r2, [r3, #0]
 8004f9a:	687b      	ldr	r3, [r7, #4]
 8004f9c:	681b      	ldr	r3, [r3, #0]
 8004f9e:	4911      	ldr	r1, [pc, #68]	; (8004fe4 <HAL_I2CEx_ConfigAnalogFilter+0x94>)
 8004fa0:	400a      	ands	r2, r1
 8004fa2:	601a      	str	r2, [r3, #0]

    /* Set analog filter bit*/
    hi2c->Instance->CR1 |= AnalogFilter;
 8004fa4:	687b      	ldr	r3, [r7, #4]
 8004fa6:	681b      	ldr	r3, [r3, #0]
 8004fa8:	6819      	ldr	r1, [r3, #0]
 8004faa:	687b      	ldr	r3, [r7, #4]
 8004fac:	681b      	ldr	r3, [r3, #0]
 8004fae:	683a      	ldr	r2, [r7, #0]
 8004fb0:	430a      	orrs	r2, r1
 8004fb2:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8004fb4:	687b      	ldr	r3, [r7, #4]
 8004fb6:	681b      	ldr	r3, [r3, #0]
 8004fb8:	681a      	ldr	r2, [r3, #0]
 8004fba:	687b      	ldr	r3, [r7, #4]
 8004fbc:	681b      	ldr	r3, [r3, #0]
 8004fbe:	2101      	movs	r1, #1
 8004fc0:	430a      	orrs	r2, r1
 8004fc2:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8004fc4:	687b      	ldr	r3, [r7, #4]
 8004fc6:	2241      	movs	r2, #65	; 0x41
 8004fc8:	2120      	movs	r1, #32
 8004fca:	5499      	strb	r1, [r3, r2]

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8004fcc:	687b      	ldr	r3, [r7, #4]
 8004fce:	2240      	movs	r2, #64	; 0x40
 8004fd0:	2100      	movs	r1, #0
 8004fd2:	5499      	strb	r1, [r3, r2]

    return HAL_OK;
 8004fd4:	2300      	movs	r3, #0
 8004fd6:	e000      	b.n	8004fda <HAL_I2CEx_ConfigAnalogFilter+0x8a>
  }
  else
  {
    return HAL_BUSY;
 8004fd8:	2302      	movs	r3, #2
  }
}
 8004fda:	0018      	movs	r0, r3
 8004fdc:	46bd      	mov	sp, r7
 8004fde:	b002      	add	sp, #8
 8004fe0:	bd80      	pop	{r7, pc}
 8004fe2:	46c0      	nop			; (mov r8, r8)
 8004fe4:	ffffefff 	.word	0xffffefff

08004fe8 <HAL_I2CEx_ConfigDigitalFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  DigitalFilter Coefficient of digital noise filter between Min_Data=0x00 and Max_Data=0x0F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigDigitalFilter(I2C_HandleTypeDef *hi2c, uint32_t DigitalFilter)
{
 8004fe8:	b580      	push	{r7, lr}
 8004fea:	b084      	sub	sp, #16
 8004fec:	af00      	add	r7, sp, #0
 8004fee:	6078      	str	r0, [r7, #4]
 8004ff0:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8004ff2:	687b      	ldr	r3, [r7, #4]
 8004ff4:	2241      	movs	r2, #65	; 0x41
 8004ff6:	5c9b      	ldrb	r3, [r3, r2]
 8004ff8:	b2db      	uxtb	r3, r3
 8004ffa:	2b20      	cmp	r3, #32
 8004ffc:	d139      	bne.n	8005072 <HAL_I2CEx_ConfigDigitalFilter+0x8a>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8004ffe:	687b      	ldr	r3, [r7, #4]
 8005000:	2240      	movs	r2, #64	; 0x40
 8005002:	5c9b      	ldrb	r3, [r3, r2]
 8005004:	2b01      	cmp	r3, #1
 8005006:	d101      	bne.n	800500c <HAL_I2CEx_ConfigDigitalFilter+0x24>
 8005008:	2302      	movs	r3, #2
 800500a:	e033      	b.n	8005074 <HAL_I2CEx_ConfigDigitalFilter+0x8c>
 800500c:	687b      	ldr	r3, [r7, #4]
 800500e:	2240      	movs	r2, #64	; 0x40
 8005010:	2101      	movs	r1, #1
 8005012:	5499      	strb	r1, [r3, r2]

    hi2c->State = HAL_I2C_STATE_BUSY;
 8005014:	687b      	ldr	r3, [r7, #4]
 8005016:	2241      	movs	r2, #65	; 0x41
 8005018:	2124      	movs	r1, #36	; 0x24
 800501a:	5499      	strb	r1, [r3, r2]

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 800501c:	687b      	ldr	r3, [r7, #4]
 800501e:	681b      	ldr	r3, [r3, #0]
 8005020:	681a      	ldr	r2, [r3, #0]
 8005022:	687b      	ldr	r3, [r7, #4]
 8005024:	681b      	ldr	r3, [r3, #0]
 8005026:	2101      	movs	r1, #1
 8005028:	438a      	bics	r2, r1
 800502a:	601a      	str	r2, [r3, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->CR1;
 800502c:	687b      	ldr	r3, [r7, #4]
 800502e:	681b      	ldr	r3, [r3, #0]
 8005030:	681b      	ldr	r3, [r3, #0]
 8005032:	60fb      	str	r3, [r7, #12]

    /* Reset I2Cx DNF bits [11:8] */
    tmpreg &= ~(I2C_CR1_DNF);
 8005034:	68fb      	ldr	r3, [r7, #12]
 8005036:	4a11      	ldr	r2, [pc, #68]	; (800507c <HAL_I2CEx_ConfigDigitalFilter+0x94>)
 8005038:	4013      	ands	r3, r2
 800503a:	60fb      	str	r3, [r7, #12]

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter << 8U;
 800503c:	683b      	ldr	r3, [r7, #0]
 800503e:	021b      	lsls	r3, r3, #8
 8005040:	68fa      	ldr	r2, [r7, #12]
 8005042:	4313      	orrs	r3, r2
 8005044:	60fb      	str	r3, [r7, #12]

    /* Store the new register value */
    hi2c->Instance->CR1 = tmpreg;
 8005046:	687b      	ldr	r3, [r7, #4]
 8005048:	681b      	ldr	r3, [r3, #0]
 800504a:	68fa      	ldr	r2, [r7, #12]
 800504c:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 800504e:	687b      	ldr	r3, [r7, #4]
 8005050:	681b      	ldr	r3, [r3, #0]
 8005052:	681a      	ldr	r2, [r3, #0]
 8005054:	687b      	ldr	r3, [r7, #4]
 8005056:	681b      	ldr	r3, [r3, #0]
 8005058:	2101      	movs	r1, #1
 800505a:	430a      	orrs	r2, r1
 800505c:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 800505e:	687b      	ldr	r3, [r7, #4]
 8005060:	2241      	movs	r2, #65	; 0x41
 8005062:	2120      	movs	r1, #32
 8005064:	5499      	strb	r1, [r3, r2]

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8005066:	687b      	ldr	r3, [r7, #4]
 8005068:	2240      	movs	r2, #64	; 0x40
 800506a:	2100      	movs	r1, #0
 800506c:	5499      	strb	r1, [r3, r2]

    return HAL_OK;
 800506e:	2300      	movs	r3, #0
 8005070:	e000      	b.n	8005074 <HAL_I2CEx_ConfigDigitalFilter+0x8c>
  }
  else
  {
    return HAL_BUSY;
 8005072:	2302      	movs	r3, #2
  }
}
 8005074:	0018      	movs	r0, r3
 8005076:	46bd      	mov	sp, r7
 8005078:	b004      	add	sp, #16
 800507a:	bd80      	pop	{r7, pc}
 800507c:	fffff0ff 	.word	0xfffff0ff

08005080 <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        6 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 8005080:	b580      	push	{r7, lr}
 8005082:	b084      	sub	sp, #16
 8005084:	af00      	add	r7, sp, #0
 8005086:	6078      	str	r0, [r7, #4]
  uint32_t wait_loop_index;

  assert_param(IS_PWR_VOLTAGE_SCALING_RANGE(VoltageScaling));

  /* Modify voltage scaling range */
  MODIFY_REG(PWR->CR1, PWR_CR1_VOS, VoltageScaling);
 8005088:	4b19      	ldr	r3, [pc, #100]	; (80050f0 <HAL_PWREx_ControlVoltageScaling+0x70>)
 800508a:	681b      	ldr	r3, [r3, #0]
 800508c:	4a19      	ldr	r2, [pc, #100]	; (80050f4 <HAL_PWREx_ControlVoltageScaling+0x74>)
 800508e:	4013      	ands	r3, r2
 8005090:	0019      	movs	r1, r3
 8005092:	4b17      	ldr	r3, [pc, #92]	; (80050f0 <HAL_PWREx_ControlVoltageScaling+0x70>)
 8005094:	687a      	ldr	r2, [r7, #4]
 8005096:	430a      	orrs	r2, r1
 8005098:	601a      	str	r2, [r3, #0]

  /* In case of Range 1 selected, we need to ensure that main regulator reaches new value */
  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 800509a:	687a      	ldr	r2, [r7, #4]
 800509c:	2380      	movs	r3, #128	; 0x80
 800509e:	009b      	lsls	r3, r3, #2
 80050a0:	429a      	cmp	r2, r3
 80050a2:	d11f      	bne.n	80050e4 <HAL_PWREx_ControlVoltageScaling+0x64>
  {
    /* Set timeout value */
    wait_loop_index = ((PWR_VOSF_SETTING_DELAY_6_US * SystemCoreClock) / 1000000U) + 1U;
 80050a4:	4b14      	ldr	r3, [pc, #80]	; (80050f8 <HAL_PWREx_ControlVoltageScaling+0x78>)
 80050a6:	681a      	ldr	r2, [r3, #0]
 80050a8:	0013      	movs	r3, r2
 80050aa:	005b      	lsls	r3, r3, #1
 80050ac:	189b      	adds	r3, r3, r2
 80050ae:	005b      	lsls	r3, r3, #1
 80050b0:	4912      	ldr	r1, [pc, #72]	; (80050fc <HAL_PWREx_ControlVoltageScaling+0x7c>)
 80050b2:	0018      	movs	r0, r3
 80050b4:	f7fb f842 	bl	800013c <__udivsi3>
 80050b8:	0003      	movs	r3, r0
 80050ba:	3301      	adds	r3, #1
 80050bc:	60fb      	str	r3, [r7, #12]

    /* Wait until VOSF is reset */
    while (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 80050be:	e008      	b.n	80050d2 <HAL_PWREx_ControlVoltageScaling+0x52>
    {
      if (wait_loop_index != 0U)
 80050c0:	68fb      	ldr	r3, [r7, #12]
 80050c2:	2b00      	cmp	r3, #0
 80050c4:	d003      	beq.n	80050ce <HAL_PWREx_ControlVoltageScaling+0x4e>
      {
        wait_loop_index--;
 80050c6:	68fb      	ldr	r3, [r7, #12]
 80050c8:	3b01      	subs	r3, #1
 80050ca:	60fb      	str	r3, [r7, #12]
 80050cc:	e001      	b.n	80050d2 <HAL_PWREx_ControlVoltageScaling+0x52>
      }
      else
      {
        return HAL_TIMEOUT;
 80050ce:	2303      	movs	r3, #3
 80050d0:	e009      	b.n	80050e6 <HAL_PWREx_ControlVoltageScaling+0x66>
    while (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 80050d2:	4b07      	ldr	r3, [pc, #28]	; (80050f0 <HAL_PWREx_ControlVoltageScaling+0x70>)
 80050d4:	695a      	ldr	r2, [r3, #20]
 80050d6:	2380      	movs	r3, #128	; 0x80
 80050d8:	00db      	lsls	r3, r3, #3
 80050da:	401a      	ands	r2, r3
 80050dc:	2380      	movs	r3, #128	; 0x80
 80050de:	00db      	lsls	r3, r3, #3
 80050e0:	429a      	cmp	r2, r3
 80050e2:	d0ed      	beq.n	80050c0 <HAL_PWREx_ControlVoltageScaling+0x40>
      }
    }
  }

  return HAL_OK;
 80050e4:	2300      	movs	r3, #0
}
 80050e6:	0018      	movs	r0, r3
 80050e8:	46bd      	mov	sp, r7
 80050ea:	b004      	add	sp, #16
 80050ec:	bd80      	pop	{r7, pc}
 80050ee:	46c0      	nop			; (mov r8, r8)
 80050f0:	40007000 	.word	0x40007000
 80050f4:	fffff9ff 	.word	0xfffff9ff
 80050f8:	20000008 	.word	0x20000008
 80050fc:	000f4240 	.word	0x000f4240

08005100 <LL_RCC_GetAPB1Prescaler>:
  *         @arg @ref LL_RCC_APB1_DIV_4
  *         @arg @ref LL_RCC_APB1_DIV_8
  *         @arg @ref LL_RCC_APB1_DIV_16
  */
__STATIC_INLINE uint32_t LL_RCC_GetAPB1Prescaler(void)
{
 8005100:	b580      	push	{r7, lr}
 8005102:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_PPRE));
 8005104:	4b03      	ldr	r3, [pc, #12]	; (8005114 <LL_RCC_GetAPB1Prescaler+0x14>)
 8005106:	689a      	ldr	r2, [r3, #8]
 8005108:	23e0      	movs	r3, #224	; 0xe0
 800510a:	01db      	lsls	r3, r3, #7
 800510c:	4013      	ands	r3, r2
}
 800510e:	0018      	movs	r0, r3
 8005110:	46bd      	mov	sp, r7
 8005112:	bd80      	pop	{r7, pc}
 8005114:	40021000 	.word	0x40021000

08005118 <HAL_RCC_OscConfig>:
  *         supported by this function. User should request a transition to LSE Off
  *         first and then to LSE On or LSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8005118:	b580      	push	{r7, lr}
 800511a:	b088      	sub	sp, #32
 800511c:	af00      	add	r7, sp, #0
 800511e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t temp_sysclksrc;
  uint32_t temp_pllckcfg;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8005120:	687b      	ldr	r3, [r7, #4]
 8005122:	2b00      	cmp	r3, #0
 8005124:	d101      	bne.n	800512a <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8005126:	2301      	movs	r3, #1
 8005128:	e2fe      	b.n	8005728 <HAL_RCC_OscConfig+0x610>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800512a:	687b      	ldr	r3, [r7, #4]
 800512c:	681b      	ldr	r3, [r3, #0]
 800512e:	2201      	movs	r2, #1
 8005130:	4013      	ands	r3, r2
 8005132:	d100      	bne.n	8005136 <HAL_RCC_OscConfig+0x1e>
 8005134:	e07c      	b.n	8005230 <HAL_RCC_OscConfig+0x118>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8005136:	4bc3      	ldr	r3, [pc, #780]	; (8005444 <HAL_RCC_OscConfig+0x32c>)
 8005138:	689b      	ldr	r3, [r3, #8]
 800513a:	2238      	movs	r2, #56	; 0x38
 800513c:	4013      	ands	r3, r2
 800513e:	61bb      	str	r3, [r7, #24]
    temp_pllckcfg = __HAL_RCC_GET_PLL_OSCSOURCE();
 8005140:	4bc0      	ldr	r3, [pc, #768]	; (8005444 <HAL_RCC_OscConfig+0x32c>)
 8005142:	68db      	ldr	r3, [r3, #12]
 8005144:	2203      	movs	r2, #3
 8005146:	4013      	ands	r3, r2
 8005148:	617b      	str	r3, [r7, #20]

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if (((temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (temp_pllckcfg == RCC_PLLSOURCE_HSE))
 800514a:	69bb      	ldr	r3, [r7, #24]
 800514c:	2b10      	cmp	r3, #16
 800514e:	d102      	bne.n	8005156 <HAL_RCC_OscConfig+0x3e>
 8005150:	697b      	ldr	r3, [r7, #20]
 8005152:	2b03      	cmp	r3, #3
 8005154:	d002      	beq.n	800515c <HAL_RCC_OscConfig+0x44>
        || (temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_HSE))
 8005156:	69bb      	ldr	r3, [r7, #24]
 8005158:	2b08      	cmp	r3, #8
 800515a:	d10b      	bne.n	8005174 <HAL_RCC_OscConfig+0x5c>
    {
      if ((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800515c:	4bb9      	ldr	r3, [pc, #740]	; (8005444 <HAL_RCC_OscConfig+0x32c>)
 800515e:	681a      	ldr	r2, [r3, #0]
 8005160:	2380      	movs	r3, #128	; 0x80
 8005162:	029b      	lsls	r3, r3, #10
 8005164:	4013      	ands	r3, r2
 8005166:	d062      	beq.n	800522e <HAL_RCC_OscConfig+0x116>
 8005168:	687b      	ldr	r3, [r7, #4]
 800516a:	685b      	ldr	r3, [r3, #4]
 800516c:	2b00      	cmp	r3, #0
 800516e:	d15e      	bne.n	800522e <HAL_RCC_OscConfig+0x116>
      {
        return HAL_ERROR;
 8005170:	2301      	movs	r3, #1
 8005172:	e2d9      	b.n	8005728 <HAL_RCC_OscConfig+0x610>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8005174:	687b      	ldr	r3, [r7, #4]
 8005176:	685a      	ldr	r2, [r3, #4]
 8005178:	2380      	movs	r3, #128	; 0x80
 800517a:	025b      	lsls	r3, r3, #9
 800517c:	429a      	cmp	r2, r3
 800517e:	d107      	bne.n	8005190 <HAL_RCC_OscConfig+0x78>
 8005180:	4bb0      	ldr	r3, [pc, #704]	; (8005444 <HAL_RCC_OscConfig+0x32c>)
 8005182:	681a      	ldr	r2, [r3, #0]
 8005184:	4baf      	ldr	r3, [pc, #700]	; (8005444 <HAL_RCC_OscConfig+0x32c>)
 8005186:	2180      	movs	r1, #128	; 0x80
 8005188:	0249      	lsls	r1, r1, #9
 800518a:	430a      	orrs	r2, r1
 800518c:	601a      	str	r2, [r3, #0]
 800518e:	e020      	b.n	80051d2 <HAL_RCC_OscConfig+0xba>
 8005190:	687b      	ldr	r3, [r7, #4]
 8005192:	685a      	ldr	r2, [r3, #4]
 8005194:	23a0      	movs	r3, #160	; 0xa0
 8005196:	02db      	lsls	r3, r3, #11
 8005198:	429a      	cmp	r2, r3
 800519a:	d10e      	bne.n	80051ba <HAL_RCC_OscConfig+0xa2>
 800519c:	4ba9      	ldr	r3, [pc, #676]	; (8005444 <HAL_RCC_OscConfig+0x32c>)
 800519e:	681a      	ldr	r2, [r3, #0]
 80051a0:	4ba8      	ldr	r3, [pc, #672]	; (8005444 <HAL_RCC_OscConfig+0x32c>)
 80051a2:	2180      	movs	r1, #128	; 0x80
 80051a4:	02c9      	lsls	r1, r1, #11
 80051a6:	430a      	orrs	r2, r1
 80051a8:	601a      	str	r2, [r3, #0]
 80051aa:	4ba6      	ldr	r3, [pc, #664]	; (8005444 <HAL_RCC_OscConfig+0x32c>)
 80051ac:	681a      	ldr	r2, [r3, #0]
 80051ae:	4ba5      	ldr	r3, [pc, #660]	; (8005444 <HAL_RCC_OscConfig+0x32c>)
 80051b0:	2180      	movs	r1, #128	; 0x80
 80051b2:	0249      	lsls	r1, r1, #9
 80051b4:	430a      	orrs	r2, r1
 80051b6:	601a      	str	r2, [r3, #0]
 80051b8:	e00b      	b.n	80051d2 <HAL_RCC_OscConfig+0xba>
 80051ba:	4ba2      	ldr	r3, [pc, #648]	; (8005444 <HAL_RCC_OscConfig+0x32c>)
 80051bc:	681a      	ldr	r2, [r3, #0]
 80051be:	4ba1      	ldr	r3, [pc, #644]	; (8005444 <HAL_RCC_OscConfig+0x32c>)
 80051c0:	49a1      	ldr	r1, [pc, #644]	; (8005448 <HAL_RCC_OscConfig+0x330>)
 80051c2:	400a      	ands	r2, r1
 80051c4:	601a      	str	r2, [r3, #0]
 80051c6:	4b9f      	ldr	r3, [pc, #636]	; (8005444 <HAL_RCC_OscConfig+0x32c>)
 80051c8:	681a      	ldr	r2, [r3, #0]
 80051ca:	4b9e      	ldr	r3, [pc, #632]	; (8005444 <HAL_RCC_OscConfig+0x32c>)
 80051cc:	499f      	ldr	r1, [pc, #636]	; (800544c <HAL_RCC_OscConfig+0x334>)
 80051ce:	400a      	ands	r2, r1
 80051d0:	601a      	str	r2, [r3, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 80051d2:	687b      	ldr	r3, [r7, #4]
 80051d4:	685b      	ldr	r3, [r3, #4]
 80051d6:	2b00      	cmp	r3, #0
 80051d8:	d014      	beq.n	8005204 <HAL_RCC_OscConfig+0xec>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80051da:	f7fe fa77 	bl	80036cc <HAL_GetTick>
 80051de:	0003      	movs	r3, r0
 80051e0:	613b      	str	r3, [r7, #16]

        /* Wait till HSE is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 80051e2:	e008      	b.n	80051f6 <HAL_RCC_OscConfig+0xde>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80051e4:	f7fe fa72 	bl	80036cc <HAL_GetTick>
 80051e8:	0002      	movs	r2, r0
 80051ea:	693b      	ldr	r3, [r7, #16]
 80051ec:	1ad3      	subs	r3, r2, r3
 80051ee:	2b64      	cmp	r3, #100	; 0x64
 80051f0:	d901      	bls.n	80051f6 <HAL_RCC_OscConfig+0xde>
          {
            return HAL_TIMEOUT;
 80051f2:	2303      	movs	r3, #3
 80051f4:	e298      	b.n	8005728 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 80051f6:	4b93      	ldr	r3, [pc, #588]	; (8005444 <HAL_RCC_OscConfig+0x32c>)
 80051f8:	681a      	ldr	r2, [r3, #0]
 80051fa:	2380      	movs	r3, #128	; 0x80
 80051fc:	029b      	lsls	r3, r3, #10
 80051fe:	4013      	ands	r3, r2
 8005200:	d0f0      	beq.n	80051e4 <HAL_RCC_OscConfig+0xcc>
 8005202:	e015      	b.n	8005230 <HAL_RCC_OscConfig+0x118>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005204:	f7fe fa62 	bl	80036cc <HAL_GetTick>
 8005208:	0003      	movs	r3, r0
 800520a:	613b      	str	r3, [r7, #16]

        /* Wait till HSE is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 800520c:	e008      	b.n	8005220 <HAL_RCC_OscConfig+0x108>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 800520e:	f7fe fa5d 	bl	80036cc <HAL_GetTick>
 8005212:	0002      	movs	r2, r0
 8005214:	693b      	ldr	r3, [r7, #16]
 8005216:	1ad3      	subs	r3, r2, r3
 8005218:	2b64      	cmp	r3, #100	; 0x64
 800521a:	d901      	bls.n	8005220 <HAL_RCC_OscConfig+0x108>
          {
            return HAL_TIMEOUT;
 800521c:	2303      	movs	r3, #3
 800521e:	e283      	b.n	8005728 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8005220:	4b88      	ldr	r3, [pc, #544]	; (8005444 <HAL_RCC_OscConfig+0x32c>)
 8005222:	681a      	ldr	r2, [r3, #0]
 8005224:	2380      	movs	r3, #128	; 0x80
 8005226:	029b      	lsls	r3, r3, #10
 8005228:	4013      	ands	r3, r2
 800522a:	d1f0      	bne.n	800520e <HAL_RCC_OscConfig+0xf6>
 800522c:	e000      	b.n	8005230 <HAL_RCC_OscConfig+0x118>
      if ((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800522e:	46c0      	nop			; (mov r8, r8)
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8005230:	687b      	ldr	r3, [r7, #4]
 8005232:	681b      	ldr	r3, [r3, #0]
 8005234:	2202      	movs	r2, #2
 8005236:	4013      	ands	r3, r2
 8005238:	d100      	bne.n	800523c <HAL_RCC_OscConfig+0x124>
 800523a:	e099      	b.n	8005370 <HAL_RCC_OscConfig+0x258>
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));
    assert_param(IS_RCC_HSIDIV(RCC_OscInitStruct->HSIDiv));

    /* Check if HSI16 is used as system clock or as PLL source when PLL is selected as system clock */
    temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 800523c:	4b81      	ldr	r3, [pc, #516]	; (8005444 <HAL_RCC_OscConfig+0x32c>)
 800523e:	689b      	ldr	r3, [r3, #8]
 8005240:	2238      	movs	r2, #56	; 0x38
 8005242:	4013      	ands	r3, r2
 8005244:	61bb      	str	r3, [r7, #24]
    temp_pllckcfg = __HAL_RCC_GET_PLL_OSCSOURCE();
 8005246:	4b7f      	ldr	r3, [pc, #508]	; (8005444 <HAL_RCC_OscConfig+0x32c>)
 8005248:	68db      	ldr	r3, [r3, #12]
 800524a:	2203      	movs	r2, #3
 800524c:	4013      	ands	r3, r2
 800524e:	617b      	str	r3, [r7, #20]
    if (((temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (temp_pllckcfg == RCC_PLLSOURCE_HSI))
 8005250:	69bb      	ldr	r3, [r7, #24]
 8005252:	2b10      	cmp	r3, #16
 8005254:	d102      	bne.n	800525c <HAL_RCC_OscConfig+0x144>
 8005256:	697b      	ldr	r3, [r7, #20]
 8005258:	2b02      	cmp	r3, #2
 800525a:	d002      	beq.n	8005262 <HAL_RCC_OscConfig+0x14a>
        || (temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_HSI))
 800525c:	69bb      	ldr	r3, [r7, #24]
 800525e:	2b00      	cmp	r3, #0
 8005260:	d135      	bne.n	80052ce <HAL_RCC_OscConfig+0x1b6>
    {
      /* When HSI is used as system clock or as PLL input clock it can not be disabled */
      if ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8005262:	4b78      	ldr	r3, [pc, #480]	; (8005444 <HAL_RCC_OscConfig+0x32c>)
 8005264:	681a      	ldr	r2, [r3, #0]
 8005266:	2380      	movs	r3, #128	; 0x80
 8005268:	00db      	lsls	r3, r3, #3
 800526a:	4013      	ands	r3, r2
 800526c:	d005      	beq.n	800527a <HAL_RCC_OscConfig+0x162>
 800526e:	687b      	ldr	r3, [r7, #4]
 8005270:	68db      	ldr	r3, [r3, #12]
 8005272:	2b00      	cmp	r3, #0
 8005274:	d101      	bne.n	800527a <HAL_RCC_OscConfig+0x162>
      {
        return HAL_ERROR;
 8005276:	2301      	movs	r3, #1
 8005278:	e256      	b.n	8005728 <HAL_RCC_OscConfig+0x610>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800527a:	4b72      	ldr	r3, [pc, #456]	; (8005444 <HAL_RCC_OscConfig+0x32c>)
 800527c:	685b      	ldr	r3, [r3, #4]
 800527e:	4a74      	ldr	r2, [pc, #464]	; (8005450 <HAL_RCC_OscConfig+0x338>)
 8005280:	4013      	ands	r3, r2
 8005282:	0019      	movs	r1, r3
 8005284:	687b      	ldr	r3, [r7, #4]
 8005286:	695b      	ldr	r3, [r3, #20]
 8005288:	021a      	lsls	r2, r3, #8
 800528a:	4b6e      	ldr	r3, [pc, #440]	; (8005444 <HAL_RCC_OscConfig+0x32c>)
 800528c:	430a      	orrs	r2, r1
 800528e:	605a      	str	r2, [r3, #4]

        if (temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_HSI)
 8005290:	69bb      	ldr	r3, [r7, #24]
 8005292:	2b00      	cmp	r3, #0
 8005294:	d112      	bne.n	80052bc <HAL_RCC_OscConfig+0x1a4>
        {
          /* Adjust the HSI16 division factor */
          __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIDiv);
 8005296:	4b6b      	ldr	r3, [pc, #428]	; (8005444 <HAL_RCC_OscConfig+0x32c>)
 8005298:	681b      	ldr	r3, [r3, #0]
 800529a:	4a6e      	ldr	r2, [pc, #440]	; (8005454 <HAL_RCC_OscConfig+0x33c>)
 800529c:	4013      	ands	r3, r2
 800529e:	0019      	movs	r1, r3
 80052a0:	687b      	ldr	r3, [r7, #4]
 80052a2:	691a      	ldr	r2, [r3, #16]
 80052a4:	4b67      	ldr	r3, [pc, #412]	; (8005444 <HAL_RCC_OscConfig+0x32c>)
 80052a6:	430a      	orrs	r2, r1
 80052a8:	601a      	str	r2, [r3, #0]

          /* Update the SystemCoreClock global variable with HSISYS value  */
          SystemCoreClock = (HSI_VALUE / (1UL << ((READ_BIT(RCC->CR, RCC_CR_HSIDIV)) >> RCC_CR_HSIDIV_Pos)));
 80052aa:	4b66      	ldr	r3, [pc, #408]	; (8005444 <HAL_RCC_OscConfig+0x32c>)
 80052ac:	681b      	ldr	r3, [r3, #0]
 80052ae:	0adb      	lsrs	r3, r3, #11
 80052b0:	2207      	movs	r2, #7
 80052b2:	4013      	ands	r3, r2
 80052b4:	4a68      	ldr	r2, [pc, #416]	; (8005458 <HAL_RCC_OscConfig+0x340>)
 80052b6:	40da      	lsrs	r2, r3
 80052b8:	4b68      	ldr	r3, [pc, #416]	; (800545c <HAL_RCC_OscConfig+0x344>)
 80052ba:	601a      	str	r2, [r3, #0]
        }

        /* Adapt Systick interrupt period */
        if (HAL_InitTick(uwTickPrio) != HAL_OK)
 80052bc:	4b68      	ldr	r3, [pc, #416]	; (8005460 <HAL_RCC_OscConfig+0x348>)
 80052be:	681b      	ldr	r3, [r3, #0]
 80052c0:	0018      	movs	r0, r3
 80052c2:	f7fe f9a7 	bl	8003614 <HAL_InitTick>
 80052c6:	1e03      	subs	r3, r0, #0
 80052c8:	d051      	beq.n	800536e <HAL_RCC_OscConfig+0x256>
        {
          return HAL_ERROR;
 80052ca:	2301      	movs	r3, #1
 80052cc:	e22c      	b.n	8005728 <HAL_RCC_OscConfig+0x610>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 80052ce:	687b      	ldr	r3, [r7, #4]
 80052d0:	68db      	ldr	r3, [r3, #12]
 80052d2:	2b00      	cmp	r3, #0
 80052d4:	d030      	beq.n	8005338 <HAL_RCC_OscConfig+0x220>
      {
        /* Configure the HSI16 division factor */
        __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIDiv);
 80052d6:	4b5b      	ldr	r3, [pc, #364]	; (8005444 <HAL_RCC_OscConfig+0x32c>)
 80052d8:	681b      	ldr	r3, [r3, #0]
 80052da:	4a5e      	ldr	r2, [pc, #376]	; (8005454 <HAL_RCC_OscConfig+0x33c>)
 80052dc:	4013      	ands	r3, r2
 80052de:	0019      	movs	r1, r3
 80052e0:	687b      	ldr	r3, [r7, #4]
 80052e2:	691a      	ldr	r2, [r3, #16]
 80052e4:	4b57      	ldr	r3, [pc, #348]	; (8005444 <HAL_RCC_OscConfig+0x32c>)
 80052e6:	430a      	orrs	r2, r1
 80052e8:	601a      	str	r2, [r3, #0]

        /* Enable the Internal High Speed oscillator (HSI16). */
        __HAL_RCC_HSI_ENABLE();
 80052ea:	4b56      	ldr	r3, [pc, #344]	; (8005444 <HAL_RCC_OscConfig+0x32c>)
 80052ec:	681a      	ldr	r2, [r3, #0]
 80052ee:	4b55      	ldr	r3, [pc, #340]	; (8005444 <HAL_RCC_OscConfig+0x32c>)
 80052f0:	2180      	movs	r1, #128	; 0x80
 80052f2:	0049      	lsls	r1, r1, #1
 80052f4:	430a      	orrs	r2, r1
 80052f6:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80052f8:	f7fe f9e8 	bl	80036cc <HAL_GetTick>
 80052fc:	0003      	movs	r3, r0
 80052fe:	613b      	str	r3, [r7, #16]

        /* Wait till HSI is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8005300:	e008      	b.n	8005314 <HAL_RCC_OscConfig+0x1fc>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8005302:	f7fe f9e3 	bl	80036cc <HAL_GetTick>
 8005306:	0002      	movs	r2, r0
 8005308:	693b      	ldr	r3, [r7, #16]
 800530a:	1ad3      	subs	r3, r2, r3
 800530c:	2b02      	cmp	r3, #2
 800530e:	d901      	bls.n	8005314 <HAL_RCC_OscConfig+0x1fc>
          {
            return HAL_TIMEOUT;
 8005310:	2303      	movs	r3, #3
 8005312:	e209      	b.n	8005728 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8005314:	4b4b      	ldr	r3, [pc, #300]	; (8005444 <HAL_RCC_OscConfig+0x32c>)
 8005316:	681a      	ldr	r2, [r3, #0]
 8005318:	2380      	movs	r3, #128	; 0x80
 800531a:	00db      	lsls	r3, r3, #3
 800531c:	4013      	ands	r3, r2
 800531e:	d0f0      	beq.n	8005302 <HAL_RCC_OscConfig+0x1ea>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8005320:	4b48      	ldr	r3, [pc, #288]	; (8005444 <HAL_RCC_OscConfig+0x32c>)
 8005322:	685b      	ldr	r3, [r3, #4]
 8005324:	4a4a      	ldr	r2, [pc, #296]	; (8005450 <HAL_RCC_OscConfig+0x338>)
 8005326:	4013      	ands	r3, r2
 8005328:	0019      	movs	r1, r3
 800532a:	687b      	ldr	r3, [r7, #4]
 800532c:	695b      	ldr	r3, [r3, #20]
 800532e:	021a      	lsls	r2, r3, #8
 8005330:	4b44      	ldr	r3, [pc, #272]	; (8005444 <HAL_RCC_OscConfig+0x32c>)
 8005332:	430a      	orrs	r2, r1
 8005334:	605a      	str	r2, [r3, #4]
 8005336:	e01b      	b.n	8005370 <HAL_RCC_OscConfig+0x258>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI16). */
        __HAL_RCC_HSI_DISABLE();
 8005338:	4b42      	ldr	r3, [pc, #264]	; (8005444 <HAL_RCC_OscConfig+0x32c>)
 800533a:	681a      	ldr	r2, [r3, #0]
 800533c:	4b41      	ldr	r3, [pc, #260]	; (8005444 <HAL_RCC_OscConfig+0x32c>)
 800533e:	4949      	ldr	r1, [pc, #292]	; (8005464 <HAL_RCC_OscConfig+0x34c>)
 8005340:	400a      	ands	r2, r1
 8005342:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005344:	f7fe f9c2 	bl	80036cc <HAL_GetTick>
 8005348:	0003      	movs	r3, r0
 800534a:	613b      	str	r3, [r7, #16]

        /* Wait till HSI is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 800534c:	e008      	b.n	8005360 <HAL_RCC_OscConfig+0x248>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800534e:	f7fe f9bd 	bl	80036cc <HAL_GetTick>
 8005352:	0002      	movs	r2, r0
 8005354:	693b      	ldr	r3, [r7, #16]
 8005356:	1ad3      	subs	r3, r2, r3
 8005358:	2b02      	cmp	r3, #2
 800535a:	d901      	bls.n	8005360 <HAL_RCC_OscConfig+0x248>
          {
            return HAL_TIMEOUT;
 800535c:	2303      	movs	r3, #3
 800535e:	e1e3      	b.n	8005728 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8005360:	4b38      	ldr	r3, [pc, #224]	; (8005444 <HAL_RCC_OscConfig+0x32c>)
 8005362:	681a      	ldr	r2, [r3, #0]
 8005364:	2380      	movs	r3, #128	; 0x80
 8005366:	00db      	lsls	r3, r3, #3
 8005368:	4013      	ands	r3, r2
 800536a:	d1f0      	bne.n	800534e <HAL_RCC_OscConfig+0x236>
 800536c:	e000      	b.n	8005370 <HAL_RCC_OscConfig+0x258>
      if ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 800536e:	46c0      	nop			; (mov r8, r8)
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8005370:	687b      	ldr	r3, [r7, #4]
 8005372:	681b      	ldr	r3, [r3, #0]
 8005374:	2208      	movs	r2, #8
 8005376:	4013      	ands	r3, r2
 8005378:	d047      	beq.n	800540a <HAL_RCC_OscConfig+0x2f2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check if LSI is used as system clock */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_LSI)
 800537a:	4b32      	ldr	r3, [pc, #200]	; (8005444 <HAL_RCC_OscConfig+0x32c>)
 800537c:	689b      	ldr	r3, [r3, #8]
 800537e:	2238      	movs	r2, #56	; 0x38
 8005380:	4013      	ands	r3, r2
 8005382:	2b18      	cmp	r3, #24
 8005384:	d10a      	bne.n	800539c <HAL_RCC_OscConfig+0x284>
    {
      /* When LSI is used as system clock it will not be disabled */
      if ((((RCC->CSR) & RCC_CSR_LSIRDY) != 0U) && (RCC_OscInitStruct->LSIState == RCC_LSI_OFF))
 8005386:	4b2f      	ldr	r3, [pc, #188]	; (8005444 <HAL_RCC_OscConfig+0x32c>)
 8005388:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800538a:	2202      	movs	r2, #2
 800538c:	4013      	ands	r3, r2
 800538e:	d03c      	beq.n	800540a <HAL_RCC_OscConfig+0x2f2>
 8005390:	687b      	ldr	r3, [r7, #4]
 8005392:	699b      	ldr	r3, [r3, #24]
 8005394:	2b00      	cmp	r3, #0
 8005396:	d138      	bne.n	800540a <HAL_RCC_OscConfig+0x2f2>
      {
        return HAL_ERROR;
 8005398:	2301      	movs	r3, #1
 800539a:	e1c5      	b.n	8005728 <HAL_RCC_OscConfig+0x610>
      }
    }
    else
    {
      /* Check the LSI State */
      if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 800539c:	687b      	ldr	r3, [r7, #4]
 800539e:	699b      	ldr	r3, [r3, #24]
 80053a0:	2b00      	cmp	r3, #0
 80053a2:	d019      	beq.n	80053d8 <HAL_RCC_OscConfig+0x2c0>
      {
        /* Enable the Internal Low Speed oscillator (LSI). */
        __HAL_RCC_LSI_ENABLE();
 80053a4:	4b27      	ldr	r3, [pc, #156]	; (8005444 <HAL_RCC_OscConfig+0x32c>)
 80053a6:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 80053a8:	4b26      	ldr	r3, [pc, #152]	; (8005444 <HAL_RCC_OscConfig+0x32c>)
 80053aa:	2101      	movs	r1, #1
 80053ac:	430a      	orrs	r2, r1
 80053ae:	661a      	str	r2, [r3, #96]	; 0x60

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80053b0:	f7fe f98c 	bl	80036cc <HAL_GetTick>
 80053b4:	0003      	movs	r3, r0
 80053b6:	613b      	str	r3, [r7, #16]

        /* Wait till LSI is ready */
        while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 80053b8:	e008      	b.n	80053cc <HAL_RCC_OscConfig+0x2b4>
        {
          if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80053ba:	f7fe f987 	bl	80036cc <HAL_GetTick>
 80053be:	0002      	movs	r2, r0
 80053c0:	693b      	ldr	r3, [r7, #16]
 80053c2:	1ad3      	subs	r3, r2, r3
 80053c4:	2b02      	cmp	r3, #2
 80053c6:	d901      	bls.n	80053cc <HAL_RCC_OscConfig+0x2b4>
          {
            return HAL_TIMEOUT;
 80053c8:	2303      	movs	r3, #3
 80053ca:	e1ad      	b.n	8005728 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 80053cc:	4b1d      	ldr	r3, [pc, #116]	; (8005444 <HAL_RCC_OscConfig+0x32c>)
 80053ce:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80053d0:	2202      	movs	r2, #2
 80053d2:	4013      	ands	r3, r2
 80053d4:	d0f1      	beq.n	80053ba <HAL_RCC_OscConfig+0x2a2>
 80053d6:	e018      	b.n	800540a <HAL_RCC_OscConfig+0x2f2>
        }
      }
      else
      {
        /* Disable the Internal Low Speed oscillator (LSI). */
        __HAL_RCC_LSI_DISABLE();
 80053d8:	4b1a      	ldr	r3, [pc, #104]	; (8005444 <HAL_RCC_OscConfig+0x32c>)
 80053da:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 80053dc:	4b19      	ldr	r3, [pc, #100]	; (8005444 <HAL_RCC_OscConfig+0x32c>)
 80053de:	2101      	movs	r1, #1
 80053e0:	438a      	bics	r2, r1
 80053e2:	661a      	str	r2, [r3, #96]	; 0x60

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80053e4:	f7fe f972 	bl	80036cc <HAL_GetTick>
 80053e8:	0003      	movs	r3, r0
 80053ea:	613b      	str	r3, [r7, #16]

        /* Wait till LSI is disabled */
        while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 80053ec:	e008      	b.n	8005400 <HAL_RCC_OscConfig+0x2e8>
        {
          if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80053ee:	f7fe f96d 	bl	80036cc <HAL_GetTick>
 80053f2:	0002      	movs	r2, r0
 80053f4:	693b      	ldr	r3, [r7, #16]
 80053f6:	1ad3      	subs	r3, r2, r3
 80053f8:	2b02      	cmp	r3, #2
 80053fa:	d901      	bls.n	8005400 <HAL_RCC_OscConfig+0x2e8>
          {
            return HAL_TIMEOUT;
 80053fc:	2303      	movs	r3, #3
 80053fe:	e193      	b.n	8005728 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8005400:	4b10      	ldr	r3, [pc, #64]	; (8005444 <HAL_RCC_OscConfig+0x32c>)
 8005402:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8005404:	2202      	movs	r2, #2
 8005406:	4013      	ands	r3, r2
 8005408:	d1f1      	bne.n	80053ee <HAL_RCC_OscConfig+0x2d6>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 800540a:	687b      	ldr	r3, [r7, #4]
 800540c:	681b      	ldr	r3, [r3, #0]
 800540e:	2204      	movs	r2, #4
 8005410:	4013      	ands	r3, r2
 8005412:	d100      	bne.n	8005416 <HAL_RCC_OscConfig+0x2fe>
 8005414:	e0c6      	b.n	80055a4 <HAL_RCC_OscConfig+0x48c>
  {
    FlagStatus       pwrclkchanged = RESET;
 8005416:	231f      	movs	r3, #31
 8005418:	18fb      	adds	r3, r7, r3
 800541a:	2200      	movs	r2, #0
 800541c:	701a      	strb	r2, [r3, #0]

    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* When the LSE is used as system clock, it is not allowed disable it */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_LSE)
 800541e:	4b09      	ldr	r3, [pc, #36]	; (8005444 <HAL_RCC_OscConfig+0x32c>)
 8005420:	689b      	ldr	r3, [r3, #8]
 8005422:	2238      	movs	r2, #56	; 0x38
 8005424:	4013      	ands	r3, r2
 8005426:	2b20      	cmp	r3, #32
 8005428:	d11e      	bne.n	8005468 <HAL_RCC_OscConfig+0x350>
    {
      if ((((RCC->BDCR) & RCC_BDCR_LSERDY) != 0U) && (RCC_OscInitStruct->LSEState == RCC_LSE_OFF))
 800542a:	4b06      	ldr	r3, [pc, #24]	; (8005444 <HAL_RCC_OscConfig+0x32c>)
 800542c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800542e:	2202      	movs	r2, #2
 8005430:	4013      	ands	r3, r2
 8005432:	d100      	bne.n	8005436 <HAL_RCC_OscConfig+0x31e>
 8005434:	e0b6      	b.n	80055a4 <HAL_RCC_OscConfig+0x48c>
 8005436:	687b      	ldr	r3, [r7, #4]
 8005438:	689b      	ldr	r3, [r3, #8]
 800543a:	2b00      	cmp	r3, #0
 800543c:	d000      	beq.n	8005440 <HAL_RCC_OscConfig+0x328>
 800543e:	e0b1      	b.n	80055a4 <HAL_RCC_OscConfig+0x48c>
      {
        return HAL_ERROR;
 8005440:	2301      	movs	r3, #1
 8005442:	e171      	b.n	8005728 <HAL_RCC_OscConfig+0x610>
 8005444:	40021000 	.word	0x40021000
 8005448:	fffeffff 	.word	0xfffeffff
 800544c:	fffbffff 	.word	0xfffbffff
 8005450:	ffff80ff 	.word	0xffff80ff
 8005454:	ffffc7ff 	.word	0xffffc7ff
 8005458:	00f42400 	.word	0x00f42400
 800545c:	20000008 	.word	0x20000008
 8005460:	2000000c 	.word	0x2000000c
 8005464:	fffffeff 	.word	0xfffffeff
    }
    else
    {
      /* Update LSE configuration in Backup Domain control register    */
      /* Requires to enable write access to Backup Domain of necessary */
      if (__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 8005468:	4bb1      	ldr	r3, [pc, #708]	; (8005730 <HAL_RCC_OscConfig+0x618>)
 800546a:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800546c:	2380      	movs	r3, #128	; 0x80
 800546e:	055b      	lsls	r3, r3, #21
 8005470:	4013      	ands	r3, r2
 8005472:	d101      	bne.n	8005478 <HAL_RCC_OscConfig+0x360>
 8005474:	2301      	movs	r3, #1
 8005476:	e000      	b.n	800547a <HAL_RCC_OscConfig+0x362>
 8005478:	2300      	movs	r3, #0
 800547a:	2b00      	cmp	r3, #0
 800547c:	d011      	beq.n	80054a2 <HAL_RCC_OscConfig+0x38a>
      {
        __HAL_RCC_PWR_CLK_ENABLE();
 800547e:	4bac      	ldr	r3, [pc, #688]	; (8005730 <HAL_RCC_OscConfig+0x618>)
 8005480:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8005482:	4bab      	ldr	r3, [pc, #684]	; (8005730 <HAL_RCC_OscConfig+0x618>)
 8005484:	2180      	movs	r1, #128	; 0x80
 8005486:	0549      	lsls	r1, r1, #21
 8005488:	430a      	orrs	r2, r1
 800548a:	63da      	str	r2, [r3, #60]	; 0x3c
 800548c:	4ba8      	ldr	r3, [pc, #672]	; (8005730 <HAL_RCC_OscConfig+0x618>)
 800548e:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8005490:	2380      	movs	r3, #128	; 0x80
 8005492:	055b      	lsls	r3, r3, #21
 8005494:	4013      	ands	r3, r2
 8005496:	60fb      	str	r3, [r7, #12]
 8005498:	68fb      	ldr	r3, [r7, #12]
        pwrclkchanged = SET;
 800549a:	231f      	movs	r3, #31
 800549c:	18fb      	adds	r3, r7, r3
 800549e:	2201      	movs	r2, #1
 80054a0:	701a      	strb	r2, [r3, #0]
      }

      if (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80054a2:	4ba4      	ldr	r3, [pc, #656]	; (8005734 <HAL_RCC_OscConfig+0x61c>)
 80054a4:	681a      	ldr	r2, [r3, #0]
 80054a6:	2380      	movs	r3, #128	; 0x80
 80054a8:	005b      	lsls	r3, r3, #1
 80054aa:	4013      	ands	r3, r2
 80054ac:	d11a      	bne.n	80054e4 <HAL_RCC_OscConfig+0x3cc>
      {
        /* Enable write access to Backup domain */
        SET_BIT(PWR->CR1, PWR_CR1_DBP);
 80054ae:	4ba1      	ldr	r3, [pc, #644]	; (8005734 <HAL_RCC_OscConfig+0x61c>)
 80054b0:	681a      	ldr	r2, [r3, #0]
 80054b2:	4ba0      	ldr	r3, [pc, #640]	; (8005734 <HAL_RCC_OscConfig+0x61c>)
 80054b4:	2180      	movs	r1, #128	; 0x80
 80054b6:	0049      	lsls	r1, r1, #1
 80054b8:	430a      	orrs	r2, r1
 80054ba:	601a      	str	r2, [r3, #0]

        /* Wait for Backup domain Write protection disable */
        tickstart = HAL_GetTick();
 80054bc:	f7fe f906 	bl	80036cc <HAL_GetTick>
 80054c0:	0003      	movs	r3, r0
 80054c2:	613b      	str	r3, [r7, #16]

        while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80054c4:	e008      	b.n	80054d8 <HAL_RCC_OscConfig+0x3c0>
        {
          if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80054c6:	f7fe f901 	bl	80036cc <HAL_GetTick>
 80054ca:	0002      	movs	r2, r0
 80054cc:	693b      	ldr	r3, [r7, #16]
 80054ce:	1ad3      	subs	r3, r2, r3
 80054d0:	2b02      	cmp	r3, #2
 80054d2:	d901      	bls.n	80054d8 <HAL_RCC_OscConfig+0x3c0>
          {
            return HAL_TIMEOUT;
 80054d4:	2303      	movs	r3, #3
 80054d6:	e127      	b.n	8005728 <HAL_RCC_OscConfig+0x610>
        while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80054d8:	4b96      	ldr	r3, [pc, #600]	; (8005734 <HAL_RCC_OscConfig+0x61c>)
 80054da:	681a      	ldr	r2, [r3, #0]
 80054dc:	2380      	movs	r3, #128	; 0x80
 80054de:	005b      	lsls	r3, r3, #1
 80054e0:	4013      	ands	r3, r2
 80054e2:	d0f0      	beq.n	80054c6 <HAL_RCC_OscConfig+0x3ae>
          }
        }
      }

      /* Set the new LSE configuration -----------------------------------------*/
      __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80054e4:	687b      	ldr	r3, [r7, #4]
 80054e6:	689b      	ldr	r3, [r3, #8]
 80054e8:	2b01      	cmp	r3, #1
 80054ea:	d106      	bne.n	80054fa <HAL_RCC_OscConfig+0x3e2>
 80054ec:	4b90      	ldr	r3, [pc, #576]	; (8005730 <HAL_RCC_OscConfig+0x618>)
 80054ee:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 80054f0:	4b8f      	ldr	r3, [pc, #572]	; (8005730 <HAL_RCC_OscConfig+0x618>)
 80054f2:	2101      	movs	r1, #1
 80054f4:	430a      	orrs	r2, r1
 80054f6:	65da      	str	r2, [r3, #92]	; 0x5c
 80054f8:	e01c      	b.n	8005534 <HAL_RCC_OscConfig+0x41c>
 80054fa:	687b      	ldr	r3, [r7, #4]
 80054fc:	689b      	ldr	r3, [r3, #8]
 80054fe:	2b05      	cmp	r3, #5
 8005500:	d10c      	bne.n	800551c <HAL_RCC_OscConfig+0x404>
 8005502:	4b8b      	ldr	r3, [pc, #556]	; (8005730 <HAL_RCC_OscConfig+0x618>)
 8005504:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 8005506:	4b8a      	ldr	r3, [pc, #552]	; (8005730 <HAL_RCC_OscConfig+0x618>)
 8005508:	2104      	movs	r1, #4
 800550a:	430a      	orrs	r2, r1
 800550c:	65da      	str	r2, [r3, #92]	; 0x5c
 800550e:	4b88      	ldr	r3, [pc, #544]	; (8005730 <HAL_RCC_OscConfig+0x618>)
 8005510:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 8005512:	4b87      	ldr	r3, [pc, #540]	; (8005730 <HAL_RCC_OscConfig+0x618>)
 8005514:	2101      	movs	r1, #1
 8005516:	430a      	orrs	r2, r1
 8005518:	65da      	str	r2, [r3, #92]	; 0x5c
 800551a:	e00b      	b.n	8005534 <HAL_RCC_OscConfig+0x41c>
 800551c:	4b84      	ldr	r3, [pc, #528]	; (8005730 <HAL_RCC_OscConfig+0x618>)
 800551e:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 8005520:	4b83      	ldr	r3, [pc, #524]	; (8005730 <HAL_RCC_OscConfig+0x618>)
 8005522:	2101      	movs	r1, #1
 8005524:	438a      	bics	r2, r1
 8005526:	65da      	str	r2, [r3, #92]	; 0x5c
 8005528:	4b81      	ldr	r3, [pc, #516]	; (8005730 <HAL_RCC_OscConfig+0x618>)
 800552a:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 800552c:	4b80      	ldr	r3, [pc, #512]	; (8005730 <HAL_RCC_OscConfig+0x618>)
 800552e:	2104      	movs	r1, #4
 8005530:	438a      	bics	r2, r1
 8005532:	65da      	str	r2, [r3, #92]	; 0x5c

      /* Check the LSE State */
      if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8005534:	687b      	ldr	r3, [r7, #4]
 8005536:	689b      	ldr	r3, [r3, #8]
 8005538:	2b00      	cmp	r3, #0
 800553a:	d014      	beq.n	8005566 <HAL_RCC_OscConfig+0x44e>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800553c:	f7fe f8c6 	bl	80036cc <HAL_GetTick>
 8005540:	0003      	movs	r3, r0
 8005542:	613b      	str	r3, [r7, #16]

        /* Wait till LSE is ready */
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8005544:	e009      	b.n	800555a <HAL_RCC_OscConfig+0x442>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8005546:	f7fe f8c1 	bl	80036cc <HAL_GetTick>
 800554a:	0002      	movs	r2, r0
 800554c:	693b      	ldr	r3, [r7, #16]
 800554e:	1ad3      	subs	r3, r2, r3
 8005550:	4a79      	ldr	r2, [pc, #484]	; (8005738 <HAL_RCC_OscConfig+0x620>)
 8005552:	4293      	cmp	r3, r2
 8005554:	d901      	bls.n	800555a <HAL_RCC_OscConfig+0x442>
          {
            return HAL_TIMEOUT;
 8005556:	2303      	movs	r3, #3
 8005558:	e0e6      	b.n	8005728 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 800555a:	4b75      	ldr	r3, [pc, #468]	; (8005730 <HAL_RCC_OscConfig+0x618>)
 800555c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800555e:	2202      	movs	r2, #2
 8005560:	4013      	ands	r3, r2
 8005562:	d0f0      	beq.n	8005546 <HAL_RCC_OscConfig+0x42e>
 8005564:	e013      	b.n	800558e <HAL_RCC_OscConfig+0x476>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005566:	f7fe f8b1 	bl	80036cc <HAL_GetTick>
 800556a:	0003      	movs	r3, r0
 800556c:	613b      	str	r3, [r7, #16]

        /* Wait till LSE is disabled */
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 800556e:	e009      	b.n	8005584 <HAL_RCC_OscConfig+0x46c>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8005570:	f7fe f8ac 	bl	80036cc <HAL_GetTick>
 8005574:	0002      	movs	r2, r0
 8005576:	693b      	ldr	r3, [r7, #16]
 8005578:	1ad3      	subs	r3, r2, r3
 800557a:	4a6f      	ldr	r2, [pc, #444]	; (8005738 <HAL_RCC_OscConfig+0x620>)
 800557c:	4293      	cmp	r3, r2
 800557e:	d901      	bls.n	8005584 <HAL_RCC_OscConfig+0x46c>
          {
            return HAL_TIMEOUT;
 8005580:	2303      	movs	r3, #3
 8005582:	e0d1      	b.n	8005728 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8005584:	4b6a      	ldr	r3, [pc, #424]	; (8005730 <HAL_RCC_OscConfig+0x618>)
 8005586:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8005588:	2202      	movs	r2, #2
 800558a:	4013      	ands	r3, r2
 800558c:	d1f0      	bne.n	8005570 <HAL_RCC_OscConfig+0x458>
          }
        }
      }

      /* Restore clock configuration if changed */
      if (pwrclkchanged == SET)
 800558e:	231f      	movs	r3, #31
 8005590:	18fb      	adds	r3, r7, r3
 8005592:	781b      	ldrb	r3, [r3, #0]
 8005594:	2b01      	cmp	r3, #1
 8005596:	d105      	bne.n	80055a4 <HAL_RCC_OscConfig+0x48c>
      {
        __HAL_RCC_PWR_CLK_DISABLE();
 8005598:	4b65      	ldr	r3, [pc, #404]	; (8005730 <HAL_RCC_OscConfig+0x618>)
 800559a:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800559c:	4b64      	ldr	r3, [pc, #400]	; (8005730 <HAL_RCC_OscConfig+0x618>)
 800559e:	4967      	ldr	r1, [pc, #412]	; (800573c <HAL_RCC_OscConfig+0x624>)
 80055a0:	400a      	ands	r2, r1
 80055a2:	63da      	str	r2, [r3, #60]	; 0x3c
#endif /* RCC_HSI48_SUPPORT */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if (RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 80055a4:	687b      	ldr	r3, [r7, #4]
 80055a6:	69db      	ldr	r3, [r3, #28]
 80055a8:	2b00      	cmp	r3, #0
 80055aa:	d100      	bne.n	80055ae <HAL_RCC_OscConfig+0x496>
 80055ac:	e0bb      	b.n	8005726 <HAL_RCC_OscConfig+0x60e>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 80055ae:	4b60      	ldr	r3, [pc, #384]	; (8005730 <HAL_RCC_OscConfig+0x618>)
 80055b0:	689b      	ldr	r3, [r3, #8]
 80055b2:	2238      	movs	r2, #56	; 0x38
 80055b4:	4013      	ands	r3, r2
 80055b6:	2b10      	cmp	r3, #16
 80055b8:	d100      	bne.n	80055bc <HAL_RCC_OscConfig+0x4a4>
 80055ba:	e07b      	b.n	80056b4 <HAL_RCC_OscConfig+0x59c>
    {
      if (RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 80055bc:	687b      	ldr	r3, [r7, #4]
 80055be:	69db      	ldr	r3, [r3, #28]
 80055c0:	2b02      	cmp	r3, #2
 80055c2:	d156      	bne.n	8005672 <HAL_RCC_OscConfig+0x55a>
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
#endif /* RCC_PLLQ_SUPPORT */
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80055c4:	4b5a      	ldr	r3, [pc, #360]	; (8005730 <HAL_RCC_OscConfig+0x618>)
 80055c6:	681a      	ldr	r2, [r3, #0]
 80055c8:	4b59      	ldr	r3, [pc, #356]	; (8005730 <HAL_RCC_OscConfig+0x618>)
 80055ca:	495d      	ldr	r1, [pc, #372]	; (8005740 <HAL_RCC_OscConfig+0x628>)
 80055cc:	400a      	ands	r2, r1
 80055ce:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80055d0:	f7fe f87c 	bl	80036cc <HAL_GetTick>
 80055d4:	0003      	movs	r3, r0
 80055d6:	613b      	str	r3, [r7, #16]

        /* Wait till PLL is ready */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80055d8:	e008      	b.n	80055ec <HAL_RCC_OscConfig+0x4d4>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80055da:	f7fe f877 	bl	80036cc <HAL_GetTick>
 80055de:	0002      	movs	r2, r0
 80055e0:	693b      	ldr	r3, [r7, #16]
 80055e2:	1ad3      	subs	r3, r2, r3
 80055e4:	2b02      	cmp	r3, #2
 80055e6:	d901      	bls.n	80055ec <HAL_RCC_OscConfig+0x4d4>
          {
            return HAL_TIMEOUT;
 80055e8:	2303      	movs	r3, #3
 80055ea:	e09d      	b.n	8005728 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80055ec:	4b50      	ldr	r3, [pc, #320]	; (8005730 <HAL_RCC_OscConfig+0x618>)
 80055ee:	681a      	ldr	r2, [r3, #0]
 80055f0:	2380      	movs	r3, #128	; 0x80
 80055f2:	049b      	lsls	r3, r3, #18
 80055f4:	4013      	ands	r3, r2
 80055f6:	d1f0      	bne.n	80055da <HAL_RCC_OscConfig+0x4c2>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
#if defined(RCC_PLLQ_SUPPORT)
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 80055f8:	4b4d      	ldr	r3, [pc, #308]	; (8005730 <HAL_RCC_OscConfig+0x618>)
 80055fa:	68db      	ldr	r3, [r3, #12]
 80055fc:	4a51      	ldr	r2, [pc, #324]	; (8005744 <HAL_RCC_OscConfig+0x62c>)
 80055fe:	4013      	ands	r3, r2
 8005600:	0019      	movs	r1, r3
 8005602:	687b      	ldr	r3, [r7, #4]
 8005604:	6a1a      	ldr	r2, [r3, #32]
 8005606:	687b      	ldr	r3, [r7, #4]
 8005608:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800560a:	431a      	orrs	r2, r3
 800560c:	687b      	ldr	r3, [r7, #4]
 800560e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005610:	021b      	lsls	r3, r3, #8
 8005612:	431a      	orrs	r2, r3
 8005614:	687b      	ldr	r3, [r7, #4]
 8005616:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005618:	431a      	orrs	r2, r3
 800561a:	687b      	ldr	r3, [r7, #4]
 800561c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800561e:	431a      	orrs	r2, r3
 8005620:	687b      	ldr	r3, [r7, #4]
 8005622:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005624:	431a      	orrs	r2, r3
 8005626:	4b42      	ldr	r3, [pc, #264]	; (8005730 <HAL_RCC_OscConfig+0x618>)
 8005628:	430a      	orrs	r2, r1
 800562a:	60da      	str	r2, [r3, #12]
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLR);
#endif /* RCC_PLLQ_SUPPORT */

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 800562c:	4b40      	ldr	r3, [pc, #256]	; (8005730 <HAL_RCC_OscConfig+0x618>)
 800562e:	681a      	ldr	r2, [r3, #0]
 8005630:	4b3f      	ldr	r3, [pc, #252]	; (8005730 <HAL_RCC_OscConfig+0x618>)
 8005632:	2180      	movs	r1, #128	; 0x80
 8005634:	0449      	lsls	r1, r1, #17
 8005636:	430a      	orrs	r2, r1
 8005638:	601a      	str	r2, [r3, #0]

        /* Enable PLLR Clock output. */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLLRCLK);
 800563a:	4b3d      	ldr	r3, [pc, #244]	; (8005730 <HAL_RCC_OscConfig+0x618>)
 800563c:	68da      	ldr	r2, [r3, #12]
 800563e:	4b3c      	ldr	r3, [pc, #240]	; (8005730 <HAL_RCC_OscConfig+0x618>)
 8005640:	2180      	movs	r1, #128	; 0x80
 8005642:	0549      	lsls	r1, r1, #21
 8005644:	430a      	orrs	r2, r1
 8005646:	60da      	str	r2, [r3, #12]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005648:	f7fe f840 	bl	80036cc <HAL_GetTick>
 800564c:	0003      	movs	r3, r0
 800564e:	613b      	str	r3, [r7, #16]

        /* Wait till PLL is ready */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8005650:	e008      	b.n	8005664 <HAL_RCC_OscConfig+0x54c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8005652:	f7fe f83b 	bl	80036cc <HAL_GetTick>
 8005656:	0002      	movs	r2, r0
 8005658:	693b      	ldr	r3, [r7, #16]
 800565a:	1ad3      	subs	r3, r2, r3
 800565c:	2b02      	cmp	r3, #2
 800565e:	d901      	bls.n	8005664 <HAL_RCC_OscConfig+0x54c>
          {
            return HAL_TIMEOUT;
 8005660:	2303      	movs	r3, #3
 8005662:	e061      	b.n	8005728 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8005664:	4b32      	ldr	r3, [pc, #200]	; (8005730 <HAL_RCC_OscConfig+0x618>)
 8005666:	681a      	ldr	r2, [r3, #0]
 8005668:	2380      	movs	r3, #128	; 0x80
 800566a:	049b      	lsls	r3, r3, #18
 800566c:	4013      	ands	r3, r2
 800566e:	d0f0      	beq.n	8005652 <HAL_RCC_OscConfig+0x53a>
 8005670:	e059      	b.n	8005726 <HAL_RCC_OscConfig+0x60e>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8005672:	4b2f      	ldr	r3, [pc, #188]	; (8005730 <HAL_RCC_OscConfig+0x618>)
 8005674:	681a      	ldr	r2, [r3, #0]
 8005676:	4b2e      	ldr	r3, [pc, #184]	; (8005730 <HAL_RCC_OscConfig+0x618>)
 8005678:	4931      	ldr	r1, [pc, #196]	; (8005740 <HAL_RCC_OscConfig+0x628>)
 800567a:	400a      	ands	r2, r1
 800567c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800567e:	f7fe f825 	bl	80036cc <HAL_GetTick>
 8005682:	0003      	movs	r3, r0
 8005684:	613b      	str	r3, [r7, #16]

        /* Wait till PLL is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8005686:	e008      	b.n	800569a <HAL_RCC_OscConfig+0x582>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8005688:	f7fe f820 	bl	80036cc <HAL_GetTick>
 800568c:	0002      	movs	r2, r0
 800568e:	693b      	ldr	r3, [r7, #16]
 8005690:	1ad3      	subs	r3, r2, r3
 8005692:	2b02      	cmp	r3, #2
 8005694:	d901      	bls.n	800569a <HAL_RCC_OscConfig+0x582>
          {
            return HAL_TIMEOUT;
 8005696:	2303      	movs	r3, #3
 8005698:	e046      	b.n	8005728 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 800569a:	4b25      	ldr	r3, [pc, #148]	; (8005730 <HAL_RCC_OscConfig+0x618>)
 800569c:	681a      	ldr	r2, [r3, #0]
 800569e:	2380      	movs	r3, #128	; 0x80
 80056a0:	049b      	lsls	r3, r3, #18
 80056a2:	4013      	ands	r3, r2
 80056a4:	d1f0      	bne.n	8005688 <HAL_RCC_OscConfig+0x570>
          }
        }
        /* Unselect main PLL clock source and disable main PLL outputs to save power */
#if defined(RCC_PLLQ_SUPPORT)
        RCC->PLLCFGR &= ~(RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLPEN | RCC_PLLCFGR_PLLQEN | RCC_PLLCFGR_PLLREN);
 80056a6:	4b22      	ldr	r3, [pc, #136]	; (8005730 <HAL_RCC_OscConfig+0x618>)
 80056a8:	68da      	ldr	r2, [r3, #12]
 80056aa:	4b21      	ldr	r3, [pc, #132]	; (8005730 <HAL_RCC_OscConfig+0x618>)
 80056ac:	4926      	ldr	r1, [pc, #152]	; (8005748 <HAL_RCC_OscConfig+0x630>)
 80056ae:	400a      	ands	r2, r1
 80056b0:	60da      	str	r2, [r3, #12]
 80056b2:	e038      	b.n	8005726 <HAL_RCC_OscConfig+0x60e>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 80056b4:	687b      	ldr	r3, [r7, #4]
 80056b6:	69db      	ldr	r3, [r3, #28]
 80056b8:	2b01      	cmp	r3, #1
 80056ba:	d101      	bne.n	80056c0 <HAL_RCC_OscConfig+0x5a8>
      {
        return HAL_ERROR;
 80056bc:	2301      	movs	r3, #1
 80056be:	e033      	b.n	8005728 <HAL_RCC_OscConfig+0x610>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        temp_pllckcfg = RCC->PLLCFGR;
 80056c0:	4b1b      	ldr	r3, [pc, #108]	; (8005730 <HAL_RCC_OscConfig+0x618>)
 80056c2:	68db      	ldr	r3, [r3, #12]
 80056c4:	617b      	str	r3, [r7, #20]
        if ((READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80056c6:	697b      	ldr	r3, [r7, #20]
 80056c8:	2203      	movs	r2, #3
 80056ca:	401a      	ands	r2, r3
 80056cc:	687b      	ldr	r3, [r7, #4]
 80056ce:	6a1b      	ldr	r3, [r3, #32]
 80056d0:	429a      	cmp	r2, r3
 80056d2:	d126      	bne.n	8005722 <HAL_RCC_OscConfig+0x60a>
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 80056d4:	697b      	ldr	r3, [r7, #20]
 80056d6:	2270      	movs	r2, #112	; 0x70
 80056d8:	401a      	ands	r2, r3
 80056da:	687b      	ldr	r3, [r7, #4]
 80056dc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
        if ((READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80056de:	429a      	cmp	r2, r3
 80056e0:	d11f      	bne.n	8005722 <HAL_RCC_OscConfig+0x60a>
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 80056e2:	697a      	ldr	r2, [r7, #20]
 80056e4:	23fe      	movs	r3, #254	; 0xfe
 80056e6:	01db      	lsls	r3, r3, #7
 80056e8:	401a      	ands	r2, r3
 80056ea:	687b      	ldr	r3, [r7, #4]
 80056ec:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80056ee:	021b      	lsls	r3, r3, #8
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 80056f0:	429a      	cmp	r2, r3
 80056f2:	d116      	bne.n	8005722 <HAL_RCC_OscConfig+0x60a>
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLP) != RCC_OscInitStruct->PLL.PLLP) ||
 80056f4:	697a      	ldr	r2, [r7, #20]
 80056f6:	23f8      	movs	r3, #248	; 0xf8
 80056f8:	039b      	lsls	r3, r3, #14
 80056fa:	401a      	ands	r2, r3
 80056fc:	687b      	ldr	r3, [r7, #4]
 80056fe:	6adb      	ldr	r3, [r3, #44]	; 0x2c
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8005700:	429a      	cmp	r2, r3
 8005702:	d10e      	bne.n	8005722 <HAL_RCC_OscConfig+0x60a>
#if defined (RCC_PLLQ_SUPPORT)
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLQ) != RCC_OscInitStruct->PLL.PLLQ) ||
 8005704:	697a      	ldr	r2, [r7, #20]
 8005706:	23e0      	movs	r3, #224	; 0xe0
 8005708:	051b      	lsls	r3, r3, #20
 800570a:	401a      	ands	r2, r3
 800570c:	687b      	ldr	r3, [r7, #4]
 800570e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLP) != RCC_OscInitStruct->PLL.PLLP) ||
 8005710:	429a      	cmp	r2, r3
 8005712:	d106      	bne.n	8005722 <HAL_RCC_OscConfig+0x60a>
#endif /* RCC_PLLQ_SUPPORT */
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLR) != RCC_OscInitStruct->PLL.PLLR))
 8005714:	697b      	ldr	r3, [r7, #20]
 8005716:	0f5b      	lsrs	r3, r3, #29
 8005718:	075a      	lsls	r2, r3, #29
 800571a:	687b      	ldr	r3, [r7, #4]
 800571c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLQ) != RCC_OscInitStruct->PLL.PLLQ) ||
 800571e:	429a      	cmp	r2, r3
 8005720:	d001      	beq.n	8005726 <HAL_RCC_OscConfig+0x60e>
        {
          return HAL_ERROR;
 8005722:	2301      	movs	r3, #1
 8005724:	e000      	b.n	8005728 <HAL_RCC_OscConfig+0x610>
        }
      }
    }
  }
  return HAL_OK;
 8005726:	2300      	movs	r3, #0
}
 8005728:	0018      	movs	r0, r3
 800572a:	46bd      	mov	sp, r7
 800572c:	b008      	add	sp, #32
 800572e:	bd80      	pop	{r7, pc}
 8005730:	40021000 	.word	0x40021000
 8005734:	40007000 	.word	0x40007000
 8005738:	00001388 	.word	0x00001388
 800573c:	efffffff 	.word	0xefffffff
 8005740:	feffffff 	.word	0xfeffffff
 8005744:	11c1808c 	.word	0x11c1808c
 8005748:	eefefffc 	.word	0xeefefffc

0800574c <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 800574c:	b580      	push	{r7, lr}
 800574e:	b084      	sub	sp, #16
 8005750:	af00      	add	r7, sp, #0
 8005752:	6078      	str	r0, [r7, #4]
 8005754:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8005756:	687b      	ldr	r3, [r7, #4]
 8005758:	2b00      	cmp	r3, #0
 800575a:	d101      	bne.n	8005760 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 800575c:	2301      	movs	r3, #1
 800575e:	e0e9      	b.n	8005934 <HAL_RCC_ClockConfig+0x1e8>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the FLASH clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8005760:	4b76      	ldr	r3, [pc, #472]	; (800593c <HAL_RCC_ClockConfig+0x1f0>)
 8005762:	681b      	ldr	r3, [r3, #0]
 8005764:	2207      	movs	r2, #7
 8005766:	4013      	ands	r3, r2
 8005768:	683a      	ldr	r2, [r7, #0]
 800576a:	429a      	cmp	r2, r3
 800576c:	d91e      	bls.n	80057ac <HAL_RCC_ClockConfig+0x60>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800576e:	4b73      	ldr	r3, [pc, #460]	; (800593c <HAL_RCC_ClockConfig+0x1f0>)
 8005770:	681b      	ldr	r3, [r3, #0]
 8005772:	2207      	movs	r2, #7
 8005774:	4393      	bics	r3, r2
 8005776:	0019      	movs	r1, r3
 8005778:	4b70      	ldr	r3, [pc, #448]	; (800593c <HAL_RCC_ClockConfig+0x1f0>)
 800577a:	683a      	ldr	r2, [r7, #0]
 800577c:	430a      	orrs	r2, r1
 800577e:	601a      	str	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by polling the FLASH_ACR register */
    tickstart = HAL_GetTick();
 8005780:	f7fd ffa4 	bl	80036cc <HAL_GetTick>
 8005784:	0003      	movs	r3, r0
 8005786:	60fb      	str	r3, [r7, #12]

    while ((FLASH->ACR & FLASH_ACR_LATENCY) != FLatency)
 8005788:	e009      	b.n	800579e <HAL_RCC_ClockConfig+0x52>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 800578a:	f7fd ff9f 	bl	80036cc <HAL_GetTick>
 800578e:	0002      	movs	r2, r0
 8005790:	68fb      	ldr	r3, [r7, #12]
 8005792:	1ad3      	subs	r3, r2, r3
 8005794:	4a6a      	ldr	r2, [pc, #424]	; (8005940 <HAL_RCC_ClockConfig+0x1f4>)
 8005796:	4293      	cmp	r3, r2
 8005798:	d901      	bls.n	800579e <HAL_RCC_ClockConfig+0x52>
      {
        return HAL_TIMEOUT;
 800579a:	2303      	movs	r3, #3
 800579c:	e0ca      	b.n	8005934 <HAL_RCC_ClockConfig+0x1e8>
    while ((FLASH->ACR & FLASH_ACR_LATENCY) != FLatency)
 800579e:	4b67      	ldr	r3, [pc, #412]	; (800593c <HAL_RCC_ClockConfig+0x1f0>)
 80057a0:	681b      	ldr	r3, [r3, #0]
 80057a2:	2207      	movs	r2, #7
 80057a4:	4013      	ands	r3, r2
 80057a6:	683a      	ldr	r2, [r7, #0]
 80057a8:	429a      	cmp	r2, r3
 80057aa:	d1ee      	bne.n	800578a <HAL_RCC_ClockConfig+0x3e>
      }
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80057ac:	687b      	ldr	r3, [r7, #4]
 80057ae:	681b      	ldr	r3, [r3, #0]
 80057b0:	2202      	movs	r2, #2
 80057b2:	4013      	ands	r3, r2
 80057b4:	d015      	beq.n	80057e2 <HAL_RCC_ClockConfig+0x96>
  {
    /* Set the highest APB divider in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80057b6:	687b      	ldr	r3, [r7, #4]
 80057b8:	681b      	ldr	r3, [r3, #0]
 80057ba:	2204      	movs	r2, #4
 80057bc:	4013      	ands	r3, r2
 80057be:	d006      	beq.n	80057ce <HAL_RCC_ClockConfig+0x82>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE, RCC_HCLK_DIV16);
 80057c0:	4b60      	ldr	r3, [pc, #384]	; (8005944 <HAL_RCC_ClockConfig+0x1f8>)
 80057c2:	689a      	ldr	r2, [r3, #8]
 80057c4:	4b5f      	ldr	r3, [pc, #380]	; (8005944 <HAL_RCC_ClockConfig+0x1f8>)
 80057c6:	21e0      	movs	r1, #224	; 0xe0
 80057c8:	01c9      	lsls	r1, r1, #7
 80057ca:	430a      	orrs	r2, r1
 80057cc:	609a      	str	r2, [r3, #8]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80057ce:	4b5d      	ldr	r3, [pc, #372]	; (8005944 <HAL_RCC_ClockConfig+0x1f8>)
 80057d0:	689b      	ldr	r3, [r3, #8]
 80057d2:	4a5d      	ldr	r2, [pc, #372]	; (8005948 <HAL_RCC_ClockConfig+0x1fc>)
 80057d4:	4013      	ands	r3, r2
 80057d6:	0019      	movs	r1, r3
 80057d8:	687b      	ldr	r3, [r7, #4]
 80057da:	689a      	ldr	r2, [r3, #8]
 80057dc:	4b59      	ldr	r3, [pc, #356]	; (8005944 <HAL_RCC_ClockConfig+0x1f8>)
 80057de:	430a      	orrs	r2, r1
 80057e0:	609a      	str	r2, [r3, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80057e2:	687b      	ldr	r3, [r7, #4]
 80057e4:	681b      	ldr	r3, [r3, #0]
 80057e6:	2201      	movs	r2, #1
 80057e8:	4013      	ands	r3, r2
 80057ea:	d057      	beq.n	800589c <HAL_RCC_ClockConfig+0x150>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80057ec:	687b      	ldr	r3, [r7, #4]
 80057ee:	685b      	ldr	r3, [r3, #4]
 80057f0:	2b01      	cmp	r3, #1
 80057f2:	d107      	bne.n	8005804 <HAL_RCC_ClockConfig+0xb8>
    {
      /* Check the HSE ready flag */
      if (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 80057f4:	4b53      	ldr	r3, [pc, #332]	; (8005944 <HAL_RCC_ClockConfig+0x1f8>)
 80057f6:	681a      	ldr	r2, [r3, #0]
 80057f8:	2380      	movs	r3, #128	; 0x80
 80057fa:	029b      	lsls	r3, r3, #10
 80057fc:	4013      	ands	r3, r2
 80057fe:	d12b      	bne.n	8005858 <HAL_RCC_ClockConfig+0x10c>
      {
        return HAL_ERROR;
 8005800:	2301      	movs	r3, #1
 8005802:	e097      	b.n	8005934 <HAL_RCC_ClockConfig+0x1e8>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8005804:	687b      	ldr	r3, [r7, #4]
 8005806:	685b      	ldr	r3, [r3, #4]
 8005808:	2b02      	cmp	r3, #2
 800580a:	d107      	bne.n	800581c <HAL_RCC_ClockConfig+0xd0>
    {
      /* Check the PLL ready flag */
      if (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800580c:	4b4d      	ldr	r3, [pc, #308]	; (8005944 <HAL_RCC_ClockConfig+0x1f8>)
 800580e:	681a      	ldr	r2, [r3, #0]
 8005810:	2380      	movs	r3, #128	; 0x80
 8005812:	049b      	lsls	r3, r3, #18
 8005814:	4013      	ands	r3, r2
 8005816:	d11f      	bne.n	8005858 <HAL_RCC_ClockConfig+0x10c>
      {
        return HAL_ERROR;
 8005818:	2301      	movs	r3, #1
 800581a:	e08b      	b.n	8005934 <HAL_RCC_ClockConfig+0x1e8>
      }
    }
    /* HSI is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSI)
 800581c:	687b      	ldr	r3, [r7, #4]
 800581e:	685b      	ldr	r3, [r3, #4]
 8005820:	2b00      	cmp	r3, #0
 8005822:	d107      	bne.n	8005834 <HAL_RCC_ClockConfig+0xe8>
    {
      /* Check the HSI ready flag */
      if (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8005824:	4b47      	ldr	r3, [pc, #284]	; (8005944 <HAL_RCC_ClockConfig+0x1f8>)
 8005826:	681a      	ldr	r2, [r3, #0]
 8005828:	2380      	movs	r3, #128	; 0x80
 800582a:	00db      	lsls	r3, r3, #3
 800582c:	4013      	ands	r3, r2
 800582e:	d113      	bne.n	8005858 <HAL_RCC_ClockConfig+0x10c>
      {
        return HAL_ERROR;
 8005830:	2301      	movs	r3, #1
 8005832:	e07f      	b.n	8005934 <HAL_RCC_ClockConfig+0x1e8>
      }
    }
    /* LSI is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_LSI)
 8005834:	687b      	ldr	r3, [r7, #4]
 8005836:	685b      	ldr	r3, [r3, #4]
 8005838:	2b03      	cmp	r3, #3
 800583a:	d106      	bne.n	800584a <HAL_RCC_ClockConfig+0xfe>
    {
      /* Check the LSI ready flag */
      if (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 800583c:	4b41      	ldr	r3, [pc, #260]	; (8005944 <HAL_RCC_ClockConfig+0x1f8>)
 800583e:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8005840:	2202      	movs	r2, #2
 8005842:	4013      	ands	r3, r2
 8005844:	d108      	bne.n	8005858 <HAL_RCC_ClockConfig+0x10c>
      {
        return HAL_ERROR;
 8005846:	2301      	movs	r3, #1
 8005848:	e074      	b.n	8005934 <HAL_RCC_ClockConfig+0x1e8>
    }
    /* LSE is selected as System Clock Source */
    else
    {
      /* Check the LSE ready flag */
      if (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 800584a:	4b3e      	ldr	r3, [pc, #248]	; (8005944 <HAL_RCC_ClockConfig+0x1f8>)
 800584c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800584e:	2202      	movs	r2, #2
 8005850:	4013      	ands	r3, r2
 8005852:	d101      	bne.n	8005858 <HAL_RCC_ClockConfig+0x10c>
      {
        return HAL_ERROR;
 8005854:	2301      	movs	r3, #1
 8005856:	e06d      	b.n	8005934 <HAL_RCC_ClockConfig+0x1e8>
      }
    }
    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 8005858:	4b3a      	ldr	r3, [pc, #232]	; (8005944 <HAL_RCC_ClockConfig+0x1f8>)
 800585a:	689b      	ldr	r3, [r3, #8]
 800585c:	2207      	movs	r2, #7
 800585e:	4393      	bics	r3, r2
 8005860:	0019      	movs	r1, r3
 8005862:	687b      	ldr	r3, [r7, #4]
 8005864:	685a      	ldr	r2, [r3, #4]
 8005866:	4b37      	ldr	r3, [pc, #220]	; (8005944 <HAL_RCC_ClockConfig+0x1f8>)
 8005868:	430a      	orrs	r2, r1
 800586a:	609a      	str	r2, [r3, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800586c:	f7fd ff2e 	bl	80036cc <HAL_GetTick>
 8005870:	0003      	movs	r3, r0
 8005872:	60fb      	str	r3, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8005874:	e009      	b.n	800588a <HAL_RCC_ClockConfig+0x13e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8005876:	f7fd ff29 	bl	80036cc <HAL_GetTick>
 800587a:	0002      	movs	r2, r0
 800587c:	68fb      	ldr	r3, [r7, #12]
 800587e:	1ad3      	subs	r3, r2, r3
 8005880:	4a2f      	ldr	r2, [pc, #188]	; (8005940 <HAL_RCC_ClockConfig+0x1f4>)
 8005882:	4293      	cmp	r3, r2
 8005884:	d901      	bls.n	800588a <HAL_RCC_ClockConfig+0x13e>
      {
        return HAL_TIMEOUT;
 8005886:	2303      	movs	r3, #3
 8005888:	e054      	b.n	8005934 <HAL_RCC_ClockConfig+0x1e8>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800588a:	4b2e      	ldr	r3, [pc, #184]	; (8005944 <HAL_RCC_ClockConfig+0x1f8>)
 800588c:	689b      	ldr	r3, [r3, #8]
 800588e:	2238      	movs	r2, #56	; 0x38
 8005890:	401a      	ands	r2, r3
 8005892:	687b      	ldr	r3, [r7, #4]
 8005894:	685b      	ldr	r3, [r3, #4]
 8005896:	00db      	lsls	r3, r3, #3
 8005898:	429a      	cmp	r2, r3
 800589a:	d1ec      	bne.n	8005876 <HAL_RCC_ClockConfig+0x12a>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 800589c:	4b27      	ldr	r3, [pc, #156]	; (800593c <HAL_RCC_ClockConfig+0x1f0>)
 800589e:	681b      	ldr	r3, [r3, #0]
 80058a0:	2207      	movs	r2, #7
 80058a2:	4013      	ands	r3, r2
 80058a4:	683a      	ldr	r2, [r7, #0]
 80058a6:	429a      	cmp	r2, r3
 80058a8:	d21e      	bcs.n	80058e8 <HAL_RCC_ClockConfig+0x19c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80058aa:	4b24      	ldr	r3, [pc, #144]	; (800593c <HAL_RCC_ClockConfig+0x1f0>)
 80058ac:	681b      	ldr	r3, [r3, #0]
 80058ae:	2207      	movs	r2, #7
 80058b0:	4393      	bics	r3, r2
 80058b2:	0019      	movs	r1, r3
 80058b4:	4b21      	ldr	r3, [pc, #132]	; (800593c <HAL_RCC_ClockConfig+0x1f0>)
 80058b6:	683a      	ldr	r2, [r7, #0]
 80058b8:	430a      	orrs	r2, r1
 80058ba:	601a      	str	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by polling the FLASH_ACR register */
    tickstart = HAL_GetTick();
 80058bc:	f7fd ff06 	bl	80036cc <HAL_GetTick>
 80058c0:	0003      	movs	r3, r0
 80058c2:	60fb      	str	r3, [r7, #12]

    while ((FLASH->ACR & FLASH_ACR_LATENCY) != FLatency)
 80058c4:	e009      	b.n	80058da <HAL_RCC_ClockConfig+0x18e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80058c6:	f7fd ff01 	bl	80036cc <HAL_GetTick>
 80058ca:	0002      	movs	r2, r0
 80058cc:	68fb      	ldr	r3, [r7, #12]
 80058ce:	1ad3      	subs	r3, r2, r3
 80058d0:	4a1b      	ldr	r2, [pc, #108]	; (8005940 <HAL_RCC_ClockConfig+0x1f4>)
 80058d2:	4293      	cmp	r3, r2
 80058d4:	d901      	bls.n	80058da <HAL_RCC_ClockConfig+0x18e>
      {
        return HAL_TIMEOUT;
 80058d6:	2303      	movs	r3, #3
 80058d8:	e02c      	b.n	8005934 <HAL_RCC_ClockConfig+0x1e8>
    while ((FLASH->ACR & FLASH_ACR_LATENCY) != FLatency)
 80058da:	4b18      	ldr	r3, [pc, #96]	; (800593c <HAL_RCC_ClockConfig+0x1f0>)
 80058dc:	681b      	ldr	r3, [r3, #0]
 80058de:	2207      	movs	r2, #7
 80058e0:	4013      	ands	r3, r2
 80058e2:	683a      	ldr	r2, [r7, #0]
 80058e4:	429a      	cmp	r2, r3
 80058e6:	d1ee      	bne.n	80058c6 <HAL_RCC_ClockConfig+0x17a>
      }
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80058e8:	687b      	ldr	r3, [r7, #4]
 80058ea:	681b      	ldr	r3, [r3, #0]
 80058ec:	2204      	movs	r2, #4
 80058ee:	4013      	ands	r3, r2
 80058f0:	d009      	beq.n	8005906 <HAL_RCC_ClockConfig+0x1ba>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE, RCC_ClkInitStruct->APB1CLKDivider);
 80058f2:	4b14      	ldr	r3, [pc, #80]	; (8005944 <HAL_RCC_ClockConfig+0x1f8>)
 80058f4:	689b      	ldr	r3, [r3, #8]
 80058f6:	4a15      	ldr	r2, [pc, #84]	; (800594c <HAL_RCC_ClockConfig+0x200>)
 80058f8:	4013      	ands	r3, r2
 80058fa:	0019      	movs	r1, r3
 80058fc:	687b      	ldr	r3, [r7, #4]
 80058fe:	68da      	ldr	r2, [r3, #12]
 8005900:	4b10      	ldr	r3, [pc, #64]	; (8005944 <HAL_RCC_ClockConfig+0x1f8>)
 8005902:	430a      	orrs	r2, r1
 8005904:	609a      	str	r2, [r3, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = (HAL_RCC_GetSysClockFreq() >> ((AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos]) & 0x1FU));
 8005906:	f000 f829 	bl	800595c <HAL_RCC_GetSysClockFreq>
 800590a:	0001      	movs	r1, r0
 800590c:	4b0d      	ldr	r3, [pc, #52]	; (8005944 <HAL_RCC_ClockConfig+0x1f8>)
 800590e:	689b      	ldr	r3, [r3, #8]
 8005910:	0a1b      	lsrs	r3, r3, #8
 8005912:	220f      	movs	r2, #15
 8005914:	401a      	ands	r2, r3
 8005916:	4b0e      	ldr	r3, [pc, #56]	; (8005950 <HAL_RCC_ClockConfig+0x204>)
 8005918:	0092      	lsls	r2, r2, #2
 800591a:	58d3      	ldr	r3, [r2, r3]
 800591c:	221f      	movs	r2, #31
 800591e:	4013      	ands	r3, r2
 8005920:	000a      	movs	r2, r1
 8005922:	40da      	lsrs	r2, r3
 8005924:	4b0b      	ldr	r3, [pc, #44]	; (8005954 <HAL_RCC_ClockConfig+0x208>)
 8005926:	601a      	str	r2, [r3, #0]

  /* Configure the source of time base considering new system clocks settings*/
  return HAL_InitTick(uwTickPrio);
 8005928:	4b0b      	ldr	r3, [pc, #44]	; (8005958 <HAL_RCC_ClockConfig+0x20c>)
 800592a:	681b      	ldr	r3, [r3, #0]
 800592c:	0018      	movs	r0, r3
 800592e:	f7fd fe71 	bl	8003614 <HAL_InitTick>
 8005932:	0003      	movs	r3, r0
}
 8005934:	0018      	movs	r0, r3
 8005936:	46bd      	mov	sp, r7
 8005938:	b004      	add	sp, #16
 800593a:	bd80      	pop	{r7, pc}
 800593c:	40022000 	.word	0x40022000
 8005940:	00001388 	.word	0x00001388
 8005944:	40021000 	.word	0x40021000
 8005948:	fffff0ff 	.word	0xfffff0ff
 800594c:	ffff8fff 	.word	0xffff8fff
 8005950:	0800a418 	.word	0x0800a418
 8005954:	20000008 	.word	0x20000008
 8005958:	2000000c 	.word	0x2000000c

0800595c <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 800595c:	b580      	push	{r7, lr}
 800595e:	b086      	sub	sp, #24
 8005960:	af00      	add	r7, sp, #0
  uint32_t pllvco, pllsource, pllr, pllm, hsidiv;
  uint32_t sysclockfreq;

  if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 8005962:	4b3c      	ldr	r3, [pc, #240]	; (8005a54 <HAL_RCC_GetSysClockFreq+0xf8>)
 8005964:	689b      	ldr	r3, [r3, #8]
 8005966:	2238      	movs	r2, #56	; 0x38
 8005968:	4013      	ands	r3, r2
 800596a:	d10f      	bne.n	800598c <HAL_RCC_GetSysClockFreq+0x30>
  {
    /* HSISYS can be derived for HSI16 */
    hsidiv = (1UL << ((READ_BIT(RCC->CR, RCC_CR_HSIDIV)) >> RCC_CR_HSIDIV_Pos));
 800596c:	4b39      	ldr	r3, [pc, #228]	; (8005a54 <HAL_RCC_GetSysClockFreq+0xf8>)
 800596e:	681b      	ldr	r3, [r3, #0]
 8005970:	0adb      	lsrs	r3, r3, #11
 8005972:	2207      	movs	r2, #7
 8005974:	4013      	ands	r3, r2
 8005976:	2201      	movs	r2, #1
 8005978:	409a      	lsls	r2, r3
 800597a:	0013      	movs	r3, r2
 800597c:	603b      	str	r3, [r7, #0]

    /* HSI used as system clock source */
    sysclockfreq = (HSI_VALUE / hsidiv);
 800597e:	6839      	ldr	r1, [r7, #0]
 8005980:	4835      	ldr	r0, [pc, #212]	; (8005a58 <HAL_RCC_GetSysClockFreq+0xfc>)
 8005982:	f7fa fbdb 	bl	800013c <__udivsi3>
 8005986:	0003      	movs	r3, r0
 8005988:	613b      	str	r3, [r7, #16]
 800598a:	e05d      	b.n	8005a48 <HAL_RCC_GetSysClockFreq+0xec>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 800598c:	4b31      	ldr	r3, [pc, #196]	; (8005a54 <HAL_RCC_GetSysClockFreq+0xf8>)
 800598e:	689b      	ldr	r3, [r3, #8]
 8005990:	2238      	movs	r2, #56	; 0x38
 8005992:	4013      	ands	r3, r2
 8005994:	2b08      	cmp	r3, #8
 8005996:	d102      	bne.n	800599e <HAL_RCC_GetSysClockFreq+0x42>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 8005998:	4b30      	ldr	r3, [pc, #192]	; (8005a5c <HAL_RCC_GetSysClockFreq+0x100>)
 800599a:	613b      	str	r3, [r7, #16]
 800599c:	e054      	b.n	8005a48 <HAL_RCC_GetSysClockFreq+0xec>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 800599e:	4b2d      	ldr	r3, [pc, #180]	; (8005a54 <HAL_RCC_GetSysClockFreq+0xf8>)
 80059a0:	689b      	ldr	r3, [r3, #8]
 80059a2:	2238      	movs	r2, #56	; 0x38
 80059a4:	4013      	ands	r3, r2
 80059a6:	2b10      	cmp	r3, #16
 80059a8:	d138      	bne.n	8005a1c <HAL_RCC_GetSysClockFreq+0xc0>
    /* PLL used as system clock  source */

    /* PLL_VCO = ((HSE_VALUE or HSI_VALUE)/ PLLM) * PLLN
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = (RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC);
 80059aa:	4b2a      	ldr	r3, [pc, #168]	; (8005a54 <HAL_RCC_GetSysClockFreq+0xf8>)
 80059ac:	68db      	ldr	r3, [r3, #12]
 80059ae:	2203      	movs	r2, #3
 80059b0:	4013      	ands	r3, r2
 80059b2:	60fb      	str	r3, [r7, #12]
    pllm = ((RCC->PLLCFGR & RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 80059b4:	4b27      	ldr	r3, [pc, #156]	; (8005a54 <HAL_RCC_GetSysClockFreq+0xf8>)
 80059b6:	68db      	ldr	r3, [r3, #12]
 80059b8:	091b      	lsrs	r3, r3, #4
 80059ba:	2207      	movs	r2, #7
 80059bc:	4013      	ands	r3, r2
 80059be:	3301      	adds	r3, #1
 80059c0:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 80059c2:	68fb      	ldr	r3, [r7, #12]
 80059c4:	2b03      	cmp	r3, #3
 80059c6:	d10d      	bne.n	80059e4 <HAL_RCC_GetSysClockFreq+0x88>
    {
      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        pllvco = (HSE_VALUE / pllm) * ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 80059c8:	68b9      	ldr	r1, [r7, #8]
 80059ca:	4824      	ldr	r0, [pc, #144]	; (8005a5c <HAL_RCC_GetSysClockFreq+0x100>)
 80059cc:	f7fa fbb6 	bl	800013c <__udivsi3>
 80059d0:	0003      	movs	r3, r0
 80059d2:	0019      	movs	r1, r3
 80059d4:	4b1f      	ldr	r3, [pc, #124]	; (8005a54 <HAL_RCC_GetSysClockFreq+0xf8>)
 80059d6:	68db      	ldr	r3, [r3, #12]
 80059d8:	0a1b      	lsrs	r3, r3, #8
 80059da:	227f      	movs	r2, #127	; 0x7f
 80059dc:	4013      	ands	r3, r2
 80059de:	434b      	muls	r3, r1
 80059e0:	617b      	str	r3, [r7, #20]
        break;
 80059e2:	e00d      	b.n	8005a00 <HAL_RCC_GetSysClockFreq+0xa4>

      case RCC_PLLSOURCE_HSI:  /* HSI16 used as PLL clock source */
      default:                 /* HSI16 used as PLL clock source */
        pllvco = (HSI_VALUE / pllm) * ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos) ;
 80059e4:	68b9      	ldr	r1, [r7, #8]
 80059e6:	481c      	ldr	r0, [pc, #112]	; (8005a58 <HAL_RCC_GetSysClockFreq+0xfc>)
 80059e8:	f7fa fba8 	bl	800013c <__udivsi3>
 80059ec:	0003      	movs	r3, r0
 80059ee:	0019      	movs	r1, r3
 80059f0:	4b18      	ldr	r3, [pc, #96]	; (8005a54 <HAL_RCC_GetSysClockFreq+0xf8>)
 80059f2:	68db      	ldr	r3, [r3, #12]
 80059f4:	0a1b      	lsrs	r3, r3, #8
 80059f6:	227f      	movs	r2, #127	; 0x7f
 80059f8:	4013      	ands	r3, r2
 80059fa:	434b      	muls	r3, r1
 80059fc:	617b      	str	r3, [r7, #20]
        break;
 80059fe:	46c0      	nop			; (mov r8, r8)
    }
    pllr = (((RCC->PLLCFGR & RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U);
 8005a00:	4b14      	ldr	r3, [pc, #80]	; (8005a54 <HAL_RCC_GetSysClockFreq+0xf8>)
 8005a02:	68db      	ldr	r3, [r3, #12]
 8005a04:	0f5b      	lsrs	r3, r3, #29
 8005a06:	2207      	movs	r2, #7
 8005a08:	4013      	ands	r3, r2
 8005a0a:	3301      	adds	r3, #1
 8005a0c:	607b      	str	r3, [r7, #4]
    sysclockfreq = pllvco / pllr;
 8005a0e:	6879      	ldr	r1, [r7, #4]
 8005a10:	6978      	ldr	r0, [r7, #20]
 8005a12:	f7fa fb93 	bl	800013c <__udivsi3>
 8005a16:	0003      	movs	r3, r0
 8005a18:	613b      	str	r3, [r7, #16]
 8005a1a:	e015      	b.n	8005a48 <HAL_RCC_GetSysClockFreq+0xec>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_LSE)
 8005a1c:	4b0d      	ldr	r3, [pc, #52]	; (8005a54 <HAL_RCC_GetSysClockFreq+0xf8>)
 8005a1e:	689b      	ldr	r3, [r3, #8]
 8005a20:	2238      	movs	r2, #56	; 0x38
 8005a22:	4013      	ands	r3, r2
 8005a24:	2b20      	cmp	r3, #32
 8005a26:	d103      	bne.n	8005a30 <HAL_RCC_GetSysClockFreq+0xd4>
  {
    /* LSE used as system clock source */
    sysclockfreq = LSE_VALUE;
 8005a28:	2380      	movs	r3, #128	; 0x80
 8005a2a:	021b      	lsls	r3, r3, #8
 8005a2c:	613b      	str	r3, [r7, #16]
 8005a2e:	e00b      	b.n	8005a48 <HAL_RCC_GetSysClockFreq+0xec>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_LSI)
 8005a30:	4b08      	ldr	r3, [pc, #32]	; (8005a54 <HAL_RCC_GetSysClockFreq+0xf8>)
 8005a32:	689b      	ldr	r3, [r3, #8]
 8005a34:	2238      	movs	r2, #56	; 0x38
 8005a36:	4013      	ands	r3, r2
 8005a38:	2b18      	cmp	r3, #24
 8005a3a:	d103      	bne.n	8005a44 <HAL_RCC_GetSysClockFreq+0xe8>
  {
    /* LSI used as system clock source */
    sysclockfreq = LSI_VALUE;
 8005a3c:	23fa      	movs	r3, #250	; 0xfa
 8005a3e:	01db      	lsls	r3, r3, #7
 8005a40:	613b      	str	r3, [r7, #16]
 8005a42:	e001      	b.n	8005a48 <HAL_RCC_GetSysClockFreq+0xec>
  }
  else
  {
    sysclockfreq = 0U;
 8005a44:	2300      	movs	r3, #0
 8005a46:	613b      	str	r3, [r7, #16]
  }

  return sysclockfreq;
 8005a48:	693b      	ldr	r3, [r7, #16]
}
 8005a4a:	0018      	movs	r0, r3
 8005a4c:	46bd      	mov	sp, r7
 8005a4e:	b006      	add	sp, #24
 8005a50:	bd80      	pop	{r7, pc}
 8005a52:	46c0      	nop			; (mov r8, r8)
 8005a54:	40021000 	.word	0x40021000
 8005a58:	00f42400 	.word	0x00f42400
 8005a5c:	007a1200 	.word	0x007a1200

08005a60 <HAL_RCC_GetHCLKFreq>:
  *
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8005a60:	b580      	push	{r7, lr}
 8005a62:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8005a64:	4b02      	ldr	r3, [pc, #8]	; (8005a70 <HAL_RCC_GetHCLKFreq+0x10>)
 8005a66:	681b      	ldr	r3, [r3, #0]
}
 8005a68:	0018      	movs	r0, r3
 8005a6a:	46bd      	mov	sp, r7
 8005a6c:	bd80      	pop	{r7, pc}
 8005a6e:	46c0      	nop			; (mov r8, r8)
 8005a70:	20000008 	.word	0x20000008

08005a74 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8005a74:	b5b0      	push	{r4, r5, r7, lr}
 8005a76:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return ((uint32_t)(__LL_RCC_CALC_PCLK1_FREQ(HAL_RCC_GetHCLKFreq(), LL_RCC_GetAPB1Prescaler())));
 8005a78:	f7ff fff2 	bl	8005a60 <HAL_RCC_GetHCLKFreq>
 8005a7c:	0004      	movs	r4, r0
 8005a7e:	f7ff fb3f 	bl	8005100 <LL_RCC_GetAPB1Prescaler>
 8005a82:	0003      	movs	r3, r0
 8005a84:	0b1a      	lsrs	r2, r3, #12
 8005a86:	4b05      	ldr	r3, [pc, #20]	; (8005a9c <HAL_RCC_GetPCLK1Freq+0x28>)
 8005a88:	0092      	lsls	r2, r2, #2
 8005a8a:	58d3      	ldr	r3, [r2, r3]
 8005a8c:	221f      	movs	r2, #31
 8005a8e:	4013      	ands	r3, r2
 8005a90:	40dc      	lsrs	r4, r3
 8005a92:	0023      	movs	r3, r4
}
 8005a94:	0018      	movs	r0, r3
 8005a96:	46bd      	mov	sp, r7
 8005a98:	bdb0      	pop	{r4, r5, r7, pc}
 8005a9a:	46c0      	nop			; (mov r8, r8)
 8005a9c:	0800a458 	.word	0x0800a458

08005aa0 <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8005aa0:	b580      	push	{r7, lr}
 8005aa2:	b086      	sub	sp, #24
 8005aa4:	af00      	add	r7, sp, #0
 8005aa6:	6078      	str	r0, [r7, #4]
  uint32_t tmpregister;
  uint32_t tickstart;
  HAL_StatusTypeDef ret    = HAL_OK;   /* Intermediate status */
 8005aa8:	2313      	movs	r3, #19
 8005aaa:	18fb      	adds	r3, r7, r3
 8005aac:	2200      	movs	r2, #0
 8005aae:	701a      	strb	r2, [r3, #0]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 8005ab0:	2312      	movs	r3, #18
 8005ab2:	18fb      	adds	r3, r7, r3
 8005ab4:	2200      	movs	r2, #0
 8005ab6:	701a      	strb	r2, [r3, #0]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*-------------------------- RTC clock source configuration ----------------------*/
  if ((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8005ab8:	687b      	ldr	r3, [r7, #4]
 8005aba:	681a      	ldr	r2, [r3, #0]
 8005abc:	2380      	movs	r3, #128	; 0x80
 8005abe:	029b      	lsls	r3, r3, #10
 8005ac0:	4013      	ands	r3, r2
 8005ac2:	d100      	bne.n	8005ac6 <HAL_RCCEx_PeriphCLKConfig+0x26>
 8005ac4:	e0a3      	b.n	8005c0e <HAL_RCCEx_PeriphCLKConfig+0x16e>
  {
    FlagStatus       pwrclkchanged = RESET;
 8005ac6:	2011      	movs	r0, #17
 8005ac8:	183b      	adds	r3, r7, r0
 8005aca:	2200      	movs	r2, #0
 8005acc:	701a      	strb	r2, [r3, #0]

    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8005ace:	4ba5      	ldr	r3, [pc, #660]	; (8005d64 <HAL_RCCEx_PeriphCLKConfig+0x2c4>)
 8005ad0:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8005ad2:	2380      	movs	r3, #128	; 0x80
 8005ad4:	055b      	lsls	r3, r3, #21
 8005ad6:	4013      	ands	r3, r2
 8005ad8:	d110      	bne.n	8005afc <HAL_RCCEx_PeriphCLKConfig+0x5c>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8005ada:	4ba2      	ldr	r3, [pc, #648]	; (8005d64 <HAL_RCCEx_PeriphCLKConfig+0x2c4>)
 8005adc:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8005ade:	4ba1      	ldr	r3, [pc, #644]	; (8005d64 <HAL_RCCEx_PeriphCLKConfig+0x2c4>)
 8005ae0:	2180      	movs	r1, #128	; 0x80
 8005ae2:	0549      	lsls	r1, r1, #21
 8005ae4:	430a      	orrs	r2, r1
 8005ae6:	63da      	str	r2, [r3, #60]	; 0x3c
 8005ae8:	4b9e      	ldr	r3, [pc, #632]	; (8005d64 <HAL_RCCEx_PeriphCLKConfig+0x2c4>)
 8005aea:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8005aec:	2380      	movs	r3, #128	; 0x80
 8005aee:	055b      	lsls	r3, r3, #21
 8005af0:	4013      	ands	r3, r2
 8005af2:	60bb      	str	r3, [r7, #8]
 8005af4:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8005af6:	183b      	adds	r3, r7, r0
 8005af8:	2201      	movs	r2, #1
 8005afa:	701a      	strb	r2, [r3, #0]
    }

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8005afc:	4b9a      	ldr	r3, [pc, #616]	; (8005d68 <HAL_RCCEx_PeriphCLKConfig+0x2c8>)
 8005afe:	681a      	ldr	r2, [r3, #0]
 8005b00:	4b99      	ldr	r3, [pc, #612]	; (8005d68 <HAL_RCCEx_PeriphCLKConfig+0x2c8>)
 8005b02:	2180      	movs	r1, #128	; 0x80
 8005b04:	0049      	lsls	r1, r1, #1
 8005b06:	430a      	orrs	r2, r1
 8005b08:	601a      	str	r2, [r3, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8005b0a:	f7fd fddf 	bl	80036cc <HAL_GetTick>
 8005b0e:	0003      	movs	r3, r0
 8005b10:	60fb      	str	r3, [r7, #12]

    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8005b12:	e00b      	b.n	8005b2c <HAL_RCCEx_PeriphCLKConfig+0x8c>
    {
      if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8005b14:	f7fd fdda 	bl	80036cc <HAL_GetTick>
 8005b18:	0002      	movs	r2, r0
 8005b1a:	68fb      	ldr	r3, [r7, #12]
 8005b1c:	1ad3      	subs	r3, r2, r3
 8005b1e:	2b02      	cmp	r3, #2
 8005b20:	d904      	bls.n	8005b2c <HAL_RCCEx_PeriphCLKConfig+0x8c>
      {
        ret = HAL_TIMEOUT;
 8005b22:	2313      	movs	r3, #19
 8005b24:	18fb      	adds	r3, r7, r3
 8005b26:	2203      	movs	r2, #3
 8005b28:	701a      	strb	r2, [r3, #0]
        break;
 8005b2a:	e005      	b.n	8005b38 <HAL_RCCEx_PeriphCLKConfig+0x98>
    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8005b2c:	4b8e      	ldr	r3, [pc, #568]	; (8005d68 <HAL_RCCEx_PeriphCLKConfig+0x2c8>)
 8005b2e:	681a      	ldr	r2, [r3, #0]
 8005b30:	2380      	movs	r3, #128	; 0x80
 8005b32:	005b      	lsls	r3, r3, #1
 8005b34:	4013      	ands	r3, r2
 8005b36:	d0ed      	beq.n	8005b14 <HAL_RCCEx_PeriphCLKConfig+0x74>
      }
    }

    if (ret == HAL_OK)
 8005b38:	2313      	movs	r3, #19
 8005b3a:	18fb      	adds	r3, r7, r3
 8005b3c:	781b      	ldrb	r3, [r3, #0]
 8005b3e:	2b00      	cmp	r3, #0
 8005b40:	d154      	bne.n	8005bec <HAL_RCCEx_PeriphCLKConfig+0x14c>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 8005b42:	4b88      	ldr	r3, [pc, #544]	; (8005d64 <HAL_RCCEx_PeriphCLKConfig+0x2c4>)
 8005b44:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 8005b46:	23c0      	movs	r3, #192	; 0xc0
 8005b48:	009b      	lsls	r3, r3, #2
 8005b4a:	4013      	ands	r3, r2
 8005b4c:	617b      	str	r3, [r7, #20]

      /* Reset the Backup domain only if the RTC Clock source selection is modified */
      if ((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 8005b4e:	697b      	ldr	r3, [r7, #20]
 8005b50:	2b00      	cmp	r3, #0
 8005b52:	d019      	beq.n	8005b88 <HAL_RCCEx_PeriphCLKConfig+0xe8>
 8005b54:	687b      	ldr	r3, [r7, #4]
 8005b56:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005b58:	697a      	ldr	r2, [r7, #20]
 8005b5a:	429a      	cmp	r2, r3
 8005b5c:	d014      	beq.n	8005b88 <HAL_RCCEx_PeriphCLKConfig+0xe8>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 8005b5e:	4b81      	ldr	r3, [pc, #516]	; (8005d64 <HAL_RCCEx_PeriphCLKConfig+0x2c4>)
 8005b60:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8005b62:	4a82      	ldr	r2, [pc, #520]	; (8005d6c <HAL_RCCEx_PeriphCLKConfig+0x2cc>)
 8005b64:	4013      	ands	r3, r2
 8005b66:	617b      	str	r3, [r7, #20]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 8005b68:	4b7e      	ldr	r3, [pc, #504]	; (8005d64 <HAL_RCCEx_PeriphCLKConfig+0x2c4>)
 8005b6a:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 8005b6c:	4b7d      	ldr	r3, [pc, #500]	; (8005d64 <HAL_RCCEx_PeriphCLKConfig+0x2c4>)
 8005b6e:	2180      	movs	r1, #128	; 0x80
 8005b70:	0249      	lsls	r1, r1, #9
 8005b72:	430a      	orrs	r2, r1
 8005b74:	65da      	str	r2, [r3, #92]	; 0x5c
        __HAL_RCC_BACKUPRESET_RELEASE();
 8005b76:	4b7b      	ldr	r3, [pc, #492]	; (8005d64 <HAL_RCCEx_PeriphCLKConfig+0x2c4>)
 8005b78:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 8005b7a:	4b7a      	ldr	r3, [pc, #488]	; (8005d64 <HAL_RCCEx_PeriphCLKConfig+0x2c4>)
 8005b7c:	497c      	ldr	r1, [pc, #496]	; (8005d70 <HAL_RCCEx_PeriphCLKConfig+0x2d0>)
 8005b7e:	400a      	ands	r2, r1
 8005b80:	65da      	str	r2, [r3, #92]	; 0x5c
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 8005b82:	4b78      	ldr	r3, [pc, #480]	; (8005d64 <HAL_RCCEx_PeriphCLKConfig+0x2c4>)
 8005b84:	697a      	ldr	r2, [r7, #20]
 8005b86:	65da      	str	r2, [r3, #92]	; 0x5c
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 8005b88:	697b      	ldr	r3, [r7, #20]
 8005b8a:	2201      	movs	r2, #1
 8005b8c:	4013      	ands	r3, r2
 8005b8e:	d016      	beq.n	8005bbe <HAL_RCCEx_PeriphCLKConfig+0x11e>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005b90:	f7fd fd9c 	bl	80036cc <HAL_GetTick>
 8005b94:	0003      	movs	r3, r0
 8005b96:	60fb      	str	r3, [r7, #12]

        /* Wait till LSE is ready */
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8005b98:	e00c      	b.n	8005bb4 <HAL_RCCEx_PeriphCLKConfig+0x114>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8005b9a:	f7fd fd97 	bl	80036cc <HAL_GetTick>
 8005b9e:	0002      	movs	r2, r0
 8005ba0:	68fb      	ldr	r3, [r7, #12]
 8005ba2:	1ad3      	subs	r3, r2, r3
 8005ba4:	4a73      	ldr	r2, [pc, #460]	; (8005d74 <HAL_RCCEx_PeriphCLKConfig+0x2d4>)
 8005ba6:	4293      	cmp	r3, r2
 8005ba8:	d904      	bls.n	8005bb4 <HAL_RCCEx_PeriphCLKConfig+0x114>
          {
            ret = HAL_TIMEOUT;
 8005baa:	2313      	movs	r3, #19
 8005bac:	18fb      	adds	r3, r7, r3
 8005bae:	2203      	movs	r2, #3
 8005bb0:	701a      	strb	r2, [r3, #0]
            break;
 8005bb2:	e004      	b.n	8005bbe <HAL_RCCEx_PeriphCLKConfig+0x11e>
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8005bb4:	4b6b      	ldr	r3, [pc, #428]	; (8005d64 <HAL_RCCEx_PeriphCLKConfig+0x2c4>)
 8005bb6:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8005bb8:	2202      	movs	r2, #2
 8005bba:	4013      	ands	r3, r2
 8005bbc:	d0ed      	beq.n	8005b9a <HAL_RCCEx_PeriphCLKConfig+0xfa>
          }
        }
      }

      if (ret == HAL_OK)
 8005bbe:	2313      	movs	r3, #19
 8005bc0:	18fb      	adds	r3, r7, r3
 8005bc2:	781b      	ldrb	r3, [r3, #0]
 8005bc4:	2b00      	cmp	r3, #0
 8005bc6:	d10a      	bne.n	8005bde <HAL_RCCEx_PeriphCLKConfig+0x13e>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8005bc8:	4b66      	ldr	r3, [pc, #408]	; (8005d64 <HAL_RCCEx_PeriphCLKConfig+0x2c4>)
 8005bca:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8005bcc:	4a67      	ldr	r2, [pc, #412]	; (8005d6c <HAL_RCCEx_PeriphCLKConfig+0x2cc>)
 8005bce:	4013      	ands	r3, r2
 8005bd0:	0019      	movs	r1, r3
 8005bd2:	687b      	ldr	r3, [r7, #4]
 8005bd4:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8005bd6:	4b63      	ldr	r3, [pc, #396]	; (8005d64 <HAL_RCCEx_PeriphCLKConfig+0x2c4>)
 8005bd8:	430a      	orrs	r2, r1
 8005bda:	65da      	str	r2, [r3, #92]	; 0x5c
 8005bdc:	e00c      	b.n	8005bf8 <HAL_RCCEx_PeriphCLKConfig+0x158>
      }
      else
      {
        /* set overall return value */
        status = ret;
 8005bde:	2312      	movs	r3, #18
 8005be0:	18fb      	adds	r3, r7, r3
 8005be2:	2213      	movs	r2, #19
 8005be4:	18ba      	adds	r2, r7, r2
 8005be6:	7812      	ldrb	r2, [r2, #0]
 8005be8:	701a      	strb	r2, [r3, #0]
 8005bea:	e005      	b.n	8005bf8 <HAL_RCCEx_PeriphCLKConfig+0x158>
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 8005bec:	2312      	movs	r3, #18
 8005bee:	18fb      	adds	r3, r7, r3
 8005bf0:	2213      	movs	r2, #19
 8005bf2:	18ba      	adds	r2, r7, r2
 8005bf4:	7812      	ldrb	r2, [r2, #0]
 8005bf6:	701a      	strb	r2, [r3, #0]
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 8005bf8:	2311      	movs	r3, #17
 8005bfa:	18fb      	adds	r3, r7, r3
 8005bfc:	781b      	ldrb	r3, [r3, #0]
 8005bfe:	2b01      	cmp	r3, #1
 8005c00:	d105      	bne.n	8005c0e <HAL_RCCEx_PeriphCLKConfig+0x16e>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8005c02:	4b58      	ldr	r3, [pc, #352]	; (8005d64 <HAL_RCCEx_PeriphCLKConfig+0x2c4>)
 8005c04:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8005c06:	4b57      	ldr	r3, [pc, #348]	; (8005d64 <HAL_RCCEx_PeriphCLKConfig+0x2c4>)
 8005c08:	495b      	ldr	r1, [pc, #364]	; (8005d78 <HAL_RCCEx_PeriphCLKConfig+0x2d8>)
 8005c0a:	400a      	ands	r2, r1
 8005c0c:	63da      	str	r2, [r3, #60]	; 0x3c
    }
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8005c0e:	687b      	ldr	r3, [r7, #4]
 8005c10:	681b      	ldr	r3, [r3, #0]
 8005c12:	2201      	movs	r2, #1
 8005c14:	4013      	ands	r3, r2
 8005c16:	d009      	beq.n	8005c2c <HAL_RCCEx_PeriphCLKConfig+0x18c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8005c18:	4b52      	ldr	r3, [pc, #328]	; (8005d64 <HAL_RCCEx_PeriphCLKConfig+0x2c4>)
 8005c1a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005c1c:	2203      	movs	r2, #3
 8005c1e:	4393      	bics	r3, r2
 8005c20:	0019      	movs	r1, r3
 8005c22:	687b      	ldr	r3, [r7, #4]
 8005c24:	685a      	ldr	r2, [r3, #4]
 8005c26:	4b4f      	ldr	r3, [pc, #316]	; (8005d64 <HAL_RCCEx_PeriphCLKConfig+0x2c4>)
 8005c28:	430a      	orrs	r2, r1
 8005c2a:	655a      	str	r2, [r3, #84]	; 0x54
  }
#endif /* RCC_CCIPR_USART3SEL */

#if defined(LPUART1)
  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 8005c2c:	687b      	ldr	r3, [r7, #4]
 8005c2e:	681b      	ldr	r3, [r3, #0]
 8005c30:	2210      	movs	r2, #16
 8005c32:	4013      	ands	r3, r2
 8005c34:	d009      	beq.n	8005c4a <HAL_RCCEx_PeriphCLKConfig+0x1aa>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUART1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 8005c36:	4b4b      	ldr	r3, [pc, #300]	; (8005d64 <HAL_RCCEx_PeriphCLKConfig+0x2c4>)
 8005c38:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005c3a:	4a50      	ldr	r2, [pc, #320]	; (8005d7c <HAL_RCCEx_PeriphCLKConfig+0x2dc>)
 8005c3c:	4013      	ands	r3, r2
 8005c3e:	0019      	movs	r1, r3
 8005c40:	687b      	ldr	r3, [r7, #4]
 8005c42:	689a      	ldr	r2, [r3, #8]
 8005c44:	4b47      	ldr	r3, [pc, #284]	; (8005d64 <HAL_RCCEx_PeriphCLKConfig+0x2c4>)
 8005c46:	430a      	orrs	r2, r1
 8005c48:	655a      	str	r2, [r3, #84]	; 0x54
  }
#endif /* LPUART2 */

#if defined(RCC_CCIPR_LPTIM1SEL)
  /*-------------------------- LPTIM1 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == (RCC_PERIPHCLK_LPTIM1))
 8005c4a:	687b      	ldr	r3, [r7, #4]
 8005c4c:	681a      	ldr	r2, [r3, #0]
 8005c4e:	2380      	movs	r3, #128	; 0x80
 8005c50:	009b      	lsls	r3, r3, #2
 8005c52:	4013      	ands	r3, r2
 8005c54:	d009      	beq.n	8005c6a <HAL_RCCEx_PeriphCLKConfig+0x1ca>
  {
    assert_param(IS_RCC_LPTIM1CLKSOURCE(PeriphClkInit->Lptim1ClockSelection));
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 8005c56:	4b43      	ldr	r3, [pc, #268]	; (8005d64 <HAL_RCCEx_PeriphCLKConfig+0x2c4>)
 8005c58:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005c5a:	4a49      	ldr	r2, [pc, #292]	; (8005d80 <HAL_RCCEx_PeriphCLKConfig+0x2e0>)
 8005c5c:	4013      	ands	r3, r2
 8005c5e:	0019      	movs	r1, r3
 8005c60:	687b      	ldr	r3, [r7, #4]
 8005c62:	695a      	ldr	r2, [r3, #20]
 8005c64:	4b3f      	ldr	r3, [pc, #252]	; (8005d64 <HAL_RCCEx_PeriphCLKConfig+0x2c4>)
 8005c66:	430a      	orrs	r2, r1
 8005c68:	655a      	str	r2, [r3, #84]	; 0x54
  }
#endif /* RCC_CCIPR_LPTIM1SEL */

#if defined(RCC_CCIPR_LPTIM2SEL)
  /*-------------------------- LPTIM2 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == (RCC_PERIPHCLK_LPTIM2))
 8005c6a:	687b      	ldr	r3, [r7, #4]
 8005c6c:	681a      	ldr	r2, [r3, #0]
 8005c6e:	2380      	movs	r3, #128	; 0x80
 8005c70:	00db      	lsls	r3, r3, #3
 8005c72:	4013      	ands	r3, r2
 8005c74:	d009      	beq.n	8005c8a <HAL_RCCEx_PeriphCLKConfig+0x1ea>
  {
    assert_param(IS_RCC_LPTIM2CLKSOURCE(PeriphClkInit->Lptim2ClockSelection));
    __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 8005c76:	4b3b      	ldr	r3, [pc, #236]	; (8005d64 <HAL_RCCEx_PeriphCLKConfig+0x2c4>)
 8005c78:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005c7a:	4a42      	ldr	r2, [pc, #264]	; (8005d84 <HAL_RCCEx_PeriphCLKConfig+0x2e4>)
 8005c7c:	4013      	ands	r3, r2
 8005c7e:	0019      	movs	r1, r3
 8005c80:	687b      	ldr	r3, [r7, #4]
 8005c82:	699a      	ldr	r2, [r3, #24]
 8005c84:	4b37      	ldr	r3, [pc, #220]	; (8005d64 <HAL_RCCEx_PeriphCLKConfig+0x2c4>)
 8005c86:	430a      	orrs	r2, r1
 8005c88:	655a      	str	r2, [r3, #84]	; 0x54
  }
#endif /* RCC_CCIPR_LPTIM2SEL */

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8005c8a:	687b      	ldr	r3, [r7, #4]
 8005c8c:	681b      	ldr	r3, [r3, #0]
 8005c8e:	2220      	movs	r2, #32
 8005c90:	4013      	ands	r3, r2
 8005c92:	d009      	beq.n	8005ca8 <HAL_RCCEx_PeriphCLKConfig+0x208>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8005c94:	4b33      	ldr	r3, [pc, #204]	; (8005d64 <HAL_RCCEx_PeriphCLKConfig+0x2c4>)
 8005c96:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005c98:	4a3b      	ldr	r2, [pc, #236]	; (8005d88 <HAL_RCCEx_PeriphCLKConfig+0x2e8>)
 8005c9a:	4013      	ands	r3, r2
 8005c9c:	0019      	movs	r1, r3
 8005c9e:	687b      	ldr	r3, [r7, #4]
 8005ca0:	68da      	ldr	r2, [r3, #12]
 8005ca2:	4b30      	ldr	r3, [pc, #192]	; (8005d64 <HAL_RCCEx_PeriphCLKConfig+0x2c4>)
 8005ca4:	430a      	orrs	r2, r1
 8005ca6:	655a      	str	r2, [r3, #84]	; 0x54
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLLQCLK);
    }
  }
#endif /* RNG */
  /*-------------------------- ADC clock source configuration ----------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 8005ca8:	687b      	ldr	r3, [r7, #4]
 8005caa:	681a      	ldr	r2, [r3, #0]
 8005cac:	2380      	movs	r3, #128	; 0x80
 8005cae:	01db      	lsls	r3, r3, #7
 8005cb0:	4013      	ands	r3, r2
 8005cb2:	d015      	beq.n	8005ce0 <HAL_RCCEx_PeriphCLKConfig+0x240>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCCLKSOURCE(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC interface clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 8005cb4:	4b2b      	ldr	r3, [pc, #172]	; (8005d64 <HAL_RCCEx_PeriphCLKConfig+0x2c4>)
 8005cb6:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005cb8:	009b      	lsls	r3, r3, #2
 8005cba:	0899      	lsrs	r1, r3, #2
 8005cbc:	687b      	ldr	r3, [r7, #4]
 8005cbe:	69da      	ldr	r2, [r3, #28]
 8005cc0:	4b28      	ldr	r3, [pc, #160]	; (8005d64 <HAL_RCCEx_PeriphCLKConfig+0x2c4>)
 8005cc2:	430a      	orrs	r2, r1
 8005cc4:	655a      	str	r2, [r3, #84]	; 0x54

    if (PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLADC)
 8005cc6:	687b      	ldr	r3, [r7, #4]
 8005cc8:	69da      	ldr	r2, [r3, #28]
 8005cca:	2380      	movs	r3, #128	; 0x80
 8005ccc:	05db      	lsls	r3, r3, #23
 8005cce:	429a      	cmp	r2, r3
 8005cd0:	d106      	bne.n	8005ce0 <HAL_RCCEx_PeriphCLKConfig+0x240>
    {
      /* Enable PLLPCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLLPCLK);
 8005cd2:	4b24      	ldr	r3, [pc, #144]	; (8005d64 <HAL_RCCEx_PeriphCLKConfig+0x2c4>)
 8005cd4:	68da      	ldr	r2, [r3, #12]
 8005cd6:	4b23      	ldr	r3, [pc, #140]	; (8005d64 <HAL_RCCEx_PeriphCLKConfig+0x2c4>)
 8005cd8:	2180      	movs	r1, #128	; 0x80
 8005cda:	0249      	lsls	r1, r1, #9
 8005cdc:	430a      	orrs	r2, r1
 8005cde:	60da      	str	r2, [r3, #12]
  }
#endif /* CEC */

#if defined(RCC_CCIPR_TIM1SEL)
  /*-------------------------- TIM1 clock source configuration ---------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM1) == RCC_PERIPHCLK_TIM1)
 8005ce0:	687b      	ldr	r3, [r7, #4]
 8005ce2:	681a      	ldr	r2, [r3, #0]
 8005ce4:	2380      	movs	r3, #128	; 0x80
 8005ce6:	039b      	lsls	r3, r3, #14
 8005ce8:	4013      	ands	r3, r2
 8005cea:	d016      	beq.n	8005d1a <HAL_RCCEx_PeriphCLKConfig+0x27a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM1CLKSOURCE(PeriphClkInit->Tim1ClockSelection));

    /* Configure the TIM1 clock source */
    __HAL_RCC_TIM1_CONFIG(PeriphClkInit->Tim1ClockSelection);
 8005cec:	4b1d      	ldr	r3, [pc, #116]	; (8005d64 <HAL_RCCEx_PeriphCLKConfig+0x2c4>)
 8005cee:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005cf0:	4a26      	ldr	r2, [pc, #152]	; (8005d8c <HAL_RCCEx_PeriphCLKConfig+0x2ec>)
 8005cf2:	4013      	ands	r3, r2
 8005cf4:	0019      	movs	r1, r3
 8005cf6:	687b      	ldr	r3, [r7, #4]
 8005cf8:	6a1a      	ldr	r2, [r3, #32]
 8005cfa:	4b1a      	ldr	r3, [pc, #104]	; (8005d64 <HAL_RCCEx_PeriphCLKConfig+0x2c4>)
 8005cfc:	430a      	orrs	r2, r1
 8005cfe:	655a      	str	r2, [r3, #84]	; 0x54

    if (PeriphClkInit->Tim1ClockSelection == RCC_TIM1CLKSOURCE_PLL)
 8005d00:	687b      	ldr	r3, [r7, #4]
 8005d02:	6a1a      	ldr	r2, [r3, #32]
 8005d04:	2380      	movs	r3, #128	; 0x80
 8005d06:	03db      	lsls	r3, r3, #15
 8005d08:	429a      	cmp	r2, r3
 8005d0a:	d106      	bne.n	8005d1a <HAL_RCCEx_PeriphCLKConfig+0x27a>
    {
      /* Enable PLLQCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLLQCLK);
 8005d0c:	4b15      	ldr	r3, [pc, #84]	; (8005d64 <HAL_RCCEx_PeriphCLKConfig+0x2c4>)
 8005d0e:	68da      	ldr	r2, [r3, #12]
 8005d10:	4b14      	ldr	r3, [pc, #80]	; (8005d64 <HAL_RCCEx_PeriphCLKConfig+0x2c4>)
 8005d12:	2180      	movs	r1, #128	; 0x80
 8005d14:	0449      	lsls	r1, r1, #17
 8005d16:	430a      	orrs	r2, r1
 8005d18:	60da      	str	r2, [r3, #12]
    }
  }
#endif /* RCC_CCIPR_TIM15SEL */

  /*-------------------------- I2S1 clock source configuration ---------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S1) == RCC_PERIPHCLK_I2S1)
 8005d1a:	687b      	ldr	r3, [r7, #4]
 8005d1c:	681a      	ldr	r2, [r3, #0]
 8005d1e:	2380      	movs	r3, #128	; 0x80
 8005d20:	011b      	lsls	r3, r3, #4
 8005d22:	4013      	ands	r3, r2
 8005d24:	d016      	beq.n	8005d54 <HAL_RCCEx_PeriphCLKConfig+0x2b4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2S1CLKSOURCE(PeriphClkInit->I2s1ClockSelection));

    /* Configure the I2S1 clock source */
    __HAL_RCC_I2S1_CONFIG(PeriphClkInit->I2s1ClockSelection);
 8005d26:	4b0f      	ldr	r3, [pc, #60]	; (8005d64 <HAL_RCCEx_PeriphCLKConfig+0x2c4>)
 8005d28:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005d2a:	4a19      	ldr	r2, [pc, #100]	; (8005d90 <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 8005d2c:	4013      	ands	r3, r2
 8005d2e:	0019      	movs	r1, r3
 8005d30:	687b      	ldr	r3, [r7, #4]
 8005d32:	691a      	ldr	r2, [r3, #16]
 8005d34:	4b0b      	ldr	r3, [pc, #44]	; (8005d64 <HAL_RCCEx_PeriphCLKConfig+0x2c4>)
 8005d36:	430a      	orrs	r2, r1
 8005d38:	655a      	str	r2, [r3, #84]	; 0x54

    if (PeriphClkInit->I2s1ClockSelection == RCC_I2S1CLKSOURCE_PLL)
 8005d3a:	687b      	ldr	r3, [r7, #4]
 8005d3c:	691a      	ldr	r2, [r3, #16]
 8005d3e:	2380      	movs	r3, #128	; 0x80
 8005d40:	01db      	lsls	r3, r3, #7
 8005d42:	429a      	cmp	r2, r3
 8005d44:	d106      	bne.n	8005d54 <HAL_RCCEx_PeriphCLKConfig+0x2b4>
    {
      /* Enable PLLPCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLLPCLK);
 8005d46:	4b07      	ldr	r3, [pc, #28]	; (8005d64 <HAL_RCCEx_PeriphCLKConfig+0x2c4>)
 8005d48:	68da      	ldr	r2, [r3, #12]
 8005d4a:	4b06      	ldr	r3, [pc, #24]	; (8005d64 <HAL_RCCEx_PeriphCLKConfig+0x2c4>)
 8005d4c:	2180      	movs	r1, #128	; 0x80
 8005d4e:	0249      	lsls	r1, r1, #9
 8005d50:	430a      	orrs	r2, r1
 8005d52:	60da      	str	r2, [r3, #12]
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLLQCLK);
    }
  }
#endif /* FDCAN1 || FDCAN2 */

  return status;
 8005d54:	2312      	movs	r3, #18
 8005d56:	18fb      	adds	r3, r7, r3
 8005d58:	781b      	ldrb	r3, [r3, #0]
}
 8005d5a:	0018      	movs	r0, r3
 8005d5c:	46bd      	mov	sp, r7
 8005d5e:	b006      	add	sp, #24
 8005d60:	bd80      	pop	{r7, pc}
 8005d62:	46c0      	nop			; (mov r8, r8)
 8005d64:	40021000 	.word	0x40021000
 8005d68:	40007000 	.word	0x40007000
 8005d6c:	fffffcff 	.word	0xfffffcff
 8005d70:	fffeffff 	.word	0xfffeffff
 8005d74:	00001388 	.word	0x00001388
 8005d78:	efffffff 	.word	0xefffffff
 8005d7c:	fffff3ff 	.word	0xfffff3ff
 8005d80:	fff3ffff 	.word	0xfff3ffff
 8005d84:	ffcfffff 	.word	0xffcfffff
 8005d88:	ffffcfff 	.word	0xffffcfff
 8005d8c:	ffbfffff 	.word	0xffbfffff
 8005d90:	ffff3fff 	.word	0xffff3fff

08005d94 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 8005d94:	b580      	push	{r7, lr}
 8005d96:	b082      	sub	sp, #8
 8005d98:	af00      	add	r7, sp, #0
 8005d9a:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8005d9c:	687b      	ldr	r3, [r7, #4]
 8005d9e:	2b00      	cmp	r3, #0
 8005da0:	d101      	bne.n	8005da6 <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 8005da2:	2301      	movs	r3, #1
 8005da4:	e04a      	b.n	8005e3c <HAL_TIM_PWM_Init+0xa8>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8005da6:	687b      	ldr	r3, [r7, #4]
 8005da8:	223d      	movs	r2, #61	; 0x3d
 8005daa:	5c9b      	ldrb	r3, [r3, r2]
 8005dac:	b2db      	uxtb	r3, r3
 8005dae:	2b00      	cmp	r3, #0
 8005db0:	d107      	bne.n	8005dc2 <HAL_TIM_PWM_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8005db2:	687b      	ldr	r3, [r7, #4]
 8005db4:	223c      	movs	r2, #60	; 0x3c
 8005db6:	2100      	movs	r1, #0
 8005db8:	5499      	strb	r1, [r3, r2]
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 8005dba:	687b      	ldr	r3, [r7, #4]
 8005dbc:	0018      	movs	r0, r3
 8005dbe:	f7fd fa47 	bl	8003250 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8005dc2:	687b      	ldr	r3, [r7, #4]
 8005dc4:	223d      	movs	r2, #61	; 0x3d
 8005dc6:	2102      	movs	r1, #2
 8005dc8:	5499      	strb	r1, [r3, r2]

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8005dca:	687b      	ldr	r3, [r7, #4]
 8005dcc:	681a      	ldr	r2, [r3, #0]
 8005dce:	687b      	ldr	r3, [r7, #4]
 8005dd0:	3304      	adds	r3, #4
 8005dd2:	0019      	movs	r1, r3
 8005dd4:	0010      	movs	r0, r2
 8005dd6:	f000 fa13 	bl	8006200 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8005dda:	687b      	ldr	r3, [r7, #4]
 8005ddc:	2248      	movs	r2, #72	; 0x48
 8005dde:	2101      	movs	r1, #1
 8005de0:	5499      	strb	r1, [r3, r2]

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8005de2:	687b      	ldr	r3, [r7, #4]
 8005de4:	223e      	movs	r2, #62	; 0x3e
 8005de6:	2101      	movs	r1, #1
 8005de8:	5499      	strb	r1, [r3, r2]
 8005dea:	687b      	ldr	r3, [r7, #4]
 8005dec:	223f      	movs	r2, #63	; 0x3f
 8005dee:	2101      	movs	r1, #1
 8005df0:	5499      	strb	r1, [r3, r2]
 8005df2:	687b      	ldr	r3, [r7, #4]
 8005df4:	2240      	movs	r2, #64	; 0x40
 8005df6:	2101      	movs	r1, #1
 8005df8:	5499      	strb	r1, [r3, r2]
 8005dfa:	687b      	ldr	r3, [r7, #4]
 8005dfc:	2241      	movs	r2, #65	; 0x41
 8005dfe:	2101      	movs	r1, #1
 8005e00:	5499      	strb	r1, [r3, r2]
 8005e02:	687b      	ldr	r3, [r7, #4]
 8005e04:	2242      	movs	r2, #66	; 0x42
 8005e06:	2101      	movs	r1, #1
 8005e08:	5499      	strb	r1, [r3, r2]
 8005e0a:	687b      	ldr	r3, [r7, #4]
 8005e0c:	2243      	movs	r2, #67	; 0x43
 8005e0e:	2101      	movs	r1, #1
 8005e10:	5499      	strb	r1, [r3, r2]
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8005e12:	687b      	ldr	r3, [r7, #4]
 8005e14:	2244      	movs	r2, #68	; 0x44
 8005e16:	2101      	movs	r1, #1
 8005e18:	5499      	strb	r1, [r3, r2]
 8005e1a:	687b      	ldr	r3, [r7, #4]
 8005e1c:	2245      	movs	r2, #69	; 0x45
 8005e1e:	2101      	movs	r1, #1
 8005e20:	5499      	strb	r1, [r3, r2]
 8005e22:	687b      	ldr	r3, [r7, #4]
 8005e24:	2246      	movs	r2, #70	; 0x46
 8005e26:	2101      	movs	r1, #1
 8005e28:	5499      	strb	r1, [r3, r2]
 8005e2a:	687b      	ldr	r3, [r7, #4]
 8005e2c:	2247      	movs	r2, #71	; 0x47
 8005e2e:	2101      	movs	r1, #1
 8005e30:	5499      	strb	r1, [r3, r2]

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8005e32:	687b      	ldr	r3, [r7, #4]
 8005e34:	223d      	movs	r2, #61	; 0x3d
 8005e36:	2101      	movs	r1, #1
 8005e38:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8005e3a:	2300      	movs	r3, #0
}
 8005e3c:	0018      	movs	r0, r3
 8005e3e:	46bd      	mov	sp, r7
 8005e40:	b002      	add	sp, #8
 8005e42:	bd80      	pop	{r7, pc}

08005e44 <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_5: TIM Channel 5 selected
  *            @arg TIM_CHANNEL_6: TIM Channel 6 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8005e44:	b580      	push	{r7, lr}
 8005e46:	b084      	sub	sp, #16
 8005e48:	af00      	add	r7, sp, #0
 8005e4a:	6078      	str	r0, [r7, #4]
 8005e4c:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 8005e4e:	683b      	ldr	r3, [r7, #0]
 8005e50:	2b00      	cmp	r3, #0
 8005e52:	d108      	bne.n	8005e66 <HAL_TIM_PWM_Start+0x22>
 8005e54:	687b      	ldr	r3, [r7, #4]
 8005e56:	223e      	movs	r2, #62	; 0x3e
 8005e58:	5c9b      	ldrb	r3, [r3, r2]
 8005e5a:	b2db      	uxtb	r3, r3
 8005e5c:	3b01      	subs	r3, #1
 8005e5e:	1e5a      	subs	r2, r3, #1
 8005e60:	4193      	sbcs	r3, r2
 8005e62:	b2db      	uxtb	r3, r3
 8005e64:	e037      	b.n	8005ed6 <HAL_TIM_PWM_Start+0x92>
 8005e66:	683b      	ldr	r3, [r7, #0]
 8005e68:	2b04      	cmp	r3, #4
 8005e6a:	d108      	bne.n	8005e7e <HAL_TIM_PWM_Start+0x3a>
 8005e6c:	687b      	ldr	r3, [r7, #4]
 8005e6e:	223f      	movs	r2, #63	; 0x3f
 8005e70:	5c9b      	ldrb	r3, [r3, r2]
 8005e72:	b2db      	uxtb	r3, r3
 8005e74:	3b01      	subs	r3, #1
 8005e76:	1e5a      	subs	r2, r3, #1
 8005e78:	4193      	sbcs	r3, r2
 8005e7a:	b2db      	uxtb	r3, r3
 8005e7c:	e02b      	b.n	8005ed6 <HAL_TIM_PWM_Start+0x92>
 8005e7e:	683b      	ldr	r3, [r7, #0]
 8005e80:	2b08      	cmp	r3, #8
 8005e82:	d108      	bne.n	8005e96 <HAL_TIM_PWM_Start+0x52>
 8005e84:	687b      	ldr	r3, [r7, #4]
 8005e86:	2240      	movs	r2, #64	; 0x40
 8005e88:	5c9b      	ldrb	r3, [r3, r2]
 8005e8a:	b2db      	uxtb	r3, r3
 8005e8c:	3b01      	subs	r3, #1
 8005e8e:	1e5a      	subs	r2, r3, #1
 8005e90:	4193      	sbcs	r3, r2
 8005e92:	b2db      	uxtb	r3, r3
 8005e94:	e01f      	b.n	8005ed6 <HAL_TIM_PWM_Start+0x92>
 8005e96:	683b      	ldr	r3, [r7, #0]
 8005e98:	2b0c      	cmp	r3, #12
 8005e9a:	d108      	bne.n	8005eae <HAL_TIM_PWM_Start+0x6a>
 8005e9c:	687b      	ldr	r3, [r7, #4]
 8005e9e:	2241      	movs	r2, #65	; 0x41
 8005ea0:	5c9b      	ldrb	r3, [r3, r2]
 8005ea2:	b2db      	uxtb	r3, r3
 8005ea4:	3b01      	subs	r3, #1
 8005ea6:	1e5a      	subs	r2, r3, #1
 8005ea8:	4193      	sbcs	r3, r2
 8005eaa:	b2db      	uxtb	r3, r3
 8005eac:	e013      	b.n	8005ed6 <HAL_TIM_PWM_Start+0x92>
 8005eae:	683b      	ldr	r3, [r7, #0]
 8005eb0:	2b10      	cmp	r3, #16
 8005eb2:	d108      	bne.n	8005ec6 <HAL_TIM_PWM_Start+0x82>
 8005eb4:	687b      	ldr	r3, [r7, #4]
 8005eb6:	2242      	movs	r2, #66	; 0x42
 8005eb8:	5c9b      	ldrb	r3, [r3, r2]
 8005eba:	b2db      	uxtb	r3, r3
 8005ebc:	3b01      	subs	r3, #1
 8005ebe:	1e5a      	subs	r2, r3, #1
 8005ec0:	4193      	sbcs	r3, r2
 8005ec2:	b2db      	uxtb	r3, r3
 8005ec4:	e007      	b.n	8005ed6 <HAL_TIM_PWM_Start+0x92>
 8005ec6:	687b      	ldr	r3, [r7, #4]
 8005ec8:	2243      	movs	r2, #67	; 0x43
 8005eca:	5c9b      	ldrb	r3, [r3, r2]
 8005ecc:	b2db      	uxtb	r3, r3
 8005ece:	3b01      	subs	r3, #1
 8005ed0:	1e5a      	subs	r2, r3, #1
 8005ed2:	4193      	sbcs	r3, r2
 8005ed4:	b2db      	uxtb	r3, r3
 8005ed6:	2b00      	cmp	r3, #0
 8005ed8:	d001      	beq.n	8005ede <HAL_TIM_PWM_Start+0x9a>
  {
    return HAL_ERROR;
 8005eda:	2301      	movs	r3, #1
 8005edc:	e081      	b.n	8005fe2 <HAL_TIM_PWM_Start+0x19e>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 8005ede:	683b      	ldr	r3, [r7, #0]
 8005ee0:	2b00      	cmp	r3, #0
 8005ee2:	d104      	bne.n	8005eee <HAL_TIM_PWM_Start+0xaa>
 8005ee4:	687b      	ldr	r3, [r7, #4]
 8005ee6:	223e      	movs	r2, #62	; 0x3e
 8005ee8:	2102      	movs	r1, #2
 8005eea:	5499      	strb	r1, [r3, r2]
 8005eec:	e023      	b.n	8005f36 <HAL_TIM_PWM_Start+0xf2>
 8005eee:	683b      	ldr	r3, [r7, #0]
 8005ef0:	2b04      	cmp	r3, #4
 8005ef2:	d104      	bne.n	8005efe <HAL_TIM_PWM_Start+0xba>
 8005ef4:	687b      	ldr	r3, [r7, #4]
 8005ef6:	223f      	movs	r2, #63	; 0x3f
 8005ef8:	2102      	movs	r1, #2
 8005efa:	5499      	strb	r1, [r3, r2]
 8005efc:	e01b      	b.n	8005f36 <HAL_TIM_PWM_Start+0xf2>
 8005efe:	683b      	ldr	r3, [r7, #0]
 8005f00:	2b08      	cmp	r3, #8
 8005f02:	d104      	bne.n	8005f0e <HAL_TIM_PWM_Start+0xca>
 8005f04:	687b      	ldr	r3, [r7, #4]
 8005f06:	2240      	movs	r2, #64	; 0x40
 8005f08:	2102      	movs	r1, #2
 8005f0a:	5499      	strb	r1, [r3, r2]
 8005f0c:	e013      	b.n	8005f36 <HAL_TIM_PWM_Start+0xf2>
 8005f0e:	683b      	ldr	r3, [r7, #0]
 8005f10:	2b0c      	cmp	r3, #12
 8005f12:	d104      	bne.n	8005f1e <HAL_TIM_PWM_Start+0xda>
 8005f14:	687b      	ldr	r3, [r7, #4]
 8005f16:	2241      	movs	r2, #65	; 0x41
 8005f18:	2102      	movs	r1, #2
 8005f1a:	5499      	strb	r1, [r3, r2]
 8005f1c:	e00b      	b.n	8005f36 <HAL_TIM_PWM_Start+0xf2>
 8005f1e:	683b      	ldr	r3, [r7, #0]
 8005f20:	2b10      	cmp	r3, #16
 8005f22:	d104      	bne.n	8005f2e <HAL_TIM_PWM_Start+0xea>
 8005f24:	687b      	ldr	r3, [r7, #4]
 8005f26:	2242      	movs	r2, #66	; 0x42
 8005f28:	2102      	movs	r1, #2
 8005f2a:	5499      	strb	r1, [r3, r2]
 8005f2c:	e003      	b.n	8005f36 <HAL_TIM_PWM_Start+0xf2>
 8005f2e:	687b      	ldr	r3, [r7, #4]
 8005f30:	2243      	movs	r2, #67	; 0x43
 8005f32:	2102      	movs	r1, #2
 8005f34:	5499      	strb	r1, [r3, r2]

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 8005f36:	687b      	ldr	r3, [r7, #4]
 8005f38:	681b      	ldr	r3, [r3, #0]
 8005f3a:	6839      	ldr	r1, [r7, #0]
 8005f3c:	2201      	movs	r2, #1
 8005f3e:	0018      	movs	r0, r3
 8005f40:	f000 fc70 	bl	8006824 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8005f44:	687b      	ldr	r3, [r7, #4]
 8005f46:	681b      	ldr	r3, [r3, #0]
 8005f48:	4a28      	ldr	r2, [pc, #160]	; (8005fec <HAL_TIM_PWM_Start+0x1a8>)
 8005f4a:	4293      	cmp	r3, r2
 8005f4c:	d009      	beq.n	8005f62 <HAL_TIM_PWM_Start+0x11e>
 8005f4e:	687b      	ldr	r3, [r7, #4]
 8005f50:	681b      	ldr	r3, [r3, #0]
 8005f52:	4a27      	ldr	r2, [pc, #156]	; (8005ff0 <HAL_TIM_PWM_Start+0x1ac>)
 8005f54:	4293      	cmp	r3, r2
 8005f56:	d004      	beq.n	8005f62 <HAL_TIM_PWM_Start+0x11e>
 8005f58:	687b      	ldr	r3, [r7, #4]
 8005f5a:	681b      	ldr	r3, [r3, #0]
 8005f5c:	4a25      	ldr	r2, [pc, #148]	; (8005ff4 <HAL_TIM_PWM_Start+0x1b0>)
 8005f5e:	4293      	cmp	r3, r2
 8005f60:	d101      	bne.n	8005f66 <HAL_TIM_PWM_Start+0x122>
 8005f62:	2301      	movs	r3, #1
 8005f64:	e000      	b.n	8005f68 <HAL_TIM_PWM_Start+0x124>
 8005f66:	2300      	movs	r3, #0
 8005f68:	2b00      	cmp	r3, #0
 8005f6a:	d008      	beq.n	8005f7e <HAL_TIM_PWM_Start+0x13a>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 8005f6c:	687b      	ldr	r3, [r7, #4]
 8005f6e:	681b      	ldr	r3, [r3, #0]
 8005f70:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8005f72:	687b      	ldr	r3, [r7, #4]
 8005f74:	681b      	ldr	r3, [r3, #0]
 8005f76:	2180      	movs	r1, #128	; 0x80
 8005f78:	0209      	lsls	r1, r1, #8
 8005f7a:	430a      	orrs	r2, r1
 8005f7c:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8005f7e:	687b      	ldr	r3, [r7, #4]
 8005f80:	681b      	ldr	r3, [r3, #0]
 8005f82:	4a1a      	ldr	r2, [pc, #104]	; (8005fec <HAL_TIM_PWM_Start+0x1a8>)
 8005f84:	4293      	cmp	r3, r2
 8005f86:	d00a      	beq.n	8005f9e <HAL_TIM_PWM_Start+0x15a>
 8005f88:	687b      	ldr	r3, [r7, #4]
 8005f8a:	681a      	ldr	r2, [r3, #0]
 8005f8c:	2380      	movs	r3, #128	; 0x80
 8005f8e:	05db      	lsls	r3, r3, #23
 8005f90:	429a      	cmp	r2, r3
 8005f92:	d004      	beq.n	8005f9e <HAL_TIM_PWM_Start+0x15a>
 8005f94:	687b      	ldr	r3, [r7, #4]
 8005f96:	681b      	ldr	r3, [r3, #0]
 8005f98:	4a17      	ldr	r2, [pc, #92]	; (8005ff8 <HAL_TIM_PWM_Start+0x1b4>)
 8005f9a:	4293      	cmp	r3, r2
 8005f9c:	d116      	bne.n	8005fcc <HAL_TIM_PWM_Start+0x188>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8005f9e:	687b      	ldr	r3, [r7, #4]
 8005fa0:	681b      	ldr	r3, [r3, #0]
 8005fa2:	689b      	ldr	r3, [r3, #8]
 8005fa4:	4a15      	ldr	r2, [pc, #84]	; (8005ffc <HAL_TIM_PWM_Start+0x1b8>)
 8005fa6:	4013      	ands	r3, r2
 8005fa8:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8005faa:	68fb      	ldr	r3, [r7, #12]
 8005fac:	2b06      	cmp	r3, #6
 8005fae:	d016      	beq.n	8005fde <HAL_TIM_PWM_Start+0x19a>
 8005fb0:	68fa      	ldr	r2, [r7, #12]
 8005fb2:	2380      	movs	r3, #128	; 0x80
 8005fb4:	025b      	lsls	r3, r3, #9
 8005fb6:	429a      	cmp	r2, r3
 8005fb8:	d011      	beq.n	8005fde <HAL_TIM_PWM_Start+0x19a>
    {
      __HAL_TIM_ENABLE(htim);
 8005fba:	687b      	ldr	r3, [r7, #4]
 8005fbc:	681b      	ldr	r3, [r3, #0]
 8005fbe:	681a      	ldr	r2, [r3, #0]
 8005fc0:	687b      	ldr	r3, [r7, #4]
 8005fc2:	681b      	ldr	r3, [r3, #0]
 8005fc4:	2101      	movs	r1, #1
 8005fc6:	430a      	orrs	r2, r1
 8005fc8:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8005fca:	e008      	b.n	8005fde <HAL_TIM_PWM_Start+0x19a>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8005fcc:	687b      	ldr	r3, [r7, #4]
 8005fce:	681b      	ldr	r3, [r3, #0]
 8005fd0:	681a      	ldr	r2, [r3, #0]
 8005fd2:	687b      	ldr	r3, [r7, #4]
 8005fd4:	681b      	ldr	r3, [r3, #0]
 8005fd6:	2101      	movs	r1, #1
 8005fd8:	430a      	orrs	r2, r1
 8005fda:	601a      	str	r2, [r3, #0]
 8005fdc:	e000      	b.n	8005fe0 <HAL_TIM_PWM_Start+0x19c>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8005fde:	46c0      	nop			; (mov r8, r8)
  }

  /* Return function status */
  return HAL_OK;
 8005fe0:	2300      	movs	r3, #0
}
 8005fe2:	0018      	movs	r0, r3
 8005fe4:	46bd      	mov	sp, r7
 8005fe6:	b004      	add	sp, #16
 8005fe8:	bd80      	pop	{r7, pc}
 8005fea:	46c0      	nop			; (mov r8, r8)
 8005fec:	40012c00 	.word	0x40012c00
 8005ff0:	40014400 	.word	0x40014400
 8005ff4:	40014800 	.word	0x40014800
 8005ff8:	40000400 	.word	0x40000400
 8005ffc:	00010007 	.word	0x00010007

08006000 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            const TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 8006000:	b580      	push	{r7, lr}
 8006002:	b086      	sub	sp, #24
 8006004:	af00      	add	r7, sp, #0
 8006006:	60f8      	str	r0, [r7, #12]
 8006008:	60b9      	str	r1, [r7, #8]
 800600a:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 800600c:	2317      	movs	r3, #23
 800600e:	18fb      	adds	r3, r7, r3
 8006010:	2200      	movs	r2, #0
 8006012:	701a      	strb	r2, [r3, #0]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 8006014:	68fb      	ldr	r3, [r7, #12]
 8006016:	223c      	movs	r2, #60	; 0x3c
 8006018:	5c9b      	ldrb	r3, [r3, r2]
 800601a:	2b01      	cmp	r3, #1
 800601c:	d101      	bne.n	8006022 <HAL_TIM_PWM_ConfigChannel+0x22>
 800601e:	2302      	movs	r3, #2
 8006020:	e0e5      	b.n	80061ee <HAL_TIM_PWM_ConfigChannel+0x1ee>
 8006022:	68fb      	ldr	r3, [r7, #12]
 8006024:	223c      	movs	r2, #60	; 0x3c
 8006026:	2101      	movs	r1, #1
 8006028:	5499      	strb	r1, [r3, r2]

  switch (Channel)
 800602a:	687b      	ldr	r3, [r7, #4]
 800602c:	2b14      	cmp	r3, #20
 800602e:	d900      	bls.n	8006032 <HAL_TIM_PWM_ConfigChannel+0x32>
 8006030:	e0d1      	b.n	80061d6 <HAL_TIM_PWM_ConfigChannel+0x1d6>
 8006032:	687b      	ldr	r3, [r7, #4]
 8006034:	009a      	lsls	r2, r3, #2
 8006036:	4b70      	ldr	r3, [pc, #448]	; (80061f8 <HAL_TIM_PWM_ConfigChannel+0x1f8>)
 8006038:	18d3      	adds	r3, r2, r3
 800603a:	681b      	ldr	r3, [r3, #0]
 800603c:	469f      	mov	pc, r3
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 800603e:	68fb      	ldr	r3, [r7, #12]
 8006040:	681b      	ldr	r3, [r3, #0]
 8006042:	68ba      	ldr	r2, [r7, #8]
 8006044:	0011      	movs	r1, r2
 8006046:	0018      	movs	r0, r3
 8006048:	f000 f950 	bl	80062ec <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 800604c:	68fb      	ldr	r3, [r7, #12]
 800604e:	681b      	ldr	r3, [r3, #0]
 8006050:	699a      	ldr	r2, [r3, #24]
 8006052:	68fb      	ldr	r3, [r7, #12]
 8006054:	681b      	ldr	r3, [r3, #0]
 8006056:	2108      	movs	r1, #8
 8006058:	430a      	orrs	r2, r1
 800605a:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 800605c:	68fb      	ldr	r3, [r7, #12]
 800605e:	681b      	ldr	r3, [r3, #0]
 8006060:	699a      	ldr	r2, [r3, #24]
 8006062:	68fb      	ldr	r3, [r7, #12]
 8006064:	681b      	ldr	r3, [r3, #0]
 8006066:	2104      	movs	r1, #4
 8006068:	438a      	bics	r2, r1
 800606a:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 800606c:	68fb      	ldr	r3, [r7, #12]
 800606e:	681b      	ldr	r3, [r3, #0]
 8006070:	6999      	ldr	r1, [r3, #24]
 8006072:	68bb      	ldr	r3, [r7, #8]
 8006074:	691a      	ldr	r2, [r3, #16]
 8006076:	68fb      	ldr	r3, [r7, #12]
 8006078:	681b      	ldr	r3, [r3, #0]
 800607a:	430a      	orrs	r2, r1
 800607c:	619a      	str	r2, [r3, #24]
      break;
 800607e:	e0af      	b.n	80061e0 <HAL_TIM_PWM_ConfigChannel+0x1e0>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8006080:	68fb      	ldr	r3, [r7, #12]
 8006082:	681b      	ldr	r3, [r3, #0]
 8006084:	68ba      	ldr	r2, [r7, #8]
 8006086:	0011      	movs	r1, r2
 8006088:	0018      	movs	r0, r3
 800608a:	f000 f9af 	bl	80063ec <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 800608e:	68fb      	ldr	r3, [r7, #12]
 8006090:	681b      	ldr	r3, [r3, #0]
 8006092:	699a      	ldr	r2, [r3, #24]
 8006094:	68fb      	ldr	r3, [r7, #12]
 8006096:	681b      	ldr	r3, [r3, #0]
 8006098:	2180      	movs	r1, #128	; 0x80
 800609a:	0109      	lsls	r1, r1, #4
 800609c:	430a      	orrs	r2, r1
 800609e:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 80060a0:	68fb      	ldr	r3, [r7, #12]
 80060a2:	681b      	ldr	r3, [r3, #0]
 80060a4:	699a      	ldr	r2, [r3, #24]
 80060a6:	68fb      	ldr	r3, [r7, #12]
 80060a8:	681b      	ldr	r3, [r3, #0]
 80060aa:	4954      	ldr	r1, [pc, #336]	; (80061fc <HAL_TIM_PWM_ConfigChannel+0x1fc>)
 80060ac:	400a      	ands	r2, r1
 80060ae:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 80060b0:	68fb      	ldr	r3, [r7, #12]
 80060b2:	681b      	ldr	r3, [r3, #0]
 80060b4:	6999      	ldr	r1, [r3, #24]
 80060b6:	68bb      	ldr	r3, [r7, #8]
 80060b8:	691b      	ldr	r3, [r3, #16]
 80060ba:	021a      	lsls	r2, r3, #8
 80060bc:	68fb      	ldr	r3, [r7, #12]
 80060be:	681b      	ldr	r3, [r3, #0]
 80060c0:	430a      	orrs	r2, r1
 80060c2:	619a      	str	r2, [r3, #24]
      break;
 80060c4:	e08c      	b.n	80061e0 <HAL_TIM_PWM_ConfigChannel+0x1e0>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 80060c6:	68fb      	ldr	r3, [r7, #12]
 80060c8:	681b      	ldr	r3, [r3, #0]
 80060ca:	68ba      	ldr	r2, [r7, #8]
 80060cc:	0011      	movs	r1, r2
 80060ce:	0018      	movs	r0, r3
 80060d0:	f000 fa0a 	bl	80064e8 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 80060d4:	68fb      	ldr	r3, [r7, #12]
 80060d6:	681b      	ldr	r3, [r3, #0]
 80060d8:	69da      	ldr	r2, [r3, #28]
 80060da:	68fb      	ldr	r3, [r7, #12]
 80060dc:	681b      	ldr	r3, [r3, #0]
 80060de:	2108      	movs	r1, #8
 80060e0:	430a      	orrs	r2, r1
 80060e2:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 80060e4:	68fb      	ldr	r3, [r7, #12]
 80060e6:	681b      	ldr	r3, [r3, #0]
 80060e8:	69da      	ldr	r2, [r3, #28]
 80060ea:	68fb      	ldr	r3, [r7, #12]
 80060ec:	681b      	ldr	r3, [r3, #0]
 80060ee:	2104      	movs	r1, #4
 80060f0:	438a      	bics	r2, r1
 80060f2:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 80060f4:	68fb      	ldr	r3, [r7, #12]
 80060f6:	681b      	ldr	r3, [r3, #0]
 80060f8:	69d9      	ldr	r1, [r3, #28]
 80060fa:	68bb      	ldr	r3, [r7, #8]
 80060fc:	691a      	ldr	r2, [r3, #16]
 80060fe:	68fb      	ldr	r3, [r7, #12]
 8006100:	681b      	ldr	r3, [r3, #0]
 8006102:	430a      	orrs	r2, r1
 8006104:	61da      	str	r2, [r3, #28]
      break;
 8006106:	e06b      	b.n	80061e0 <HAL_TIM_PWM_ConfigChannel+0x1e0>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 8006108:	68fb      	ldr	r3, [r7, #12]
 800610a:	681b      	ldr	r3, [r3, #0]
 800610c:	68ba      	ldr	r2, [r7, #8]
 800610e:	0011      	movs	r1, r2
 8006110:	0018      	movs	r0, r3
 8006112:	f000 fa6b 	bl	80065ec <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 8006116:	68fb      	ldr	r3, [r7, #12]
 8006118:	681b      	ldr	r3, [r3, #0]
 800611a:	69da      	ldr	r2, [r3, #28]
 800611c:	68fb      	ldr	r3, [r7, #12]
 800611e:	681b      	ldr	r3, [r3, #0]
 8006120:	2180      	movs	r1, #128	; 0x80
 8006122:	0109      	lsls	r1, r1, #4
 8006124:	430a      	orrs	r2, r1
 8006126:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 8006128:	68fb      	ldr	r3, [r7, #12]
 800612a:	681b      	ldr	r3, [r3, #0]
 800612c:	69da      	ldr	r2, [r3, #28]
 800612e:	68fb      	ldr	r3, [r7, #12]
 8006130:	681b      	ldr	r3, [r3, #0]
 8006132:	4932      	ldr	r1, [pc, #200]	; (80061fc <HAL_TIM_PWM_ConfigChannel+0x1fc>)
 8006134:	400a      	ands	r2, r1
 8006136:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 8006138:	68fb      	ldr	r3, [r7, #12]
 800613a:	681b      	ldr	r3, [r3, #0]
 800613c:	69d9      	ldr	r1, [r3, #28]
 800613e:	68bb      	ldr	r3, [r7, #8]
 8006140:	691b      	ldr	r3, [r3, #16]
 8006142:	021a      	lsls	r2, r3, #8
 8006144:	68fb      	ldr	r3, [r7, #12]
 8006146:	681b      	ldr	r3, [r3, #0]
 8006148:	430a      	orrs	r2, r1
 800614a:	61da      	str	r2, [r3, #28]
      break;
 800614c:	e048      	b.n	80061e0 <HAL_TIM_PWM_ConfigChannel+0x1e0>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC5_INSTANCE(htim->Instance));

      /* Configure the Channel 5 in PWM mode */
      TIM_OC5_SetConfig(htim->Instance, sConfig);
 800614e:	68fb      	ldr	r3, [r7, #12]
 8006150:	681b      	ldr	r3, [r3, #0]
 8006152:	68ba      	ldr	r2, [r7, #8]
 8006154:	0011      	movs	r1, r2
 8006156:	0018      	movs	r0, r3
 8006158:	f000 faac 	bl	80066b4 <TIM_OC5_SetConfig>

      /* Set the Preload enable bit for channel5*/
      htim->Instance->CCMR3 |= TIM_CCMR3_OC5PE;
 800615c:	68fb      	ldr	r3, [r7, #12]
 800615e:	681b      	ldr	r3, [r3, #0]
 8006160:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8006162:	68fb      	ldr	r3, [r7, #12]
 8006164:	681b      	ldr	r3, [r3, #0]
 8006166:	2108      	movs	r1, #8
 8006168:	430a      	orrs	r2, r1
 800616a:	655a      	str	r2, [r3, #84]	; 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC5FE;
 800616c:	68fb      	ldr	r3, [r7, #12]
 800616e:	681b      	ldr	r3, [r3, #0]
 8006170:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8006172:	68fb      	ldr	r3, [r7, #12]
 8006174:	681b      	ldr	r3, [r3, #0]
 8006176:	2104      	movs	r1, #4
 8006178:	438a      	bics	r2, r1
 800617a:	655a      	str	r2, [r3, #84]	; 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode;
 800617c:	68fb      	ldr	r3, [r7, #12]
 800617e:	681b      	ldr	r3, [r3, #0]
 8006180:	6d59      	ldr	r1, [r3, #84]	; 0x54
 8006182:	68bb      	ldr	r3, [r7, #8]
 8006184:	691a      	ldr	r2, [r3, #16]
 8006186:	68fb      	ldr	r3, [r7, #12]
 8006188:	681b      	ldr	r3, [r3, #0]
 800618a:	430a      	orrs	r2, r1
 800618c:	655a      	str	r2, [r3, #84]	; 0x54
      break;
 800618e:	e027      	b.n	80061e0 <HAL_TIM_PWM_ConfigChannel+0x1e0>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC6_INSTANCE(htim->Instance));

      /* Configure the Channel 6 in PWM mode */
      TIM_OC6_SetConfig(htim->Instance, sConfig);
 8006190:	68fb      	ldr	r3, [r7, #12]
 8006192:	681b      	ldr	r3, [r3, #0]
 8006194:	68ba      	ldr	r2, [r7, #8]
 8006196:	0011      	movs	r1, r2
 8006198:	0018      	movs	r0, r3
 800619a:	f000 fae5 	bl	8006768 <TIM_OC6_SetConfig>

      /* Set the Preload enable bit for channel6 */
      htim->Instance->CCMR3 |= TIM_CCMR3_OC6PE;
 800619e:	68fb      	ldr	r3, [r7, #12]
 80061a0:	681b      	ldr	r3, [r3, #0]
 80061a2:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 80061a4:	68fb      	ldr	r3, [r7, #12]
 80061a6:	681b      	ldr	r3, [r3, #0]
 80061a8:	2180      	movs	r1, #128	; 0x80
 80061aa:	0109      	lsls	r1, r1, #4
 80061ac:	430a      	orrs	r2, r1
 80061ae:	655a      	str	r2, [r3, #84]	; 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC6FE;
 80061b0:	68fb      	ldr	r3, [r7, #12]
 80061b2:	681b      	ldr	r3, [r3, #0]
 80061b4:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 80061b6:	68fb      	ldr	r3, [r7, #12]
 80061b8:	681b      	ldr	r3, [r3, #0]
 80061ba:	4910      	ldr	r1, [pc, #64]	; (80061fc <HAL_TIM_PWM_ConfigChannel+0x1fc>)
 80061bc:	400a      	ands	r2, r1
 80061be:	655a      	str	r2, [r3, #84]	; 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode << 8U;
 80061c0:	68fb      	ldr	r3, [r7, #12]
 80061c2:	681b      	ldr	r3, [r3, #0]
 80061c4:	6d59      	ldr	r1, [r3, #84]	; 0x54
 80061c6:	68bb      	ldr	r3, [r7, #8]
 80061c8:	691b      	ldr	r3, [r3, #16]
 80061ca:	021a      	lsls	r2, r3, #8
 80061cc:	68fb      	ldr	r3, [r7, #12]
 80061ce:	681b      	ldr	r3, [r3, #0]
 80061d0:	430a      	orrs	r2, r1
 80061d2:	655a      	str	r2, [r3, #84]	; 0x54
      break;
 80061d4:	e004      	b.n	80061e0 <HAL_TIM_PWM_ConfigChannel+0x1e0>
    }

    default:
      status = HAL_ERROR;
 80061d6:	2317      	movs	r3, #23
 80061d8:	18fb      	adds	r3, r7, r3
 80061da:	2201      	movs	r2, #1
 80061dc:	701a      	strb	r2, [r3, #0]
      break;
 80061de:	46c0      	nop			; (mov r8, r8)
  }

  __HAL_UNLOCK(htim);
 80061e0:	68fb      	ldr	r3, [r7, #12]
 80061e2:	223c      	movs	r2, #60	; 0x3c
 80061e4:	2100      	movs	r1, #0
 80061e6:	5499      	strb	r1, [r3, r2]

  return status;
 80061e8:	2317      	movs	r3, #23
 80061ea:	18fb      	adds	r3, r7, r3
 80061ec:	781b      	ldrb	r3, [r3, #0]
}
 80061ee:	0018      	movs	r0, r3
 80061f0:	46bd      	mov	sp, r7
 80061f2:	b006      	add	sp, #24
 80061f4:	bd80      	pop	{r7, pc}
 80061f6:	46c0      	nop			; (mov r8, r8)
 80061f8:	0800a478 	.word	0x0800a478
 80061fc:	fffffbff 	.word	0xfffffbff

08006200 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 8006200:	b580      	push	{r7, lr}
 8006202:	b084      	sub	sp, #16
 8006204:	af00      	add	r7, sp, #0
 8006206:	6078      	str	r0, [r7, #4]
 8006208:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 800620a:	687b      	ldr	r3, [r7, #4]
 800620c:	681b      	ldr	r3, [r3, #0]
 800620e:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8006210:	687b      	ldr	r3, [r7, #4]
 8006212:	4a30      	ldr	r2, [pc, #192]	; (80062d4 <TIM_Base_SetConfig+0xd4>)
 8006214:	4293      	cmp	r3, r2
 8006216:	d008      	beq.n	800622a <TIM_Base_SetConfig+0x2a>
 8006218:	687a      	ldr	r2, [r7, #4]
 800621a:	2380      	movs	r3, #128	; 0x80
 800621c:	05db      	lsls	r3, r3, #23
 800621e:	429a      	cmp	r2, r3
 8006220:	d003      	beq.n	800622a <TIM_Base_SetConfig+0x2a>
 8006222:	687b      	ldr	r3, [r7, #4]
 8006224:	4a2c      	ldr	r2, [pc, #176]	; (80062d8 <TIM_Base_SetConfig+0xd8>)
 8006226:	4293      	cmp	r3, r2
 8006228:	d108      	bne.n	800623c <TIM_Base_SetConfig+0x3c>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 800622a:	68fb      	ldr	r3, [r7, #12]
 800622c:	2270      	movs	r2, #112	; 0x70
 800622e:	4393      	bics	r3, r2
 8006230:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8006232:	683b      	ldr	r3, [r7, #0]
 8006234:	685b      	ldr	r3, [r3, #4]
 8006236:	68fa      	ldr	r2, [r7, #12]
 8006238:	4313      	orrs	r3, r2
 800623a:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 800623c:	687b      	ldr	r3, [r7, #4]
 800623e:	4a25      	ldr	r2, [pc, #148]	; (80062d4 <TIM_Base_SetConfig+0xd4>)
 8006240:	4293      	cmp	r3, r2
 8006242:	d014      	beq.n	800626e <TIM_Base_SetConfig+0x6e>
 8006244:	687a      	ldr	r2, [r7, #4]
 8006246:	2380      	movs	r3, #128	; 0x80
 8006248:	05db      	lsls	r3, r3, #23
 800624a:	429a      	cmp	r2, r3
 800624c:	d00f      	beq.n	800626e <TIM_Base_SetConfig+0x6e>
 800624e:	687b      	ldr	r3, [r7, #4]
 8006250:	4a21      	ldr	r2, [pc, #132]	; (80062d8 <TIM_Base_SetConfig+0xd8>)
 8006252:	4293      	cmp	r3, r2
 8006254:	d00b      	beq.n	800626e <TIM_Base_SetConfig+0x6e>
 8006256:	687b      	ldr	r3, [r7, #4]
 8006258:	4a20      	ldr	r2, [pc, #128]	; (80062dc <TIM_Base_SetConfig+0xdc>)
 800625a:	4293      	cmp	r3, r2
 800625c:	d007      	beq.n	800626e <TIM_Base_SetConfig+0x6e>
 800625e:	687b      	ldr	r3, [r7, #4]
 8006260:	4a1f      	ldr	r2, [pc, #124]	; (80062e0 <TIM_Base_SetConfig+0xe0>)
 8006262:	4293      	cmp	r3, r2
 8006264:	d003      	beq.n	800626e <TIM_Base_SetConfig+0x6e>
 8006266:	687b      	ldr	r3, [r7, #4]
 8006268:	4a1e      	ldr	r2, [pc, #120]	; (80062e4 <TIM_Base_SetConfig+0xe4>)
 800626a:	4293      	cmp	r3, r2
 800626c:	d108      	bne.n	8006280 <TIM_Base_SetConfig+0x80>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 800626e:	68fb      	ldr	r3, [r7, #12]
 8006270:	4a1d      	ldr	r2, [pc, #116]	; (80062e8 <TIM_Base_SetConfig+0xe8>)
 8006272:	4013      	ands	r3, r2
 8006274:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8006276:	683b      	ldr	r3, [r7, #0]
 8006278:	68db      	ldr	r3, [r3, #12]
 800627a:	68fa      	ldr	r2, [r7, #12]
 800627c:	4313      	orrs	r3, r2
 800627e:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8006280:	68fb      	ldr	r3, [r7, #12]
 8006282:	2280      	movs	r2, #128	; 0x80
 8006284:	4393      	bics	r3, r2
 8006286:	001a      	movs	r2, r3
 8006288:	683b      	ldr	r3, [r7, #0]
 800628a:	695b      	ldr	r3, [r3, #20]
 800628c:	4313      	orrs	r3, r2
 800628e:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8006290:	687b      	ldr	r3, [r7, #4]
 8006292:	68fa      	ldr	r2, [r7, #12]
 8006294:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8006296:	683b      	ldr	r3, [r7, #0]
 8006298:	689a      	ldr	r2, [r3, #8]
 800629a:	687b      	ldr	r3, [r7, #4]
 800629c:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 800629e:	683b      	ldr	r3, [r7, #0]
 80062a0:	681a      	ldr	r2, [r3, #0]
 80062a2:	687b      	ldr	r3, [r7, #4]
 80062a4:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 80062a6:	687b      	ldr	r3, [r7, #4]
 80062a8:	4a0a      	ldr	r2, [pc, #40]	; (80062d4 <TIM_Base_SetConfig+0xd4>)
 80062aa:	4293      	cmp	r3, r2
 80062ac:	d007      	beq.n	80062be <TIM_Base_SetConfig+0xbe>
 80062ae:	687b      	ldr	r3, [r7, #4]
 80062b0:	4a0b      	ldr	r2, [pc, #44]	; (80062e0 <TIM_Base_SetConfig+0xe0>)
 80062b2:	4293      	cmp	r3, r2
 80062b4:	d003      	beq.n	80062be <TIM_Base_SetConfig+0xbe>
 80062b6:	687b      	ldr	r3, [r7, #4]
 80062b8:	4a0a      	ldr	r2, [pc, #40]	; (80062e4 <TIM_Base_SetConfig+0xe4>)
 80062ba:	4293      	cmp	r3, r2
 80062bc:	d103      	bne.n	80062c6 <TIM_Base_SetConfig+0xc6>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 80062be:	683b      	ldr	r3, [r7, #0]
 80062c0:	691a      	ldr	r2, [r3, #16]
 80062c2:	687b      	ldr	r3, [r7, #4]
 80062c4:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 80062c6:	687b      	ldr	r3, [r7, #4]
 80062c8:	2201      	movs	r2, #1
 80062ca:	615a      	str	r2, [r3, #20]
}
 80062cc:	46c0      	nop			; (mov r8, r8)
 80062ce:	46bd      	mov	sp, r7
 80062d0:	b004      	add	sp, #16
 80062d2:	bd80      	pop	{r7, pc}
 80062d4:	40012c00 	.word	0x40012c00
 80062d8:	40000400 	.word	0x40000400
 80062dc:	40002000 	.word	0x40002000
 80062e0:	40014400 	.word	0x40014400
 80062e4:	40014800 	.word	0x40014800
 80062e8:	fffffcff 	.word	0xfffffcff

080062ec <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 80062ec:	b580      	push	{r7, lr}
 80062ee:	b086      	sub	sp, #24
 80062f0:	af00      	add	r7, sp, #0
 80062f2:	6078      	str	r0, [r7, #4]
 80062f4:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 80062f6:	687b      	ldr	r3, [r7, #4]
 80062f8:	6a1b      	ldr	r3, [r3, #32]
 80062fa:	2201      	movs	r2, #1
 80062fc:	4393      	bics	r3, r2
 80062fe:	001a      	movs	r2, r3
 8006300:	687b      	ldr	r3, [r7, #4]
 8006302:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8006304:	687b      	ldr	r3, [r7, #4]
 8006306:	6a1b      	ldr	r3, [r3, #32]
 8006308:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800630a:	687b      	ldr	r3, [r7, #4]
 800630c:	685b      	ldr	r3, [r3, #4]
 800630e:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8006310:	687b      	ldr	r3, [r7, #4]
 8006312:	699b      	ldr	r3, [r3, #24]
 8006314:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 8006316:	68fb      	ldr	r3, [r7, #12]
 8006318:	4a2e      	ldr	r2, [pc, #184]	; (80063d4 <TIM_OC1_SetConfig+0xe8>)
 800631a:	4013      	ands	r3, r2
 800631c:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 800631e:	68fb      	ldr	r3, [r7, #12]
 8006320:	2203      	movs	r2, #3
 8006322:	4393      	bics	r3, r2
 8006324:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8006326:	683b      	ldr	r3, [r7, #0]
 8006328:	681b      	ldr	r3, [r3, #0]
 800632a:	68fa      	ldr	r2, [r7, #12]
 800632c:	4313      	orrs	r3, r2
 800632e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 8006330:	697b      	ldr	r3, [r7, #20]
 8006332:	2202      	movs	r2, #2
 8006334:	4393      	bics	r3, r2
 8006336:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 8006338:	683b      	ldr	r3, [r7, #0]
 800633a:	689b      	ldr	r3, [r3, #8]
 800633c:	697a      	ldr	r2, [r7, #20]
 800633e:	4313      	orrs	r3, r2
 8006340:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8006342:	687b      	ldr	r3, [r7, #4]
 8006344:	4a24      	ldr	r2, [pc, #144]	; (80063d8 <TIM_OC1_SetConfig+0xec>)
 8006346:	4293      	cmp	r3, r2
 8006348:	d007      	beq.n	800635a <TIM_OC1_SetConfig+0x6e>
 800634a:	687b      	ldr	r3, [r7, #4]
 800634c:	4a23      	ldr	r2, [pc, #140]	; (80063dc <TIM_OC1_SetConfig+0xf0>)
 800634e:	4293      	cmp	r3, r2
 8006350:	d003      	beq.n	800635a <TIM_OC1_SetConfig+0x6e>
 8006352:	687b      	ldr	r3, [r7, #4]
 8006354:	4a22      	ldr	r2, [pc, #136]	; (80063e0 <TIM_OC1_SetConfig+0xf4>)
 8006356:	4293      	cmp	r3, r2
 8006358:	d10c      	bne.n	8006374 <TIM_OC1_SetConfig+0x88>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 800635a:	697b      	ldr	r3, [r7, #20]
 800635c:	2208      	movs	r2, #8
 800635e:	4393      	bics	r3, r2
 8006360:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 8006362:	683b      	ldr	r3, [r7, #0]
 8006364:	68db      	ldr	r3, [r3, #12]
 8006366:	697a      	ldr	r2, [r7, #20]
 8006368:	4313      	orrs	r3, r2
 800636a:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 800636c:	697b      	ldr	r3, [r7, #20]
 800636e:	2204      	movs	r2, #4
 8006370:	4393      	bics	r3, r2
 8006372:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8006374:	687b      	ldr	r3, [r7, #4]
 8006376:	4a18      	ldr	r2, [pc, #96]	; (80063d8 <TIM_OC1_SetConfig+0xec>)
 8006378:	4293      	cmp	r3, r2
 800637a:	d007      	beq.n	800638c <TIM_OC1_SetConfig+0xa0>
 800637c:	687b      	ldr	r3, [r7, #4]
 800637e:	4a17      	ldr	r2, [pc, #92]	; (80063dc <TIM_OC1_SetConfig+0xf0>)
 8006380:	4293      	cmp	r3, r2
 8006382:	d003      	beq.n	800638c <TIM_OC1_SetConfig+0xa0>
 8006384:	687b      	ldr	r3, [r7, #4]
 8006386:	4a16      	ldr	r2, [pc, #88]	; (80063e0 <TIM_OC1_SetConfig+0xf4>)
 8006388:	4293      	cmp	r3, r2
 800638a:	d111      	bne.n	80063b0 <TIM_OC1_SetConfig+0xc4>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 800638c:	693b      	ldr	r3, [r7, #16]
 800638e:	4a15      	ldr	r2, [pc, #84]	; (80063e4 <TIM_OC1_SetConfig+0xf8>)
 8006390:	4013      	ands	r3, r2
 8006392:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 8006394:	693b      	ldr	r3, [r7, #16]
 8006396:	4a14      	ldr	r2, [pc, #80]	; (80063e8 <TIM_OC1_SetConfig+0xfc>)
 8006398:	4013      	ands	r3, r2
 800639a:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 800639c:	683b      	ldr	r3, [r7, #0]
 800639e:	695b      	ldr	r3, [r3, #20]
 80063a0:	693a      	ldr	r2, [r7, #16]
 80063a2:	4313      	orrs	r3, r2
 80063a4:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 80063a6:	683b      	ldr	r3, [r7, #0]
 80063a8:	699b      	ldr	r3, [r3, #24]
 80063aa:	693a      	ldr	r2, [r7, #16]
 80063ac:	4313      	orrs	r3, r2
 80063ae:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80063b0:	687b      	ldr	r3, [r7, #4]
 80063b2:	693a      	ldr	r2, [r7, #16]
 80063b4:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 80063b6:	687b      	ldr	r3, [r7, #4]
 80063b8:	68fa      	ldr	r2, [r7, #12]
 80063ba:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 80063bc:	683b      	ldr	r3, [r7, #0]
 80063be:	685a      	ldr	r2, [r3, #4]
 80063c0:	687b      	ldr	r3, [r7, #4]
 80063c2:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80063c4:	687b      	ldr	r3, [r7, #4]
 80063c6:	697a      	ldr	r2, [r7, #20]
 80063c8:	621a      	str	r2, [r3, #32]
}
 80063ca:	46c0      	nop			; (mov r8, r8)
 80063cc:	46bd      	mov	sp, r7
 80063ce:	b006      	add	sp, #24
 80063d0:	bd80      	pop	{r7, pc}
 80063d2:	46c0      	nop			; (mov r8, r8)
 80063d4:	fffeff8f 	.word	0xfffeff8f
 80063d8:	40012c00 	.word	0x40012c00
 80063dc:	40014400 	.word	0x40014400
 80063e0:	40014800 	.word	0x40014800
 80063e4:	fffffeff 	.word	0xfffffeff
 80063e8:	fffffdff 	.word	0xfffffdff

080063ec <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 80063ec:	b580      	push	{r7, lr}
 80063ee:	b086      	sub	sp, #24
 80063f0:	af00      	add	r7, sp, #0
 80063f2:	6078      	str	r0, [r7, #4]
 80063f4:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 80063f6:	687b      	ldr	r3, [r7, #4]
 80063f8:	6a1b      	ldr	r3, [r3, #32]
 80063fa:	2210      	movs	r2, #16
 80063fc:	4393      	bics	r3, r2
 80063fe:	001a      	movs	r2, r3
 8006400:	687b      	ldr	r3, [r7, #4]
 8006402:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8006404:	687b      	ldr	r3, [r7, #4]
 8006406:	6a1b      	ldr	r3, [r3, #32]
 8006408:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800640a:	687b      	ldr	r3, [r7, #4]
 800640c:	685b      	ldr	r3, [r3, #4]
 800640e:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8006410:	687b      	ldr	r3, [r7, #4]
 8006412:	699b      	ldr	r3, [r3, #24]
 8006414:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 8006416:	68fb      	ldr	r3, [r7, #12]
 8006418:	4a2c      	ldr	r2, [pc, #176]	; (80064cc <TIM_OC2_SetConfig+0xe0>)
 800641a:	4013      	ands	r3, r2
 800641c:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 800641e:	68fb      	ldr	r3, [r7, #12]
 8006420:	4a2b      	ldr	r2, [pc, #172]	; (80064d0 <TIM_OC2_SetConfig+0xe4>)
 8006422:	4013      	ands	r3, r2
 8006424:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8006426:	683b      	ldr	r3, [r7, #0]
 8006428:	681b      	ldr	r3, [r3, #0]
 800642a:	021b      	lsls	r3, r3, #8
 800642c:	68fa      	ldr	r2, [r7, #12]
 800642e:	4313      	orrs	r3, r2
 8006430:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 8006432:	697b      	ldr	r3, [r7, #20]
 8006434:	2220      	movs	r2, #32
 8006436:	4393      	bics	r3, r2
 8006438:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 800643a:	683b      	ldr	r3, [r7, #0]
 800643c:	689b      	ldr	r3, [r3, #8]
 800643e:	011b      	lsls	r3, r3, #4
 8006440:	697a      	ldr	r2, [r7, #20]
 8006442:	4313      	orrs	r3, r2
 8006444:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 8006446:	687b      	ldr	r3, [r7, #4]
 8006448:	4a22      	ldr	r2, [pc, #136]	; (80064d4 <TIM_OC2_SetConfig+0xe8>)
 800644a:	4293      	cmp	r3, r2
 800644c:	d10d      	bne.n	800646a <TIM_OC2_SetConfig+0x7e>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 800644e:	697b      	ldr	r3, [r7, #20]
 8006450:	2280      	movs	r2, #128	; 0x80
 8006452:	4393      	bics	r3, r2
 8006454:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8006456:	683b      	ldr	r3, [r7, #0]
 8006458:	68db      	ldr	r3, [r3, #12]
 800645a:	011b      	lsls	r3, r3, #4
 800645c:	697a      	ldr	r2, [r7, #20]
 800645e:	4313      	orrs	r3, r2
 8006460:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 8006462:	697b      	ldr	r3, [r7, #20]
 8006464:	2240      	movs	r2, #64	; 0x40
 8006466:	4393      	bics	r3, r2
 8006468:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800646a:	687b      	ldr	r3, [r7, #4]
 800646c:	4a19      	ldr	r2, [pc, #100]	; (80064d4 <TIM_OC2_SetConfig+0xe8>)
 800646e:	4293      	cmp	r3, r2
 8006470:	d007      	beq.n	8006482 <TIM_OC2_SetConfig+0x96>
 8006472:	687b      	ldr	r3, [r7, #4]
 8006474:	4a18      	ldr	r2, [pc, #96]	; (80064d8 <TIM_OC2_SetConfig+0xec>)
 8006476:	4293      	cmp	r3, r2
 8006478:	d003      	beq.n	8006482 <TIM_OC2_SetConfig+0x96>
 800647a:	687b      	ldr	r3, [r7, #4]
 800647c:	4a17      	ldr	r2, [pc, #92]	; (80064dc <TIM_OC2_SetConfig+0xf0>)
 800647e:	4293      	cmp	r3, r2
 8006480:	d113      	bne.n	80064aa <TIM_OC2_SetConfig+0xbe>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 8006482:	693b      	ldr	r3, [r7, #16]
 8006484:	4a16      	ldr	r2, [pc, #88]	; (80064e0 <TIM_OC2_SetConfig+0xf4>)
 8006486:	4013      	ands	r3, r2
 8006488:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 800648a:	693b      	ldr	r3, [r7, #16]
 800648c:	4a15      	ldr	r2, [pc, #84]	; (80064e4 <TIM_OC2_SetConfig+0xf8>)
 800648e:	4013      	ands	r3, r2
 8006490:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 8006492:	683b      	ldr	r3, [r7, #0]
 8006494:	695b      	ldr	r3, [r3, #20]
 8006496:	009b      	lsls	r3, r3, #2
 8006498:	693a      	ldr	r2, [r7, #16]
 800649a:	4313      	orrs	r3, r2
 800649c:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 800649e:	683b      	ldr	r3, [r7, #0]
 80064a0:	699b      	ldr	r3, [r3, #24]
 80064a2:	009b      	lsls	r3, r3, #2
 80064a4:	693a      	ldr	r2, [r7, #16]
 80064a6:	4313      	orrs	r3, r2
 80064a8:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80064aa:	687b      	ldr	r3, [r7, #4]
 80064ac:	693a      	ldr	r2, [r7, #16]
 80064ae:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 80064b0:	687b      	ldr	r3, [r7, #4]
 80064b2:	68fa      	ldr	r2, [r7, #12]
 80064b4:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 80064b6:	683b      	ldr	r3, [r7, #0]
 80064b8:	685a      	ldr	r2, [r3, #4]
 80064ba:	687b      	ldr	r3, [r7, #4]
 80064bc:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80064be:	687b      	ldr	r3, [r7, #4]
 80064c0:	697a      	ldr	r2, [r7, #20]
 80064c2:	621a      	str	r2, [r3, #32]
}
 80064c4:	46c0      	nop			; (mov r8, r8)
 80064c6:	46bd      	mov	sp, r7
 80064c8:	b006      	add	sp, #24
 80064ca:	bd80      	pop	{r7, pc}
 80064cc:	feff8fff 	.word	0xfeff8fff
 80064d0:	fffffcff 	.word	0xfffffcff
 80064d4:	40012c00 	.word	0x40012c00
 80064d8:	40014400 	.word	0x40014400
 80064dc:	40014800 	.word	0x40014800
 80064e0:	fffffbff 	.word	0xfffffbff
 80064e4:	fffff7ff 	.word	0xfffff7ff

080064e8 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 80064e8:	b580      	push	{r7, lr}
 80064ea:	b086      	sub	sp, #24
 80064ec:	af00      	add	r7, sp, #0
 80064ee:	6078      	str	r0, [r7, #4]
 80064f0:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 80064f2:	687b      	ldr	r3, [r7, #4]
 80064f4:	6a1b      	ldr	r3, [r3, #32]
 80064f6:	4a33      	ldr	r2, [pc, #204]	; (80065c4 <TIM_OC3_SetConfig+0xdc>)
 80064f8:	401a      	ands	r2, r3
 80064fa:	687b      	ldr	r3, [r7, #4]
 80064fc:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80064fe:	687b      	ldr	r3, [r7, #4]
 8006500:	6a1b      	ldr	r3, [r3, #32]
 8006502:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8006504:	687b      	ldr	r3, [r7, #4]
 8006506:	685b      	ldr	r3, [r3, #4]
 8006508:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 800650a:	687b      	ldr	r3, [r7, #4]
 800650c:	69db      	ldr	r3, [r3, #28]
 800650e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 8006510:	68fb      	ldr	r3, [r7, #12]
 8006512:	4a2d      	ldr	r2, [pc, #180]	; (80065c8 <TIM_OC3_SetConfig+0xe0>)
 8006514:	4013      	ands	r3, r2
 8006516:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8006518:	68fb      	ldr	r3, [r7, #12]
 800651a:	2203      	movs	r2, #3
 800651c:	4393      	bics	r3, r2
 800651e:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8006520:	683b      	ldr	r3, [r7, #0]
 8006522:	681b      	ldr	r3, [r3, #0]
 8006524:	68fa      	ldr	r2, [r7, #12]
 8006526:	4313      	orrs	r3, r2
 8006528:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 800652a:	697b      	ldr	r3, [r7, #20]
 800652c:	4a27      	ldr	r2, [pc, #156]	; (80065cc <TIM_OC3_SetConfig+0xe4>)
 800652e:	4013      	ands	r3, r2
 8006530:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 8006532:	683b      	ldr	r3, [r7, #0]
 8006534:	689b      	ldr	r3, [r3, #8]
 8006536:	021b      	lsls	r3, r3, #8
 8006538:	697a      	ldr	r2, [r7, #20]
 800653a:	4313      	orrs	r3, r2
 800653c:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 800653e:	687b      	ldr	r3, [r7, #4]
 8006540:	4a23      	ldr	r2, [pc, #140]	; (80065d0 <TIM_OC3_SetConfig+0xe8>)
 8006542:	4293      	cmp	r3, r2
 8006544:	d10d      	bne.n	8006562 <TIM_OC3_SetConfig+0x7a>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 8006546:	697b      	ldr	r3, [r7, #20]
 8006548:	4a22      	ldr	r2, [pc, #136]	; (80065d4 <TIM_OC3_SetConfig+0xec>)
 800654a:	4013      	ands	r3, r2
 800654c:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 800654e:	683b      	ldr	r3, [r7, #0]
 8006550:	68db      	ldr	r3, [r3, #12]
 8006552:	021b      	lsls	r3, r3, #8
 8006554:	697a      	ldr	r2, [r7, #20]
 8006556:	4313      	orrs	r3, r2
 8006558:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 800655a:	697b      	ldr	r3, [r7, #20]
 800655c:	4a1e      	ldr	r2, [pc, #120]	; (80065d8 <TIM_OC3_SetConfig+0xf0>)
 800655e:	4013      	ands	r3, r2
 8006560:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8006562:	687b      	ldr	r3, [r7, #4]
 8006564:	4a1a      	ldr	r2, [pc, #104]	; (80065d0 <TIM_OC3_SetConfig+0xe8>)
 8006566:	4293      	cmp	r3, r2
 8006568:	d007      	beq.n	800657a <TIM_OC3_SetConfig+0x92>
 800656a:	687b      	ldr	r3, [r7, #4]
 800656c:	4a1b      	ldr	r2, [pc, #108]	; (80065dc <TIM_OC3_SetConfig+0xf4>)
 800656e:	4293      	cmp	r3, r2
 8006570:	d003      	beq.n	800657a <TIM_OC3_SetConfig+0x92>
 8006572:	687b      	ldr	r3, [r7, #4]
 8006574:	4a1a      	ldr	r2, [pc, #104]	; (80065e0 <TIM_OC3_SetConfig+0xf8>)
 8006576:	4293      	cmp	r3, r2
 8006578:	d113      	bne.n	80065a2 <TIM_OC3_SetConfig+0xba>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 800657a:	693b      	ldr	r3, [r7, #16]
 800657c:	4a19      	ldr	r2, [pc, #100]	; (80065e4 <TIM_OC3_SetConfig+0xfc>)
 800657e:	4013      	ands	r3, r2
 8006580:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 8006582:	693b      	ldr	r3, [r7, #16]
 8006584:	4a18      	ldr	r2, [pc, #96]	; (80065e8 <TIM_OC3_SetConfig+0x100>)
 8006586:	4013      	ands	r3, r2
 8006588:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 800658a:	683b      	ldr	r3, [r7, #0]
 800658c:	695b      	ldr	r3, [r3, #20]
 800658e:	011b      	lsls	r3, r3, #4
 8006590:	693a      	ldr	r2, [r7, #16]
 8006592:	4313      	orrs	r3, r2
 8006594:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 8006596:	683b      	ldr	r3, [r7, #0]
 8006598:	699b      	ldr	r3, [r3, #24]
 800659a:	011b      	lsls	r3, r3, #4
 800659c:	693a      	ldr	r2, [r7, #16]
 800659e:	4313      	orrs	r3, r2
 80065a0:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80065a2:	687b      	ldr	r3, [r7, #4]
 80065a4:	693a      	ldr	r2, [r7, #16]
 80065a6:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 80065a8:	687b      	ldr	r3, [r7, #4]
 80065aa:	68fa      	ldr	r2, [r7, #12]
 80065ac:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 80065ae:	683b      	ldr	r3, [r7, #0]
 80065b0:	685a      	ldr	r2, [r3, #4]
 80065b2:	687b      	ldr	r3, [r7, #4]
 80065b4:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80065b6:	687b      	ldr	r3, [r7, #4]
 80065b8:	697a      	ldr	r2, [r7, #20]
 80065ba:	621a      	str	r2, [r3, #32]
}
 80065bc:	46c0      	nop			; (mov r8, r8)
 80065be:	46bd      	mov	sp, r7
 80065c0:	b006      	add	sp, #24
 80065c2:	bd80      	pop	{r7, pc}
 80065c4:	fffffeff 	.word	0xfffffeff
 80065c8:	fffeff8f 	.word	0xfffeff8f
 80065cc:	fffffdff 	.word	0xfffffdff
 80065d0:	40012c00 	.word	0x40012c00
 80065d4:	fffff7ff 	.word	0xfffff7ff
 80065d8:	fffffbff 	.word	0xfffffbff
 80065dc:	40014400 	.word	0x40014400
 80065e0:	40014800 	.word	0x40014800
 80065e4:	ffffefff 	.word	0xffffefff
 80065e8:	ffffdfff 	.word	0xffffdfff

080065ec <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 80065ec:	b580      	push	{r7, lr}
 80065ee:	b086      	sub	sp, #24
 80065f0:	af00      	add	r7, sp, #0
 80065f2:	6078      	str	r0, [r7, #4]
 80065f4:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 80065f6:	687b      	ldr	r3, [r7, #4]
 80065f8:	6a1b      	ldr	r3, [r3, #32]
 80065fa:	4a26      	ldr	r2, [pc, #152]	; (8006694 <TIM_OC4_SetConfig+0xa8>)
 80065fc:	401a      	ands	r2, r3
 80065fe:	687b      	ldr	r3, [r7, #4]
 8006600:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8006602:	687b      	ldr	r3, [r7, #4]
 8006604:	6a1b      	ldr	r3, [r3, #32]
 8006606:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8006608:	687b      	ldr	r3, [r7, #4]
 800660a:	685b      	ldr	r3, [r3, #4]
 800660c:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 800660e:	687b      	ldr	r3, [r7, #4]
 8006610:	69db      	ldr	r3, [r3, #28]
 8006612:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 8006614:	68fb      	ldr	r3, [r7, #12]
 8006616:	4a20      	ldr	r2, [pc, #128]	; (8006698 <TIM_OC4_SetConfig+0xac>)
 8006618:	4013      	ands	r3, r2
 800661a:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 800661c:	68fb      	ldr	r3, [r7, #12]
 800661e:	4a1f      	ldr	r2, [pc, #124]	; (800669c <TIM_OC4_SetConfig+0xb0>)
 8006620:	4013      	ands	r3, r2
 8006622:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8006624:	683b      	ldr	r3, [r7, #0]
 8006626:	681b      	ldr	r3, [r3, #0]
 8006628:	021b      	lsls	r3, r3, #8
 800662a:	68fa      	ldr	r2, [r7, #12]
 800662c:	4313      	orrs	r3, r2
 800662e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 8006630:	693b      	ldr	r3, [r7, #16]
 8006632:	4a1b      	ldr	r2, [pc, #108]	; (80066a0 <TIM_OC4_SetConfig+0xb4>)
 8006634:	4013      	ands	r3, r2
 8006636:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8006638:	683b      	ldr	r3, [r7, #0]
 800663a:	689b      	ldr	r3, [r3, #8]
 800663c:	031b      	lsls	r3, r3, #12
 800663e:	693a      	ldr	r2, [r7, #16]
 8006640:	4313      	orrs	r3, r2
 8006642:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8006644:	687b      	ldr	r3, [r7, #4]
 8006646:	4a17      	ldr	r2, [pc, #92]	; (80066a4 <TIM_OC4_SetConfig+0xb8>)
 8006648:	4293      	cmp	r3, r2
 800664a:	d007      	beq.n	800665c <TIM_OC4_SetConfig+0x70>
 800664c:	687b      	ldr	r3, [r7, #4]
 800664e:	4a16      	ldr	r2, [pc, #88]	; (80066a8 <TIM_OC4_SetConfig+0xbc>)
 8006650:	4293      	cmp	r3, r2
 8006652:	d003      	beq.n	800665c <TIM_OC4_SetConfig+0x70>
 8006654:	687b      	ldr	r3, [r7, #4]
 8006656:	4a15      	ldr	r2, [pc, #84]	; (80066ac <TIM_OC4_SetConfig+0xc0>)
 8006658:	4293      	cmp	r3, r2
 800665a:	d109      	bne.n	8006670 <TIM_OC4_SetConfig+0x84>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 800665c:	697b      	ldr	r3, [r7, #20]
 800665e:	4a14      	ldr	r2, [pc, #80]	; (80066b0 <TIM_OC4_SetConfig+0xc4>)
 8006660:	4013      	ands	r3, r2
 8006662:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8006664:	683b      	ldr	r3, [r7, #0]
 8006666:	695b      	ldr	r3, [r3, #20]
 8006668:	019b      	lsls	r3, r3, #6
 800666a:	697a      	ldr	r2, [r7, #20]
 800666c:	4313      	orrs	r3, r2
 800666e:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8006670:	687b      	ldr	r3, [r7, #4]
 8006672:	697a      	ldr	r2, [r7, #20]
 8006674:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8006676:	687b      	ldr	r3, [r7, #4]
 8006678:	68fa      	ldr	r2, [r7, #12]
 800667a:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 800667c:	683b      	ldr	r3, [r7, #0]
 800667e:	685a      	ldr	r2, [r3, #4]
 8006680:	687b      	ldr	r3, [r7, #4]
 8006682:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8006684:	687b      	ldr	r3, [r7, #4]
 8006686:	693a      	ldr	r2, [r7, #16]
 8006688:	621a      	str	r2, [r3, #32]
}
 800668a:	46c0      	nop			; (mov r8, r8)
 800668c:	46bd      	mov	sp, r7
 800668e:	b006      	add	sp, #24
 8006690:	bd80      	pop	{r7, pc}
 8006692:	46c0      	nop			; (mov r8, r8)
 8006694:	ffffefff 	.word	0xffffefff
 8006698:	feff8fff 	.word	0xfeff8fff
 800669c:	fffffcff 	.word	0xfffffcff
 80066a0:	ffffdfff 	.word	0xffffdfff
 80066a4:	40012c00 	.word	0x40012c00
 80066a8:	40014400 	.word	0x40014400
 80066ac:	40014800 	.word	0x40014800
 80066b0:	ffffbfff 	.word	0xffffbfff

080066b4 <TIM_OC5_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC5_SetConfig(TIM_TypeDef *TIMx,
                              const TIM_OC_InitTypeDef *OC_Config)
{
 80066b4:	b580      	push	{r7, lr}
 80066b6:	b086      	sub	sp, #24
 80066b8:	af00      	add	r7, sp, #0
 80066ba:	6078      	str	r0, [r7, #4]
 80066bc:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC5E;
 80066be:	687b      	ldr	r3, [r7, #4]
 80066c0:	6a1b      	ldr	r3, [r3, #32]
 80066c2:	4a23      	ldr	r2, [pc, #140]	; (8006750 <TIM_OC5_SetConfig+0x9c>)
 80066c4:	401a      	ands	r2, r3
 80066c6:	687b      	ldr	r3, [r7, #4]
 80066c8:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80066ca:	687b      	ldr	r3, [r7, #4]
 80066cc:	6a1b      	ldr	r3, [r3, #32]
 80066ce:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80066d0:	687b      	ldr	r3, [r7, #4]
 80066d2:	685b      	ldr	r3, [r3, #4]
 80066d4:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 80066d6:	687b      	ldr	r3, [r7, #4]
 80066d8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80066da:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC5M);
 80066dc:	68fb      	ldr	r3, [r7, #12]
 80066de:	4a1d      	ldr	r2, [pc, #116]	; (8006754 <TIM_OC5_SetConfig+0xa0>)
 80066e0:	4013      	ands	r3, r2
 80066e2:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 80066e4:	683b      	ldr	r3, [r7, #0]
 80066e6:	681b      	ldr	r3, [r3, #0]
 80066e8:	68fa      	ldr	r2, [r7, #12]
 80066ea:	4313      	orrs	r3, r2
 80066ec:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC5P;
 80066ee:	693b      	ldr	r3, [r7, #16]
 80066f0:	4a19      	ldr	r2, [pc, #100]	; (8006758 <TIM_OC5_SetConfig+0xa4>)
 80066f2:	4013      	ands	r3, r2
 80066f4:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 16U);
 80066f6:	683b      	ldr	r3, [r7, #0]
 80066f8:	689b      	ldr	r3, [r3, #8]
 80066fa:	041b      	lsls	r3, r3, #16
 80066fc:	693a      	ldr	r2, [r7, #16]
 80066fe:	4313      	orrs	r3, r2
 8006700:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8006702:	687b      	ldr	r3, [r7, #4]
 8006704:	4a15      	ldr	r2, [pc, #84]	; (800675c <TIM_OC5_SetConfig+0xa8>)
 8006706:	4293      	cmp	r3, r2
 8006708:	d007      	beq.n	800671a <TIM_OC5_SetConfig+0x66>
 800670a:	687b      	ldr	r3, [r7, #4]
 800670c:	4a14      	ldr	r2, [pc, #80]	; (8006760 <TIM_OC5_SetConfig+0xac>)
 800670e:	4293      	cmp	r3, r2
 8006710:	d003      	beq.n	800671a <TIM_OC5_SetConfig+0x66>
 8006712:	687b      	ldr	r3, [r7, #4]
 8006714:	4a13      	ldr	r2, [pc, #76]	; (8006764 <TIM_OC5_SetConfig+0xb0>)
 8006716:	4293      	cmp	r3, r2
 8006718:	d109      	bne.n	800672e <TIM_OC5_SetConfig+0x7a>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS5;
 800671a:	697b      	ldr	r3, [r7, #20]
 800671c:	4a0c      	ldr	r2, [pc, #48]	; (8006750 <TIM_OC5_SetConfig+0x9c>)
 800671e:	4013      	ands	r3, r2
 8006720:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 8U);
 8006722:	683b      	ldr	r3, [r7, #0]
 8006724:	695b      	ldr	r3, [r3, #20]
 8006726:	021b      	lsls	r3, r3, #8
 8006728:	697a      	ldr	r2, [r7, #20]
 800672a:	4313      	orrs	r3, r2
 800672c:	617b      	str	r3, [r7, #20]
  }
  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800672e:	687b      	ldr	r3, [r7, #4]
 8006730:	697a      	ldr	r2, [r7, #20]
 8006732:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 8006734:	687b      	ldr	r3, [r7, #4]
 8006736:	68fa      	ldr	r2, [r7, #12]
 8006738:	655a      	str	r2, [r3, #84]	; 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR5 = OC_Config->Pulse;
 800673a:	683b      	ldr	r3, [r7, #0]
 800673c:	685a      	ldr	r2, [r3, #4]
 800673e:	687b      	ldr	r3, [r7, #4]
 8006740:	659a      	str	r2, [r3, #88]	; 0x58

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8006742:	687b      	ldr	r3, [r7, #4]
 8006744:	693a      	ldr	r2, [r7, #16]
 8006746:	621a      	str	r2, [r3, #32]
}
 8006748:	46c0      	nop			; (mov r8, r8)
 800674a:	46bd      	mov	sp, r7
 800674c:	b006      	add	sp, #24
 800674e:	bd80      	pop	{r7, pc}
 8006750:	fffeffff 	.word	0xfffeffff
 8006754:	fffeff8f 	.word	0xfffeff8f
 8006758:	fffdffff 	.word	0xfffdffff
 800675c:	40012c00 	.word	0x40012c00
 8006760:	40014400 	.word	0x40014400
 8006764:	40014800 	.word	0x40014800

08006768 <TIM_OC6_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC6_SetConfig(TIM_TypeDef *TIMx,
                              const TIM_OC_InitTypeDef *OC_Config)
{
 8006768:	b580      	push	{r7, lr}
 800676a:	b086      	sub	sp, #24
 800676c:	af00      	add	r7, sp, #0
 800676e:	6078      	str	r0, [r7, #4]
 8006770:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC6E;
 8006772:	687b      	ldr	r3, [r7, #4]
 8006774:	6a1b      	ldr	r3, [r3, #32]
 8006776:	4a24      	ldr	r2, [pc, #144]	; (8006808 <TIM_OC6_SetConfig+0xa0>)
 8006778:	401a      	ands	r2, r3
 800677a:	687b      	ldr	r3, [r7, #4]
 800677c:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800677e:	687b      	ldr	r3, [r7, #4]
 8006780:	6a1b      	ldr	r3, [r3, #32]
 8006782:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8006784:	687b      	ldr	r3, [r7, #4]
 8006786:	685b      	ldr	r3, [r3, #4]
 8006788:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 800678a:	687b      	ldr	r3, [r7, #4]
 800678c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800678e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC6M);
 8006790:	68fb      	ldr	r3, [r7, #12]
 8006792:	4a1e      	ldr	r2, [pc, #120]	; (800680c <TIM_OC6_SetConfig+0xa4>)
 8006794:	4013      	ands	r3, r2
 8006796:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8006798:	683b      	ldr	r3, [r7, #0]
 800679a:	681b      	ldr	r3, [r3, #0]
 800679c:	021b      	lsls	r3, r3, #8
 800679e:	68fa      	ldr	r2, [r7, #12]
 80067a0:	4313      	orrs	r3, r2
 80067a2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= (uint32_t)~TIM_CCER_CC6P;
 80067a4:	693b      	ldr	r3, [r7, #16]
 80067a6:	4a1a      	ldr	r2, [pc, #104]	; (8006810 <TIM_OC6_SetConfig+0xa8>)
 80067a8:	4013      	ands	r3, r2
 80067aa:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 20U);
 80067ac:	683b      	ldr	r3, [r7, #0]
 80067ae:	689b      	ldr	r3, [r3, #8]
 80067b0:	051b      	lsls	r3, r3, #20
 80067b2:	693a      	ldr	r2, [r7, #16]
 80067b4:	4313      	orrs	r3, r2
 80067b6:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80067b8:	687b      	ldr	r3, [r7, #4]
 80067ba:	4a16      	ldr	r2, [pc, #88]	; (8006814 <TIM_OC6_SetConfig+0xac>)
 80067bc:	4293      	cmp	r3, r2
 80067be:	d007      	beq.n	80067d0 <TIM_OC6_SetConfig+0x68>
 80067c0:	687b      	ldr	r3, [r7, #4]
 80067c2:	4a15      	ldr	r2, [pc, #84]	; (8006818 <TIM_OC6_SetConfig+0xb0>)
 80067c4:	4293      	cmp	r3, r2
 80067c6:	d003      	beq.n	80067d0 <TIM_OC6_SetConfig+0x68>
 80067c8:	687b      	ldr	r3, [r7, #4]
 80067ca:	4a14      	ldr	r2, [pc, #80]	; (800681c <TIM_OC6_SetConfig+0xb4>)
 80067cc:	4293      	cmp	r3, r2
 80067ce:	d109      	bne.n	80067e4 <TIM_OC6_SetConfig+0x7c>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS6;
 80067d0:	697b      	ldr	r3, [r7, #20]
 80067d2:	4a13      	ldr	r2, [pc, #76]	; (8006820 <TIM_OC6_SetConfig+0xb8>)
 80067d4:	4013      	ands	r3, r2
 80067d6:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 10U);
 80067d8:	683b      	ldr	r3, [r7, #0]
 80067da:	695b      	ldr	r3, [r3, #20]
 80067dc:	029b      	lsls	r3, r3, #10
 80067de:	697a      	ldr	r2, [r7, #20]
 80067e0:	4313      	orrs	r3, r2
 80067e2:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80067e4:	687b      	ldr	r3, [r7, #4]
 80067e6:	697a      	ldr	r2, [r7, #20]
 80067e8:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 80067ea:	687b      	ldr	r3, [r7, #4]
 80067ec:	68fa      	ldr	r2, [r7, #12]
 80067ee:	655a      	str	r2, [r3, #84]	; 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR6 = OC_Config->Pulse;
 80067f0:	683b      	ldr	r3, [r7, #0]
 80067f2:	685a      	ldr	r2, [r3, #4]
 80067f4:	687b      	ldr	r3, [r7, #4]
 80067f6:	65da      	str	r2, [r3, #92]	; 0x5c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80067f8:	687b      	ldr	r3, [r7, #4]
 80067fa:	693a      	ldr	r2, [r7, #16]
 80067fc:	621a      	str	r2, [r3, #32]
}
 80067fe:	46c0      	nop			; (mov r8, r8)
 8006800:	46bd      	mov	sp, r7
 8006802:	b006      	add	sp, #24
 8006804:	bd80      	pop	{r7, pc}
 8006806:	46c0      	nop			; (mov r8, r8)
 8006808:	ffefffff 	.word	0xffefffff
 800680c:	feff8fff 	.word	0xfeff8fff
 8006810:	ffdfffff 	.word	0xffdfffff
 8006814:	40012c00 	.word	0x40012c00
 8006818:	40014400 	.word	0x40014400
 800681c:	40014800 	.word	0x40014800
 8006820:	fffbffff 	.word	0xfffbffff

08006824 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 8006824:	b580      	push	{r7, lr}
 8006826:	b086      	sub	sp, #24
 8006828:	af00      	add	r7, sp, #0
 800682a:	60f8      	str	r0, [r7, #12]
 800682c:	60b9      	str	r1, [r7, #8]
 800682e:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 8006830:	68bb      	ldr	r3, [r7, #8]
 8006832:	221f      	movs	r2, #31
 8006834:	4013      	ands	r3, r2
 8006836:	2201      	movs	r2, #1
 8006838:	409a      	lsls	r2, r3
 800683a:	0013      	movs	r3, r2
 800683c:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 800683e:	68fb      	ldr	r3, [r7, #12]
 8006840:	6a1b      	ldr	r3, [r3, #32]
 8006842:	697a      	ldr	r2, [r7, #20]
 8006844:	43d2      	mvns	r2, r2
 8006846:	401a      	ands	r2, r3
 8006848:	68fb      	ldr	r3, [r7, #12]
 800684a:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 800684c:	68fb      	ldr	r3, [r7, #12]
 800684e:	6a1a      	ldr	r2, [r3, #32]
 8006850:	68bb      	ldr	r3, [r7, #8]
 8006852:	211f      	movs	r1, #31
 8006854:	400b      	ands	r3, r1
 8006856:	6879      	ldr	r1, [r7, #4]
 8006858:	4099      	lsls	r1, r3
 800685a:	000b      	movs	r3, r1
 800685c:	431a      	orrs	r2, r3
 800685e:	68fb      	ldr	r3, [r7, #12]
 8006860:	621a      	str	r2, [r3, #32]
}
 8006862:	46c0      	nop			; (mov r8, r8)
 8006864:	46bd      	mov	sp, r7
 8006866:	b006      	add	sp, #24
 8006868:	bd80      	pop	{r7, pc}
	...

0800686c <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 800686c:	b580      	push	{r7, lr}
 800686e:	b084      	sub	sp, #16
 8006870:	af00      	add	r7, sp, #0
 8006872:	6078      	str	r0, [r7, #4]
 8006874:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8006876:	687b      	ldr	r3, [r7, #4]
 8006878:	223c      	movs	r2, #60	; 0x3c
 800687a:	5c9b      	ldrb	r3, [r3, r2]
 800687c:	2b01      	cmp	r3, #1
 800687e:	d101      	bne.n	8006884 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8006880:	2302      	movs	r3, #2
 8006882:	e050      	b.n	8006926 <HAL_TIMEx_MasterConfigSynchronization+0xba>
 8006884:	687b      	ldr	r3, [r7, #4]
 8006886:	223c      	movs	r2, #60	; 0x3c
 8006888:	2101      	movs	r1, #1
 800688a:	5499      	strb	r1, [r3, r2]

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 800688c:	687b      	ldr	r3, [r7, #4]
 800688e:	223d      	movs	r2, #61	; 0x3d
 8006890:	2102      	movs	r1, #2
 8006892:	5499      	strb	r1, [r3, r2]

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8006894:	687b      	ldr	r3, [r7, #4]
 8006896:	681b      	ldr	r3, [r3, #0]
 8006898:	685b      	ldr	r3, [r3, #4]
 800689a:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 800689c:	687b      	ldr	r3, [r7, #4]
 800689e:	681b      	ldr	r3, [r3, #0]
 80068a0:	689b      	ldr	r3, [r3, #8]
 80068a2:	60bb      	str	r3, [r7, #8]

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 80068a4:	687b      	ldr	r3, [r7, #4]
 80068a6:	681b      	ldr	r3, [r3, #0]
 80068a8:	4a21      	ldr	r2, [pc, #132]	; (8006930 <HAL_TIMEx_MasterConfigSynchronization+0xc4>)
 80068aa:	4293      	cmp	r3, r2
 80068ac:	d108      	bne.n	80068c0 <HAL_TIMEx_MasterConfigSynchronization+0x54>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 80068ae:	68fb      	ldr	r3, [r7, #12]
 80068b0:	4a20      	ldr	r2, [pc, #128]	; (8006934 <HAL_TIMEx_MasterConfigSynchronization+0xc8>)
 80068b2:	4013      	ands	r3, r2
 80068b4:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 80068b6:	683b      	ldr	r3, [r7, #0]
 80068b8:	685b      	ldr	r3, [r3, #4]
 80068ba:	68fa      	ldr	r2, [r7, #12]
 80068bc:	4313      	orrs	r3, r2
 80068be:	60fb      	str	r3, [r7, #12]
  }

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 80068c0:	68fb      	ldr	r3, [r7, #12]
 80068c2:	2270      	movs	r2, #112	; 0x70
 80068c4:	4393      	bics	r3, r2
 80068c6:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 80068c8:	683b      	ldr	r3, [r7, #0]
 80068ca:	681b      	ldr	r3, [r3, #0]
 80068cc:	68fa      	ldr	r2, [r7, #12]
 80068ce:	4313      	orrs	r3, r2
 80068d0:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 80068d2:	687b      	ldr	r3, [r7, #4]
 80068d4:	681b      	ldr	r3, [r3, #0]
 80068d6:	68fa      	ldr	r2, [r7, #12]
 80068d8:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80068da:	687b      	ldr	r3, [r7, #4]
 80068dc:	681b      	ldr	r3, [r3, #0]
 80068de:	4a14      	ldr	r2, [pc, #80]	; (8006930 <HAL_TIMEx_MasterConfigSynchronization+0xc4>)
 80068e0:	4293      	cmp	r3, r2
 80068e2:	d00a      	beq.n	80068fa <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 80068e4:	687b      	ldr	r3, [r7, #4]
 80068e6:	681a      	ldr	r2, [r3, #0]
 80068e8:	2380      	movs	r3, #128	; 0x80
 80068ea:	05db      	lsls	r3, r3, #23
 80068ec:	429a      	cmp	r2, r3
 80068ee:	d004      	beq.n	80068fa <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 80068f0:	687b      	ldr	r3, [r7, #4]
 80068f2:	681b      	ldr	r3, [r3, #0]
 80068f4:	4a10      	ldr	r2, [pc, #64]	; (8006938 <HAL_TIMEx_MasterConfigSynchronization+0xcc>)
 80068f6:	4293      	cmp	r3, r2
 80068f8:	d10c      	bne.n	8006914 <HAL_TIMEx_MasterConfigSynchronization+0xa8>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 80068fa:	68bb      	ldr	r3, [r7, #8]
 80068fc:	2280      	movs	r2, #128	; 0x80
 80068fe:	4393      	bics	r3, r2
 8006900:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8006902:	683b      	ldr	r3, [r7, #0]
 8006904:	689b      	ldr	r3, [r3, #8]
 8006906:	68ba      	ldr	r2, [r7, #8]
 8006908:	4313      	orrs	r3, r2
 800690a:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 800690c:	687b      	ldr	r3, [r7, #4]
 800690e:	681b      	ldr	r3, [r3, #0]
 8006910:	68ba      	ldr	r2, [r7, #8]
 8006912:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8006914:	687b      	ldr	r3, [r7, #4]
 8006916:	223d      	movs	r2, #61	; 0x3d
 8006918:	2101      	movs	r1, #1
 800691a:	5499      	strb	r1, [r3, r2]

  __HAL_UNLOCK(htim);
 800691c:	687b      	ldr	r3, [r7, #4]
 800691e:	223c      	movs	r2, #60	; 0x3c
 8006920:	2100      	movs	r1, #0
 8006922:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8006924:	2300      	movs	r3, #0
}
 8006926:	0018      	movs	r0, r3
 8006928:	46bd      	mov	sp, r7
 800692a:	b004      	add	sp, #16
 800692c:	bd80      	pop	{r7, pc}
 800692e:	46c0      	nop			; (mov r8, r8)
 8006930:	40012c00 	.word	0x40012c00
 8006934:	ff0fffff 	.word	0xff0fffff
 8006938:	40000400 	.word	0x40000400

0800693c <HAL_TIMEx_ConfigBreakDeadTime>:
  *         interrupt can be enabled by calling the @ref __HAL_TIM_ENABLE_IT macro.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_ConfigBreakDeadTime(TIM_HandleTypeDef *htim,
                                                const TIM_BreakDeadTimeConfigTypeDef *sBreakDeadTimeConfig)
{
 800693c:	b580      	push	{r7, lr}
 800693e:	b084      	sub	sp, #16
 8006940:	af00      	add	r7, sp, #0
 8006942:	6078      	str	r0, [r7, #4]
 8006944:	6039      	str	r1, [r7, #0]
  /* Keep this variable initialized to 0 as it is used to configure BDTR register */
  uint32_t tmpbdtr = 0U;
 8006946:	2300      	movs	r3, #0
 8006948:	60fb      	str	r3, [r7, #12]
  assert_param(IS_TIM_BREAK_POLARITY(sBreakDeadTimeConfig->BreakPolarity));
  assert_param(IS_TIM_BREAK_FILTER(sBreakDeadTimeConfig->BreakFilter));
  assert_param(IS_TIM_AUTOMATIC_OUTPUT_STATE(sBreakDeadTimeConfig->AutomaticOutput));

  /* Check input state */
  __HAL_LOCK(htim);
 800694a:	687b      	ldr	r3, [r7, #4]
 800694c:	223c      	movs	r2, #60	; 0x3c
 800694e:	5c9b      	ldrb	r3, [r3, r2]
 8006950:	2b01      	cmp	r3, #1
 8006952:	d101      	bne.n	8006958 <HAL_TIMEx_ConfigBreakDeadTime+0x1c>
 8006954:	2302      	movs	r3, #2
 8006956:	e079      	b.n	8006a4c <HAL_TIMEx_ConfigBreakDeadTime+0x110>
 8006958:	687b      	ldr	r3, [r7, #4]
 800695a:	223c      	movs	r2, #60	; 0x3c
 800695c:	2101      	movs	r1, #1
 800695e:	5499      	strb	r1, [r3, r2]

  /* Set the Lock level, the Break enable Bit and the Polarity, the OSSR State,
     the OSSI State, the dead time value and the Automatic Output Enable Bit */

  /* Set the BDTR bits */
  MODIFY_REG(tmpbdtr, TIM_BDTR_DTG, sBreakDeadTimeConfig->DeadTime);
 8006960:	68fb      	ldr	r3, [r7, #12]
 8006962:	22ff      	movs	r2, #255	; 0xff
 8006964:	4393      	bics	r3, r2
 8006966:	001a      	movs	r2, r3
 8006968:	683b      	ldr	r3, [r7, #0]
 800696a:	68db      	ldr	r3, [r3, #12]
 800696c:	4313      	orrs	r3, r2
 800696e:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_LOCK, sBreakDeadTimeConfig->LockLevel);
 8006970:	68fb      	ldr	r3, [r7, #12]
 8006972:	4a38      	ldr	r2, [pc, #224]	; (8006a54 <HAL_TIMEx_ConfigBreakDeadTime+0x118>)
 8006974:	401a      	ands	r2, r3
 8006976:	683b      	ldr	r3, [r7, #0]
 8006978:	689b      	ldr	r3, [r3, #8]
 800697a:	4313      	orrs	r3, r2
 800697c:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSI, sBreakDeadTimeConfig->OffStateIDLEMode);
 800697e:	68fb      	ldr	r3, [r7, #12]
 8006980:	4a35      	ldr	r2, [pc, #212]	; (8006a58 <HAL_TIMEx_ConfigBreakDeadTime+0x11c>)
 8006982:	401a      	ands	r2, r3
 8006984:	683b      	ldr	r3, [r7, #0]
 8006986:	685b      	ldr	r3, [r3, #4]
 8006988:	4313      	orrs	r3, r2
 800698a:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSR, sBreakDeadTimeConfig->OffStateRunMode);
 800698c:	68fb      	ldr	r3, [r7, #12]
 800698e:	4a33      	ldr	r2, [pc, #204]	; (8006a5c <HAL_TIMEx_ConfigBreakDeadTime+0x120>)
 8006990:	401a      	ands	r2, r3
 8006992:	683b      	ldr	r3, [r7, #0]
 8006994:	681b      	ldr	r3, [r3, #0]
 8006996:	4313      	orrs	r3, r2
 8006998:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKE, sBreakDeadTimeConfig->BreakState);
 800699a:	68fb      	ldr	r3, [r7, #12]
 800699c:	4a30      	ldr	r2, [pc, #192]	; (8006a60 <HAL_TIMEx_ConfigBreakDeadTime+0x124>)
 800699e:	401a      	ands	r2, r3
 80069a0:	683b      	ldr	r3, [r7, #0]
 80069a2:	691b      	ldr	r3, [r3, #16]
 80069a4:	4313      	orrs	r3, r2
 80069a6:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKP, sBreakDeadTimeConfig->BreakPolarity);
 80069a8:	68fb      	ldr	r3, [r7, #12]
 80069aa:	4a2e      	ldr	r2, [pc, #184]	; (8006a64 <HAL_TIMEx_ConfigBreakDeadTime+0x128>)
 80069ac:	401a      	ands	r2, r3
 80069ae:	683b      	ldr	r3, [r7, #0]
 80069b0:	695b      	ldr	r3, [r3, #20]
 80069b2:	4313      	orrs	r3, r2
 80069b4:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_AOE, sBreakDeadTimeConfig->AutomaticOutput);
 80069b6:	68fb      	ldr	r3, [r7, #12]
 80069b8:	4a2b      	ldr	r2, [pc, #172]	; (8006a68 <HAL_TIMEx_ConfigBreakDeadTime+0x12c>)
 80069ba:	401a      	ands	r2, r3
 80069bc:	683b      	ldr	r3, [r7, #0]
 80069be:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80069c0:	4313      	orrs	r3, r2
 80069c2:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKF, (sBreakDeadTimeConfig->BreakFilter << TIM_BDTR_BKF_Pos));
 80069c4:	68fb      	ldr	r3, [r7, #12]
 80069c6:	4a29      	ldr	r2, [pc, #164]	; (8006a6c <HAL_TIMEx_ConfigBreakDeadTime+0x130>)
 80069c8:	401a      	ands	r2, r3
 80069ca:	683b      	ldr	r3, [r7, #0]
 80069cc:	699b      	ldr	r3, [r3, #24]
 80069ce:	041b      	lsls	r3, r3, #16
 80069d0:	4313      	orrs	r3, r2
 80069d2:	60fb      	str	r3, [r7, #12]

  if (IS_TIM_ADVANCED_INSTANCE(htim->Instance))
 80069d4:	687b      	ldr	r3, [r7, #4]
 80069d6:	681b      	ldr	r3, [r3, #0]
 80069d8:	4a25      	ldr	r2, [pc, #148]	; (8006a70 <HAL_TIMEx_ConfigBreakDeadTime+0x134>)
 80069da:	4293      	cmp	r3, r2
 80069dc:	d106      	bne.n	80069ec <HAL_TIMEx_ConfigBreakDeadTime+0xb0>
  {
    /* Check the parameters */
    assert_param(IS_TIM_BREAK_AFMODE(sBreakDeadTimeConfig->BreakAFMode));

    /* Set BREAK AF mode */
    MODIFY_REG(tmpbdtr, TIM_BDTR_BKBID, sBreakDeadTimeConfig->BreakAFMode);
 80069de:	68fb      	ldr	r3, [r7, #12]
 80069e0:	4a24      	ldr	r2, [pc, #144]	; (8006a74 <HAL_TIMEx_ConfigBreakDeadTime+0x138>)
 80069e2:	401a      	ands	r2, r3
 80069e4:	683b      	ldr	r3, [r7, #0]
 80069e6:	69db      	ldr	r3, [r3, #28]
 80069e8:	4313      	orrs	r3, r2
 80069ea:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_BKIN2_INSTANCE(htim->Instance))
 80069ec:	687b      	ldr	r3, [r7, #4]
 80069ee:	681b      	ldr	r3, [r3, #0]
 80069f0:	4a1f      	ldr	r2, [pc, #124]	; (8006a70 <HAL_TIMEx_ConfigBreakDeadTime+0x134>)
 80069f2:	4293      	cmp	r3, r2
 80069f4:	d121      	bne.n	8006a3a <HAL_TIMEx_ConfigBreakDeadTime+0xfe>
    assert_param(IS_TIM_BREAK2_STATE(sBreakDeadTimeConfig->Break2State));
    assert_param(IS_TIM_BREAK2_POLARITY(sBreakDeadTimeConfig->Break2Polarity));
    assert_param(IS_TIM_BREAK_FILTER(sBreakDeadTimeConfig->Break2Filter));

    /* Set the BREAK2 input related BDTR bits */
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2F, (sBreakDeadTimeConfig->Break2Filter << TIM_BDTR_BK2F_Pos));
 80069f6:	68fb      	ldr	r3, [r7, #12]
 80069f8:	4a1f      	ldr	r2, [pc, #124]	; (8006a78 <HAL_TIMEx_ConfigBreakDeadTime+0x13c>)
 80069fa:	401a      	ands	r2, r3
 80069fc:	683b      	ldr	r3, [r7, #0]
 80069fe:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006a00:	051b      	lsls	r3, r3, #20
 8006a02:	4313      	orrs	r3, r2
 8006a04:	60fb      	str	r3, [r7, #12]
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2E, sBreakDeadTimeConfig->Break2State);
 8006a06:	68fb      	ldr	r3, [r7, #12]
 8006a08:	4a1c      	ldr	r2, [pc, #112]	; (8006a7c <HAL_TIMEx_ConfigBreakDeadTime+0x140>)
 8006a0a:	401a      	ands	r2, r3
 8006a0c:	683b      	ldr	r3, [r7, #0]
 8006a0e:	6a1b      	ldr	r3, [r3, #32]
 8006a10:	4313      	orrs	r3, r2
 8006a12:	60fb      	str	r3, [r7, #12]
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2P, sBreakDeadTimeConfig->Break2Polarity);
 8006a14:	68fb      	ldr	r3, [r7, #12]
 8006a16:	4a1a      	ldr	r2, [pc, #104]	; (8006a80 <HAL_TIMEx_ConfigBreakDeadTime+0x144>)
 8006a18:	401a      	ands	r2, r3
 8006a1a:	683b      	ldr	r3, [r7, #0]
 8006a1c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006a1e:	4313      	orrs	r3, r2
 8006a20:	60fb      	str	r3, [r7, #12]

    if (IS_TIM_ADVANCED_INSTANCE(htim->Instance))
 8006a22:	687b      	ldr	r3, [r7, #4]
 8006a24:	681b      	ldr	r3, [r3, #0]
 8006a26:	4a12      	ldr	r2, [pc, #72]	; (8006a70 <HAL_TIMEx_ConfigBreakDeadTime+0x134>)
 8006a28:	4293      	cmp	r3, r2
 8006a2a:	d106      	bne.n	8006a3a <HAL_TIMEx_ConfigBreakDeadTime+0xfe>
    {
      /* Check the parameters */
      assert_param(IS_TIM_BREAK2_AFMODE(sBreakDeadTimeConfig->Break2AFMode));

      /* Set BREAK2 AF mode */
      MODIFY_REG(tmpbdtr, TIM_BDTR_BK2BID, sBreakDeadTimeConfig->Break2AFMode);
 8006a2c:	68fb      	ldr	r3, [r7, #12]
 8006a2e:	4a15      	ldr	r2, [pc, #84]	; (8006a84 <HAL_TIMEx_ConfigBreakDeadTime+0x148>)
 8006a30:	401a      	ands	r2, r3
 8006a32:	683b      	ldr	r3, [r7, #0]
 8006a34:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006a36:	4313      	orrs	r3, r2
 8006a38:	60fb      	str	r3, [r7, #12]
    }
  }

  /* Set TIMx_BDTR */
  htim->Instance->BDTR = tmpbdtr;
 8006a3a:	687b      	ldr	r3, [r7, #4]
 8006a3c:	681b      	ldr	r3, [r3, #0]
 8006a3e:	68fa      	ldr	r2, [r7, #12]
 8006a40:	645a      	str	r2, [r3, #68]	; 0x44

  __HAL_UNLOCK(htim);
 8006a42:	687b      	ldr	r3, [r7, #4]
 8006a44:	223c      	movs	r2, #60	; 0x3c
 8006a46:	2100      	movs	r1, #0
 8006a48:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8006a4a:	2300      	movs	r3, #0
}
 8006a4c:	0018      	movs	r0, r3
 8006a4e:	46bd      	mov	sp, r7
 8006a50:	b004      	add	sp, #16
 8006a52:	bd80      	pop	{r7, pc}
 8006a54:	fffffcff 	.word	0xfffffcff
 8006a58:	fffffbff 	.word	0xfffffbff
 8006a5c:	fffff7ff 	.word	0xfffff7ff
 8006a60:	ffffefff 	.word	0xffffefff
 8006a64:	ffffdfff 	.word	0xffffdfff
 8006a68:	ffffbfff 	.word	0xffffbfff
 8006a6c:	fff0ffff 	.word	0xfff0ffff
 8006a70:	40012c00 	.word	0x40012c00
 8006a74:	efffffff 	.word	0xefffffff
 8006a78:	ff0fffff 	.word	0xff0fffff
 8006a7c:	feffffff 	.word	0xfeffffff
 8006a80:	fdffffff 	.word	0xfdffffff
 8006a84:	dfffffff 	.word	0xdfffffff

08006a88 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8006a88:	b580      	push	{r7, lr}
 8006a8a:	b082      	sub	sp, #8
 8006a8c:	af00      	add	r7, sp, #0
 8006a8e:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8006a90:	687b      	ldr	r3, [r7, #4]
 8006a92:	2b00      	cmp	r3, #0
 8006a94:	d101      	bne.n	8006a9a <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8006a96:	2301      	movs	r3, #1
 8006a98:	e046      	b.n	8006b28 <HAL_UART_Init+0xa0>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 8006a9a:	687b      	ldr	r3, [r7, #4]
 8006a9c:	2288      	movs	r2, #136	; 0x88
 8006a9e:	589b      	ldr	r3, [r3, r2]
 8006aa0:	2b00      	cmp	r3, #0
 8006aa2:	d107      	bne.n	8006ab4 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8006aa4:	687b      	ldr	r3, [r7, #4]
 8006aa6:	2284      	movs	r2, #132	; 0x84
 8006aa8:	2100      	movs	r1, #0
 8006aaa:	5499      	strb	r1, [r3, r2]

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8006aac:	687b      	ldr	r3, [r7, #4]
 8006aae:	0018      	movs	r0, r3
 8006ab0:	f7fc fc42 	bl	8003338 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8006ab4:	687b      	ldr	r3, [r7, #4]
 8006ab6:	2288      	movs	r2, #136	; 0x88
 8006ab8:	2124      	movs	r1, #36	; 0x24
 8006aba:	5099      	str	r1, [r3, r2]

  __HAL_UART_DISABLE(huart);
 8006abc:	687b      	ldr	r3, [r7, #4]
 8006abe:	681b      	ldr	r3, [r3, #0]
 8006ac0:	681a      	ldr	r2, [r3, #0]
 8006ac2:	687b      	ldr	r3, [r7, #4]
 8006ac4:	681b      	ldr	r3, [r3, #0]
 8006ac6:	2101      	movs	r1, #1
 8006ac8:	438a      	bics	r2, r1
 8006aca:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8006acc:	687b      	ldr	r3, [r7, #4]
 8006ace:	0018      	movs	r0, r3
 8006ad0:	f000 f830 	bl	8006b34 <UART_SetConfig>
 8006ad4:	0003      	movs	r3, r0
 8006ad6:	2b01      	cmp	r3, #1
 8006ad8:	d101      	bne.n	8006ade <HAL_UART_Init+0x56>
  {
    return HAL_ERROR;
 8006ada:	2301      	movs	r3, #1
 8006adc:	e024      	b.n	8006b28 <HAL_UART_Init+0xa0>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8006ade:	687b      	ldr	r3, [r7, #4]
 8006ae0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006ae2:	2b00      	cmp	r3, #0
 8006ae4:	d003      	beq.n	8006aee <HAL_UART_Init+0x66>
  {
    UART_AdvFeatureConfig(huart);
 8006ae6:	687b      	ldr	r3, [r7, #4]
 8006ae8:	0018      	movs	r0, r3
 8006aea:	f000 fa9b 	bl	8007024 <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8006aee:	687b      	ldr	r3, [r7, #4]
 8006af0:	681b      	ldr	r3, [r3, #0]
 8006af2:	685a      	ldr	r2, [r3, #4]
 8006af4:	687b      	ldr	r3, [r7, #4]
 8006af6:	681b      	ldr	r3, [r3, #0]
 8006af8:	490d      	ldr	r1, [pc, #52]	; (8006b30 <HAL_UART_Init+0xa8>)
 8006afa:	400a      	ands	r2, r1
 8006afc:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8006afe:	687b      	ldr	r3, [r7, #4]
 8006b00:	681b      	ldr	r3, [r3, #0]
 8006b02:	689a      	ldr	r2, [r3, #8]
 8006b04:	687b      	ldr	r3, [r7, #4]
 8006b06:	681b      	ldr	r3, [r3, #0]
 8006b08:	212a      	movs	r1, #42	; 0x2a
 8006b0a:	438a      	bics	r2, r1
 8006b0c:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8006b0e:	687b      	ldr	r3, [r7, #4]
 8006b10:	681b      	ldr	r3, [r3, #0]
 8006b12:	681a      	ldr	r2, [r3, #0]
 8006b14:	687b      	ldr	r3, [r7, #4]
 8006b16:	681b      	ldr	r3, [r3, #0]
 8006b18:	2101      	movs	r1, #1
 8006b1a:	430a      	orrs	r2, r1
 8006b1c:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8006b1e:	687b      	ldr	r3, [r7, #4]
 8006b20:	0018      	movs	r0, r3
 8006b22:	f000 fb33 	bl	800718c <UART_CheckIdleState>
 8006b26:	0003      	movs	r3, r0
}
 8006b28:	0018      	movs	r0, r3
 8006b2a:	46bd      	mov	sp, r7
 8006b2c:	b002      	add	sp, #8
 8006b2e:	bd80      	pop	{r7, pc}
 8006b30:	ffffb7ff 	.word	0xffffb7ff

08006b34 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8006b34:	b5b0      	push	{r4, r5, r7, lr}
 8006b36:	b090      	sub	sp, #64	; 0x40
 8006b38:	af00      	add	r7, sp, #0
 8006b3a:	6278      	str	r0, [r7, #36]	; 0x24
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 8006b3c:	231a      	movs	r3, #26
 8006b3e:	2220      	movs	r2, #32
 8006b40:	189b      	adds	r3, r3, r2
 8006b42:	19db      	adds	r3, r3, r7
 8006b44:	2200      	movs	r2, #0
 8006b46:	701a      	strb	r2, [r3, #0]
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8006b48:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006b4a:	689a      	ldr	r2, [r3, #8]
 8006b4c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006b4e:	691b      	ldr	r3, [r3, #16]
 8006b50:	431a      	orrs	r2, r3
 8006b52:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006b54:	695b      	ldr	r3, [r3, #20]
 8006b56:	431a      	orrs	r2, r3
 8006b58:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006b5a:	69db      	ldr	r3, [r3, #28]
 8006b5c:	4313      	orrs	r3, r2
 8006b5e:	63fb      	str	r3, [r7, #60]	; 0x3c
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8006b60:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006b62:	681b      	ldr	r3, [r3, #0]
 8006b64:	681b      	ldr	r3, [r3, #0]
 8006b66:	4ac4      	ldr	r2, [pc, #784]	; (8006e78 <UART_SetConfig+0x344>)
 8006b68:	4013      	ands	r3, r2
 8006b6a:	0019      	movs	r1, r3
 8006b6c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006b6e:	681a      	ldr	r2, [r3, #0]
 8006b70:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8006b72:	430b      	orrs	r3, r1
 8006b74:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8006b76:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006b78:	681b      	ldr	r3, [r3, #0]
 8006b7a:	685b      	ldr	r3, [r3, #4]
 8006b7c:	4abf      	ldr	r2, [pc, #764]	; (8006e7c <UART_SetConfig+0x348>)
 8006b7e:	4013      	ands	r3, r2
 8006b80:	0018      	movs	r0, r3
 8006b82:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006b84:	68d9      	ldr	r1, [r3, #12]
 8006b86:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006b88:	681a      	ldr	r2, [r3, #0]
 8006b8a:	0003      	movs	r3, r0
 8006b8c:	430b      	orrs	r3, r1
 8006b8e:	6053      	str	r3, [r2, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8006b90:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006b92:	699b      	ldr	r3, [r3, #24]
 8006b94:	63fb      	str	r3, [r7, #60]	; 0x3c

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 8006b96:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006b98:	681b      	ldr	r3, [r3, #0]
 8006b9a:	4ab9      	ldr	r2, [pc, #740]	; (8006e80 <UART_SetConfig+0x34c>)
 8006b9c:	4293      	cmp	r3, r2
 8006b9e:	d004      	beq.n	8006baa <UART_SetConfig+0x76>
  {
    tmpreg |= huart->Init.OneBitSampling;
 8006ba0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006ba2:	6a1b      	ldr	r3, [r3, #32]
 8006ba4:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8006ba6:	4313      	orrs	r3, r2
 8006ba8:	63fb      	str	r3, [r7, #60]	; 0x3c
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8006baa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006bac:	681b      	ldr	r3, [r3, #0]
 8006bae:	689b      	ldr	r3, [r3, #8]
 8006bb0:	4ab4      	ldr	r2, [pc, #720]	; (8006e84 <UART_SetConfig+0x350>)
 8006bb2:	4013      	ands	r3, r2
 8006bb4:	0019      	movs	r1, r3
 8006bb6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006bb8:	681a      	ldr	r2, [r3, #0]
 8006bba:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8006bbc:	430b      	orrs	r3, r1
 8006bbe:	6093      	str	r3, [r2, #8]

  /*-------------------------- USART PRESC Configuration -----------------------*/
  /* Configure
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
 8006bc0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006bc2:	681b      	ldr	r3, [r3, #0]
 8006bc4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006bc6:	220f      	movs	r2, #15
 8006bc8:	4393      	bics	r3, r2
 8006bca:	0018      	movs	r0, r3
 8006bcc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006bce:	6a59      	ldr	r1, [r3, #36]	; 0x24
 8006bd0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006bd2:	681a      	ldr	r2, [r3, #0]
 8006bd4:	0003      	movs	r3, r0
 8006bd6:	430b      	orrs	r3, r1
 8006bd8:	62d3      	str	r3, [r2, #44]	; 0x2c

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8006bda:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006bdc:	681b      	ldr	r3, [r3, #0]
 8006bde:	4aaa      	ldr	r2, [pc, #680]	; (8006e88 <UART_SetConfig+0x354>)
 8006be0:	4293      	cmp	r3, r2
 8006be2:	d131      	bne.n	8006c48 <UART_SetConfig+0x114>
 8006be4:	4ba9      	ldr	r3, [pc, #676]	; (8006e8c <UART_SetConfig+0x358>)
 8006be6:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8006be8:	2203      	movs	r2, #3
 8006bea:	4013      	ands	r3, r2
 8006bec:	2b03      	cmp	r3, #3
 8006bee:	d01d      	beq.n	8006c2c <UART_SetConfig+0xf8>
 8006bf0:	d823      	bhi.n	8006c3a <UART_SetConfig+0x106>
 8006bf2:	2b02      	cmp	r3, #2
 8006bf4:	d00c      	beq.n	8006c10 <UART_SetConfig+0xdc>
 8006bf6:	d820      	bhi.n	8006c3a <UART_SetConfig+0x106>
 8006bf8:	2b00      	cmp	r3, #0
 8006bfa:	d002      	beq.n	8006c02 <UART_SetConfig+0xce>
 8006bfc:	2b01      	cmp	r3, #1
 8006bfe:	d00e      	beq.n	8006c1e <UART_SetConfig+0xea>
 8006c00:	e01b      	b.n	8006c3a <UART_SetConfig+0x106>
 8006c02:	231b      	movs	r3, #27
 8006c04:	2220      	movs	r2, #32
 8006c06:	189b      	adds	r3, r3, r2
 8006c08:	19db      	adds	r3, r3, r7
 8006c0a:	2200      	movs	r2, #0
 8006c0c:	701a      	strb	r2, [r3, #0]
 8006c0e:	e071      	b.n	8006cf4 <UART_SetConfig+0x1c0>
 8006c10:	231b      	movs	r3, #27
 8006c12:	2220      	movs	r2, #32
 8006c14:	189b      	adds	r3, r3, r2
 8006c16:	19db      	adds	r3, r3, r7
 8006c18:	2202      	movs	r2, #2
 8006c1a:	701a      	strb	r2, [r3, #0]
 8006c1c:	e06a      	b.n	8006cf4 <UART_SetConfig+0x1c0>
 8006c1e:	231b      	movs	r3, #27
 8006c20:	2220      	movs	r2, #32
 8006c22:	189b      	adds	r3, r3, r2
 8006c24:	19db      	adds	r3, r3, r7
 8006c26:	2204      	movs	r2, #4
 8006c28:	701a      	strb	r2, [r3, #0]
 8006c2a:	e063      	b.n	8006cf4 <UART_SetConfig+0x1c0>
 8006c2c:	231b      	movs	r3, #27
 8006c2e:	2220      	movs	r2, #32
 8006c30:	189b      	adds	r3, r3, r2
 8006c32:	19db      	adds	r3, r3, r7
 8006c34:	2208      	movs	r2, #8
 8006c36:	701a      	strb	r2, [r3, #0]
 8006c38:	e05c      	b.n	8006cf4 <UART_SetConfig+0x1c0>
 8006c3a:	231b      	movs	r3, #27
 8006c3c:	2220      	movs	r2, #32
 8006c3e:	189b      	adds	r3, r3, r2
 8006c40:	19db      	adds	r3, r3, r7
 8006c42:	2210      	movs	r2, #16
 8006c44:	701a      	strb	r2, [r3, #0]
 8006c46:	e055      	b.n	8006cf4 <UART_SetConfig+0x1c0>
 8006c48:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006c4a:	681b      	ldr	r3, [r3, #0]
 8006c4c:	4a90      	ldr	r2, [pc, #576]	; (8006e90 <UART_SetConfig+0x35c>)
 8006c4e:	4293      	cmp	r3, r2
 8006c50:	d106      	bne.n	8006c60 <UART_SetConfig+0x12c>
 8006c52:	231b      	movs	r3, #27
 8006c54:	2220      	movs	r2, #32
 8006c56:	189b      	adds	r3, r3, r2
 8006c58:	19db      	adds	r3, r3, r7
 8006c5a:	2200      	movs	r2, #0
 8006c5c:	701a      	strb	r2, [r3, #0]
 8006c5e:	e049      	b.n	8006cf4 <UART_SetConfig+0x1c0>
 8006c60:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006c62:	681b      	ldr	r3, [r3, #0]
 8006c64:	4a86      	ldr	r2, [pc, #536]	; (8006e80 <UART_SetConfig+0x34c>)
 8006c66:	4293      	cmp	r3, r2
 8006c68:	d13e      	bne.n	8006ce8 <UART_SetConfig+0x1b4>
 8006c6a:	4b88      	ldr	r3, [pc, #544]	; (8006e8c <UART_SetConfig+0x358>)
 8006c6c:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8006c6e:	23c0      	movs	r3, #192	; 0xc0
 8006c70:	011b      	lsls	r3, r3, #4
 8006c72:	4013      	ands	r3, r2
 8006c74:	22c0      	movs	r2, #192	; 0xc0
 8006c76:	0112      	lsls	r2, r2, #4
 8006c78:	4293      	cmp	r3, r2
 8006c7a:	d027      	beq.n	8006ccc <UART_SetConfig+0x198>
 8006c7c:	22c0      	movs	r2, #192	; 0xc0
 8006c7e:	0112      	lsls	r2, r2, #4
 8006c80:	4293      	cmp	r3, r2
 8006c82:	d82a      	bhi.n	8006cda <UART_SetConfig+0x1a6>
 8006c84:	2280      	movs	r2, #128	; 0x80
 8006c86:	0112      	lsls	r2, r2, #4
 8006c88:	4293      	cmp	r3, r2
 8006c8a:	d011      	beq.n	8006cb0 <UART_SetConfig+0x17c>
 8006c8c:	2280      	movs	r2, #128	; 0x80
 8006c8e:	0112      	lsls	r2, r2, #4
 8006c90:	4293      	cmp	r3, r2
 8006c92:	d822      	bhi.n	8006cda <UART_SetConfig+0x1a6>
 8006c94:	2b00      	cmp	r3, #0
 8006c96:	d004      	beq.n	8006ca2 <UART_SetConfig+0x16e>
 8006c98:	2280      	movs	r2, #128	; 0x80
 8006c9a:	00d2      	lsls	r2, r2, #3
 8006c9c:	4293      	cmp	r3, r2
 8006c9e:	d00e      	beq.n	8006cbe <UART_SetConfig+0x18a>
 8006ca0:	e01b      	b.n	8006cda <UART_SetConfig+0x1a6>
 8006ca2:	231b      	movs	r3, #27
 8006ca4:	2220      	movs	r2, #32
 8006ca6:	189b      	adds	r3, r3, r2
 8006ca8:	19db      	adds	r3, r3, r7
 8006caa:	2200      	movs	r2, #0
 8006cac:	701a      	strb	r2, [r3, #0]
 8006cae:	e021      	b.n	8006cf4 <UART_SetConfig+0x1c0>
 8006cb0:	231b      	movs	r3, #27
 8006cb2:	2220      	movs	r2, #32
 8006cb4:	189b      	adds	r3, r3, r2
 8006cb6:	19db      	adds	r3, r3, r7
 8006cb8:	2202      	movs	r2, #2
 8006cba:	701a      	strb	r2, [r3, #0]
 8006cbc:	e01a      	b.n	8006cf4 <UART_SetConfig+0x1c0>
 8006cbe:	231b      	movs	r3, #27
 8006cc0:	2220      	movs	r2, #32
 8006cc2:	189b      	adds	r3, r3, r2
 8006cc4:	19db      	adds	r3, r3, r7
 8006cc6:	2204      	movs	r2, #4
 8006cc8:	701a      	strb	r2, [r3, #0]
 8006cca:	e013      	b.n	8006cf4 <UART_SetConfig+0x1c0>
 8006ccc:	231b      	movs	r3, #27
 8006cce:	2220      	movs	r2, #32
 8006cd0:	189b      	adds	r3, r3, r2
 8006cd2:	19db      	adds	r3, r3, r7
 8006cd4:	2208      	movs	r2, #8
 8006cd6:	701a      	strb	r2, [r3, #0]
 8006cd8:	e00c      	b.n	8006cf4 <UART_SetConfig+0x1c0>
 8006cda:	231b      	movs	r3, #27
 8006cdc:	2220      	movs	r2, #32
 8006cde:	189b      	adds	r3, r3, r2
 8006ce0:	19db      	adds	r3, r3, r7
 8006ce2:	2210      	movs	r2, #16
 8006ce4:	701a      	strb	r2, [r3, #0]
 8006ce6:	e005      	b.n	8006cf4 <UART_SetConfig+0x1c0>
 8006ce8:	231b      	movs	r3, #27
 8006cea:	2220      	movs	r2, #32
 8006cec:	189b      	adds	r3, r3, r2
 8006cee:	19db      	adds	r3, r3, r7
 8006cf0:	2210      	movs	r2, #16
 8006cf2:	701a      	strb	r2, [r3, #0]

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 8006cf4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006cf6:	681b      	ldr	r3, [r3, #0]
 8006cf8:	4a61      	ldr	r2, [pc, #388]	; (8006e80 <UART_SetConfig+0x34c>)
 8006cfa:	4293      	cmp	r3, r2
 8006cfc:	d000      	beq.n	8006d00 <UART_SetConfig+0x1cc>
 8006cfe:	e092      	b.n	8006e26 <UART_SetConfig+0x2f2>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 8006d00:	231b      	movs	r3, #27
 8006d02:	2220      	movs	r2, #32
 8006d04:	189b      	adds	r3, r3, r2
 8006d06:	19db      	adds	r3, r3, r7
 8006d08:	781b      	ldrb	r3, [r3, #0]
 8006d0a:	2b08      	cmp	r3, #8
 8006d0c:	d015      	beq.n	8006d3a <UART_SetConfig+0x206>
 8006d0e:	dc18      	bgt.n	8006d42 <UART_SetConfig+0x20e>
 8006d10:	2b04      	cmp	r3, #4
 8006d12:	d00d      	beq.n	8006d30 <UART_SetConfig+0x1fc>
 8006d14:	dc15      	bgt.n	8006d42 <UART_SetConfig+0x20e>
 8006d16:	2b00      	cmp	r3, #0
 8006d18:	d002      	beq.n	8006d20 <UART_SetConfig+0x1ec>
 8006d1a:	2b02      	cmp	r3, #2
 8006d1c:	d005      	beq.n	8006d2a <UART_SetConfig+0x1f6>
 8006d1e:	e010      	b.n	8006d42 <UART_SetConfig+0x20e>
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8006d20:	f7fe fea8 	bl	8005a74 <HAL_RCC_GetPCLK1Freq>
 8006d24:	0003      	movs	r3, r0
 8006d26:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 8006d28:	e014      	b.n	8006d54 <UART_SetConfig+0x220>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8006d2a:	4b5a      	ldr	r3, [pc, #360]	; (8006e94 <UART_SetConfig+0x360>)
 8006d2c:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 8006d2e:	e011      	b.n	8006d54 <UART_SetConfig+0x220>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8006d30:	f7fe fe14 	bl	800595c <HAL_RCC_GetSysClockFreq>
 8006d34:	0003      	movs	r3, r0
 8006d36:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 8006d38:	e00c      	b.n	8006d54 <UART_SetConfig+0x220>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8006d3a:	2380      	movs	r3, #128	; 0x80
 8006d3c:	021b      	lsls	r3, r3, #8
 8006d3e:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 8006d40:	e008      	b.n	8006d54 <UART_SetConfig+0x220>
      default:
        pclk = 0U;
 8006d42:	2300      	movs	r3, #0
 8006d44:	637b      	str	r3, [r7, #52]	; 0x34
        ret = HAL_ERROR;
 8006d46:	231a      	movs	r3, #26
 8006d48:	2220      	movs	r2, #32
 8006d4a:	189b      	adds	r3, r3, r2
 8006d4c:	19db      	adds	r3, r3, r7
 8006d4e:	2201      	movs	r2, #1
 8006d50:	701a      	strb	r2, [r3, #0]
        break;
 8006d52:	46c0      	nop			; (mov r8, r8)
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 8006d54:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8006d56:	2b00      	cmp	r3, #0
 8006d58:	d100      	bne.n	8006d5c <UART_SetConfig+0x228>
 8006d5a:	e147      	b.n	8006fec <UART_SetConfig+0x4b8>
    {
      /* Compute clock after Prescaler */
      lpuart_ker_ck_pres = (pclk / UARTPrescTable[huart->Init.ClockPrescaler]);
 8006d5c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006d5e:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8006d60:	4b4d      	ldr	r3, [pc, #308]	; (8006e98 <UART_SetConfig+0x364>)
 8006d62:	0052      	lsls	r2, r2, #1
 8006d64:	5ad3      	ldrh	r3, [r2, r3]
 8006d66:	0019      	movs	r1, r3
 8006d68:	6b78      	ldr	r0, [r7, #52]	; 0x34
 8006d6a:	f7f9 f9e7 	bl	800013c <__udivsi3>
 8006d6e:	0003      	movs	r3, r0
 8006d70:	62bb      	str	r3, [r7, #40]	; 0x28

      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 8006d72:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006d74:	685a      	ldr	r2, [r3, #4]
 8006d76:	0013      	movs	r3, r2
 8006d78:	005b      	lsls	r3, r3, #1
 8006d7a:	189b      	adds	r3, r3, r2
 8006d7c:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8006d7e:	429a      	cmp	r2, r3
 8006d80:	d305      	bcc.n	8006d8e <UART_SetConfig+0x25a>
          (lpuart_ker_ck_pres > (4096U * huart->Init.BaudRate)))
 8006d82:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006d84:	685b      	ldr	r3, [r3, #4]
 8006d86:	031b      	lsls	r3, r3, #12
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 8006d88:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8006d8a:	429a      	cmp	r2, r3
 8006d8c:	d906      	bls.n	8006d9c <UART_SetConfig+0x268>
      {
        ret = HAL_ERROR;
 8006d8e:	231a      	movs	r3, #26
 8006d90:	2220      	movs	r2, #32
 8006d92:	189b      	adds	r3, r3, r2
 8006d94:	19db      	adds	r3, r3, r7
 8006d96:	2201      	movs	r2, #1
 8006d98:	701a      	strb	r2, [r3, #0]
 8006d9a:	e127      	b.n	8006fec <UART_SetConfig+0x4b8>
      }
      else
      {
        /* Check computed UsartDiv value is in allocated range
           (it is forbidden to write values lower than 0x300 in the LPUART_BRR register) */
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8006d9c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8006d9e:	61bb      	str	r3, [r7, #24]
 8006da0:	2300      	movs	r3, #0
 8006da2:	61fb      	str	r3, [r7, #28]
 8006da4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006da6:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8006da8:	4b3b      	ldr	r3, [pc, #236]	; (8006e98 <UART_SetConfig+0x364>)
 8006daa:	0052      	lsls	r2, r2, #1
 8006dac:	5ad3      	ldrh	r3, [r2, r3]
 8006dae:	613b      	str	r3, [r7, #16]
 8006db0:	2300      	movs	r3, #0
 8006db2:	617b      	str	r3, [r7, #20]
 8006db4:	693a      	ldr	r2, [r7, #16]
 8006db6:	697b      	ldr	r3, [r7, #20]
 8006db8:	69b8      	ldr	r0, [r7, #24]
 8006dba:	69f9      	ldr	r1, [r7, #28]
 8006dbc:	f7f9 fbac 	bl	8000518 <__aeabi_uldivmod>
 8006dc0:	0002      	movs	r2, r0
 8006dc2:	000b      	movs	r3, r1
 8006dc4:	0e11      	lsrs	r1, r2, #24
 8006dc6:	021d      	lsls	r5, r3, #8
 8006dc8:	430d      	orrs	r5, r1
 8006dca:	0214      	lsls	r4, r2, #8
 8006dcc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006dce:	685b      	ldr	r3, [r3, #4]
 8006dd0:	085b      	lsrs	r3, r3, #1
 8006dd2:	60bb      	str	r3, [r7, #8]
 8006dd4:	2300      	movs	r3, #0
 8006dd6:	60fb      	str	r3, [r7, #12]
 8006dd8:	68b8      	ldr	r0, [r7, #8]
 8006dda:	68f9      	ldr	r1, [r7, #12]
 8006ddc:	1900      	adds	r0, r0, r4
 8006dde:	4169      	adcs	r1, r5
 8006de0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006de2:	685b      	ldr	r3, [r3, #4]
 8006de4:	603b      	str	r3, [r7, #0]
 8006de6:	2300      	movs	r3, #0
 8006de8:	607b      	str	r3, [r7, #4]
 8006dea:	683a      	ldr	r2, [r7, #0]
 8006dec:	687b      	ldr	r3, [r7, #4]
 8006dee:	f7f9 fb93 	bl	8000518 <__aeabi_uldivmod>
 8006df2:	0002      	movs	r2, r0
 8006df4:	000b      	movs	r3, r1
 8006df6:	0013      	movs	r3, r2
 8006df8:	633b      	str	r3, [r7, #48]	; 0x30
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 8006dfa:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8006dfc:	23c0      	movs	r3, #192	; 0xc0
 8006dfe:	009b      	lsls	r3, r3, #2
 8006e00:	429a      	cmp	r2, r3
 8006e02:	d309      	bcc.n	8006e18 <UART_SetConfig+0x2e4>
 8006e04:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8006e06:	2380      	movs	r3, #128	; 0x80
 8006e08:	035b      	lsls	r3, r3, #13
 8006e0a:	429a      	cmp	r2, r3
 8006e0c:	d204      	bcs.n	8006e18 <UART_SetConfig+0x2e4>
        {
          huart->Instance->BRR = usartdiv;
 8006e0e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006e10:	681b      	ldr	r3, [r3, #0]
 8006e12:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8006e14:	60da      	str	r2, [r3, #12]
 8006e16:	e0e9      	b.n	8006fec <UART_SetConfig+0x4b8>
        }
        else
        {
          ret = HAL_ERROR;
 8006e18:	231a      	movs	r3, #26
 8006e1a:	2220      	movs	r2, #32
 8006e1c:	189b      	adds	r3, r3, r2
 8006e1e:	19db      	adds	r3, r3, r7
 8006e20:	2201      	movs	r2, #1
 8006e22:	701a      	strb	r2, [r3, #0]
 8006e24:	e0e2      	b.n	8006fec <UART_SetConfig+0x4b8>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8006e26:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006e28:	69da      	ldr	r2, [r3, #28]
 8006e2a:	2380      	movs	r3, #128	; 0x80
 8006e2c:	021b      	lsls	r3, r3, #8
 8006e2e:	429a      	cmp	r2, r3
 8006e30:	d000      	beq.n	8006e34 <UART_SetConfig+0x300>
 8006e32:	e083      	b.n	8006f3c <UART_SetConfig+0x408>
  {
    switch (clocksource)
 8006e34:	231b      	movs	r3, #27
 8006e36:	2220      	movs	r2, #32
 8006e38:	189b      	adds	r3, r3, r2
 8006e3a:	19db      	adds	r3, r3, r7
 8006e3c:	781b      	ldrb	r3, [r3, #0]
 8006e3e:	2b08      	cmp	r3, #8
 8006e40:	d015      	beq.n	8006e6e <UART_SetConfig+0x33a>
 8006e42:	dc2b      	bgt.n	8006e9c <UART_SetConfig+0x368>
 8006e44:	2b04      	cmp	r3, #4
 8006e46:	d00d      	beq.n	8006e64 <UART_SetConfig+0x330>
 8006e48:	dc28      	bgt.n	8006e9c <UART_SetConfig+0x368>
 8006e4a:	2b00      	cmp	r3, #0
 8006e4c:	d002      	beq.n	8006e54 <UART_SetConfig+0x320>
 8006e4e:	2b02      	cmp	r3, #2
 8006e50:	d005      	beq.n	8006e5e <UART_SetConfig+0x32a>
 8006e52:	e023      	b.n	8006e9c <UART_SetConfig+0x368>
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8006e54:	f7fe fe0e 	bl	8005a74 <HAL_RCC_GetPCLK1Freq>
 8006e58:	0003      	movs	r3, r0
 8006e5a:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 8006e5c:	e027      	b.n	8006eae <UART_SetConfig+0x37a>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8006e5e:	4b0d      	ldr	r3, [pc, #52]	; (8006e94 <UART_SetConfig+0x360>)
 8006e60:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 8006e62:	e024      	b.n	8006eae <UART_SetConfig+0x37a>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8006e64:	f7fe fd7a 	bl	800595c <HAL_RCC_GetSysClockFreq>
 8006e68:	0003      	movs	r3, r0
 8006e6a:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 8006e6c:	e01f      	b.n	8006eae <UART_SetConfig+0x37a>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8006e6e:	2380      	movs	r3, #128	; 0x80
 8006e70:	021b      	lsls	r3, r3, #8
 8006e72:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 8006e74:	e01b      	b.n	8006eae <UART_SetConfig+0x37a>
 8006e76:	46c0      	nop			; (mov r8, r8)
 8006e78:	cfff69f3 	.word	0xcfff69f3
 8006e7c:	ffffcfff 	.word	0xffffcfff
 8006e80:	40008000 	.word	0x40008000
 8006e84:	11fff4ff 	.word	0x11fff4ff
 8006e88:	40013800 	.word	0x40013800
 8006e8c:	40021000 	.word	0x40021000
 8006e90:	40004400 	.word	0x40004400
 8006e94:	00f42400 	.word	0x00f42400
 8006e98:	0800a4cc 	.word	0x0800a4cc
      default:
        pclk = 0U;
 8006e9c:	2300      	movs	r3, #0
 8006e9e:	637b      	str	r3, [r7, #52]	; 0x34
        ret = HAL_ERROR;
 8006ea0:	231a      	movs	r3, #26
 8006ea2:	2220      	movs	r2, #32
 8006ea4:	189b      	adds	r3, r3, r2
 8006ea6:	19db      	adds	r3, r3, r7
 8006ea8:	2201      	movs	r2, #1
 8006eaa:	701a      	strb	r2, [r3, #0]
        break;
 8006eac:	46c0      	nop			; (mov r8, r8)
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 8006eae:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8006eb0:	2b00      	cmp	r3, #0
 8006eb2:	d100      	bne.n	8006eb6 <UART_SetConfig+0x382>
 8006eb4:	e09a      	b.n	8006fec <UART_SetConfig+0x4b8>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8006eb6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006eb8:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8006eba:	4b58      	ldr	r3, [pc, #352]	; (800701c <UART_SetConfig+0x4e8>)
 8006ebc:	0052      	lsls	r2, r2, #1
 8006ebe:	5ad3      	ldrh	r3, [r2, r3]
 8006ec0:	0019      	movs	r1, r3
 8006ec2:	6b78      	ldr	r0, [r7, #52]	; 0x34
 8006ec4:	f7f9 f93a 	bl	800013c <__udivsi3>
 8006ec8:	0003      	movs	r3, r0
 8006eca:	005a      	lsls	r2, r3, #1
 8006ecc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006ece:	685b      	ldr	r3, [r3, #4]
 8006ed0:	085b      	lsrs	r3, r3, #1
 8006ed2:	18d2      	adds	r2, r2, r3
 8006ed4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006ed6:	685b      	ldr	r3, [r3, #4]
 8006ed8:	0019      	movs	r1, r3
 8006eda:	0010      	movs	r0, r2
 8006edc:	f7f9 f92e 	bl	800013c <__udivsi3>
 8006ee0:	0003      	movs	r3, r0
 8006ee2:	633b      	str	r3, [r7, #48]	; 0x30
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8006ee4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006ee6:	2b0f      	cmp	r3, #15
 8006ee8:	d921      	bls.n	8006f2e <UART_SetConfig+0x3fa>
 8006eea:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8006eec:	2380      	movs	r3, #128	; 0x80
 8006eee:	025b      	lsls	r3, r3, #9
 8006ef0:	429a      	cmp	r2, r3
 8006ef2:	d21c      	bcs.n	8006f2e <UART_SetConfig+0x3fa>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8006ef4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006ef6:	b29a      	uxth	r2, r3
 8006ef8:	200e      	movs	r0, #14
 8006efa:	2420      	movs	r4, #32
 8006efc:	1903      	adds	r3, r0, r4
 8006efe:	19db      	adds	r3, r3, r7
 8006f00:	210f      	movs	r1, #15
 8006f02:	438a      	bics	r2, r1
 8006f04:	801a      	strh	r2, [r3, #0]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8006f06:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006f08:	085b      	lsrs	r3, r3, #1
 8006f0a:	b29b      	uxth	r3, r3
 8006f0c:	2207      	movs	r2, #7
 8006f0e:	4013      	ands	r3, r2
 8006f10:	b299      	uxth	r1, r3
 8006f12:	1903      	adds	r3, r0, r4
 8006f14:	19db      	adds	r3, r3, r7
 8006f16:	1902      	adds	r2, r0, r4
 8006f18:	19d2      	adds	r2, r2, r7
 8006f1a:	8812      	ldrh	r2, [r2, #0]
 8006f1c:	430a      	orrs	r2, r1
 8006f1e:	801a      	strh	r2, [r3, #0]
        huart->Instance->BRR = brrtemp;
 8006f20:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006f22:	681b      	ldr	r3, [r3, #0]
 8006f24:	1902      	adds	r2, r0, r4
 8006f26:	19d2      	adds	r2, r2, r7
 8006f28:	8812      	ldrh	r2, [r2, #0]
 8006f2a:	60da      	str	r2, [r3, #12]
 8006f2c:	e05e      	b.n	8006fec <UART_SetConfig+0x4b8>
      }
      else
      {
        ret = HAL_ERROR;
 8006f2e:	231a      	movs	r3, #26
 8006f30:	2220      	movs	r2, #32
 8006f32:	189b      	adds	r3, r3, r2
 8006f34:	19db      	adds	r3, r3, r7
 8006f36:	2201      	movs	r2, #1
 8006f38:	701a      	strb	r2, [r3, #0]
 8006f3a:	e057      	b.n	8006fec <UART_SetConfig+0x4b8>
      }
    }
  }
  else
  {
    switch (clocksource)
 8006f3c:	231b      	movs	r3, #27
 8006f3e:	2220      	movs	r2, #32
 8006f40:	189b      	adds	r3, r3, r2
 8006f42:	19db      	adds	r3, r3, r7
 8006f44:	781b      	ldrb	r3, [r3, #0]
 8006f46:	2b08      	cmp	r3, #8
 8006f48:	d015      	beq.n	8006f76 <UART_SetConfig+0x442>
 8006f4a:	dc18      	bgt.n	8006f7e <UART_SetConfig+0x44a>
 8006f4c:	2b04      	cmp	r3, #4
 8006f4e:	d00d      	beq.n	8006f6c <UART_SetConfig+0x438>
 8006f50:	dc15      	bgt.n	8006f7e <UART_SetConfig+0x44a>
 8006f52:	2b00      	cmp	r3, #0
 8006f54:	d002      	beq.n	8006f5c <UART_SetConfig+0x428>
 8006f56:	2b02      	cmp	r3, #2
 8006f58:	d005      	beq.n	8006f66 <UART_SetConfig+0x432>
 8006f5a:	e010      	b.n	8006f7e <UART_SetConfig+0x44a>
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8006f5c:	f7fe fd8a 	bl	8005a74 <HAL_RCC_GetPCLK1Freq>
 8006f60:	0003      	movs	r3, r0
 8006f62:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 8006f64:	e014      	b.n	8006f90 <UART_SetConfig+0x45c>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8006f66:	4b2e      	ldr	r3, [pc, #184]	; (8007020 <UART_SetConfig+0x4ec>)
 8006f68:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 8006f6a:	e011      	b.n	8006f90 <UART_SetConfig+0x45c>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8006f6c:	f7fe fcf6 	bl	800595c <HAL_RCC_GetSysClockFreq>
 8006f70:	0003      	movs	r3, r0
 8006f72:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 8006f74:	e00c      	b.n	8006f90 <UART_SetConfig+0x45c>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8006f76:	2380      	movs	r3, #128	; 0x80
 8006f78:	021b      	lsls	r3, r3, #8
 8006f7a:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 8006f7c:	e008      	b.n	8006f90 <UART_SetConfig+0x45c>
      default:
        pclk = 0U;
 8006f7e:	2300      	movs	r3, #0
 8006f80:	637b      	str	r3, [r7, #52]	; 0x34
        ret = HAL_ERROR;
 8006f82:	231a      	movs	r3, #26
 8006f84:	2220      	movs	r2, #32
 8006f86:	189b      	adds	r3, r3, r2
 8006f88:	19db      	adds	r3, r3, r7
 8006f8a:	2201      	movs	r2, #1
 8006f8c:	701a      	strb	r2, [r3, #0]
        break;
 8006f8e:	46c0      	nop			; (mov r8, r8)
    }

    if (pclk != 0U)
 8006f90:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8006f92:	2b00      	cmp	r3, #0
 8006f94:	d02a      	beq.n	8006fec <UART_SetConfig+0x4b8>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8006f96:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006f98:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8006f9a:	4b20      	ldr	r3, [pc, #128]	; (800701c <UART_SetConfig+0x4e8>)
 8006f9c:	0052      	lsls	r2, r2, #1
 8006f9e:	5ad3      	ldrh	r3, [r2, r3]
 8006fa0:	0019      	movs	r1, r3
 8006fa2:	6b78      	ldr	r0, [r7, #52]	; 0x34
 8006fa4:	f7f9 f8ca 	bl	800013c <__udivsi3>
 8006fa8:	0003      	movs	r3, r0
 8006faa:	001a      	movs	r2, r3
 8006fac:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006fae:	685b      	ldr	r3, [r3, #4]
 8006fb0:	085b      	lsrs	r3, r3, #1
 8006fb2:	18d2      	adds	r2, r2, r3
 8006fb4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006fb6:	685b      	ldr	r3, [r3, #4]
 8006fb8:	0019      	movs	r1, r3
 8006fba:	0010      	movs	r0, r2
 8006fbc:	f7f9 f8be 	bl	800013c <__udivsi3>
 8006fc0:	0003      	movs	r3, r0
 8006fc2:	633b      	str	r3, [r7, #48]	; 0x30
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8006fc4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006fc6:	2b0f      	cmp	r3, #15
 8006fc8:	d90a      	bls.n	8006fe0 <UART_SetConfig+0x4ac>
 8006fca:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8006fcc:	2380      	movs	r3, #128	; 0x80
 8006fce:	025b      	lsls	r3, r3, #9
 8006fd0:	429a      	cmp	r2, r3
 8006fd2:	d205      	bcs.n	8006fe0 <UART_SetConfig+0x4ac>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 8006fd4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006fd6:	b29a      	uxth	r2, r3
 8006fd8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006fda:	681b      	ldr	r3, [r3, #0]
 8006fdc:	60da      	str	r2, [r3, #12]
 8006fde:	e005      	b.n	8006fec <UART_SetConfig+0x4b8>
      }
      else
      {
        ret = HAL_ERROR;
 8006fe0:	231a      	movs	r3, #26
 8006fe2:	2220      	movs	r2, #32
 8006fe4:	189b      	adds	r3, r3, r2
 8006fe6:	19db      	adds	r3, r3, r7
 8006fe8:	2201      	movs	r2, #1
 8006fea:	701a      	strb	r2, [r3, #0]
      }
    }
  }

  /* Initialize the number of data to process during RX/TX ISR execution */
  huart->NbTxDataToProcess = 1;
 8006fec:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006fee:	226a      	movs	r2, #106	; 0x6a
 8006ff0:	2101      	movs	r1, #1
 8006ff2:	5299      	strh	r1, [r3, r2]
  huart->NbRxDataToProcess = 1;
 8006ff4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006ff6:	2268      	movs	r2, #104	; 0x68
 8006ff8:	2101      	movs	r1, #1
 8006ffa:	5299      	strh	r1, [r3, r2]

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8006ffc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006ffe:	2200      	movs	r2, #0
 8007000:	675a      	str	r2, [r3, #116]	; 0x74
  huart->TxISR = NULL;
 8007002:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007004:	2200      	movs	r2, #0
 8007006:	679a      	str	r2, [r3, #120]	; 0x78

  return ret;
 8007008:	231a      	movs	r3, #26
 800700a:	2220      	movs	r2, #32
 800700c:	189b      	adds	r3, r3, r2
 800700e:	19db      	adds	r3, r3, r7
 8007010:	781b      	ldrb	r3, [r3, #0]
}
 8007012:	0018      	movs	r0, r3
 8007014:	46bd      	mov	sp, r7
 8007016:	b010      	add	sp, #64	; 0x40
 8007018:	bdb0      	pop	{r4, r5, r7, pc}
 800701a:	46c0      	nop			; (mov r8, r8)
 800701c:	0800a4cc 	.word	0x0800a4cc
 8007020:	00f42400 	.word	0x00f42400

08007024 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8007024:	b580      	push	{r7, lr}
 8007026:	b082      	sub	sp, #8
 8007028:	af00      	add	r7, sp, #0
 800702a:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 800702c:	687b      	ldr	r3, [r7, #4]
 800702e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007030:	2201      	movs	r2, #1
 8007032:	4013      	ands	r3, r2
 8007034:	d00b      	beq.n	800704e <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8007036:	687b      	ldr	r3, [r7, #4]
 8007038:	681b      	ldr	r3, [r3, #0]
 800703a:	685b      	ldr	r3, [r3, #4]
 800703c:	4a4a      	ldr	r2, [pc, #296]	; (8007168 <UART_AdvFeatureConfig+0x144>)
 800703e:	4013      	ands	r3, r2
 8007040:	0019      	movs	r1, r3
 8007042:	687b      	ldr	r3, [r7, #4]
 8007044:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8007046:	687b      	ldr	r3, [r7, #4]
 8007048:	681b      	ldr	r3, [r3, #0]
 800704a:	430a      	orrs	r2, r1
 800704c:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 800704e:	687b      	ldr	r3, [r7, #4]
 8007050:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007052:	2202      	movs	r2, #2
 8007054:	4013      	ands	r3, r2
 8007056:	d00b      	beq.n	8007070 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8007058:	687b      	ldr	r3, [r7, #4]
 800705a:	681b      	ldr	r3, [r3, #0]
 800705c:	685b      	ldr	r3, [r3, #4]
 800705e:	4a43      	ldr	r2, [pc, #268]	; (800716c <UART_AdvFeatureConfig+0x148>)
 8007060:	4013      	ands	r3, r2
 8007062:	0019      	movs	r1, r3
 8007064:	687b      	ldr	r3, [r7, #4]
 8007066:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8007068:	687b      	ldr	r3, [r7, #4]
 800706a:	681b      	ldr	r3, [r3, #0]
 800706c:	430a      	orrs	r2, r1
 800706e:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8007070:	687b      	ldr	r3, [r7, #4]
 8007072:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007074:	2204      	movs	r2, #4
 8007076:	4013      	ands	r3, r2
 8007078:	d00b      	beq.n	8007092 <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 800707a:	687b      	ldr	r3, [r7, #4]
 800707c:	681b      	ldr	r3, [r3, #0]
 800707e:	685b      	ldr	r3, [r3, #4]
 8007080:	4a3b      	ldr	r2, [pc, #236]	; (8007170 <UART_AdvFeatureConfig+0x14c>)
 8007082:	4013      	ands	r3, r2
 8007084:	0019      	movs	r1, r3
 8007086:	687b      	ldr	r3, [r7, #4]
 8007088:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800708a:	687b      	ldr	r3, [r7, #4]
 800708c:	681b      	ldr	r3, [r3, #0]
 800708e:	430a      	orrs	r2, r1
 8007090:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8007092:	687b      	ldr	r3, [r7, #4]
 8007094:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007096:	2208      	movs	r2, #8
 8007098:	4013      	ands	r3, r2
 800709a:	d00b      	beq.n	80070b4 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 800709c:	687b      	ldr	r3, [r7, #4]
 800709e:	681b      	ldr	r3, [r3, #0]
 80070a0:	685b      	ldr	r3, [r3, #4]
 80070a2:	4a34      	ldr	r2, [pc, #208]	; (8007174 <UART_AdvFeatureConfig+0x150>)
 80070a4:	4013      	ands	r3, r2
 80070a6:	0019      	movs	r1, r3
 80070a8:	687b      	ldr	r3, [r7, #4]
 80070aa:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80070ac:	687b      	ldr	r3, [r7, #4]
 80070ae:	681b      	ldr	r3, [r3, #0]
 80070b0:	430a      	orrs	r2, r1
 80070b2:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 80070b4:	687b      	ldr	r3, [r7, #4]
 80070b6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80070b8:	2210      	movs	r2, #16
 80070ba:	4013      	ands	r3, r2
 80070bc:	d00b      	beq.n	80070d6 <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 80070be:	687b      	ldr	r3, [r7, #4]
 80070c0:	681b      	ldr	r3, [r3, #0]
 80070c2:	689b      	ldr	r3, [r3, #8]
 80070c4:	4a2c      	ldr	r2, [pc, #176]	; (8007178 <UART_AdvFeatureConfig+0x154>)
 80070c6:	4013      	ands	r3, r2
 80070c8:	0019      	movs	r1, r3
 80070ca:	687b      	ldr	r3, [r7, #4]
 80070cc:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 80070ce:	687b      	ldr	r3, [r7, #4]
 80070d0:	681b      	ldr	r3, [r3, #0]
 80070d2:	430a      	orrs	r2, r1
 80070d4:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 80070d6:	687b      	ldr	r3, [r7, #4]
 80070d8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80070da:	2220      	movs	r2, #32
 80070dc:	4013      	ands	r3, r2
 80070de:	d00b      	beq.n	80070f8 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 80070e0:	687b      	ldr	r3, [r7, #4]
 80070e2:	681b      	ldr	r3, [r3, #0]
 80070e4:	689b      	ldr	r3, [r3, #8]
 80070e6:	4a25      	ldr	r2, [pc, #148]	; (800717c <UART_AdvFeatureConfig+0x158>)
 80070e8:	4013      	ands	r3, r2
 80070ea:	0019      	movs	r1, r3
 80070ec:	687b      	ldr	r3, [r7, #4]
 80070ee:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80070f0:	687b      	ldr	r3, [r7, #4]
 80070f2:	681b      	ldr	r3, [r3, #0]
 80070f4:	430a      	orrs	r2, r1
 80070f6:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 80070f8:	687b      	ldr	r3, [r7, #4]
 80070fa:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80070fc:	2240      	movs	r2, #64	; 0x40
 80070fe:	4013      	ands	r3, r2
 8007100:	d01d      	beq.n	800713e <UART_AdvFeatureConfig+0x11a>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8007102:	687b      	ldr	r3, [r7, #4]
 8007104:	681b      	ldr	r3, [r3, #0]
 8007106:	685b      	ldr	r3, [r3, #4]
 8007108:	4a1d      	ldr	r2, [pc, #116]	; (8007180 <UART_AdvFeatureConfig+0x15c>)
 800710a:	4013      	ands	r3, r2
 800710c:	0019      	movs	r1, r3
 800710e:	687b      	ldr	r3, [r7, #4]
 8007110:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8007112:	687b      	ldr	r3, [r7, #4]
 8007114:	681b      	ldr	r3, [r3, #0]
 8007116:	430a      	orrs	r2, r1
 8007118:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 800711a:	687b      	ldr	r3, [r7, #4]
 800711c:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800711e:	2380      	movs	r3, #128	; 0x80
 8007120:	035b      	lsls	r3, r3, #13
 8007122:	429a      	cmp	r2, r3
 8007124:	d10b      	bne.n	800713e <UART_AdvFeatureConfig+0x11a>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8007126:	687b      	ldr	r3, [r7, #4]
 8007128:	681b      	ldr	r3, [r3, #0]
 800712a:	685b      	ldr	r3, [r3, #4]
 800712c:	4a15      	ldr	r2, [pc, #84]	; (8007184 <UART_AdvFeatureConfig+0x160>)
 800712e:	4013      	ands	r3, r2
 8007130:	0019      	movs	r1, r3
 8007132:	687b      	ldr	r3, [r7, #4]
 8007134:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8007136:	687b      	ldr	r3, [r7, #4]
 8007138:	681b      	ldr	r3, [r3, #0]
 800713a:	430a      	orrs	r2, r1
 800713c:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 800713e:	687b      	ldr	r3, [r7, #4]
 8007140:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007142:	2280      	movs	r2, #128	; 0x80
 8007144:	4013      	ands	r3, r2
 8007146:	d00b      	beq.n	8007160 <UART_AdvFeatureConfig+0x13c>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8007148:	687b      	ldr	r3, [r7, #4]
 800714a:	681b      	ldr	r3, [r3, #0]
 800714c:	685b      	ldr	r3, [r3, #4]
 800714e:	4a0e      	ldr	r2, [pc, #56]	; (8007188 <UART_AdvFeatureConfig+0x164>)
 8007150:	4013      	ands	r3, r2
 8007152:	0019      	movs	r1, r3
 8007154:	687b      	ldr	r3, [r7, #4]
 8007156:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8007158:	687b      	ldr	r3, [r7, #4]
 800715a:	681b      	ldr	r3, [r3, #0]
 800715c:	430a      	orrs	r2, r1
 800715e:	605a      	str	r2, [r3, #4]
  }
}
 8007160:	46c0      	nop			; (mov r8, r8)
 8007162:	46bd      	mov	sp, r7
 8007164:	b002      	add	sp, #8
 8007166:	bd80      	pop	{r7, pc}
 8007168:	fffdffff 	.word	0xfffdffff
 800716c:	fffeffff 	.word	0xfffeffff
 8007170:	fffbffff 	.word	0xfffbffff
 8007174:	ffff7fff 	.word	0xffff7fff
 8007178:	ffffefff 	.word	0xffffefff
 800717c:	ffffdfff 	.word	0xffffdfff
 8007180:	ffefffff 	.word	0xffefffff
 8007184:	ff9fffff 	.word	0xff9fffff
 8007188:	fff7ffff 	.word	0xfff7ffff

0800718c <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 800718c:	b580      	push	{r7, lr}
 800718e:	b086      	sub	sp, #24
 8007190:	af02      	add	r7, sp, #8
 8007192:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8007194:	687b      	ldr	r3, [r7, #4]
 8007196:	2290      	movs	r2, #144	; 0x90
 8007198:	2100      	movs	r1, #0
 800719a:	5099      	str	r1, [r3, r2]

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 800719c:	f7fc fa96 	bl	80036cc <HAL_GetTick>
 80071a0:	0003      	movs	r3, r0
 80071a2:	60fb      	str	r3, [r7, #12]

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 80071a4:	687b      	ldr	r3, [r7, #4]
 80071a6:	681b      	ldr	r3, [r3, #0]
 80071a8:	681b      	ldr	r3, [r3, #0]
 80071aa:	2208      	movs	r2, #8
 80071ac:	4013      	ands	r3, r2
 80071ae:	2b08      	cmp	r3, #8
 80071b0:	d10c      	bne.n	80071cc <UART_CheckIdleState+0x40>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 80071b2:	68fb      	ldr	r3, [r7, #12]
 80071b4:	2280      	movs	r2, #128	; 0x80
 80071b6:	0391      	lsls	r1, r2, #14
 80071b8:	6878      	ldr	r0, [r7, #4]
 80071ba:	4a1a      	ldr	r2, [pc, #104]	; (8007224 <UART_CheckIdleState+0x98>)
 80071bc:	9200      	str	r2, [sp, #0]
 80071be:	2200      	movs	r2, #0
 80071c0:	f000 f832 	bl	8007228 <UART_WaitOnFlagUntilTimeout>
 80071c4:	1e03      	subs	r3, r0, #0
 80071c6:	d001      	beq.n	80071cc <UART_CheckIdleState+0x40>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 80071c8:	2303      	movs	r3, #3
 80071ca:	e026      	b.n	800721a <UART_CheckIdleState+0x8e>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 80071cc:	687b      	ldr	r3, [r7, #4]
 80071ce:	681b      	ldr	r3, [r3, #0]
 80071d0:	681b      	ldr	r3, [r3, #0]
 80071d2:	2204      	movs	r2, #4
 80071d4:	4013      	ands	r3, r2
 80071d6:	2b04      	cmp	r3, #4
 80071d8:	d10c      	bne.n	80071f4 <UART_CheckIdleState+0x68>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 80071da:	68fb      	ldr	r3, [r7, #12]
 80071dc:	2280      	movs	r2, #128	; 0x80
 80071de:	03d1      	lsls	r1, r2, #15
 80071e0:	6878      	ldr	r0, [r7, #4]
 80071e2:	4a10      	ldr	r2, [pc, #64]	; (8007224 <UART_CheckIdleState+0x98>)
 80071e4:	9200      	str	r2, [sp, #0]
 80071e6:	2200      	movs	r2, #0
 80071e8:	f000 f81e 	bl	8007228 <UART_WaitOnFlagUntilTimeout>
 80071ec:	1e03      	subs	r3, r0, #0
 80071ee:	d001      	beq.n	80071f4 <UART_CheckIdleState+0x68>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 80071f0:	2303      	movs	r3, #3
 80071f2:	e012      	b.n	800721a <UART_CheckIdleState+0x8e>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 80071f4:	687b      	ldr	r3, [r7, #4]
 80071f6:	2288      	movs	r2, #136	; 0x88
 80071f8:	2120      	movs	r1, #32
 80071fa:	5099      	str	r1, [r3, r2]
  huart->RxState = HAL_UART_STATE_READY;
 80071fc:	687b      	ldr	r3, [r7, #4]
 80071fe:	228c      	movs	r2, #140	; 0x8c
 8007200:	2120      	movs	r1, #32
 8007202:	5099      	str	r1, [r3, r2]
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8007204:	687b      	ldr	r3, [r7, #4]
 8007206:	2200      	movs	r2, #0
 8007208:	66da      	str	r2, [r3, #108]	; 0x6c
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 800720a:	687b      	ldr	r3, [r7, #4]
 800720c:	2200      	movs	r2, #0
 800720e:	671a      	str	r2, [r3, #112]	; 0x70

  __HAL_UNLOCK(huart);
 8007210:	687b      	ldr	r3, [r7, #4]
 8007212:	2284      	movs	r2, #132	; 0x84
 8007214:	2100      	movs	r1, #0
 8007216:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8007218:	2300      	movs	r3, #0
}
 800721a:	0018      	movs	r0, r3
 800721c:	46bd      	mov	sp, r7
 800721e:	b004      	add	sp, #16
 8007220:	bd80      	pop	{r7, pc}
 8007222:	46c0      	nop			; (mov r8, r8)
 8007224:	01ffffff 	.word	0x01ffffff

08007228 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8007228:	b580      	push	{r7, lr}
 800722a:	b094      	sub	sp, #80	; 0x50
 800722c:	af00      	add	r7, sp, #0
 800722e:	60f8      	str	r0, [r7, #12]
 8007230:	60b9      	str	r1, [r7, #8]
 8007232:	603b      	str	r3, [r7, #0]
 8007234:	1dfb      	adds	r3, r7, #7
 8007236:	701a      	strb	r2, [r3, #0]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8007238:	e0a7      	b.n	800738a <UART_WaitOnFlagUntilTimeout+0x162>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800723a:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 800723c:	3301      	adds	r3, #1
 800723e:	d100      	bne.n	8007242 <UART_WaitOnFlagUntilTimeout+0x1a>
 8007240:	e0a3      	b.n	800738a <UART_WaitOnFlagUntilTimeout+0x162>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8007242:	f7fc fa43 	bl	80036cc <HAL_GetTick>
 8007246:	0002      	movs	r2, r0
 8007248:	683b      	ldr	r3, [r7, #0]
 800724a:	1ad3      	subs	r3, r2, r3
 800724c:	6dba      	ldr	r2, [r7, #88]	; 0x58
 800724e:	429a      	cmp	r2, r3
 8007250:	d302      	bcc.n	8007258 <UART_WaitOnFlagUntilTimeout+0x30>
 8007252:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8007254:	2b00      	cmp	r3, #0
 8007256:	d13f      	bne.n	80072d8 <UART_WaitOnFlagUntilTimeout+0xb0>
 */
__STATIC_FORCEINLINE uint32_t __get_PRIMASK(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8007258:	f3ef 8310 	mrs	r3, PRIMASK
 800725c:	62bb      	str	r3, [r7, #40]	; 0x28
  return(result);
 800725e:	6abb      	ldr	r3, [r7, #40]	; 0x28
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
           interrupts for the interrupt process */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE |
 8007260:	647b      	str	r3, [r7, #68]	; 0x44
 8007262:	2301      	movs	r3, #1
 8007264:	62fb      	str	r3, [r7, #44]	; 0x2c
  \details Assigns the given value to the Priority Mask Register.
  \param [in]    priMask  Priority Mask
 */
__STATIC_FORCEINLINE void __set_PRIMASK(uint32_t priMask)
{
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8007266:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007268:	f383 8810 	msr	PRIMASK, r3
}
 800726c:	46c0      	nop			; (mov r8, r8)
 800726e:	68fb      	ldr	r3, [r7, #12]
 8007270:	681b      	ldr	r3, [r3, #0]
 8007272:	681a      	ldr	r2, [r3, #0]
 8007274:	68fb      	ldr	r3, [r7, #12]
 8007276:	681b      	ldr	r3, [r3, #0]
 8007278:	494e      	ldr	r1, [pc, #312]	; (80073b4 <UART_WaitOnFlagUntilTimeout+0x18c>)
 800727a:	400a      	ands	r2, r1
 800727c:	601a      	str	r2, [r3, #0]
 800727e:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8007280:	633b      	str	r3, [r7, #48]	; 0x30
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8007282:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007284:	f383 8810 	msr	PRIMASK, r3
}
 8007288:	46c0      	nop			; (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800728a:	f3ef 8310 	mrs	r3, PRIMASK
 800728e:	637b      	str	r3, [r7, #52]	; 0x34
  return(result);
 8007290:	6b7b      	ldr	r3, [r7, #52]	; 0x34
                                                USART_CR1_TXEIE_TXFNFIE));
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8007292:	643b      	str	r3, [r7, #64]	; 0x40
 8007294:	2301      	movs	r3, #1
 8007296:	63bb      	str	r3, [r7, #56]	; 0x38
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8007298:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800729a:	f383 8810 	msr	PRIMASK, r3
}
 800729e:	46c0      	nop			; (mov r8, r8)
 80072a0:	68fb      	ldr	r3, [r7, #12]
 80072a2:	681b      	ldr	r3, [r3, #0]
 80072a4:	689a      	ldr	r2, [r3, #8]
 80072a6:	68fb      	ldr	r3, [r7, #12]
 80072a8:	681b      	ldr	r3, [r3, #0]
 80072aa:	2101      	movs	r1, #1
 80072ac:	438a      	bics	r2, r1
 80072ae:	609a      	str	r2, [r3, #8]
 80072b0:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80072b2:	63fb      	str	r3, [r7, #60]	; 0x3c
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80072b4:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80072b6:	f383 8810 	msr	PRIMASK, r3
}
 80072ba:	46c0      	nop			; (mov r8, r8)

        huart->gState = HAL_UART_STATE_READY;
 80072bc:	68fb      	ldr	r3, [r7, #12]
 80072be:	2288      	movs	r2, #136	; 0x88
 80072c0:	2120      	movs	r1, #32
 80072c2:	5099      	str	r1, [r3, r2]
        huart->RxState = HAL_UART_STATE_READY;
 80072c4:	68fb      	ldr	r3, [r7, #12]
 80072c6:	228c      	movs	r2, #140	; 0x8c
 80072c8:	2120      	movs	r1, #32
 80072ca:	5099      	str	r1, [r3, r2]

        __HAL_UNLOCK(huart);
 80072cc:	68fb      	ldr	r3, [r7, #12]
 80072ce:	2284      	movs	r2, #132	; 0x84
 80072d0:	2100      	movs	r1, #0
 80072d2:	5499      	strb	r1, [r3, r2]

        return HAL_TIMEOUT;
 80072d4:	2303      	movs	r3, #3
 80072d6:	e069      	b.n	80073ac <UART_WaitOnFlagUntilTimeout+0x184>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 80072d8:	68fb      	ldr	r3, [r7, #12]
 80072da:	681b      	ldr	r3, [r3, #0]
 80072dc:	681b      	ldr	r3, [r3, #0]
 80072de:	2204      	movs	r2, #4
 80072e0:	4013      	ands	r3, r2
 80072e2:	d052      	beq.n	800738a <UART_WaitOnFlagUntilTimeout+0x162>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 80072e4:	68fb      	ldr	r3, [r7, #12]
 80072e6:	681b      	ldr	r3, [r3, #0]
 80072e8:	69da      	ldr	r2, [r3, #28]
 80072ea:	2380      	movs	r3, #128	; 0x80
 80072ec:	011b      	lsls	r3, r3, #4
 80072ee:	401a      	ands	r2, r3
 80072f0:	2380      	movs	r3, #128	; 0x80
 80072f2:	011b      	lsls	r3, r3, #4
 80072f4:	429a      	cmp	r2, r3
 80072f6:	d148      	bne.n	800738a <UART_WaitOnFlagUntilTimeout+0x162>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 80072f8:	68fb      	ldr	r3, [r7, #12]
 80072fa:	681b      	ldr	r3, [r3, #0]
 80072fc:	2280      	movs	r2, #128	; 0x80
 80072fe:	0112      	lsls	r2, r2, #4
 8007300:	621a      	str	r2, [r3, #32]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8007302:	f3ef 8310 	mrs	r3, PRIMASK
 8007306:	613b      	str	r3, [r7, #16]
  return(result);
 8007308:	693b      	ldr	r3, [r7, #16]

          /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
             interrupts for the interrupt process */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE |
 800730a:	64fb      	str	r3, [r7, #76]	; 0x4c
 800730c:	2301      	movs	r3, #1
 800730e:	617b      	str	r3, [r7, #20]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8007310:	697b      	ldr	r3, [r7, #20]
 8007312:	f383 8810 	msr	PRIMASK, r3
}
 8007316:	46c0      	nop			; (mov r8, r8)
 8007318:	68fb      	ldr	r3, [r7, #12]
 800731a:	681b      	ldr	r3, [r3, #0]
 800731c:	681a      	ldr	r2, [r3, #0]
 800731e:	68fb      	ldr	r3, [r7, #12]
 8007320:	681b      	ldr	r3, [r3, #0]
 8007322:	4924      	ldr	r1, [pc, #144]	; (80073b4 <UART_WaitOnFlagUntilTimeout+0x18c>)
 8007324:	400a      	ands	r2, r1
 8007326:	601a      	str	r2, [r3, #0]
 8007328:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800732a:	61bb      	str	r3, [r7, #24]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800732c:	69bb      	ldr	r3, [r7, #24]
 800732e:	f383 8810 	msr	PRIMASK, r3
}
 8007332:	46c0      	nop			; (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8007334:	f3ef 8310 	mrs	r3, PRIMASK
 8007338:	61fb      	str	r3, [r7, #28]
  return(result);
 800733a:	69fb      	ldr	r3, [r7, #28]
                                                  USART_CR1_TXEIE_TXFNFIE));
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800733c:	64bb      	str	r3, [r7, #72]	; 0x48
 800733e:	2301      	movs	r3, #1
 8007340:	623b      	str	r3, [r7, #32]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8007342:	6a3b      	ldr	r3, [r7, #32]
 8007344:	f383 8810 	msr	PRIMASK, r3
}
 8007348:	46c0      	nop			; (mov r8, r8)
 800734a:	68fb      	ldr	r3, [r7, #12]
 800734c:	681b      	ldr	r3, [r3, #0]
 800734e:	689a      	ldr	r2, [r3, #8]
 8007350:	68fb      	ldr	r3, [r7, #12]
 8007352:	681b      	ldr	r3, [r3, #0]
 8007354:	2101      	movs	r1, #1
 8007356:	438a      	bics	r2, r1
 8007358:	609a      	str	r2, [r3, #8]
 800735a:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800735c:	627b      	str	r3, [r7, #36]	; 0x24
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800735e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007360:	f383 8810 	msr	PRIMASK, r3
}
 8007364:	46c0      	nop			; (mov r8, r8)

          huart->gState = HAL_UART_STATE_READY;
 8007366:	68fb      	ldr	r3, [r7, #12]
 8007368:	2288      	movs	r2, #136	; 0x88
 800736a:	2120      	movs	r1, #32
 800736c:	5099      	str	r1, [r3, r2]
          huart->RxState = HAL_UART_STATE_READY;
 800736e:	68fb      	ldr	r3, [r7, #12]
 8007370:	228c      	movs	r2, #140	; 0x8c
 8007372:	2120      	movs	r1, #32
 8007374:	5099      	str	r1, [r3, r2]
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8007376:	68fb      	ldr	r3, [r7, #12]
 8007378:	2290      	movs	r2, #144	; 0x90
 800737a:	2120      	movs	r1, #32
 800737c:	5099      	str	r1, [r3, r2]

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 800737e:	68fb      	ldr	r3, [r7, #12]
 8007380:	2284      	movs	r2, #132	; 0x84
 8007382:	2100      	movs	r1, #0
 8007384:	5499      	strb	r1, [r3, r2]

          return HAL_TIMEOUT;
 8007386:	2303      	movs	r3, #3
 8007388:	e010      	b.n	80073ac <UART_WaitOnFlagUntilTimeout+0x184>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800738a:	68fb      	ldr	r3, [r7, #12]
 800738c:	681b      	ldr	r3, [r3, #0]
 800738e:	69db      	ldr	r3, [r3, #28]
 8007390:	68ba      	ldr	r2, [r7, #8]
 8007392:	4013      	ands	r3, r2
 8007394:	68ba      	ldr	r2, [r7, #8]
 8007396:	1ad3      	subs	r3, r2, r3
 8007398:	425a      	negs	r2, r3
 800739a:	4153      	adcs	r3, r2
 800739c:	b2db      	uxtb	r3, r3
 800739e:	001a      	movs	r2, r3
 80073a0:	1dfb      	adds	r3, r7, #7
 80073a2:	781b      	ldrb	r3, [r3, #0]
 80073a4:	429a      	cmp	r2, r3
 80073a6:	d100      	bne.n	80073aa <UART_WaitOnFlagUntilTimeout+0x182>
 80073a8:	e747      	b.n	800723a <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 80073aa:	2300      	movs	r3, #0
}
 80073ac:	0018      	movs	r0, r3
 80073ae:	46bd      	mov	sp, r7
 80073b0:	b014      	add	sp, #80	; 0x50
 80073b2:	bd80      	pop	{r7, pc}
 80073b4:	fffffe5f 	.word	0xfffffe5f

080073b8 <__errno>:
 80073b8:	4b01      	ldr	r3, [pc, #4]	; (80073c0 <__errno+0x8>)
 80073ba:	6818      	ldr	r0, [r3, #0]
 80073bc:	4770      	bx	lr
 80073be:	46c0      	nop			; (mov r8, r8)
 80073c0:	20000014 	.word	0x20000014

080073c4 <__libc_init_array>:
 80073c4:	b570      	push	{r4, r5, r6, lr}
 80073c6:	2600      	movs	r6, #0
 80073c8:	4d0c      	ldr	r5, [pc, #48]	; (80073fc <__libc_init_array+0x38>)
 80073ca:	4c0d      	ldr	r4, [pc, #52]	; (8007400 <__libc_init_array+0x3c>)
 80073cc:	1b64      	subs	r4, r4, r5
 80073ce:	10a4      	asrs	r4, r4, #2
 80073d0:	42a6      	cmp	r6, r4
 80073d2:	d109      	bne.n	80073e8 <__libc_init_array+0x24>
 80073d4:	2600      	movs	r6, #0
 80073d6:	f002 ffbb 	bl	800a350 <_init>
 80073da:	4d0a      	ldr	r5, [pc, #40]	; (8007404 <__libc_init_array+0x40>)
 80073dc:	4c0a      	ldr	r4, [pc, #40]	; (8007408 <__libc_init_array+0x44>)
 80073de:	1b64      	subs	r4, r4, r5
 80073e0:	10a4      	asrs	r4, r4, #2
 80073e2:	42a6      	cmp	r6, r4
 80073e4:	d105      	bne.n	80073f2 <__libc_init_array+0x2e>
 80073e6:	bd70      	pop	{r4, r5, r6, pc}
 80073e8:	00b3      	lsls	r3, r6, #2
 80073ea:	58eb      	ldr	r3, [r5, r3]
 80073ec:	4798      	blx	r3
 80073ee:	3601      	adds	r6, #1
 80073f0:	e7ee      	b.n	80073d0 <__libc_init_array+0xc>
 80073f2:	00b3      	lsls	r3, r6, #2
 80073f4:	58eb      	ldr	r3, [r5, r3]
 80073f6:	4798      	blx	r3
 80073f8:	3601      	adds	r6, #1
 80073fa:	e7f2      	b.n	80073e2 <__libc_init_array+0x1e>
 80073fc:	0800a8c4 	.word	0x0800a8c4
 8007400:	0800a8c4 	.word	0x0800a8c4
 8007404:	0800a8c4 	.word	0x0800a8c4
 8007408:	0800a8c8 	.word	0x0800a8c8

0800740c <memset>:
 800740c:	0003      	movs	r3, r0
 800740e:	1882      	adds	r2, r0, r2
 8007410:	4293      	cmp	r3, r2
 8007412:	d100      	bne.n	8007416 <memset+0xa>
 8007414:	4770      	bx	lr
 8007416:	7019      	strb	r1, [r3, #0]
 8007418:	3301      	adds	r3, #1
 800741a:	e7f9      	b.n	8007410 <memset+0x4>

0800741c <__cvt>:
 800741c:	b5f0      	push	{r4, r5, r6, r7, lr}
 800741e:	001e      	movs	r6, r3
 8007420:	2300      	movs	r3, #0
 8007422:	0014      	movs	r4, r2
 8007424:	b08b      	sub	sp, #44	; 0x2c
 8007426:	429e      	cmp	r6, r3
 8007428:	da04      	bge.n	8007434 <__cvt+0x18>
 800742a:	2180      	movs	r1, #128	; 0x80
 800742c:	0609      	lsls	r1, r1, #24
 800742e:	1873      	adds	r3, r6, r1
 8007430:	001e      	movs	r6, r3
 8007432:	232d      	movs	r3, #45	; 0x2d
 8007434:	9a12      	ldr	r2, [sp, #72]	; 0x48
 8007436:	9f14      	ldr	r7, [sp, #80]	; 0x50
 8007438:	7013      	strb	r3, [r2, #0]
 800743a:	2320      	movs	r3, #32
 800743c:	2203      	movs	r2, #3
 800743e:	439f      	bics	r7, r3
 8007440:	2f46      	cmp	r7, #70	; 0x46
 8007442:	d007      	beq.n	8007454 <__cvt+0x38>
 8007444:	003b      	movs	r3, r7
 8007446:	3b45      	subs	r3, #69	; 0x45
 8007448:	4259      	negs	r1, r3
 800744a:	414b      	adcs	r3, r1
 800744c:	9910      	ldr	r1, [sp, #64]	; 0x40
 800744e:	3a01      	subs	r2, #1
 8007450:	18cb      	adds	r3, r1, r3
 8007452:	9310      	str	r3, [sp, #64]	; 0x40
 8007454:	ab09      	add	r3, sp, #36	; 0x24
 8007456:	9304      	str	r3, [sp, #16]
 8007458:	ab08      	add	r3, sp, #32
 800745a:	9303      	str	r3, [sp, #12]
 800745c:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 800745e:	9200      	str	r2, [sp, #0]
 8007460:	9302      	str	r3, [sp, #8]
 8007462:	9b10      	ldr	r3, [sp, #64]	; 0x40
 8007464:	0022      	movs	r2, r4
 8007466:	9301      	str	r3, [sp, #4]
 8007468:	0033      	movs	r3, r6
 800746a:	f000 fcf1 	bl	8007e50 <_dtoa_r>
 800746e:	0005      	movs	r5, r0
 8007470:	2f47      	cmp	r7, #71	; 0x47
 8007472:	d102      	bne.n	800747a <__cvt+0x5e>
 8007474:	9b11      	ldr	r3, [sp, #68]	; 0x44
 8007476:	07db      	lsls	r3, r3, #31
 8007478:	d528      	bpl.n	80074cc <__cvt+0xb0>
 800747a:	9b10      	ldr	r3, [sp, #64]	; 0x40
 800747c:	18eb      	adds	r3, r5, r3
 800747e:	9307      	str	r3, [sp, #28]
 8007480:	2f46      	cmp	r7, #70	; 0x46
 8007482:	d114      	bne.n	80074ae <__cvt+0x92>
 8007484:	782b      	ldrb	r3, [r5, #0]
 8007486:	2b30      	cmp	r3, #48	; 0x30
 8007488:	d10c      	bne.n	80074a4 <__cvt+0x88>
 800748a:	2200      	movs	r2, #0
 800748c:	2300      	movs	r3, #0
 800748e:	0020      	movs	r0, r4
 8007490:	0031      	movs	r1, r6
 8007492:	f7f8 ffd9 	bl	8000448 <__aeabi_dcmpeq>
 8007496:	2800      	cmp	r0, #0
 8007498:	d104      	bne.n	80074a4 <__cvt+0x88>
 800749a:	2301      	movs	r3, #1
 800749c:	9a10      	ldr	r2, [sp, #64]	; 0x40
 800749e:	1a9b      	subs	r3, r3, r2
 80074a0:	9a13      	ldr	r2, [sp, #76]	; 0x4c
 80074a2:	6013      	str	r3, [r2, #0]
 80074a4:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 80074a6:	9a07      	ldr	r2, [sp, #28]
 80074a8:	681b      	ldr	r3, [r3, #0]
 80074aa:	18d3      	adds	r3, r2, r3
 80074ac:	9307      	str	r3, [sp, #28]
 80074ae:	2200      	movs	r2, #0
 80074b0:	2300      	movs	r3, #0
 80074b2:	0020      	movs	r0, r4
 80074b4:	0031      	movs	r1, r6
 80074b6:	f7f8 ffc7 	bl	8000448 <__aeabi_dcmpeq>
 80074ba:	2800      	cmp	r0, #0
 80074bc:	d001      	beq.n	80074c2 <__cvt+0xa6>
 80074be:	9b07      	ldr	r3, [sp, #28]
 80074c0:	9309      	str	r3, [sp, #36]	; 0x24
 80074c2:	2230      	movs	r2, #48	; 0x30
 80074c4:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80074c6:	9907      	ldr	r1, [sp, #28]
 80074c8:	428b      	cmp	r3, r1
 80074ca:	d306      	bcc.n	80074da <__cvt+0xbe>
 80074cc:	0028      	movs	r0, r5
 80074ce:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80074d0:	9a15      	ldr	r2, [sp, #84]	; 0x54
 80074d2:	1b5b      	subs	r3, r3, r5
 80074d4:	6013      	str	r3, [r2, #0]
 80074d6:	b00b      	add	sp, #44	; 0x2c
 80074d8:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80074da:	1c59      	adds	r1, r3, #1
 80074dc:	9109      	str	r1, [sp, #36]	; 0x24
 80074de:	701a      	strb	r2, [r3, #0]
 80074e0:	e7f0      	b.n	80074c4 <__cvt+0xa8>

080074e2 <__exponent>:
 80074e2:	b5f0      	push	{r4, r5, r6, r7, lr}
 80074e4:	1c83      	adds	r3, r0, #2
 80074e6:	b087      	sub	sp, #28
 80074e8:	9303      	str	r3, [sp, #12]
 80074ea:	0005      	movs	r5, r0
 80074ec:	000c      	movs	r4, r1
 80074ee:	232b      	movs	r3, #43	; 0x2b
 80074f0:	7002      	strb	r2, [r0, #0]
 80074f2:	2900      	cmp	r1, #0
 80074f4:	da01      	bge.n	80074fa <__exponent+0x18>
 80074f6:	424c      	negs	r4, r1
 80074f8:	3302      	adds	r3, #2
 80074fa:	706b      	strb	r3, [r5, #1]
 80074fc:	2c09      	cmp	r4, #9
 80074fe:	dd31      	ble.n	8007564 <__exponent+0x82>
 8007500:	270a      	movs	r7, #10
 8007502:	ab04      	add	r3, sp, #16
 8007504:	1dde      	adds	r6, r3, #7
 8007506:	0020      	movs	r0, r4
 8007508:	0039      	movs	r1, r7
 800750a:	9601      	str	r6, [sp, #4]
 800750c:	f7f8 ff86 	bl	800041c <__aeabi_idivmod>
 8007510:	3e01      	subs	r6, #1
 8007512:	3130      	adds	r1, #48	; 0x30
 8007514:	0020      	movs	r0, r4
 8007516:	7031      	strb	r1, [r6, #0]
 8007518:	0039      	movs	r1, r7
 800751a:	9402      	str	r4, [sp, #8]
 800751c:	f7f8 fe98 	bl	8000250 <__divsi3>
 8007520:	9b02      	ldr	r3, [sp, #8]
 8007522:	0004      	movs	r4, r0
 8007524:	2b63      	cmp	r3, #99	; 0x63
 8007526:	dcee      	bgt.n	8007506 <__exponent+0x24>
 8007528:	9b01      	ldr	r3, [sp, #4]
 800752a:	3430      	adds	r4, #48	; 0x30
 800752c:	1e9a      	subs	r2, r3, #2
 800752e:	0013      	movs	r3, r2
 8007530:	9903      	ldr	r1, [sp, #12]
 8007532:	7014      	strb	r4, [r2, #0]
 8007534:	a804      	add	r0, sp, #16
 8007536:	3007      	adds	r0, #7
 8007538:	4298      	cmp	r0, r3
 800753a:	d80e      	bhi.n	800755a <__exponent+0x78>
 800753c:	ab04      	add	r3, sp, #16
 800753e:	3307      	adds	r3, #7
 8007540:	2000      	movs	r0, #0
 8007542:	429a      	cmp	r2, r3
 8007544:	d804      	bhi.n	8007550 <__exponent+0x6e>
 8007546:	ab04      	add	r3, sp, #16
 8007548:	3009      	adds	r0, #9
 800754a:	18c0      	adds	r0, r0, r3
 800754c:	9b01      	ldr	r3, [sp, #4]
 800754e:	1ac0      	subs	r0, r0, r3
 8007550:	9b03      	ldr	r3, [sp, #12]
 8007552:	1818      	adds	r0, r3, r0
 8007554:	1b40      	subs	r0, r0, r5
 8007556:	b007      	add	sp, #28
 8007558:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800755a:	7818      	ldrb	r0, [r3, #0]
 800755c:	3301      	adds	r3, #1
 800755e:	7008      	strb	r0, [r1, #0]
 8007560:	3101      	adds	r1, #1
 8007562:	e7e7      	b.n	8007534 <__exponent+0x52>
 8007564:	2330      	movs	r3, #48	; 0x30
 8007566:	18e4      	adds	r4, r4, r3
 8007568:	70ab      	strb	r3, [r5, #2]
 800756a:	1d28      	adds	r0, r5, #4
 800756c:	70ec      	strb	r4, [r5, #3]
 800756e:	e7f1      	b.n	8007554 <__exponent+0x72>

08007570 <_printf_float>:
 8007570:	b5f0      	push	{r4, r5, r6, r7, lr}
 8007572:	b095      	sub	sp, #84	; 0x54
 8007574:	000c      	movs	r4, r1
 8007576:	9209      	str	r2, [sp, #36]	; 0x24
 8007578:	001e      	movs	r6, r3
 800757a:	9d1a      	ldr	r5, [sp, #104]	; 0x68
 800757c:	0007      	movs	r7, r0
 800757e:	f001 fa81 	bl	8008a84 <_localeconv_r>
 8007582:	6803      	ldr	r3, [r0, #0]
 8007584:	0018      	movs	r0, r3
 8007586:	930c      	str	r3, [sp, #48]	; 0x30
 8007588:	f7f8 fdbc 	bl	8000104 <strlen>
 800758c:	2300      	movs	r3, #0
 800758e:	9312      	str	r3, [sp, #72]	; 0x48
 8007590:	7e23      	ldrb	r3, [r4, #24]
 8007592:	2207      	movs	r2, #7
 8007594:	930a      	str	r3, [sp, #40]	; 0x28
 8007596:	6823      	ldr	r3, [r4, #0]
 8007598:	900e      	str	r0, [sp, #56]	; 0x38
 800759a:	930d      	str	r3, [sp, #52]	; 0x34
 800759c:	990d      	ldr	r1, [sp, #52]	; 0x34
 800759e:	682b      	ldr	r3, [r5, #0]
 80075a0:	05c9      	lsls	r1, r1, #23
 80075a2:	d547      	bpl.n	8007634 <_printf_float+0xc4>
 80075a4:	189b      	adds	r3, r3, r2
 80075a6:	4393      	bics	r3, r2
 80075a8:	001a      	movs	r2, r3
 80075aa:	3208      	adds	r2, #8
 80075ac:	602a      	str	r2, [r5, #0]
 80075ae:	681a      	ldr	r2, [r3, #0]
 80075b0:	685b      	ldr	r3, [r3, #4]
 80075b2:	64a2      	str	r2, [r4, #72]	; 0x48
 80075b4:	64e3      	str	r3, [r4, #76]	; 0x4c
 80075b6:	2201      	movs	r2, #1
 80075b8:	6ca3      	ldr	r3, [r4, #72]	; 0x48
 80075ba:	6ce5      	ldr	r5, [r4, #76]	; 0x4c
 80075bc:	930b      	str	r3, [sp, #44]	; 0x2c
 80075be:	006b      	lsls	r3, r5, #1
 80075c0:	085b      	lsrs	r3, r3, #1
 80075c2:	930f      	str	r3, [sp, #60]	; 0x3c
 80075c4:	980b      	ldr	r0, [sp, #44]	; 0x2c
 80075c6:	4ba7      	ldr	r3, [pc, #668]	; (8007864 <_printf_float+0x2f4>)
 80075c8:	990f      	ldr	r1, [sp, #60]	; 0x3c
 80075ca:	4252      	negs	r2, r2
 80075cc:	f7fa fe7c 	bl	80022c8 <__aeabi_dcmpun>
 80075d0:	2800      	cmp	r0, #0
 80075d2:	d131      	bne.n	8007638 <_printf_float+0xc8>
 80075d4:	2201      	movs	r2, #1
 80075d6:	4ba3      	ldr	r3, [pc, #652]	; (8007864 <_printf_float+0x2f4>)
 80075d8:	980b      	ldr	r0, [sp, #44]	; 0x2c
 80075da:	990f      	ldr	r1, [sp, #60]	; 0x3c
 80075dc:	4252      	negs	r2, r2
 80075de:	f7f8 ff43 	bl	8000468 <__aeabi_dcmple>
 80075e2:	2800      	cmp	r0, #0
 80075e4:	d128      	bne.n	8007638 <_printf_float+0xc8>
 80075e6:	2200      	movs	r2, #0
 80075e8:	2300      	movs	r3, #0
 80075ea:	0029      	movs	r1, r5
 80075ec:	980b      	ldr	r0, [sp, #44]	; 0x2c
 80075ee:	f7f8 ff31 	bl	8000454 <__aeabi_dcmplt>
 80075f2:	2800      	cmp	r0, #0
 80075f4:	d003      	beq.n	80075fe <_printf_float+0x8e>
 80075f6:	0023      	movs	r3, r4
 80075f8:	222d      	movs	r2, #45	; 0x2d
 80075fa:	3343      	adds	r3, #67	; 0x43
 80075fc:	701a      	strb	r2, [r3, #0]
 80075fe:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8007600:	4d99      	ldr	r5, [pc, #612]	; (8007868 <_printf_float+0x2f8>)
 8007602:	2b47      	cmp	r3, #71	; 0x47
 8007604:	d900      	bls.n	8007608 <_printf_float+0x98>
 8007606:	4d99      	ldr	r5, [pc, #612]	; (800786c <_printf_float+0x2fc>)
 8007608:	2303      	movs	r3, #3
 800760a:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 800760c:	6123      	str	r3, [r4, #16]
 800760e:	3301      	adds	r3, #1
 8007610:	439a      	bics	r2, r3
 8007612:	2300      	movs	r3, #0
 8007614:	6022      	str	r2, [r4, #0]
 8007616:	930b      	str	r3, [sp, #44]	; 0x2c
 8007618:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800761a:	0021      	movs	r1, r4
 800761c:	0038      	movs	r0, r7
 800761e:	9600      	str	r6, [sp, #0]
 8007620:	aa13      	add	r2, sp, #76	; 0x4c
 8007622:	f000 f9e7 	bl	80079f4 <_printf_common>
 8007626:	1c43      	adds	r3, r0, #1
 8007628:	d000      	beq.n	800762c <_printf_float+0xbc>
 800762a:	e0a2      	b.n	8007772 <_printf_float+0x202>
 800762c:	2001      	movs	r0, #1
 800762e:	4240      	negs	r0, r0
 8007630:	b015      	add	sp, #84	; 0x54
 8007632:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8007634:	3307      	adds	r3, #7
 8007636:	e7b6      	b.n	80075a6 <_printf_float+0x36>
 8007638:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 800763a:	002b      	movs	r3, r5
 800763c:	0010      	movs	r0, r2
 800763e:	0029      	movs	r1, r5
 8007640:	f7fa fe42 	bl	80022c8 <__aeabi_dcmpun>
 8007644:	2800      	cmp	r0, #0
 8007646:	d00b      	beq.n	8007660 <_printf_float+0xf0>
 8007648:	2d00      	cmp	r5, #0
 800764a:	da03      	bge.n	8007654 <_printf_float+0xe4>
 800764c:	0023      	movs	r3, r4
 800764e:	222d      	movs	r2, #45	; 0x2d
 8007650:	3343      	adds	r3, #67	; 0x43
 8007652:	701a      	strb	r2, [r3, #0]
 8007654:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8007656:	4d86      	ldr	r5, [pc, #536]	; (8007870 <_printf_float+0x300>)
 8007658:	2b47      	cmp	r3, #71	; 0x47
 800765a:	d9d5      	bls.n	8007608 <_printf_float+0x98>
 800765c:	4d85      	ldr	r5, [pc, #532]	; (8007874 <_printf_float+0x304>)
 800765e:	e7d3      	b.n	8007608 <_printf_float+0x98>
 8007660:	2220      	movs	r2, #32
 8007662:	990a      	ldr	r1, [sp, #40]	; 0x28
 8007664:	6863      	ldr	r3, [r4, #4]
 8007666:	4391      	bics	r1, r2
 8007668:	910f      	str	r1, [sp, #60]	; 0x3c
 800766a:	1c5a      	adds	r2, r3, #1
 800766c:	d149      	bne.n	8007702 <_printf_float+0x192>
 800766e:	3307      	adds	r3, #7
 8007670:	6063      	str	r3, [r4, #4]
 8007672:	2380      	movs	r3, #128	; 0x80
 8007674:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 8007676:	00db      	lsls	r3, r3, #3
 8007678:	4313      	orrs	r3, r2
 800767a:	2200      	movs	r2, #0
 800767c:	9206      	str	r2, [sp, #24]
 800767e:	aa12      	add	r2, sp, #72	; 0x48
 8007680:	9205      	str	r2, [sp, #20]
 8007682:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8007684:	a908      	add	r1, sp, #32
 8007686:	9204      	str	r2, [sp, #16]
 8007688:	aa11      	add	r2, sp, #68	; 0x44
 800768a:	9203      	str	r2, [sp, #12]
 800768c:	2223      	movs	r2, #35	; 0x23
 800768e:	6023      	str	r3, [r4, #0]
 8007690:	9301      	str	r3, [sp, #4]
 8007692:	6863      	ldr	r3, [r4, #4]
 8007694:	1852      	adds	r2, r2, r1
 8007696:	9202      	str	r2, [sp, #8]
 8007698:	9300      	str	r3, [sp, #0]
 800769a:	0038      	movs	r0, r7
 800769c:	002b      	movs	r3, r5
 800769e:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 80076a0:	f7ff febc 	bl	800741c <__cvt>
 80076a4:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 80076a6:	0005      	movs	r5, r0
 80076a8:	9911      	ldr	r1, [sp, #68]	; 0x44
 80076aa:	2b47      	cmp	r3, #71	; 0x47
 80076ac:	d108      	bne.n	80076c0 <_printf_float+0x150>
 80076ae:	1ccb      	adds	r3, r1, #3
 80076b0:	db02      	blt.n	80076b8 <_printf_float+0x148>
 80076b2:	6863      	ldr	r3, [r4, #4]
 80076b4:	4299      	cmp	r1, r3
 80076b6:	dd48      	ble.n	800774a <_printf_float+0x1da>
 80076b8:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80076ba:	3b02      	subs	r3, #2
 80076bc:	b2db      	uxtb	r3, r3
 80076be:	930a      	str	r3, [sp, #40]	; 0x28
 80076c0:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80076c2:	2b65      	cmp	r3, #101	; 0x65
 80076c4:	d824      	bhi.n	8007710 <_printf_float+0x1a0>
 80076c6:	0020      	movs	r0, r4
 80076c8:	001a      	movs	r2, r3
 80076ca:	3901      	subs	r1, #1
 80076cc:	3050      	adds	r0, #80	; 0x50
 80076ce:	9111      	str	r1, [sp, #68]	; 0x44
 80076d0:	f7ff ff07 	bl	80074e2 <__exponent>
 80076d4:	9a12      	ldr	r2, [sp, #72]	; 0x48
 80076d6:	900b      	str	r0, [sp, #44]	; 0x2c
 80076d8:	1813      	adds	r3, r2, r0
 80076da:	6123      	str	r3, [r4, #16]
 80076dc:	2a01      	cmp	r2, #1
 80076de:	dc02      	bgt.n	80076e6 <_printf_float+0x176>
 80076e0:	6822      	ldr	r2, [r4, #0]
 80076e2:	07d2      	lsls	r2, r2, #31
 80076e4:	d501      	bpl.n	80076ea <_printf_float+0x17a>
 80076e6:	3301      	adds	r3, #1
 80076e8:	6123      	str	r3, [r4, #16]
 80076ea:	2323      	movs	r3, #35	; 0x23
 80076ec:	aa08      	add	r2, sp, #32
 80076ee:	189b      	adds	r3, r3, r2
 80076f0:	781b      	ldrb	r3, [r3, #0]
 80076f2:	2b00      	cmp	r3, #0
 80076f4:	d100      	bne.n	80076f8 <_printf_float+0x188>
 80076f6:	e78f      	b.n	8007618 <_printf_float+0xa8>
 80076f8:	0023      	movs	r3, r4
 80076fa:	222d      	movs	r2, #45	; 0x2d
 80076fc:	3343      	adds	r3, #67	; 0x43
 80076fe:	701a      	strb	r2, [r3, #0]
 8007700:	e78a      	b.n	8007618 <_printf_float+0xa8>
 8007702:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 8007704:	2a47      	cmp	r2, #71	; 0x47
 8007706:	d1b4      	bne.n	8007672 <_printf_float+0x102>
 8007708:	2b00      	cmp	r3, #0
 800770a:	d1b2      	bne.n	8007672 <_printf_float+0x102>
 800770c:	3301      	adds	r3, #1
 800770e:	e7af      	b.n	8007670 <_printf_float+0x100>
 8007710:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8007712:	2b66      	cmp	r3, #102	; 0x66
 8007714:	d11b      	bne.n	800774e <_printf_float+0x1de>
 8007716:	6863      	ldr	r3, [r4, #4]
 8007718:	2900      	cmp	r1, #0
 800771a:	dd0d      	ble.n	8007738 <_printf_float+0x1c8>
 800771c:	6121      	str	r1, [r4, #16]
 800771e:	2b00      	cmp	r3, #0
 8007720:	d102      	bne.n	8007728 <_printf_float+0x1b8>
 8007722:	6822      	ldr	r2, [r4, #0]
 8007724:	07d2      	lsls	r2, r2, #31
 8007726:	d502      	bpl.n	800772e <_printf_float+0x1be>
 8007728:	3301      	adds	r3, #1
 800772a:	1859      	adds	r1, r3, r1
 800772c:	6121      	str	r1, [r4, #16]
 800772e:	9b11      	ldr	r3, [sp, #68]	; 0x44
 8007730:	65a3      	str	r3, [r4, #88]	; 0x58
 8007732:	2300      	movs	r3, #0
 8007734:	930b      	str	r3, [sp, #44]	; 0x2c
 8007736:	e7d8      	b.n	80076ea <_printf_float+0x17a>
 8007738:	2b00      	cmp	r3, #0
 800773a:	d103      	bne.n	8007744 <_printf_float+0x1d4>
 800773c:	2201      	movs	r2, #1
 800773e:	6821      	ldr	r1, [r4, #0]
 8007740:	4211      	tst	r1, r2
 8007742:	d000      	beq.n	8007746 <_printf_float+0x1d6>
 8007744:	1c9a      	adds	r2, r3, #2
 8007746:	6122      	str	r2, [r4, #16]
 8007748:	e7f1      	b.n	800772e <_printf_float+0x1be>
 800774a:	2367      	movs	r3, #103	; 0x67
 800774c:	930a      	str	r3, [sp, #40]	; 0x28
 800774e:	9b11      	ldr	r3, [sp, #68]	; 0x44
 8007750:	9a12      	ldr	r2, [sp, #72]	; 0x48
 8007752:	4293      	cmp	r3, r2
 8007754:	db06      	blt.n	8007764 <_printf_float+0x1f4>
 8007756:	6822      	ldr	r2, [r4, #0]
 8007758:	6123      	str	r3, [r4, #16]
 800775a:	07d2      	lsls	r2, r2, #31
 800775c:	d5e7      	bpl.n	800772e <_printf_float+0x1be>
 800775e:	3301      	adds	r3, #1
 8007760:	6123      	str	r3, [r4, #16]
 8007762:	e7e4      	b.n	800772e <_printf_float+0x1be>
 8007764:	2101      	movs	r1, #1
 8007766:	2b00      	cmp	r3, #0
 8007768:	dc01      	bgt.n	800776e <_printf_float+0x1fe>
 800776a:	1849      	adds	r1, r1, r1
 800776c:	1ac9      	subs	r1, r1, r3
 800776e:	1852      	adds	r2, r2, r1
 8007770:	e7e9      	b.n	8007746 <_printf_float+0x1d6>
 8007772:	6822      	ldr	r2, [r4, #0]
 8007774:	0553      	lsls	r3, r2, #21
 8007776:	d407      	bmi.n	8007788 <_printf_float+0x218>
 8007778:	6923      	ldr	r3, [r4, #16]
 800777a:	002a      	movs	r2, r5
 800777c:	0038      	movs	r0, r7
 800777e:	9909      	ldr	r1, [sp, #36]	; 0x24
 8007780:	47b0      	blx	r6
 8007782:	1c43      	adds	r3, r0, #1
 8007784:	d128      	bne.n	80077d8 <_printf_float+0x268>
 8007786:	e751      	b.n	800762c <_printf_float+0xbc>
 8007788:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800778a:	2b65      	cmp	r3, #101	; 0x65
 800778c:	d800      	bhi.n	8007790 <_printf_float+0x220>
 800778e:	e0e1      	b.n	8007954 <_printf_float+0x3e4>
 8007790:	6ca0      	ldr	r0, [r4, #72]	; 0x48
 8007792:	6ce1      	ldr	r1, [r4, #76]	; 0x4c
 8007794:	2200      	movs	r2, #0
 8007796:	2300      	movs	r3, #0
 8007798:	f7f8 fe56 	bl	8000448 <__aeabi_dcmpeq>
 800779c:	2800      	cmp	r0, #0
 800779e:	d031      	beq.n	8007804 <_printf_float+0x294>
 80077a0:	2301      	movs	r3, #1
 80077a2:	0038      	movs	r0, r7
 80077a4:	4a34      	ldr	r2, [pc, #208]	; (8007878 <_printf_float+0x308>)
 80077a6:	9909      	ldr	r1, [sp, #36]	; 0x24
 80077a8:	47b0      	blx	r6
 80077aa:	1c43      	adds	r3, r0, #1
 80077ac:	d100      	bne.n	80077b0 <_printf_float+0x240>
 80077ae:	e73d      	b.n	800762c <_printf_float+0xbc>
 80077b0:	9b11      	ldr	r3, [sp, #68]	; 0x44
 80077b2:	9a12      	ldr	r2, [sp, #72]	; 0x48
 80077b4:	4293      	cmp	r3, r2
 80077b6:	db02      	blt.n	80077be <_printf_float+0x24e>
 80077b8:	6823      	ldr	r3, [r4, #0]
 80077ba:	07db      	lsls	r3, r3, #31
 80077bc:	d50c      	bpl.n	80077d8 <_printf_float+0x268>
 80077be:	0038      	movs	r0, r7
 80077c0:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 80077c2:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 80077c4:	9909      	ldr	r1, [sp, #36]	; 0x24
 80077c6:	47b0      	blx	r6
 80077c8:	2500      	movs	r5, #0
 80077ca:	1c43      	adds	r3, r0, #1
 80077cc:	d100      	bne.n	80077d0 <_printf_float+0x260>
 80077ce:	e72d      	b.n	800762c <_printf_float+0xbc>
 80077d0:	9b12      	ldr	r3, [sp, #72]	; 0x48
 80077d2:	3b01      	subs	r3, #1
 80077d4:	42ab      	cmp	r3, r5
 80077d6:	dc0a      	bgt.n	80077ee <_printf_float+0x27e>
 80077d8:	6823      	ldr	r3, [r4, #0]
 80077da:	079b      	lsls	r3, r3, #30
 80077dc:	d500      	bpl.n	80077e0 <_printf_float+0x270>
 80077de:	e106      	b.n	80079ee <_printf_float+0x47e>
 80077e0:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 80077e2:	68e0      	ldr	r0, [r4, #12]
 80077e4:	4298      	cmp	r0, r3
 80077e6:	db00      	blt.n	80077ea <_printf_float+0x27a>
 80077e8:	e722      	b.n	8007630 <_printf_float+0xc0>
 80077ea:	0018      	movs	r0, r3
 80077ec:	e720      	b.n	8007630 <_printf_float+0xc0>
 80077ee:	0022      	movs	r2, r4
 80077f0:	2301      	movs	r3, #1
 80077f2:	0038      	movs	r0, r7
 80077f4:	9909      	ldr	r1, [sp, #36]	; 0x24
 80077f6:	321a      	adds	r2, #26
 80077f8:	47b0      	blx	r6
 80077fa:	1c43      	adds	r3, r0, #1
 80077fc:	d100      	bne.n	8007800 <_printf_float+0x290>
 80077fe:	e715      	b.n	800762c <_printf_float+0xbc>
 8007800:	3501      	adds	r5, #1
 8007802:	e7e5      	b.n	80077d0 <_printf_float+0x260>
 8007804:	9b11      	ldr	r3, [sp, #68]	; 0x44
 8007806:	2b00      	cmp	r3, #0
 8007808:	dc38      	bgt.n	800787c <_printf_float+0x30c>
 800780a:	2301      	movs	r3, #1
 800780c:	0038      	movs	r0, r7
 800780e:	4a1a      	ldr	r2, [pc, #104]	; (8007878 <_printf_float+0x308>)
 8007810:	9909      	ldr	r1, [sp, #36]	; 0x24
 8007812:	47b0      	blx	r6
 8007814:	1c43      	adds	r3, r0, #1
 8007816:	d100      	bne.n	800781a <_printf_float+0x2aa>
 8007818:	e708      	b.n	800762c <_printf_float+0xbc>
 800781a:	9b11      	ldr	r3, [sp, #68]	; 0x44
 800781c:	9a12      	ldr	r2, [sp, #72]	; 0x48
 800781e:	4313      	orrs	r3, r2
 8007820:	d102      	bne.n	8007828 <_printf_float+0x2b8>
 8007822:	6823      	ldr	r3, [r4, #0]
 8007824:	07db      	lsls	r3, r3, #31
 8007826:	d5d7      	bpl.n	80077d8 <_printf_float+0x268>
 8007828:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 800782a:	0038      	movs	r0, r7
 800782c:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 800782e:	9909      	ldr	r1, [sp, #36]	; 0x24
 8007830:	47b0      	blx	r6
 8007832:	1c43      	adds	r3, r0, #1
 8007834:	d100      	bne.n	8007838 <_printf_float+0x2c8>
 8007836:	e6f9      	b.n	800762c <_printf_float+0xbc>
 8007838:	2300      	movs	r3, #0
 800783a:	930a      	str	r3, [sp, #40]	; 0x28
 800783c:	9b11      	ldr	r3, [sp, #68]	; 0x44
 800783e:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8007840:	425b      	negs	r3, r3
 8007842:	4293      	cmp	r3, r2
 8007844:	dc01      	bgt.n	800784a <_printf_float+0x2da>
 8007846:	9b12      	ldr	r3, [sp, #72]	; 0x48
 8007848:	e797      	b.n	800777a <_printf_float+0x20a>
 800784a:	0022      	movs	r2, r4
 800784c:	2301      	movs	r3, #1
 800784e:	0038      	movs	r0, r7
 8007850:	9909      	ldr	r1, [sp, #36]	; 0x24
 8007852:	321a      	adds	r2, #26
 8007854:	47b0      	blx	r6
 8007856:	1c43      	adds	r3, r0, #1
 8007858:	d100      	bne.n	800785c <_printf_float+0x2ec>
 800785a:	e6e7      	b.n	800762c <_printf_float+0xbc>
 800785c:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800785e:	3301      	adds	r3, #1
 8007860:	e7eb      	b.n	800783a <_printf_float+0x2ca>
 8007862:	46c0      	nop			; (mov r8, r8)
 8007864:	7fefffff 	.word	0x7fefffff
 8007868:	0800a4e8 	.word	0x0800a4e8
 800786c:	0800a4ec 	.word	0x0800a4ec
 8007870:	0800a4f0 	.word	0x0800a4f0
 8007874:	0800a4f4 	.word	0x0800a4f4
 8007878:	0800a4f8 	.word	0x0800a4f8
 800787c:	9a12      	ldr	r2, [sp, #72]	; 0x48
 800787e:	6da3      	ldr	r3, [r4, #88]	; 0x58
 8007880:	920a      	str	r2, [sp, #40]	; 0x28
 8007882:	429a      	cmp	r2, r3
 8007884:	dd00      	ble.n	8007888 <_printf_float+0x318>
 8007886:	930a      	str	r3, [sp, #40]	; 0x28
 8007888:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800788a:	2b00      	cmp	r3, #0
 800788c:	dc3c      	bgt.n	8007908 <_printf_float+0x398>
 800788e:	2300      	movs	r3, #0
 8007890:	930d      	str	r3, [sp, #52]	; 0x34
 8007892:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8007894:	43db      	mvns	r3, r3
 8007896:	17db      	asrs	r3, r3, #31
 8007898:	930f      	str	r3, [sp, #60]	; 0x3c
 800789a:	6da3      	ldr	r3, [r4, #88]	; 0x58
 800789c:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 800789e:	930b      	str	r3, [sp, #44]	; 0x2c
 80078a0:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80078a2:	4013      	ands	r3, r2
 80078a4:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 80078a6:	1ad3      	subs	r3, r2, r3
 80078a8:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 80078aa:	4293      	cmp	r3, r2
 80078ac:	dc34      	bgt.n	8007918 <_printf_float+0x3a8>
 80078ae:	9b11      	ldr	r3, [sp, #68]	; 0x44
 80078b0:	9a12      	ldr	r2, [sp, #72]	; 0x48
 80078b2:	4293      	cmp	r3, r2
 80078b4:	db3d      	blt.n	8007932 <_printf_float+0x3c2>
 80078b6:	6823      	ldr	r3, [r4, #0]
 80078b8:	07db      	lsls	r3, r3, #31
 80078ba:	d43a      	bmi.n	8007932 <_printf_float+0x3c2>
 80078bc:	9a12      	ldr	r2, [sp, #72]	; 0x48
 80078be:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 80078c0:	9911      	ldr	r1, [sp, #68]	; 0x44
 80078c2:	1ad3      	subs	r3, r2, r3
 80078c4:	1a52      	subs	r2, r2, r1
 80078c6:	920a      	str	r2, [sp, #40]	; 0x28
 80078c8:	429a      	cmp	r2, r3
 80078ca:	dd00      	ble.n	80078ce <_printf_float+0x35e>
 80078cc:	930a      	str	r3, [sp, #40]	; 0x28
 80078ce:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80078d0:	2b00      	cmp	r3, #0
 80078d2:	dc36      	bgt.n	8007942 <_printf_float+0x3d2>
 80078d4:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80078d6:	2500      	movs	r5, #0
 80078d8:	43db      	mvns	r3, r3
 80078da:	17db      	asrs	r3, r3, #31
 80078dc:	930b      	str	r3, [sp, #44]	; 0x2c
 80078de:	9a11      	ldr	r2, [sp, #68]	; 0x44
 80078e0:	9b12      	ldr	r3, [sp, #72]	; 0x48
 80078e2:	990b      	ldr	r1, [sp, #44]	; 0x2c
 80078e4:	1a9b      	subs	r3, r3, r2
 80078e6:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 80078e8:	400a      	ands	r2, r1
 80078ea:	1a9b      	subs	r3, r3, r2
 80078ec:	42ab      	cmp	r3, r5
 80078ee:	dc00      	bgt.n	80078f2 <_printf_float+0x382>
 80078f0:	e772      	b.n	80077d8 <_printf_float+0x268>
 80078f2:	0022      	movs	r2, r4
 80078f4:	2301      	movs	r3, #1
 80078f6:	0038      	movs	r0, r7
 80078f8:	9909      	ldr	r1, [sp, #36]	; 0x24
 80078fa:	321a      	adds	r2, #26
 80078fc:	47b0      	blx	r6
 80078fe:	1c43      	adds	r3, r0, #1
 8007900:	d100      	bne.n	8007904 <_printf_float+0x394>
 8007902:	e693      	b.n	800762c <_printf_float+0xbc>
 8007904:	3501      	adds	r5, #1
 8007906:	e7ea      	b.n	80078de <_printf_float+0x36e>
 8007908:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800790a:	002a      	movs	r2, r5
 800790c:	0038      	movs	r0, r7
 800790e:	9909      	ldr	r1, [sp, #36]	; 0x24
 8007910:	47b0      	blx	r6
 8007912:	1c43      	adds	r3, r0, #1
 8007914:	d1bb      	bne.n	800788e <_printf_float+0x31e>
 8007916:	e689      	b.n	800762c <_printf_float+0xbc>
 8007918:	0022      	movs	r2, r4
 800791a:	2301      	movs	r3, #1
 800791c:	0038      	movs	r0, r7
 800791e:	9909      	ldr	r1, [sp, #36]	; 0x24
 8007920:	321a      	adds	r2, #26
 8007922:	47b0      	blx	r6
 8007924:	1c43      	adds	r3, r0, #1
 8007926:	d100      	bne.n	800792a <_printf_float+0x3ba>
 8007928:	e680      	b.n	800762c <_printf_float+0xbc>
 800792a:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800792c:	3301      	adds	r3, #1
 800792e:	930d      	str	r3, [sp, #52]	; 0x34
 8007930:	e7b3      	b.n	800789a <_printf_float+0x32a>
 8007932:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8007934:	0038      	movs	r0, r7
 8007936:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8007938:	9909      	ldr	r1, [sp, #36]	; 0x24
 800793a:	47b0      	blx	r6
 800793c:	1c43      	adds	r3, r0, #1
 800793e:	d1bd      	bne.n	80078bc <_printf_float+0x34c>
 8007940:	e674      	b.n	800762c <_printf_float+0xbc>
 8007942:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8007944:	0038      	movs	r0, r7
 8007946:	18ea      	adds	r2, r5, r3
 8007948:	9909      	ldr	r1, [sp, #36]	; 0x24
 800794a:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800794c:	47b0      	blx	r6
 800794e:	1c43      	adds	r3, r0, #1
 8007950:	d1c0      	bne.n	80078d4 <_printf_float+0x364>
 8007952:	e66b      	b.n	800762c <_printf_float+0xbc>
 8007954:	9b12      	ldr	r3, [sp, #72]	; 0x48
 8007956:	2b01      	cmp	r3, #1
 8007958:	dc02      	bgt.n	8007960 <_printf_float+0x3f0>
 800795a:	2301      	movs	r3, #1
 800795c:	421a      	tst	r2, r3
 800795e:	d034      	beq.n	80079ca <_printf_float+0x45a>
 8007960:	2301      	movs	r3, #1
 8007962:	002a      	movs	r2, r5
 8007964:	0038      	movs	r0, r7
 8007966:	9909      	ldr	r1, [sp, #36]	; 0x24
 8007968:	47b0      	blx	r6
 800796a:	1c43      	adds	r3, r0, #1
 800796c:	d100      	bne.n	8007970 <_printf_float+0x400>
 800796e:	e65d      	b.n	800762c <_printf_float+0xbc>
 8007970:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8007972:	0038      	movs	r0, r7
 8007974:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8007976:	9909      	ldr	r1, [sp, #36]	; 0x24
 8007978:	47b0      	blx	r6
 800797a:	1c43      	adds	r3, r0, #1
 800797c:	d100      	bne.n	8007980 <_printf_float+0x410>
 800797e:	e655      	b.n	800762c <_printf_float+0xbc>
 8007980:	6ca0      	ldr	r0, [r4, #72]	; 0x48
 8007982:	6ce1      	ldr	r1, [r4, #76]	; 0x4c
 8007984:	2200      	movs	r2, #0
 8007986:	2300      	movs	r3, #0
 8007988:	f7f8 fd5e 	bl	8000448 <__aeabi_dcmpeq>
 800798c:	2800      	cmp	r0, #0
 800798e:	d11a      	bne.n	80079c6 <_printf_float+0x456>
 8007990:	9b12      	ldr	r3, [sp, #72]	; 0x48
 8007992:	1c6a      	adds	r2, r5, #1
 8007994:	3b01      	subs	r3, #1
 8007996:	0038      	movs	r0, r7
 8007998:	9909      	ldr	r1, [sp, #36]	; 0x24
 800799a:	47b0      	blx	r6
 800799c:	1c43      	adds	r3, r0, #1
 800799e:	d10e      	bne.n	80079be <_printf_float+0x44e>
 80079a0:	e644      	b.n	800762c <_printf_float+0xbc>
 80079a2:	0022      	movs	r2, r4
 80079a4:	2301      	movs	r3, #1
 80079a6:	0038      	movs	r0, r7
 80079a8:	9909      	ldr	r1, [sp, #36]	; 0x24
 80079aa:	321a      	adds	r2, #26
 80079ac:	47b0      	blx	r6
 80079ae:	1c43      	adds	r3, r0, #1
 80079b0:	d100      	bne.n	80079b4 <_printf_float+0x444>
 80079b2:	e63b      	b.n	800762c <_printf_float+0xbc>
 80079b4:	3501      	adds	r5, #1
 80079b6:	9b12      	ldr	r3, [sp, #72]	; 0x48
 80079b8:	3b01      	subs	r3, #1
 80079ba:	42ab      	cmp	r3, r5
 80079bc:	dcf1      	bgt.n	80079a2 <_printf_float+0x432>
 80079be:	0022      	movs	r2, r4
 80079c0:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 80079c2:	3250      	adds	r2, #80	; 0x50
 80079c4:	e6da      	b.n	800777c <_printf_float+0x20c>
 80079c6:	2500      	movs	r5, #0
 80079c8:	e7f5      	b.n	80079b6 <_printf_float+0x446>
 80079ca:	002a      	movs	r2, r5
 80079cc:	e7e3      	b.n	8007996 <_printf_float+0x426>
 80079ce:	0022      	movs	r2, r4
 80079d0:	2301      	movs	r3, #1
 80079d2:	0038      	movs	r0, r7
 80079d4:	9909      	ldr	r1, [sp, #36]	; 0x24
 80079d6:	3219      	adds	r2, #25
 80079d8:	47b0      	blx	r6
 80079da:	1c43      	adds	r3, r0, #1
 80079dc:	d100      	bne.n	80079e0 <_printf_float+0x470>
 80079de:	e625      	b.n	800762c <_printf_float+0xbc>
 80079e0:	3501      	adds	r5, #1
 80079e2:	68e3      	ldr	r3, [r4, #12]
 80079e4:	9a13      	ldr	r2, [sp, #76]	; 0x4c
 80079e6:	1a9b      	subs	r3, r3, r2
 80079e8:	42ab      	cmp	r3, r5
 80079ea:	dcf0      	bgt.n	80079ce <_printf_float+0x45e>
 80079ec:	e6f8      	b.n	80077e0 <_printf_float+0x270>
 80079ee:	2500      	movs	r5, #0
 80079f0:	e7f7      	b.n	80079e2 <_printf_float+0x472>
 80079f2:	46c0      	nop			; (mov r8, r8)

080079f4 <_printf_common>:
 80079f4:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 80079f6:	0015      	movs	r5, r2
 80079f8:	9301      	str	r3, [sp, #4]
 80079fa:	688a      	ldr	r2, [r1, #8]
 80079fc:	690b      	ldr	r3, [r1, #16]
 80079fe:	000c      	movs	r4, r1
 8007a00:	9000      	str	r0, [sp, #0]
 8007a02:	4293      	cmp	r3, r2
 8007a04:	da00      	bge.n	8007a08 <_printf_common+0x14>
 8007a06:	0013      	movs	r3, r2
 8007a08:	0022      	movs	r2, r4
 8007a0a:	602b      	str	r3, [r5, #0]
 8007a0c:	3243      	adds	r2, #67	; 0x43
 8007a0e:	7812      	ldrb	r2, [r2, #0]
 8007a10:	2a00      	cmp	r2, #0
 8007a12:	d001      	beq.n	8007a18 <_printf_common+0x24>
 8007a14:	3301      	adds	r3, #1
 8007a16:	602b      	str	r3, [r5, #0]
 8007a18:	6823      	ldr	r3, [r4, #0]
 8007a1a:	069b      	lsls	r3, r3, #26
 8007a1c:	d502      	bpl.n	8007a24 <_printf_common+0x30>
 8007a1e:	682b      	ldr	r3, [r5, #0]
 8007a20:	3302      	adds	r3, #2
 8007a22:	602b      	str	r3, [r5, #0]
 8007a24:	6822      	ldr	r2, [r4, #0]
 8007a26:	2306      	movs	r3, #6
 8007a28:	0017      	movs	r7, r2
 8007a2a:	401f      	ands	r7, r3
 8007a2c:	421a      	tst	r2, r3
 8007a2e:	d027      	beq.n	8007a80 <_printf_common+0x8c>
 8007a30:	0023      	movs	r3, r4
 8007a32:	3343      	adds	r3, #67	; 0x43
 8007a34:	781b      	ldrb	r3, [r3, #0]
 8007a36:	1e5a      	subs	r2, r3, #1
 8007a38:	4193      	sbcs	r3, r2
 8007a3a:	6822      	ldr	r2, [r4, #0]
 8007a3c:	0692      	lsls	r2, r2, #26
 8007a3e:	d430      	bmi.n	8007aa2 <_printf_common+0xae>
 8007a40:	0022      	movs	r2, r4
 8007a42:	9901      	ldr	r1, [sp, #4]
 8007a44:	9800      	ldr	r0, [sp, #0]
 8007a46:	9e08      	ldr	r6, [sp, #32]
 8007a48:	3243      	adds	r2, #67	; 0x43
 8007a4a:	47b0      	blx	r6
 8007a4c:	1c43      	adds	r3, r0, #1
 8007a4e:	d025      	beq.n	8007a9c <_printf_common+0xa8>
 8007a50:	2306      	movs	r3, #6
 8007a52:	6820      	ldr	r0, [r4, #0]
 8007a54:	682a      	ldr	r2, [r5, #0]
 8007a56:	68e1      	ldr	r1, [r4, #12]
 8007a58:	2500      	movs	r5, #0
 8007a5a:	4003      	ands	r3, r0
 8007a5c:	2b04      	cmp	r3, #4
 8007a5e:	d103      	bne.n	8007a68 <_printf_common+0x74>
 8007a60:	1a8d      	subs	r5, r1, r2
 8007a62:	43eb      	mvns	r3, r5
 8007a64:	17db      	asrs	r3, r3, #31
 8007a66:	401d      	ands	r5, r3
 8007a68:	68a3      	ldr	r3, [r4, #8]
 8007a6a:	6922      	ldr	r2, [r4, #16]
 8007a6c:	4293      	cmp	r3, r2
 8007a6e:	dd01      	ble.n	8007a74 <_printf_common+0x80>
 8007a70:	1a9b      	subs	r3, r3, r2
 8007a72:	18ed      	adds	r5, r5, r3
 8007a74:	2700      	movs	r7, #0
 8007a76:	42bd      	cmp	r5, r7
 8007a78:	d120      	bne.n	8007abc <_printf_common+0xc8>
 8007a7a:	2000      	movs	r0, #0
 8007a7c:	e010      	b.n	8007aa0 <_printf_common+0xac>
 8007a7e:	3701      	adds	r7, #1
 8007a80:	68e3      	ldr	r3, [r4, #12]
 8007a82:	682a      	ldr	r2, [r5, #0]
 8007a84:	1a9b      	subs	r3, r3, r2
 8007a86:	42bb      	cmp	r3, r7
 8007a88:	ddd2      	ble.n	8007a30 <_printf_common+0x3c>
 8007a8a:	0022      	movs	r2, r4
 8007a8c:	2301      	movs	r3, #1
 8007a8e:	9901      	ldr	r1, [sp, #4]
 8007a90:	9800      	ldr	r0, [sp, #0]
 8007a92:	9e08      	ldr	r6, [sp, #32]
 8007a94:	3219      	adds	r2, #25
 8007a96:	47b0      	blx	r6
 8007a98:	1c43      	adds	r3, r0, #1
 8007a9a:	d1f0      	bne.n	8007a7e <_printf_common+0x8a>
 8007a9c:	2001      	movs	r0, #1
 8007a9e:	4240      	negs	r0, r0
 8007aa0:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 8007aa2:	2030      	movs	r0, #48	; 0x30
 8007aa4:	18e1      	adds	r1, r4, r3
 8007aa6:	3143      	adds	r1, #67	; 0x43
 8007aa8:	7008      	strb	r0, [r1, #0]
 8007aaa:	0021      	movs	r1, r4
 8007aac:	1c5a      	adds	r2, r3, #1
 8007aae:	3145      	adds	r1, #69	; 0x45
 8007ab0:	7809      	ldrb	r1, [r1, #0]
 8007ab2:	18a2      	adds	r2, r4, r2
 8007ab4:	3243      	adds	r2, #67	; 0x43
 8007ab6:	3302      	adds	r3, #2
 8007ab8:	7011      	strb	r1, [r2, #0]
 8007aba:	e7c1      	b.n	8007a40 <_printf_common+0x4c>
 8007abc:	0022      	movs	r2, r4
 8007abe:	2301      	movs	r3, #1
 8007ac0:	9901      	ldr	r1, [sp, #4]
 8007ac2:	9800      	ldr	r0, [sp, #0]
 8007ac4:	9e08      	ldr	r6, [sp, #32]
 8007ac6:	321a      	adds	r2, #26
 8007ac8:	47b0      	blx	r6
 8007aca:	1c43      	adds	r3, r0, #1
 8007acc:	d0e6      	beq.n	8007a9c <_printf_common+0xa8>
 8007ace:	3701      	adds	r7, #1
 8007ad0:	e7d1      	b.n	8007a76 <_printf_common+0x82>
	...

08007ad4 <_printf_i>:
 8007ad4:	b5f0      	push	{r4, r5, r6, r7, lr}
 8007ad6:	b08b      	sub	sp, #44	; 0x2c
 8007ad8:	9206      	str	r2, [sp, #24]
 8007ada:	000a      	movs	r2, r1
 8007adc:	3243      	adds	r2, #67	; 0x43
 8007ade:	9307      	str	r3, [sp, #28]
 8007ae0:	9005      	str	r0, [sp, #20]
 8007ae2:	9204      	str	r2, [sp, #16]
 8007ae4:	7e0a      	ldrb	r2, [r1, #24]
 8007ae6:	000c      	movs	r4, r1
 8007ae8:	9b10      	ldr	r3, [sp, #64]	; 0x40
 8007aea:	2a78      	cmp	r2, #120	; 0x78
 8007aec:	d807      	bhi.n	8007afe <_printf_i+0x2a>
 8007aee:	2a62      	cmp	r2, #98	; 0x62
 8007af0:	d809      	bhi.n	8007b06 <_printf_i+0x32>
 8007af2:	2a00      	cmp	r2, #0
 8007af4:	d100      	bne.n	8007af8 <_printf_i+0x24>
 8007af6:	e0c1      	b.n	8007c7c <_printf_i+0x1a8>
 8007af8:	2a58      	cmp	r2, #88	; 0x58
 8007afa:	d100      	bne.n	8007afe <_printf_i+0x2a>
 8007afc:	e08c      	b.n	8007c18 <_printf_i+0x144>
 8007afe:	0026      	movs	r6, r4
 8007b00:	3642      	adds	r6, #66	; 0x42
 8007b02:	7032      	strb	r2, [r6, #0]
 8007b04:	e022      	b.n	8007b4c <_printf_i+0x78>
 8007b06:	0010      	movs	r0, r2
 8007b08:	3863      	subs	r0, #99	; 0x63
 8007b0a:	2815      	cmp	r0, #21
 8007b0c:	d8f7      	bhi.n	8007afe <_printf_i+0x2a>
 8007b0e:	f7f8 fb0b 	bl	8000128 <__gnu_thumb1_case_shi>
 8007b12:	0016      	.short	0x0016
 8007b14:	fff6001f 	.word	0xfff6001f
 8007b18:	fff6fff6 	.word	0xfff6fff6
 8007b1c:	001ffff6 	.word	0x001ffff6
 8007b20:	fff6fff6 	.word	0xfff6fff6
 8007b24:	fff6fff6 	.word	0xfff6fff6
 8007b28:	003600a8 	.word	0x003600a8
 8007b2c:	fff6009a 	.word	0xfff6009a
 8007b30:	00b9fff6 	.word	0x00b9fff6
 8007b34:	0036fff6 	.word	0x0036fff6
 8007b38:	fff6fff6 	.word	0xfff6fff6
 8007b3c:	009e      	.short	0x009e
 8007b3e:	0026      	movs	r6, r4
 8007b40:	681a      	ldr	r2, [r3, #0]
 8007b42:	3642      	adds	r6, #66	; 0x42
 8007b44:	1d11      	adds	r1, r2, #4
 8007b46:	6019      	str	r1, [r3, #0]
 8007b48:	6813      	ldr	r3, [r2, #0]
 8007b4a:	7033      	strb	r3, [r6, #0]
 8007b4c:	2301      	movs	r3, #1
 8007b4e:	e0a7      	b.n	8007ca0 <_printf_i+0x1cc>
 8007b50:	6808      	ldr	r0, [r1, #0]
 8007b52:	6819      	ldr	r1, [r3, #0]
 8007b54:	1d0a      	adds	r2, r1, #4
 8007b56:	0605      	lsls	r5, r0, #24
 8007b58:	d50b      	bpl.n	8007b72 <_printf_i+0x9e>
 8007b5a:	680d      	ldr	r5, [r1, #0]
 8007b5c:	601a      	str	r2, [r3, #0]
 8007b5e:	2d00      	cmp	r5, #0
 8007b60:	da03      	bge.n	8007b6a <_printf_i+0x96>
 8007b62:	232d      	movs	r3, #45	; 0x2d
 8007b64:	9a04      	ldr	r2, [sp, #16]
 8007b66:	426d      	negs	r5, r5
 8007b68:	7013      	strb	r3, [r2, #0]
 8007b6a:	4b61      	ldr	r3, [pc, #388]	; (8007cf0 <_printf_i+0x21c>)
 8007b6c:	270a      	movs	r7, #10
 8007b6e:	9303      	str	r3, [sp, #12]
 8007b70:	e01b      	b.n	8007baa <_printf_i+0xd6>
 8007b72:	680d      	ldr	r5, [r1, #0]
 8007b74:	601a      	str	r2, [r3, #0]
 8007b76:	0641      	lsls	r1, r0, #25
 8007b78:	d5f1      	bpl.n	8007b5e <_printf_i+0x8a>
 8007b7a:	b22d      	sxth	r5, r5
 8007b7c:	e7ef      	b.n	8007b5e <_printf_i+0x8a>
 8007b7e:	680d      	ldr	r5, [r1, #0]
 8007b80:	6819      	ldr	r1, [r3, #0]
 8007b82:	1d08      	adds	r0, r1, #4
 8007b84:	6018      	str	r0, [r3, #0]
 8007b86:	062e      	lsls	r6, r5, #24
 8007b88:	d501      	bpl.n	8007b8e <_printf_i+0xba>
 8007b8a:	680d      	ldr	r5, [r1, #0]
 8007b8c:	e003      	b.n	8007b96 <_printf_i+0xc2>
 8007b8e:	066d      	lsls	r5, r5, #25
 8007b90:	d5fb      	bpl.n	8007b8a <_printf_i+0xb6>
 8007b92:	680d      	ldr	r5, [r1, #0]
 8007b94:	b2ad      	uxth	r5, r5
 8007b96:	4b56      	ldr	r3, [pc, #344]	; (8007cf0 <_printf_i+0x21c>)
 8007b98:	2708      	movs	r7, #8
 8007b9a:	9303      	str	r3, [sp, #12]
 8007b9c:	2a6f      	cmp	r2, #111	; 0x6f
 8007b9e:	d000      	beq.n	8007ba2 <_printf_i+0xce>
 8007ba0:	3702      	adds	r7, #2
 8007ba2:	0023      	movs	r3, r4
 8007ba4:	2200      	movs	r2, #0
 8007ba6:	3343      	adds	r3, #67	; 0x43
 8007ba8:	701a      	strb	r2, [r3, #0]
 8007baa:	6863      	ldr	r3, [r4, #4]
 8007bac:	60a3      	str	r3, [r4, #8]
 8007bae:	2b00      	cmp	r3, #0
 8007bb0:	db03      	blt.n	8007bba <_printf_i+0xe6>
 8007bb2:	2204      	movs	r2, #4
 8007bb4:	6821      	ldr	r1, [r4, #0]
 8007bb6:	4391      	bics	r1, r2
 8007bb8:	6021      	str	r1, [r4, #0]
 8007bba:	2d00      	cmp	r5, #0
 8007bbc:	d102      	bne.n	8007bc4 <_printf_i+0xf0>
 8007bbe:	9e04      	ldr	r6, [sp, #16]
 8007bc0:	2b00      	cmp	r3, #0
 8007bc2:	d00c      	beq.n	8007bde <_printf_i+0x10a>
 8007bc4:	9e04      	ldr	r6, [sp, #16]
 8007bc6:	0028      	movs	r0, r5
 8007bc8:	0039      	movs	r1, r7
 8007bca:	f7f8 fb3d 	bl	8000248 <__aeabi_uidivmod>
 8007bce:	9b03      	ldr	r3, [sp, #12]
 8007bd0:	3e01      	subs	r6, #1
 8007bd2:	5c5b      	ldrb	r3, [r3, r1]
 8007bd4:	7033      	strb	r3, [r6, #0]
 8007bd6:	002b      	movs	r3, r5
 8007bd8:	0005      	movs	r5, r0
 8007bda:	429f      	cmp	r7, r3
 8007bdc:	d9f3      	bls.n	8007bc6 <_printf_i+0xf2>
 8007bde:	2f08      	cmp	r7, #8
 8007be0:	d109      	bne.n	8007bf6 <_printf_i+0x122>
 8007be2:	6823      	ldr	r3, [r4, #0]
 8007be4:	07db      	lsls	r3, r3, #31
 8007be6:	d506      	bpl.n	8007bf6 <_printf_i+0x122>
 8007be8:	6863      	ldr	r3, [r4, #4]
 8007bea:	6922      	ldr	r2, [r4, #16]
 8007bec:	4293      	cmp	r3, r2
 8007bee:	dc02      	bgt.n	8007bf6 <_printf_i+0x122>
 8007bf0:	2330      	movs	r3, #48	; 0x30
 8007bf2:	3e01      	subs	r6, #1
 8007bf4:	7033      	strb	r3, [r6, #0]
 8007bf6:	9b04      	ldr	r3, [sp, #16]
 8007bf8:	1b9b      	subs	r3, r3, r6
 8007bfa:	6123      	str	r3, [r4, #16]
 8007bfc:	9b07      	ldr	r3, [sp, #28]
 8007bfe:	0021      	movs	r1, r4
 8007c00:	9300      	str	r3, [sp, #0]
 8007c02:	9805      	ldr	r0, [sp, #20]
 8007c04:	9b06      	ldr	r3, [sp, #24]
 8007c06:	aa09      	add	r2, sp, #36	; 0x24
 8007c08:	f7ff fef4 	bl	80079f4 <_printf_common>
 8007c0c:	1c43      	adds	r3, r0, #1
 8007c0e:	d14c      	bne.n	8007caa <_printf_i+0x1d6>
 8007c10:	2001      	movs	r0, #1
 8007c12:	4240      	negs	r0, r0
 8007c14:	b00b      	add	sp, #44	; 0x2c
 8007c16:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8007c18:	3145      	adds	r1, #69	; 0x45
 8007c1a:	700a      	strb	r2, [r1, #0]
 8007c1c:	4a34      	ldr	r2, [pc, #208]	; (8007cf0 <_printf_i+0x21c>)
 8007c1e:	9203      	str	r2, [sp, #12]
 8007c20:	681a      	ldr	r2, [r3, #0]
 8007c22:	6821      	ldr	r1, [r4, #0]
 8007c24:	ca20      	ldmia	r2!, {r5}
 8007c26:	601a      	str	r2, [r3, #0]
 8007c28:	0608      	lsls	r0, r1, #24
 8007c2a:	d516      	bpl.n	8007c5a <_printf_i+0x186>
 8007c2c:	07cb      	lsls	r3, r1, #31
 8007c2e:	d502      	bpl.n	8007c36 <_printf_i+0x162>
 8007c30:	2320      	movs	r3, #32
 8007c32:	4319      	orrs	r1, r3
 8007c34:	6021      	str	r1, [r4, #0]
 8007c36:	2710      	movs	r7, #16
 8007c38:	2d00      	cmp	r5, #0
 8007c3a:	d1b2      	bne.n	8007ba2 <_printf_i+0xce>
 8007c3c:	2320      	movs	r3, #32
 8007c3e:	6822      	ldr	r2, [r4, #0]
 8007c40:	439a      	bics	r2, r3
 8007c42:	6022      	str	r2, [r4, #0]
 8007c44:	e7ad      	b.n	8007ba2 <_printf_i+0xce>
 8007c46:	2220      	movs	r2, #32
 8007c48:	6809      	ldr	r1, [r1, #0]
 8007c4a:	430a      	orrs	r2, r1
 8007c4c:	6022      	str	r2, [r4, #0]
 8007c4e:	0022      	movs	r2, r4
 8007c50:	2178      	movs	r1, #120	; 0x78
 8007c52:	3245      	adds	r2, #69	; 0x45
 8007c54:	7011      	strb	r1, [r2, #0]
 8007c56:	4a27      	ldr	r2, [pc, #156]	; (8007cf4 <_printf_i+0x220>)
 8007c58:	e7e1      	b.n	8007c1e <_printf_i+0x14a>
 8007c5a:	0648      	lsls	r0, r1, #25
 8007c5c:	d5e6      	bpl.n	8007c2c <_printf_i+0x158>
 8007c5e:	b2ad      	uxth	r5, r5
 8007c60:	e7e4      	b.n	8007c2c <_printf_i+0x158>
 8007c62:	681a      	ldr	r2, [r3, #0]
 8007c64:	680d      	ldr	r5, [r1, #0]
 8007c66:	1d10      	adds	r0, r2, #4
 8007c68:	6949      	ldr	r1, [r1, #20]
 8007c6a:	6018      	str	r0, [r3, #0]
 8007c6c:	6813      	ldr	r3, [r2, #0]
 8007c6e:	062e      	lsls	r6, r5, #24
 8007c70:	d501      	bpl.n	8007c76 <_printf_i+0x1a2>
 8007c72:	6019      	str	r1, [r3, #0]
 8007c74:	e002      	b.n	8007c7c <_printf_i+0x1a8>
 8007c76:	066d      	lsls	r5, r5, #25
 8007c78:	d5fb      	bpl.n	8007c72 <_printf_i+0x19e>
 8007c7a:	8019      	strh	r1, [r3, #0]
 8007c7c:	2300      	movs	r3, #0
 8007c7e:	9e04      	ldr	r6, [sp, #16]
 8007c80:	6123      	str	r3, [r4, #16]
 8007c82:	e7bb      	b.n	8007bfc <_printf_i+0x128>
 8007c84:	681a      	ldr	r2, [r3, #0]
 8007c86:	1d11      	adds	r1, r2, #4
 8007c88:	6019      	str	r1, [r3, #0]
 8007c8a:	6816      	ldr	r6, [r2, #0]
 8007c8c:	2100      	movs	r1, #0
 8007c8e:	0030      	movs	r0, r6
 8007c90:	6862      	ldr	r2, [r4, #4]
 8007c92:	f000 ff05 	bl	8008aa0 <memchr>
 8007c96:	2800      	cmp	r0, #0
 8007c98:	d001      	beq.n	8007c9e <_printf_i+0x1ca>
 8007c9a:	1b80      	subs	r0, r0, r6
 8007c9c:	6060      	str	r0, [r4, #4]
 8007c9e:	6863      	ldr	r3, [r4, #4]
 8007ca0:	6123      	str	r3, [r4, #16]
 8007ca2:	2300      	movs	r3, #0
 8007ca4:	9a04      	ldr	r2, [sp, #16]
 8007ca6:	7013      	strb	r3, [r2, #0]
 8007ca8:	e7a8      	b.n	8007bfc <_printf_i+0x128>
 8007caa:	6923      	ldr	r3, [r4, #16]
 8007cac:	0032      	movs	r2, r6
 8007cae:	9906      	ldr	r1, [sp, #24]
 8007cb0:	9805      	ldr	r0, [sp, #20]
 8007cb2:	9d07      	ldr	r5, [sp, #28]
 8007cb4:	47a8      	blx	r5
 8007cb6:	1c43      	adds	r3, r0, #1
 8007cb8:	d0aa      	beq.n	8007c10 <_printf_i+0x13c>
 8007cba:	6823      	ldr	r3, [r4, #0]
 8007cbc:	079b      	lsls	r3, r3, #30
 8007cbe:	d415      	bmi.n	8007cec <_printf_i+0x218>
 8007cc0:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8007cc2:	68e0      	ldr	r0, [r4, #12]
 8007cc4:	4298      	cmp	r0, r3
 8007cc6:	daa5      	bge.n	8007c14 <_printf_i+0x140>
 8007cc8:	0018      	movs	r0, r3
 8007cca:	e7a3      	b.n	8007c14 <_printf_i+0x140>
 8007ccc:	0022      	movs	r2, r4
 8007cce:	2301      	movs	r3, #1
 8007cd0:	9906      	ldr	r1, [sp, #24]
 8007cd2:	9805      	ldr	r0, [sp, #20]
 8007cd4:	9e07      	ldr	r6, [sp, #28]
 8007cd6:	3219      	adds	r2, #25
 8007cd8:	47b0      	blx	r6
 8007cda:	1c43      	adds	r3, r0, #1
 8007cdc:	d098      	beq.n	8007c10 <_printf_i+0x13c>
 8007cde:	3501      	adds	r5, #1
 8007ce0:	68e3      	ldr	r3, [r4, #12]
 8007ce2:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8007ce4:	1a9b      	subs	r3, r3, r2
 8007ce6:	42ab      	cmp	r3, r5
 8007ce8:	dcf0      	bgt.n	8007ccc <_printf_i+0x1f8>
 8007cea:	e7e9      	b.n	8007cc0 <_printf_i+0x1ec>
 8007cec:	2500      	movs	r5, #0
 8007cee:	e7f7      	b.n	8007ce0 <_printf_i+0x20c>
 8007cf0:	0800a4fa 	.word	0x0800a4fa
 8007cf4:	0800a50b 	.word	0x0800a50b

08007cf8 <siprintf>:
 8007cf8:	b40e      	push	{r1, r2, r3}
 8007cfa:	b500      	push	{lr}
 8007cfc:	490b      	ldr	r1, [pc, #44]	; (8007d2c <siprintf+0x34>)
 8007cfe:	b09c      	sub	sp, #112	; 0x70
 8007d00:	ab1d      	add	r3, sp, #116	; 0x74
 8007d02:	9002      	str	r0, [sp, #8]
 8007d04:	9006      	str	r0, [sp, #24]
 8007d06:	9107      	str	r1, [sp, #28]
 8007d08:	9104      	str	r1, [sp, #16]
 8007d0a:	4809      	ldr	r0, [pc, #36]	; (8007d30 <siprintf+0x38>)
 8007d0c:	4909      	ldr	r1, [pc, #36]	; (8007d34 <siprintf+0x3c>)
 8007d0e:	cb04      	ldmia	r3!, {r2}
 8007d10:	9105      	str	r1, [sp, #20]
 8007d12:	6800      	ldr	r0, [r0, #0]
 8007d14:	a902      	add	r1, sp, #8
 8007d16:	9301      	str	r3, [sp, #4]
 8007d18:	f001 fbe2 	bl	80094e0 <_svfiprintf_r>
 8007d1c:	2300      	movs	r3, #0
 8007d1e:	9a02      	ldr	r2, [sp, #8]
 8007d20:	7013      	strb	r3, [r2, #0]
 8007d22:	b01c      	add	sp, #112	; 0x70
 8007d24:	bc08      	pop	{r3}
 8007d26:	b003      	add	sp, #12
 8007d28:	4718      	bx	r3
 8007d2a:	46c0      	nop			; (mov r8, r8)
 8007d2c:	7fffffff 	.word	0x7fffffff
 8007d30:	20000014 	.word	0x20000014
 8007d34:	ffff0208 	.word	0xffff0208

08007d38 <quorem>:
 8007d38:	b5f0      	push	{r4, r5, r6, r7, lr}
 8007d3a:	0006      	movs	r6, r0
 8007d3c:	690b      	ldr	r3, [r1, #16]
 8007d3e:	6932      	ldr	r2, [r6, #16]
 8007d40:	b087      	sub	sp, #28
 8007d42:	2000      	movs	r0, #0
 8007d44:	9103      	str	r1, [sp, #12]
 8007d46:	429a      	cmp	r2, r3
 8007d48:	db65      	blt.n	8007e16 <quorem+0xde>
 8007d4a:	3b01      	subs	r3, #1
 8007d4c:	009c      	lsls	r4, r3, #2
 8007d4e:	9300      	str	r3, [sp, #0]
 8007d50:	000b      	movs	r3, r1
 8007d52:	3314      	adds	r3, #20
 8007d54:	9305      	str	r3, [sp, #20]
 8007d56:	191b      	adds	r3, r3, r4
 8007d58:	9304      	str	r3, [sp, #16]
 8007d5a:	0033      	movs	r3, r6
 8007d5c:	3314      	adds	r3, #20
 8007d5e:	9302      	str	r3, [sp, #8]
 8007d60:	191c      	adds	r4, r3, r4
 8007d62:	9b04      	ldr	r3, [sp, #16]
 8007d64:	6827      	ldr	r7, [r4, #0]
 8007d66:	681b      	ldr	r3, [r3, #0]
 8007d68:	0038      	movs	r0, r7
 8007d6a:	1c5d      	adds	r5, r3, #1
 8007d6c:	0029      	movs	r1, r5
 8007d6e:	9301      	str	r3, [sp, #4]
 8007d70:	f7f8 f9e4 	bl	800013c <__udivsi3>
 8007d74:	9001      	str	r0, [sp, #4]
 8007d76:	42af      	cmp	r7, r5
 8007d78:	d324      	bcc.n	8007dc4 <quorem+0x8c>
 8007d7a:	2500      	movs	r5, #0
 8007d7c:	46ac      	mov	ip, r5
 8007d7e:	9802      	ldr	r0, [sp, #8]
 8007d80:	9f05      	ldr	r7, [sp, #20]
 8007d82:	cf08      	ldmia	r7!, {r3}
 8007d84:	9a01      	ldr	r2, [sp, #4]
 8007d86:	b299      	uxth	r1, r3
 8007d88:	4351      	muls	r1, r2
 8007d8a:	0c1b      	lsrs	r3, r3, #16
 8007d8c:	4353      	muls	r3, r2
 8007d8e:	1949      	adds	r1, r1, r5
 8007d90:	0c0a      	lsrs	r2, r1, #16
 8007d92:	189b      	adds	r3, r3, r2
 8007d94:	6802      	ldr	r2, [r0, #0]
 8007d96:	b289      	uxth	r1, r1
 8007d98:	b292      	uxth	r2, r2
 8007d9a:	4462      	add	r2, ip
 8007d9c:	1a52      	subs	r2, r2, r1
 8007d9e:	6801      	ldr	r1, [r0, #0]
 8007da0:	0c1d      	lsrs	r5, r3, #16
 8007da2:	0c09      	lsrs	r1, r1, #16
 8007da4:	b29b      	uxth	r3, r3
 8007da6:	1acb      	subs	r3, r1, r3
 8007da8:	1411      	asrs	r1, r2, #16
 8007daa:	185b      	adds	r3, r3, r1
 8007dac:	1419      	asrs	r1, r3, #16
 8007dae:	b292      	uxth	r2, r2
 8007db0:	041b      	lsls	r3, r3, #16
 8007db2:	431a      	orrs	r2, r3
 8007db4:	9b04      	ldr	r3, [sp, #16]
 8007db6:	468c      	mov	ip, r1
 8007db8:	c004      	stmia	r0!, {r2}
 8007dba:	42bb      	cmp	r3, r7
 8007dbc:	d2e1      	bcs.n	8007d82 <quorem+0x4a>
 8007dbe:	6823      	ldr	r3, [r4, #0]
 8007dc0:	2b00      	cmp	r3, #0
 8007dc2:	d030      	beq.n	8007e26 <quorem+0xee>
 8007dc4:	0030      	movs	r0, r6
 8007dc6:	9903      	ldr	r1, [sp, #12]
 8007dc8:	f001 f902 	bl	8008fd0 <__mcmp>
 8007dcc:	2800      	cmp	r0, #0
 8007dce:	db21      	blt.n	8007e14 <quorem+0xdc>
 8007dd0:	0030      	movs	r0, r6
 8007dd2:	2400      	movs	r4, #0
 8007dd4:	9b01      	ldr	r3, [sp, #4]
 8007dd6:	9903      	ldr	r1, [sp, #12]
 8007dd8:	3301      	adds	r3, #1
 8007dda:	9301      	str	r3, [sp, #4]
 8007ddc:	3014      	adds	r0, #20
 8007dde:	3114      	adds	r1, #20
 8007de0:	6803      	ldr	r3, [r0, #0]
 8007de2:	c920      	ldmia	r1!, {r5}
 8007de4:	b29a      	uxth	r2, r3
 8007de6:	1914      	adds	r4, r2, r4
 8007de8:	b2aa      	uxth	r2, r5
 8007dea:	1aa2      	subs	r2, r4, r2
 8007dec:	0c1b      	lsrs	r3, r3, #16
 8007dee:	0c2d      	lsrs	r5, r5, #16
 8007df0:	1414      	asrs	r4, r2, #16
 8007df2:	1b5b      	subs	r3, r3, r5
 8007df4:	191b      	adds	r3, r3, r4
 8007df6:	141c      	asrs	r4, r3, #16
 8007df8:	b292      	uxth	r2, r2
 8007dfa:	041b      	lsls	r3, r3, #16
 8007dfc:	4313      	orrs	r3, r2
 8007dfe:	c008      	stmia	r0!, {r3}
 8007e00:	9b04      	ldr	r3, [sp, #16]
 8007e02:	428b      	cmp	r3, r1
 8007e04:	d2ec      	bcs.n	8007de0 <quorem+0xa8>
 8007e06:	9b00      	ldr	r3, [sp, #0]
 8007e08:	9a02      	ldr	r2, [sp, #8]
 8007e0a:	009b      	lsls	r3, r3, #2
 8007e0c:	18d3      	adds	r3, r2, r3
 8007e0e:	681a      	ldr	r2, [r3, #0]
 8007e10:	2a00      	cmp	r2, #0
 8007e12:	d015      	beq.n	8007e40 <quorem+0x108>
 8007e14:	9801      	ldr	r0, [sp, #4]
 8007e16:	b007      	add	sp, #28
 8007e18:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8007e1a:	6823      	ldr	r3, [r4, #0]
 8007e1c:	2b00      	cmp	r3, #0
 8007e1e:	d106      	bne.n	8007e2e <quorem+0xf6>
 8007e20:	9b00      	ldr	r3, [sp, #0]
 8007e22:	3b01      	subs	r3, #1
 8007e24:	9300      	str	r3, [sp, #0]
 8007e26:	9b02      	ldr	r3, [sp, #8]
 8007e28:	3c04      	subs	r4, #4
 8007e2a:	42a3      	cmp	r3, r4
 8007e2c:	d3f5      	bcc.n	8007e1a <quorem+0xe2>
 8007e2e:	9b00      	ldr	r3, [sp, #0]
 8007e30:	6133      	str	r3, [r6, #16]
 8007e32:	e7c7      	b.n	8007dc4 <quorem+0x8c>
 8007e34:	681a      	ldr	r2, [r3, #0]
 8007e36:	2a00      	cmp	r2, #0
 8007e38:	d106      	bne.n	8007e48 <quorem+0x110>
 8007e3a:	9a00      	ldr	r2, [sp, #0]
 8007e3c:	3a01      	subs	r2, #1
 8007e3e:	9200      	str	r2, [sp, #0]
 8007e40:	9a02      	ldr	r2, [sp, #8]
 8007e42:	3b04      	subs	r3, #4
 8007e44:	429a      	cmp	r2, r3
 8007e46:	d3f5      	bcc.n	8007e34 <quorem+0xfc>
 8007e48:	9b00      	ldr	r3, [sp, #0]
 8007e4a:	6133      	str	r3, [r6, #16]
 8007e4c:	e7e2      	b.n	8007e14 <quorem+0xdc>
	...

08007e50 <_dtoa_r>:
 8007e50:	b5f0      	push	{r4, r5, r6, r7, lr}
 8007e52:	b09d      	sub	sp, #116	; 0x74
 8007e54:	9202      	str	r2, [sp, #8]
 8007e56:	9303      	str	r3, [sp, #12]
 8007e58:	9b02      	ldr	r3, [sp, #8]
 8007e5a:	9c03      	ldr	r4, [sp, #12]
 8007e5c:	9308      	str	r3, [sp, #32]
 8007e5e:	9409      	str	r4, [sp, #36]	; 0x24
 8007e60:	6a44      	ldr	r4, [r0, #36]	; 0x24
 8007e62:	0007      	movs	r7, r0
 8007e64:	9d25      	ldr	r5, [sp, #148]	; 0x94
 8007e66:	2c00      	cmp	r4, #0
 8007e68:	d10e      	bne.n	8007e88 <_dtoa_r+0x38>
 8007e6a:	2010      	movs	r0, #16
 8007e6c:	f000 fe0e 	bl	8008a8c <malloc>
 8007e70:	1e02      	subs	r2, r0, #0
 8007e72:	6278      	str	r0, [r7, #36]	; 0x24
 8007e74:	d104      	bne.n	8007e80 <_dtoa_r+0x30>
 8007e76:	21ea      	movs	r1, #234	; 0xea
 8007e78:	4bc7      	ldr	r3, [pc, #796]	; (8008198 <_dtoa_r+0x348>)
 8007e7a:	48c8      	ldr	r0, [pc, #800]	; (800819c <_dtoa_r+0x34c>)
 8007e7c:	f001 fc42 	bl	8009704 <__assert_func>
 8007e80:	6044      	str	r4, [r0, #4]
 8007e82:	6084      	str	r4, [r0, #8]
 8007e84:	6004      	str	r4, [r0, #0]
 8007e86:	60c4      	str	r4, [r0, #12]
 8007e88:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007e8a:	6819      	ldr	r1, [r3, #0]
 8007e8c:	2900      	cmp	r1, #0
 8007e8e:	d00a      	beq.n	8007ea6 <_dtoa_r+0x56>
 8007e90:	685a      	ldr	r2, [r3, #4]
 8007e92:	2301      	movs	r3, #1
 8007e94:	4093      	lsls	r3, r2
 8007e96:	604a      	str	r2, [r1, #4]
 8007e98:	608b      	str	r3, [r1, #8]
 8007e9a:	0038      	movs	r0, r7
 8007e9c:	f000 fe58 	bl	8008b50 <_Bfree>
 8007ea0:	2200      	movs	r2, #0
 8007ea2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007ea4:	601a      	str	r2, [r3, #0]
 8007ea6:	9b03      	ldr	r3, [sp, #12]
 8007ea8:	2b00      	cmp	r3, #0
 8007eaa:	da20      	bge.n	8007eee <_dtoa_r+0x9e>
 8007eac:	2301      	movs	r3, #1
 8007eae:	602b      	str	r3, [r5, #0]
 8007eb0:	9b03      	ldr	r3, [sp, #12]
 8007eb2:	005b      	lsls	r3, r3, #1
 8007eb4:	085b      	lsrs	r3, r3, #1
 8007eb6:	9309      	str	r3, [sp, #36]	; 0x24
 8007eb8:	9d09      	ldr	r5, [sp, #36]	; 0x24
 8007eba:	4bb9      	ldr	r3, [pc, #740]	; (80081a0 <_dtoa_r+0x350>)
 8007ebc:	4ab8      	ldr	r2, [pc, #736]	; (80081a0 <_dtoa_r+0x350>)
 8007ebe:	402b      	ands	r3, r5
 8007ec0:	4293      	cmp	r3, r2
 8007ec2:	d117      	bne.n	8007ef4 <_dtoa_r+0xa4>
 8007ec4:	4bb7      	ldr	r3, [pc, #732]	; (80081a4 <_dtoa_r+0x354>)
 8007ec6:	9a24      	ldr	r2, [sp, #144]	; 0x90
 8007ec8:	0328      	lsls	r0, r5, #12
 8007eca:	6013      	str	r3, [r2, #0]
 8007ecc:	9b02      	ldr	r3, [sp, #8]
 8007ece:	0b00      	lsrs	r0, r0, #12
 8007ed0:	4318      	orrs	r0, r3
 8007ed2:	d101      	bne.n	8007ed8 <_dtoa_r+0x88>
 8007ed4:	f000 fdbf 	bl	8008a56 <_dtoa_r+0xc06>
 8007ed8:	48b3      	ldr	r0, [pc, #716]	; (80081a8 <_dtoa_r+0x358>)
 8007eda:	9b26      	ldr	r3, [sp, #152]	; 0x98
 8007edc:	9006      	str	r0, [sp, #24]
 8007ede:	2b00      	cmp	r3, #0
 8007ee0:	d002      	beq.n	8007ee8 <_dtoa_r+0x98>
 8007ee2:	4bb2      	ldr	r3, [pc, #712]	; (80081ac <_dtoa_r+0x35c>)
 8007ee4:	9a26      	ldr	r2, [sp, #152]	; 0x98
 8007ee6:	6013      	str	r3, [r2, #0]
 8007ee8:	9806      	ldr	r0, [sp, #24]
 8007eea:	b01d      	add	sp, #116	; 0x74
 8007eec:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8007eee:	2300      	movs	r3, #0
 8007ef0:	602b      	str	r3, [r5, #0]
 8007ef2:	e7e1      	b.n	8007eb8 <_dtoa_r+0x68>
 8007ef4:	9b08      	ldr	r3, [sp, #32]
 8007ef6:	9c09      	ldr	r4, [sp, #36]	; 0x24
 8007ef8:	9312      	str	r3, [sp, #72]	; 0x48
 8007efa:	9413      	str	r4, [sp, #76]	; 0x4c
 8007efc:	9812      	ldr	r0, [sp, #72]	; 0x48
 8007efe:	9913      	ldr	r1, [sp, #76]	; 0x4c
 8007f00:	2200      	movs	r2, #0
 8007f02:	2300      	movs	r3, #0
 8007f04:	f7f8 faa0 	bl	8000448 <__aeabi_dcmpeq>
 8007f08:	1e04      	subs	r4, r0, #0
 8007f0a:	d009      	beq.n	8007f20 <_dtoa_r+0xd0>
 8007f0c:	2301      	movs	r3, #1
 8007f0e:	9a24      	ldr	r2, [sp, #144]	; 0x90
 8007f10:	6013      	str	r3, [r2, #0]
 8007f12:	4ba7      	ldr	r3, [pc, #668]	; (80081b0 <_dtoa_r+0x360>)
 8007f14:	9306      	str	r3, [sp, #24]
 8007f16:	9b26      	ldr	r3, [sp, #152]	; 0x98
 8007f18:	2b00      	cmp	r3, #0
 8007f1a:	d0e5      	beq.n	8007ee8 <_dtoa_r+0x98>
 8007f1c:	4ba5      	ldr	r3, [pc, #660]	; (80081b4 <_dtoa_r+0x364>)
 8007f1e:	e7e1      	b.n	8007ee4 <_dtoa_r+0x94>
 8007f20:	ab1a      	add	r3, sp, #104	; 0x68
 8007f22:	9301      	str	r3, [sp, #4]
 8007f24:	ab1b      	add	r3, sp, #108	; 0x6c
 8007f26:	9300      	str	r3, [sp, #0]
 8007f28:	0038      	movs	r0, r7
 8007f2a:	9a12      	ldr	r2, [sp, #72]	; 0x48
 8007f2c:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 8007f2e:	f001 f903 	bl	8009138 <__d2b>
 8007f32:	006e      	lsls	r6, r5, #1
 8007f34:	9005      	str	r0, [sp, #20]
 8007f36:	0d76      	lsrs	r6, r6, #21
 8007f38:	d100      	bne.n	8007f3c <_dtoa_r+0xec>
 8007f3a:	e07c      	b.n	8008036 <_dtoa_r+0x1e6>
 8007f3c:	9812      	ldr	r0, [sp, #72]	; 0x48
 8007f3e:	9913      	ldr	r1, [sp, #76]	; 0x4c
 8007f40:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 8007f42:	4a9d      	ldr	r2, [pc, #628]	; (80081b8 <_dtoa_r+0x368>)
 8007f44:	031b      	lsls	r3, r3, #12
 8007f46:	0b1b      	lsrs	r3, r3, #12
 8007f48:	431a      	orrs	r2, r3
 8007f4a:	0011      	movs	r1, r2
 8007f4c:	4b9b      	ldr	r3, [pc, #620]	; (80081bc <_dtoa_r+0x36c>)
 8007f4e:	9418      	str	r4, [sp, #96]	; 0x60
 8007f50:	18f6      	adds	r6, r6, r3
 8007f52:	2200      	movs	r2, #0
 8007f54:	4b9a      	ldr	r3, [pc, #616]	; (80081c0 <_dtoa_r+0x370>)
 8007f56:	f7f9 fe25 	bl	8001ba4 <__aeabi_dsub>
 8007f5a:	4a9a      	ldr	r2, [pc, #616]	; (80081c4 <_dtoa_r+0x374>)
 8007f5c:	4b9a      	ldr	r3, [pc, #616]	; (80081c8 <_dtoa_r+0x378>)
 8007f5e:	f7f9 fbb5 	bl	80016cc <__aeabi_dmul>
 8007f62:	4a9a      	ldr	r2, [pc, #616]	; (80081cc <_dtoa_r+0x37c>)
 8007f64:	4b9a      	ldr	r3, [pc, #616]	; (80081d0 <_dtoa_r+0x380>)
 8007f66:	f7f8 fc73 	bl	8000850 <__aeabi_dadd>
 8007f6a:	0004      	movs	r4, r0
 8007f6c:	0030      	movs	r0, r6
 8007f6e:	000d      	movs	r5, r1
 8007f70:	f7fa f9fe 	bl	8002370 <__aeabi_i2d>
 8007f74:	4a97      	ldr	r2, [pc, #604]	; (80081d4 <_dtoa_r+0x384>)
 8007f76:	4b98      	ldr	r3, [pc, #608]	; (80081d8 <_dtoa_r+0x388>)
 8007f78:	f7f9 fba8 	bl	80016cc <__aeabi_dmul>
 8007f7c:	0002      	movs	r2, r0
 8007f7e:	000b      	movs	r3, r1
 8007f80:	0020      	movs	r0, r4
 8007f82:	0029      	movs	r1, r5
 8007f84:	f7f8 fc64 	bl	8000850 <__aeabi_dadd>
 8007f88:	0004      	movs	r4, r0
 8007f8a:	000d      	movs	r5, r1
 8007f8c:	f7fa f9ba 	bl	8002304 <__aeabi_d2iz>
 8007f90:	2200      	movs	r2, #0
 8007f92:	9002      	str	r0, [sp, #8]
 8007f94:	2300      	movs	r3, #0
 8007f96:	0020      	movs	r0, r4
 8007f98:	0029      	movs	r1, r5
 8007f9a:	f7f8 fa5b 	bl	8000454 <__aeabi_dcmplt>
 8007f9e:	2800      	cmp	r0, #0
 8007fa0:	d00b      	beq.n	8007fba <_dtoa_r+0x16a>
 8007fa2:	9802      	ldr	r0, [sp, #8]
 8007fa4:	f7fa f9e4 	bl	8002370 <__aeabi_i2d>
 8007fa8:	002b      	movs	r3, r5
 8007faa:	0022      	movs	r2, r4
 8007fac:	f7f8 fa4c 	bl	8000448 <__aeabi_dcmpeq>
 8007fb0:	4243      	negs	r3, r0
 8007fb2:	4158      	adcs	r0, r3
 8007fb4:	9b02      	ldr	r3, [sp, #8]
 8007fb6:	1a1b      	subs	r3, r3, r0
 8007fb8:	9302      	str	r3, [sp, #8]
 8007fba:	2301      	movs	r3, #1
 8007fbc:	9316      	str	r3, [sp, #88]	; 0x58
 8007fbe:	9b02      	ldr	r3, [sp, #8]
 8007fc0:	2b16      	cmp	r3, #22
 8007fc2:	d80f      	bhi.n	8007fe4 <_dtoa_r+0x194>
 8007fc4:	9812      	ldr	r0, [sp, #72]	; 0x48
 8007fc6:	9913      	ldr	r1, [sp, #76]	; 0x4c
 8007fc8:	00da      	lsls	r2, r3, #3
 8007fca:	4b84      	ldr	r3, [pc, #528]	; (80081dc <_dtoa_r+0x38c>)
 8007fcc:	189b      	adds	r3, r3, r2
 8007fce:	681a      	ldr	r2, [r3, #0]
 8007fd0:	685b      	ldr	r3, [r3, #4]
 8007fd2:	f7f8 fa3f 	bl	8000454 <__aeabi_dcmplt>
 8007fd6:	2800      	cmp	r0, #0
 8007fd8:	d049      	beq.n	800806e <_dtoa_r+0x21e>
 8007fda:	9b02      	ldr	r3, [sp, #8]
 8007fdc:	3b01      	subs	r3, #1
 8007fde:	9302      	str	r3, [sp, #8]
 8007fe0:	2300      	movs	r3, #0
 8007fe2:	9316      	str	r3, [sp, #88]	; 0x58
 8007fe4:	9b1a      	ldr	r3, [sp, #104]	; 0x68
 8007fe6:	1b9e      	subs	r6, r3, r6
 8007fe8:	2300      	movs	r3, #0
 8007fea:	930a      	str	r3, [sp, #40]	; 0x28
 8007fec:	0033      	movs	r3, r6
 8007fee:	3b01      	subs	r3, #1
 8007ff0:	930d      	str	r3, [sp, #52]	; 0x34
 8007ff2:	d504      	bpl.n	8007ffe <_dtoa_r+0x1ae>
 8007ff4:	2301      	movs	r3, #1
 8007ff6:	1b9b      	subs	r3, r3, r6
 8007ff8:	930a      	str	r3, [sp, #40]	; 0x28
 8007ffa:	2300      	movs	r3, #0
 8007ffc:	930d      	str	r3, [sp, #52]	; 0x34
 8007ffe:	9b02      	ldr	r3, [sp, #8]
 8008000:	2b00      	cmp	r3, #0
 8008002:	db36      	blt.n	8008072 <_dtoa_r+0x222>
 8008004:	9a02      	ldr	r2, [sp, #8]
 8008006:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8008008:	4694      	mov	ip, r2
 800800a:	4463      	add	r3, ip
 800800c:	930d      	str	r3, [sp, #52]	; 0x34
 800800e:	2300      	movs	r3, #0
 8008010:	9215      	str	r2, [sp, #84]	; 0x54
 8008012:	930e      	str	r3, [sp, #56]	; 0x38
 8008014:	9b22      	ldr	r3, [sp, #136]	; 0x88
 8008016:	2401      	movs	r4, #1
 8008018:	2b09      	cmp	r3, #9
 800801a:	d864      	bhi.n	80080e6 <_dtoa_r+0x296>
 800801c:	2b05      	cmp	r3, #5
 800801e:	dd02      	ble.n	8008026 <_dtoa_r+0x1d6>
 8008020:	2400      	movs	r4, #0
 8008022:	3b04      	subs	r3, #4
 8008024:	9322      	str	r3, [sp, #136]	; 0x88
 8008026:	9b22      	ldr	r3, [sp, #136]	; 0x88
 8008028:	1e98      	subs	r0, r3, #2
 800802a:	2803      	cmp	r0, #3
 800802c:	d864      	bhi.n	80080f8 <_dtoa_r+0x2a8>
 800802e:	f7f8 f871 	bl	8000114 <__gnu_thumb1_case_uqi>
 8008032:	3829      	.short	0x3829
 8008034:	5836      	.short	0x5836
 8008036:	9b1a      	ldr	r3, [sp, #104]	; 0x68
 8008038:	9a1b      	ldr	r2, [sp, #108]	; 0x6c
 800803a:	189e      	adds	r6, r3, r2
 800803c:	4b68      	ldr	r3, [pc, #416]	; (80081e0 <_dtoa_r+0x390>)
 800803e:	18f2      	adds	r2, r6, r3
 8008040:	2a20      	cmp	r2, #32
 8008042:	dd0f      	ble.n	8008064 <_dtoa_r+0x214>
 8008044:	2340      	movs	r3, #64	; 0x40
 8008046:	1a9b      	subs	r3, r3, r2
 8008048:	409d      	lsls	r5, r3
 800804a:	4b66      	ldr	r3, [pc, #408]	; (80081e4 <_dtoa_r+0x394>)
 800804c:	9802      	ldr	r0, [sp, #8]
 800804e:	18f3      	adds	r3, r6, r3
 8008050:	40d8      	lsrs	r0, r3
 8008052:	4328      	orrs	r0, r5
 8008054:	f7fa f9bc 	bl	80023d0 <__aeabi_ui2d>
 8008058:	2301      	movs	r3, #1
 800805a:	4c63      	ldr	r4, [pc, #396]	; (80081e8 <_dtoa_r+0x398>)
 800805c:	3e01      	subs	r6, #1
 800805e:	1909      	adds	r1, r1, r4
 8008060:	9318      	str	r3, [sp, #96]	; 0x60
 8008062:	e776      	b.n	8007f52 <_dtoa_r+0x102>
 8008064:	2320      	movs	r3, #32
 8008066:	9802      	ldr	r0, [sp, #8]
 8008068:	1a9b      	subs	r3, r3, r2
 800806a:	4098      	lsls	r0, r3
 800806c:	e7f2      	b.n	8008054 <_dtoa_r+0x204>
 800806e:	9016      	str	r0, [sp, #88]	; 0x58
 8008070:	e7b8      	b.n	8007fe4 <_dtoa_r+0x194>
 8008072:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8008074:	9a02      	ldr	r2, [sp, #8]
 8008076:	1a9b      	subs	r3, r3, r2
 8008078:	930a      	str	r3, [sp, #40]	; 0x28
 800807a:	4253      	negs	r3, r2
 800807c:	930e      	str	r3, [sp, #56]	; 0x38
 800807e:	2300      	movs	r3, #0
 8008080:	9315      	str	r3, [sp, #84]	; 0x54
 8008082:	e7c7      	b.n	8008014 <_dtoa_r+0x1c4>
 8008084:	2300      	movs	r3, #0
 8008086:	930f      	str	r3, [sp, #60]	; 0x3c
 8008088:	9b23      	ldr	r3, [sp, #140]	; 0x8c
 800808a:	930c      	str	r3, [sp, #48]	; 0x30
 800808c:	9307      	str	r3, [sp, #28]
 800808e:	2b00      	cmp	r3, #0
 8008090:	dc13      	bgt.n	80080ba <_dtoa_r+0x26a>
 8008092:	2301      	movs	r3, #1
 8008094:	001a      	movs	r2, r3
 8008096:	930c      	str	r3, [sp, #48]	; 0x30
 8008098:	9307      	str	r3, [sp, #28]
 800809a:	9223      	str	r2, [sp, #140]	; 0x8c
 800809c:	e00d      	b.n	80080ba <_dtoa_r+0x26a>
 800809e:	2301      	movs	r3, #1
 80080a0:	e7f1      	b.n	8008086 <_dtoa_r+0x236>
 80080a2:	2300      	movs	r3, #0
 80080a4:	9a23      	ldr	r2, [sp, #140]	; 0x8c
 80080a6:	930f      	str	r3, [sp, #60]	; 0x3c
 80080a8:	4694      	mov	ip, r2
 80080aa:	9b02      	ldr	r3, [sp, #8]
 80080ac:	4463      	add	r3, ip
 80080ae:	930c      	str	r3, [sp, #48]	; 0x30
 80080b0:	3301      	adds	r3, #1
 80080b2:	9307      	str	r3, [sp, #28]
 80080b4:	2b00      	cmp	r3, #0
 80080b6:	dc00      	bgt.n	80080ba <_dtoa_r+0x26a>
 80080b8:	2301      	movs	r3, #1
 80080ba:	2200      	movs	r2, #0
 80080bc:	6a78      	ldr	r0, [r7, #36]	; 0x24
 80080be:	6042      	str	r2, [r0, #4]
 80080c0:	3204      	adds	r2, #4
 80080c2:	0015      	movs	r5, r2
 80080c4:	3514      	adds	r5, #20
 80080c6:	6841      	ldr	r1, [r0, #4]
 80080c8:	429d      	cmp	r5, r3
 80080ca:	d919      	bls.n	8008100 <_dtoa_r+0x2b0>
 80080cc:	0038      	movs	r0, r7
 80080ce:	f000 fcfb 	bl	8008ac8 <_Balloc>
 80080d2:	9006      	str	r0, [sp, #24]
 80080d4:	2800      	cmp	r0, #0
 80080d6:	d117      	bne.n	8008108 <_dtoa_r+0x2b8>
 80080d8:	21d5      	movs	r1, #213	; 0xd5
 80080da:	0002      	movs	r2, r0
 80080dc:	4b43      	ldr	r3, [pc, #268]	; (80081ec <_dtoa_r+0x39c>)
 80080de:	0049      	lsls	r1, r1, #1
 80080e0:	e6cb      	b.n	8007e7a <_dtoa_r+0x2a>
 80080e2:	2301      	movs	r3, #1
 80080e4:	e7de      	b.n	80080a4 <_dtoa_r+0x254>
 80080e6:	2300      	movs	r3, #0
 80080e8:	940f      	str	r4, [sp, #60]	; 0x3c
 80080ea:	9322      	str	r3, [sp, #136]	; 0x88
 80080ec:	3b01      	subs	r3, #1
 80080ee:	930c      	str	r3, [sp, #48]	; 0x30
 80080f0:	9307      	str	r3, [sp, #28]
 80080f2:	2200      	movs	r2, #0
 80080f4:	3313      	adds	r3, #19
 80080f6:	e7d0      	b.n	800809a <_dtoa_r+0x24a>
 80080f8:	2301      	movs	r3, #1
 80080fa:	930f      	str	r3, [sp, #60]	; 0x3c
 80080fc:	3b02      	subs	r3, #2
 80080fe:	e7f6      	b.n	80080ee <_dtoa_r+0x29e>
 8008100:	3101      	adds	r1, #1
 8008102:	6041      	str	r1, [r0, #4]
 8008104:	0052      	lsls	r2, r2, #1
 8008106:	e7dc      	b.n	80080c2 <_dtoa_r+0x272>
 8008108:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800810a:	9a06      	ldr	r2, [sp, #24]
 800810c:	601a      	str	r2, [r3, #0]
 800810e:	9b07      	ldr	r3, [sp, #28]
 8008110:	2b0e      	cmp	r3, #14
 8008112:	d900      	bls.n	8008116 <_dtoa_r+0x2c6>
 8008114:	e0eb      	b.n	80082ee <_dtoa_r+0x49e>
 8008116:	2c00      	cmp	r4, #0
 8008118:	d100      	bne.n	800811c <_dtoa_r+0x2cc>
 800811a:	e0e8      	b.n	80082ee <_dtoa_r+0x49e>
 800811c:	9b02      	ldr	r3, [sp, #8]
 800811e:	2b00      	cmp	r3, #0
 8008120:	dd68      	ble.n	80081f4 <_dtoa_r+0x3a4>
 8008122:	001a      	movs	r2, r3
 8008124:	210f      	movs	r1, #15
 8008126:	4b2d      	ldr	r3, [pc, #180]	; (80081dc <_dtoa_r+0x38c>)
 8008128:	400a      	ands	r2, r1
 800812a:	00d2      	lsls	r2, r2, #3
 800812c:	189b      	adds	r3, r3, r2
 800812e:	681d      	ldr	r5, [r3, #0]
 8008130:	685e      	ldr	r6, [r3, #4]
 8008132:	9b02      	ldr	r3, [sp, #8]
 8008134:	111c      	asrs	r4, r3, #4
 8008136:	2302      	movs	r3, #2
 8008138:	9310      	str	r3, [sp, #64]	; 0x40
 800813a:	9b02      	ldr	r3, [sp, #8]
 800813c:	05db      	lsls	r3, r3, #23
 800813e:	d50b      	bpl.n	8008158 <_dtoa_r+0x308>
 8008140:	4b2b      	ldr	r3, [pc, #172]	; (80081f0 <_dtoa_r+0x3a0>)
 8008142:	400c      	ands	r4, r1
 8008144:	6a1a      	ldr	r2, [r3, #32]
 8008146:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008148:	9812      	ldr	r0, [sp, #72]	; 0x48
 800814a:	9913      	ldr	r1, [sp, #76]	; 0x4c
 800814c:	f7f8 febc 	bl	8000ec8 <__aeabi_ddiv>
 8008150:	2303      	movs	r3, #3
 8008152:	9008      	str	r0, [sp, #32]
 8008154:	9109      	str	r1, [sp, #36]	; 0x24
 8008156:	9310      	str	r3, [sp, #64]	; 0x40
 8008158:	4b25      	ldr	r3, [pc, #148]	; (80081f0 <_dtoa_r+0x3a0>)
 800815a:	9314      	str	r3, [sp, #80]	; 0x50
 800815c:	2c00      	cmp	r4, #0
 800815e:	d108      	bne.n	8008172 <_dtoa_r+0x322>
 8008160:	9808      	ldr	r0, [sp, #32]
 8008162:	9909      	ldr	r1, [sp, #36]	; 0x24
 8008164:	002a      	movs	r2, r5
 8008166:	0033      	movs	r3, r6
 8008168:	f7f8 feae 	bl	8000ec8 <__aeabi_ddiv>
 800816c:	9008      	str	r0, [sp, #32]
 800816e:	9109      	str	r1, [sp, #36]	; 0x24
 8008170:	e05c      	b.n	800822c <_dtoa_r+0x3dc>
 8008172:	2301      	movs	r3, #1
 8008174:	421c      	tst	r4, r3
 8008176:	d00b      	beq.n	8008190 <_dtoa_r+0x340>
 8008178:	9b10      	ldr	r3, [sp, #64]	; 0x40
 800817a:	0028      	movs	r0, r5
 800817c:	3301      	adds	r3, #1
 800817e:	9310      	str	r3, [sp, #64]	; 0x40
 8008180:	9b14      	ldr	r3, [sp, #80]	; 0x50
 8008182:	0031      	movs	r1, r6
 8008184:	681a      	ldr	r2, [r3, #0]
 8008186:	685b      	ldr	r3, [r3, #4]
 8008188:	f7f9 faa0 	bl	80016cc <__aeabi_dmul>
 800818c:	0005      	movs	r5, r0
 800818e:	000e      	movs	r6, r1
 8008190:	9b14      	ldr	r3, [sp, #80]	; 0x50
 8008192:	1064      	asrs	r4, r4, #1
 8008194:	3308      	adds	r3, #8
 8008196:	e7e0      	b.n	800815a <_dtoa_r+0x30a>
 8008198:	0800a529 	.word	0x0800a529
 800819c:	0800a540 	.word	0x0800a540
 80081a0:	7ff00000 	.word	0x7ff00000
 80081a4:	0000270f 	.word	0x0000270f
 80081a8:	0800a525 	.word	0x0800a525
 80081ac:	0800a528 	.word	0x0800a528
 80081b0:	0800a4f8 	.word	0x0800a4f8
 80081b4:	0800a4f9 	.word	0x0800a4f9
 80081b8:	3ff00000 	.word	0x3ff00000
 80081bc:	fffffc01 	.word	0xfffffc01
 80081c0:	3ff80000 	.word	0x3ff80000
 80081c4:	636f4361 	.word	0x636f4361
 80081c8:	3fd287a7 	.word	0x3fd287a7
 80081cc:	8b60c8b3 	.word	0x8b60c8b3
 80081d0:	3fc68a28 	.word	0x3fc68a28
 80081d4:	509f79fb 	.word	0x509f79fb
 80081d8:	3fd34413 	.word	0x3fd34413
 80081dc:	0800a630 	.word	0x0800a630
 80081e0:	00000432 	.word	0x00000432
 80081e4:	00000412 	.word	0x00000412
 80081e8:	fe100000 	.word	0xfe100000
 80081ec:	0800a59b 	.word	0x0800a59b
 80081f0:	0800a608 	.word	0x0800a608
 80081f4:	2302      	movs	r3, #2
 80081f6:	9310      	str	r3, [sp, #64]	; 0x40
 80081f8:	9b02      	ldr	r3, [sp, #8]
 80081fa:	2b00      	cmp	r3, #0
 80081fc:	d016      	beq.n	800822c <_dtoa_r+0x3dc>
 80081fe:	9812      	ldr	r0, [sp, #72]	; 0x48
 8008200:	9913      	ldr	r1, [sp, #76]	; 0x4c
 8008202:	425c      	negs	r4, r3
 8008204:	230f      	movs	r3, #15
 8008206:	4ab6      	ldr	r2, [pc, #728]	; (80084e0 <_dtoa_r+0x690>)
 8008208:	4023      	ands	r3, r4
 800820a:	00db      	lsls	r3, r3, #3
 800820c:	18d3      	adds	r3, r2, r3
 800820e:	681a      	ldr	r2, [r3, #0]
 8008210:	685b      	ldr	r3, [r3, #4]
 8008212:	f7f9 fa5b 	bl	80016cc <__aeabi_dmul>
 8008216:	2601      	movs	r6, #1
 8008218:	2300      	movs	r3, #0
 800821a:	9008      	str	r0, [sp, #32]
 800821c:	9109      	str	r1, [sp, #36]	; 0x24
 800821e:	4db1      	ldr	r5, [pc, #708]	; (80084e4 <_dtoa_r+0x694>)
 8008220:	1124      	asrs	r4, r4, #4
 8008222:	2c00      	cmp	r4, #0
 8008224:	d000      	beq.n	8008228 <_dtoa_r+0x3d8>
 8008226:	e094      	b.n	8008352 <_dtoa_r+0x502>
 8008228:	2b00      	cmp	r3, #0
 800822a:	d19f      	bne.n	800816c <_dtoa_r+0x31c>
 800822c:	9b16      	ldr	r3, [sp, #88]	; 0x58
 800822e:	2b00      	cmp	r3, #0
 8008230:	d100      	bne.n	8008234 <_dtoa_r+0x3e4>
 8008232:	e09b      	b.n	800836c <_dtoa_r+0x51c>
 8008234:	9c08      	ldr	r4, [sp, #32]
 8008236:	9d09      	ldr	r5, [sp, #36]	; 0x24
 8008238:	2200      	movs	r2, #0
 800823a:	0020      	movs	r0, r4
 800823c:	0029      	movs	r1, r5
 800823e:	4baa      	ldr	r3, [pc, #680]	; (80084e8 <_dtoa_r+0x698>)
 8008240:	f7f8 f908 	bl	8000454 <__aeabi_dcmplt>
 8008244:	2800      	cmp	r0, #0
 8008246:	d100      	bne.n	800824a <_dtoa_r+0x3fa>
 8008248:	e090      	b.n	800836c <_dtoa_r+0x51c>
 800824a:	9b07      	ldr	r3, [sp, #28]
 800824c:	2b00      	cmp	r3, #0
 800824e:	d100      	bne.n	8008252 <_dtoa_r+0x402>
 8008250:	e08c      	b.n	800836c <_dtoa_r+0x51c>
 8008252:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8008254:	2b00      	cmp	r3, #0
 8008256:	dd46      	ble.n	80082e6 <_dtoa_r+0x496>
 8008258:	9b02      	ldr	r3, [sp, #8]
 800825a:	2200      	movs	r2, #0
 800825c:	0020      	movs	r0, r4
 800825e:	0029      	movs	r1, r5
 8008260:	1e5e      	subs	r6, r3, #1
 8008262:	4ba2      	ldr	r3, [pc, #648]	; (80084ec <_dtoa_r+0x69c>)
 8008264:	f7f9 fa32 	bl	80016cc <__aeabi_dmul>
 8008268:	9b10      	ldr	r3, [sp, #64]	; 0x40
 800826a:	9008      	str	r0, [sp, #32]
 800826c:	9109      	str	r1, [sp, #36]	; 0x24
 800826e:	3301      	adds	r3, #1
 8008270:	9310      	str	r3, [sp, #64]	; 0x40
 8008272:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8008274:	9810      	ldr	r0, [sp, #64]	; 0x40
 8008276:	9c08      	ldr	r4, [sp, #32]
 8008278:	9d09      	ldr	r5, [sp, #36]	; 0x24
 800827a:	9314      	str	r3, [sp, #80]	; 0x50
 800827c:	f7fa f878 	bl	8002370 <__aeabi_i2d>
 8008280:	0022      	movs	r2, r4
 8008282:	002b      	movs	r3, r5
 8008284:	f7f9 fa22 	bl	80016cc <__aeabi_dmul>
 8008288:	2200      	movs	r2, #0
 800828a:	4b99      	ldr	r3, [pc, #612]	; (80084f0 <_dtoa_r+0x6a0>)
 800828c:	f7f8 fae0 	bl	8000850 <__aeabi_dadd>
 8008290:	9010      	str	r0, [sp, #64]	; 0x40
 8008292:	9111      	str	r1, [sp, #68]	; 0x44
 8008294:	9a10      	ldr	r2, [sp, #64]	; 0x40
 8008296:	9b11      	ldr	r3, [sp, #68]	; 0x44
 8008298:	9208      	str	r2, [sp, #32]
 800829a:	9309      	str	r3, [sp, #36]	; 0x24
 800829c:	4a95      	ldr	r2, [pc, #596]	; (80084f4 <_dtoa_r+0x6a4>)
 800829e:	9b11      	ldr	r3, [sp, #68]	; 0x44
 80082a0:	4694      	mov	ip, r2
 80082a2:	4463      	add	r3, ip
 80082a4:	9317      	str	r3, [sp, #92]	; 0x5c
 80082a6:	9309      	str	r3, [sp, #36]	; 0x24
 80082a8:	9b14      	ldr	r3, [sp, #80]	; 0x50
 80082aa:	2b00      	cmp	r3, #0
 80082ac:	d161      	bne.n	8008372 <_dtoa_r+0x522>
 80082ae:	2200      	movs	r2, #0
 80082b0:	0020      	movs	r0, r4
 80082b2:	0029      	movs	r1, r5
 80082b4:	4b90      	ldr	r3, [pc, #576]	; (80084f8 <_dtoa_r+0x6a8>)
 80082b6:	f7f9 fc75 	bl	8001ba4 <__aeabi_dsub>
 80082ba:	9a08      	ldr	r2, [sp, #32]
 80082bc:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 80082be:	0004      	movs	r4, r0
 80082c0:	000d      	movs	r5, r1
 80082c2:	f7f8 f8db 	bl	800047c <__aeabi_dcmpgt>
 80082c6:	2800      	cmp	r0, #0
 80082c8:	d000      	beq.n	80082cc <_dtoa_r+0x47c>
 80082ca:	e2af      	b.n	800882c <_dtoa_r+0x9dc>
 80082cc:	488b      	ldr	r0, [pc, #556]	; (80084fc <_dtoa_r+0x6ac>)
 80082ce:	9911      	ldr	r1, [sp, #68]	; 0x44
 80082d0:	4684      	mov	ip, r0
 80082d2:	4461      	add	r1, ip
 80082d4:	000b      	movs	r3, r1
 80082d6:	0020      	movs	r0, r4
 80082d8:	0029      	movs	r1, r5
 80082da:	9a08      	ldr	r2, [sp, #32]
 80082dc:	f7f8 f8ba 	bl	8000454 <__aeabi_dcmplt>
 80082e0:	2800      	cmp	r0, #0
 80082e2:	d000      	beq.n	80082e6 <_dtoa_r+0x496>
 80082e4:	e29f      	b.n	8008826 <_dtoa_r+0x9d6>
 80082e6:	9b12      	ldr	r3, [sp, #72]	; 0x48
 80082e8:	9c13      	ldr	r4, [sp, #76]	; 0x4c
 80082ea:	9308      	str	r3, [sp, #32]
 80082ec:	9409      	str	r4, [sp, #36]	; 0x24
 80082ee:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 80082f0:	2b00      	cmp	r3, #0
 80082f2:	da00      	bge.n	80082f6 <_dtoa_r+0x4a6>
 80082f4:	e172      	b.n	80085dc <_dtoa_r+0x78c>
 80082f6:	9a02      	ldr	r2, [sp, #8]
 80082f8:	2a0e      	cmp	r2, #14
 80082fa:	dd00      	ble.n	80082fe <_dtoa_r+0x4ae>
 80082fc:	e16e      	b.n	80085dc <_dtoa_r+0x78c>
 80082fe:	4b78      	ldr	r3, [pc, #480]	; (80084e0 <_dtoa_r+0x690>)
 8008300:	00d2      	lsls	r2, r2, #3
 8008302:	189b      	adds	r3, r3, r2
 8008304:	685c      	ldr	r4, [r3, #4]
 8008306:	681b      	ldr	r3, [r3, #0]
 8008308:	930a      	str	r3, [sp, #40]	; 0x28
 800830a:	940b      	str	r4, [sp, #44]	; 0x2c
 800830c:	9b23      	ldr	r3, [sp, #140]	; 0x8c
 800830e:	2b00      	cmp	r3, #0
 8008310:	db00      	blt.n	8008314 <_dtoa_r+0x4c4>
 8008312:	e0f7      	b.n	8008504 <_dtoa_r+0x6b4>
 8008314:	9b07      	ldr	r3, [sp, #28]
 8008316:	2b00      	cmp	r3, #0
 8008318:	dd00      	ble.n	800831c <_dtoa_r+0x4cc>
 800831a:	e0f3      	b.n	8008504 <_dtoa_r+0x6b4>
 800831c:	d000      	beq.n	8008320 <_dtoa_r+0x4d0>
 800831e:	e282      	b.n	8008826 <_dtoa_r+0x9d6>
 8008320:	980a      	ldr	r0, [sp, #40]	; 0x28
 8008322:	990b      	ldr	r1, [sp, #44]	; 0x2c
 8008324:	2200      	movs	r2, #0
 8008326:	4b74      	ldr	r3, [pc, #464]	; (80084f8 <_dtoa_r+0x6a8>)
 8008328:	f7f9 f9d0 	bl	80016cc <__aeabi_dmul>
 800832c:	9a08      	ldr	r2, [sp, #32]
 800832e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8008330:	f7f8 f8ae 	bl	8000490 <__aeabi_dcmpge>
 8008334:	9e07      	ldr	r6, [sp, #28]
 8008336:	0035      	movs	r5, r6
 8008338:	2800      	cmp	r0, #0
 800833a:	d000      	beq.n	800833e <_dtoa_r+0x4ee>
 800833c:	e259      	b.n	80087f2 <_dtoa_r+0x9a2>
 800833e:	9b06      	ldr	r3, [sp, #24]
 8008340:	9a06      	ldr	r2, [sp, #24]
 8008342:	3301      	adds	r3, #1
 8008344:	9308      	str	r3, [sp, #32]
 8008346:	2331      	movs	r3, #49	; 0x31
 8008348:	7013      	strb	r3, [r2, #0]
 800834a:	9b02      	ldr	r3, [sp, #8]
 800834c:	3301      	adds	r3, #1
 800834e:	9302      	str	r3, [sp, #8]
 8008350:	e254      	b.n	80087fc <_dtoa_r+0x9ac>
 8008352:	4234      	tst	r4, r6
 8008354:	d007      	beq.n	8008366 <_dtoa_r+0x516>
 8008356:	9b10      	ldr	r3, [sp, #64]	; 0x40
 8008358:	3301      	adds	r3, #1
 800835a:	9310      	str	r3, [sp, #64]	; 0x40
 800835c:	682a      	ldr	r2, [r5, #0]
 800835e:	686b      	ldr	r3, [r5, #4]
 8008360:	f7f9 f9b4 	bl	80016cc <__aeabi_dmul>
 8008364:	0033      	movs	r3, r6
 8008366:	1064      	asrs	r4, r4, #1
 8008368:	3508      	adds	r5, #8
 800836a:	e75a      	b.n	8008222 <_dtoa_r+0x3d2>
 800836c:	9e02      	ldr	r6, [sp, #8]
 800836e:	9b07      	ldr	r3, [sp, #28]
 8008370:	e780      	b.n	8008274 <_dtoa_r+0x424>
 8008372:	9b14      	ldr	r3, [sp, #80]	; 0x50
 8008374:	990f      	ldr	r1, [sp, #60]	; 0x3c
 8008376:	1e5a      	subs	r2, r3, #1
 8008378:	4b59      	ldr	r3, [pc, #356]	; (80084e0 <_dtoa_r+0x690>)
 800837a:	00d2      	lsls	r2, r2, #3
 800837c:	189b      	adds	r3, r3, r2
 800837e:	681a      	ldr	r2, [r3, #0]
 8008380:	685b      	ldr	r3, [r3, #4]
 8008382:	2900      	cmp	r1, #0
 8008384:	d051      	beq.n	800842a <_dtoa_r+0x5da>
 8008386:	2000      	movs	r0, #0
 8008388:	495d      	ldr	r1, [pc, #372]	; (8008500 <_dtoa_r+0x6b0>)
 800838a:	f7f8 fd9d 	bl	8000ec8 <__aeabi_ddiv>
 800838e:	9a08      	ldr	r2, [sp, #32]
 8008390:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8008392:	f7f9 fc07 	bl	8001ba4 <__aeabi_dsub>
 8008396:	9a06      	ldr	r2, [sp, #24]
 8008398:	9b06      	ldr	r3, [sp, #24]
 800839a:	4694      	mov	ip, r2
 800839c:	9317      	str	r3, [sp, #92]	; 0x5c
 800839e:	9b14      	ldr	r3, [sp, #80]	; 0x50
 80083a0:	9010      	str	r0, [sp, #64]	; 0x40
 80083a2:	9111      	str	r1, [sp, #68]	; 0x44
 80083a4:	4463      	add	r3, ip
 80083a6:	9319      	str	r3, [sp, #100]	; 0x64
 80083a8:	0029      	movs	r1, r5
 80083aa:	0020      	movs	r0, r4
 80083ac:	f7f9 ffaa 	bl	8002304 <__aeabi_d2iz>
 80083b0:	9014      	str	r0, [sp, #80]	; 0x50
 80083b2:	f7f9 ffdd 	bl	8002370 <__aeabi_i2d>
 80083b6:	0002      	movs	r2, r0
 80083b8:	000b      	movs	r3, r1
 80083ba:	0020      	movs	r0, r4
 80083bc:	0029      	movs	r1, r5
 80083be:	f7f9 fbf1 	bl	8001ba4 <__aeabi_dsub>
 80083c2:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 80083c4:	9a17      	ldr	r2, [sp, #92]	; 0x5c
 80083c6:	3301      	adds	r3, #1
 80083c8:	9308      	str	r3, [sp, #32]
 80083ca:	9b14      	ldr	r3, [sp, #80]	; 0x50
 80083cc:	0004      	movs	r4, r0
 80083ce:	3330      	adds	r3, #48	; 0x30
 80083d0:	7013      	strb	r3, [r2, #0]
 80083d2:	9a10      	ldr	r2, [sp, #64]	; 0x40
 80083d4:	9b11      	ldr	r3, [sp, #68]	; 0x44
 80083d6:	000d      	movs	r5, r1
 80083d8:	f7f8 f83c 	bl	8000454 <__aeabi_dcmplt>
 80083dc:	2800      	cmp	r0, #0
 80083de:	d175      	bne.n	80084cc <_dtoa_r+0x67c>
 80083e0:	0022      	movs	r2, r4
 80083e2:	002b      	movs	r3, r5
 80083e4:	2000      	movs	r0, #0
 80083e6:	4940      	ldr	r1, [pc, #256]	; (80084e8 <_dtoa_r+0x698>)
 80083e8:	f7f9 fbdc 	bl	8001ba4 <__aeabi_dsub>
 80083ec:	9a10      	ldr	r2, [sp, #64]	; 0x40
 80083ee:	9b11      	ldr	r3, [sp, #68]	; 0x44
 80083f0:	f7f8 f830 	bl	8000454 <__aeabi_dcmplt>
 80083f4:	2800      	cmp	r0, #0
 80083f6:	d000      	beq.n	80083fa <_dtoa_r+0x5aa>
 80083f8:	e0d2      	b.n	80085a0 <_dtoa_r+0x750>
 80083fa:	9b19      	ldr	r3, [sp, #100]	; 0x64
 80083fc:	9a08      	ldr	r2, [sp, #32]
 80083fe:	4293      	cmp	r3, r2
 8008400:	d100      	bne.n	8008404 <_dtoa_r+0x5b4>
 8008402:	e770      	b.n	80082e6 <_dtoa_r+0x496>
 8008404:	9810      	ldr	r0, [sp, #64]	; 0x40
 8008406:	9911      	ldr	r1, [sp, #68]	; 0x44
 8008408:	2200      	movs	r2, #0
 800840a:	4b38      	ldr	r3, [pc, #224]	; (80084ec <_dtoa_r+0x69c>)
 800840c:	f7f9 f95e 	bl	80016cc <__aeabi_dmul>
 8008410:	4b36      	ldr	r3, [pc, #216]	; (80084ec <_dtoa_r+0x69c>)
 8008412:	9010      	str	r0, [sp, #64]	; 0x40
 8008414:	9111      	str	r1, [sp, #68]	; 0x44
 8008416:	2200      	movs	r2, #0
 8008418:	0020      	movs	r0, r4
 800841a:	0029      	movs	r1, r5
 800841c:	f7f9 f956 	bl	80016cc <__aeabi_dmul>
 8008420:	9b08      	ldr	r3, [sp, #32]
 8008422:	0004      	movs	r4, r0
 8008424:	000d      	movs	r5, r1
 8008426:	9317      	str	r3, [sp, #92]	; 0x5c
 8008428:	e7be      	b.n	80083a8 <_dtoa_r+0x558>
 800842a:	9808      	ldr	r0, [sp, #32]
 800842c:	9909      	ldr	r1, [sp, #36]	; 0x24
 800842e:	f7f9 f94d 	bl	80016cc <__aeabi_dmul>
 8008432:	9a06      	ldr	r2, [sp, #24]
 8008434:	9b06      	ldr	r3, [sp, #24]
 8008436:	4694      	mov	ip, r2
 8008438:	9308      	str	r3, [sp, #32]
 800843a:	9b14      	ldr	r3, [sp, #80]	; 0x50
 800843c:	9010      	str	r0, [sp, #64]	; 0x40
 800843e:	9111      	str	r1, [sp, #68]	; 0x44
 8008440:	4463      	add	r3, ip
 8008442:	9319      	str	r3, [sp, #100]	; 0x64
 8008444:	0029      	movs	r1, r5
 8008446:	0020      	movs	r0, r4
 8008448:	f7f9 ff5c 	bl	8002304 <__aeabi_d2iz>
 800844c:	9017      	str	r0, [sp, #92]	; 0x5c
 800844e:	f7f9 ff8f 	bl	8002370 <__aeabi_i2d>
 8008452:	0002      	movs	r2, r0
 8008454:	000b      	movs	r3, r1
 8008456:	0020      	movs	r0, r4
 8008458:	0029      	movs	r1, r5
 800845a:	f7f9 fba3 	bl	8001ba4 <__aeabi_dsub>
 800845e:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 8008460:	9a08      	ldr	r2, [sp, #32]
 8008462:	3330      	adds	r3, #48	; 0x30
 8008464:	7013      	strb	r3, [r2, #0]
 8008466:	0013      	movs	r3, r2
 8008468:	9a19      	ldr	r2, [sp, #100]	; 0x64
 800846a:	3301      	adds	r3, #1
 800846c:	0004      	movs	r4, r0
 800846e:	000d      	movs	r5, r1
 8008470:	9308      	str	r3, [sp, #32]
 8008472:	4293      	cmp	r3, r2
 8008474:	d12c      	bne.n	80084d0 <_dtoa_r+0x680>
 8008476:	9810      	ldr	r0, [sp, #64]	; 0x40
 8008478:	9911      	ldr	r1, [sp, #68]	; 0x44
 800847a:	9a06      	ldr	r2, [sp, #24]
 800847c:	9b14      	ldr	r3, [sp, #80]	; 0x50
 800847e:	4694      	mov	ip, r2
 8008480:	4463      	add	r3, ip
 8008482:	2200      	movs	r2, #0
 8008484:	9308      	str	r3, [sp, #32]
 8008486:	4b1e      	ldr	r3, [pc, #120]	; (8008500 <_dtoa_r+0x6b0>)
 8008488:	f7f8 f9e2 	bl	8000850 <__aeabi_dadd>
 800848c:	0002      	movs	r2, r0
 800848e:	000b      	movs	r3, r1
 8008490:	0020      	movs	r0, r4
 8008492:	0029      	movs	r1, r5
 8008494:	f7f7 fff2 	bl	800047c <__aeabi_dcmpgt>
 8008498:	2800      	cmp	r0, #0
 800849a:	d000      	beq.n	800849e <_dtoa_r+0x64e>
 800849c:	e080      	b.n	80085a0 <_dtoa_r+0x750>
 800849e:	9a10      	ldr	r2, [sp, #64]	; 0x40
 80084a0:	9b11      	ldr	r3, [sp, #68]	; 0x44
 80084a2:	2000      	movs	r0, #0
 80084a4:	4916      	ldr	r1, [pc, #88]	; (8008500 <_dtoa_r+0x6b0>)
 80084a6:	f7f9 fb7d 	bl	8001ba4 <__aeabi_dsub>
 80084aa:	0002      	movs	r2, r0
 80084ac:	000b      	movs	r3, r1
 80084ae:	0020      	movs	r0, r4
 80084b0:	0029      	movs	r1, r5
 80084b2:	f7f7 ffcf 	bl	8000454 <__aeabi_dcmplt>
 80084b6:	2800      	cmp	r0, #0
 80084b8:	d100      	bne.n	80084bc <_dtoa_r+0x66c>
 80084ba:	e714      	b.n	80082e6 <_dtoa_r+0x496>
 80084bc:	9b08      	ldr	r3, [sp, #32]
 80084be:	001a      	movs	r2, r3
 80084c0:	3a01      	subs	r2, #1
 80084c2:	9208      	str	r2, [sp, #32]
 80084c4:	7812      	ldrb	r2, [r2, #0]
 80084c6:	2a30      	cmp	r2, #48	; 0x30
 80084c8:	d0f8      	beq.n	80084bc <_dtoa_r+0x66c>
 80084ca:	9308      	str	r3, [sp, #32]
 80084cc:	9602      	str	r6, [sp, #8]
 80084ce:	e055      	b.n	800857c <_dtoa_r+0x72c>
 80084d0:	2200      	movs	r2, #0
 80084d2:	4b06      	ldr	r3, [pc, #24]	; (80084ec <_dtoa_r+0x69c>)
 80084d4:	f7f9 f8fa 	bl	80016cc <__aeabi_dmul>
 80084d8:	0004      	movs	r4, r0
 80084da:	000d      	movs	r5, r1
 80084dc:	e7b2      	b.n	8008444 <_dtoa_r+0x5f4>
 80084de:	46c0      	nop			; (mov r8, r8)
 80084e0:	0800a630 	.word	0x0800a630
 80084e4:	0800a608 	.word	0x0800a608
 80084e8:	3ff00000 	.word	0x3ff00000
 80084ec:	40240000 	.word	0x40240000
 80084f0:	401c0000 	.word	0x401c0000
 80084f4:	fcc00000 	.word	0xfcc00000
 80084f8:	40140000 	.word	0x40140000
 80084fc:	7cc00000 	.word	0x7cc00000
 8008500:	3fe00000 	.word	0x3fe00000
 8008504:	9b07      	ldr	r3, [sp, #28]
 8008506:	9e06      	ldr	r6, [sp, #24]
 8008508:	3b01      	subs	r3, #1
 800850a:	199b      	adds	r3, r3, r6
 800850c:	930c      	str	r3, [sp, #48]	; 0x30
 800850e:	9c08      	ldr	r4, [sp, #32]
 8008510:	9d09      	ldr	r5, [sp, #36]	; 0x24
 8008512:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8008514:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8008516:	0020      	movs	r0, r4
 8008518:	0029      	movs	r1, r5
 800851a:	f7f8 fcd5 	bl	8000ec8 <__aeabi_ddiv>
 800851e:	f7f9 fef1 	bl	8002304 <__aeabi_d2iz>
 8008522:	9007      	str	r0, [sp, #28]
 8008524:	f7f9 ff24 	bl	8002370 <__aeabi_i2d>
 8008528:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800852a:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800852c:	f7f9 f8ce 	bl	80016cc <__aeabi_dmul>
 8008530:	0002      	movs	r2, r0
 8008532:	000b      	movs	r3, r1
 8008534:	0020      	movs	r0, r4
 8008536:	0029      	movs	r1, r5
 8008538:	f7f9 fb34 	bl	8001ba4 <__aeabi_dsub>
 800853c:	0033      	movs	r3, r6
 800853e:	9a07      	ldr	r2, [sp, #28]
 8008540:	3601      	adds	r6, #1
 8008542:	3230      	adds	r2, #48	; 0x30
 8008544:	701a      	strb	r2, [r3, #0]
 8008546:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8008548:	9608      	str	r6, [sp, #32]
 800854a:	429a      	cmp	r2, r3
 800854c:	d139      	bne.n	80085c2 <_dtoa_r+0x772>
 800854e:	0002      	movs	r2, r0
 8008550:	000b      	movs	r3, r1
 8008552:	f7f8 f97d 	bl	8000850 <__aeabi_dadd>
 8008556:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8008558:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800855a:	0004      	movs	r4, r0
 800855c:	000d      	movs	r5, r1
 800855e:	f7f7 ff8d 	bl	800047c <__aeabi_dcmpgt>
 8008562:	2800      	cmp	r0, #0
 8008564:	d11b      	bne.n	800859e <_dtoa_r+0x74e>
 8008566:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8008568:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800856a:	0020      	movs	r0, r4
 800856c:	0029      	movs	r1, r5
 800856e:	f7f7 ff6b 	bl	8000448 <__aeabi_dcmpeq>
 8008572:	2800      	cmp	r0, #0
 8008574:	d002      	beq.n	800857c <_dtoa_r+0x72c>
 8008576:	9b07      	ldr	r3, [sp, #28]
 8008578:	07db      	lsls	r3, r3, #31
 800857a:	d410      	bmi.n	800859e <_dtoa_r+0x74e>
 800857c:	0038      	movs	r0, r7
 800857e:	9905      	ldr	r1, [sp, #20]
 8008580:	f000 fae6 	bl	8008b50 <_Bfree>
 8008584:	2300      	movs	r3, #0
 8008586:	9a08      	ldr	r2, [sp, #32]
 8008588:	9802      	ldr	r0, [sp, #8]
 800858a:	7013      	strb	r3, [r2, #0]
 800858c:	9b24      	ldr	r3, [sp, #144]	; 0x90
 800858e:	3001      	adds	r0, #1
 8008590:	6018      	str	r0, [r3, #0]
 8008592:	9b26      	ldr	r3, [sp, #152]	; 0x98
 8008594:	2b00      	cmp	r3, #0
 8008596:	d100      	bne.n	800859a <_dtoa_r+0x74a>
 8008598:	e4a6      	b.n	8007ee8 <_dtoa_r+0x98>
 800859a:	601a      	str	r2, [r3, #0]
 800859c:	e4a4      	b.n	8007ee8 <_dtoa_r+0x98>
 800859e:	9e02      	ldr	r6, [sp, #8]
 80085a0:	9b08      	ldr	r3, [sp, #32]
 80085a2:	9308      	str	r3, [sp, #32]
 80085a4:	3b01      	subs	r3, #1
 80085a6:	781a      	ldrb	r2, [r3, #0]
 80085a8:	2a39      	cmp	r2, #57	; 0x39
 80085aa:	d106      	bne.n	80085ba <_dtoa_r+0x76a>
 80085ac:	9a06      	ldr	r2, [sp, #24]
 80085ae:	429a      	cmp	r2, r3
 80085b0:	d1f7      	bne.n	80085a2 <_dtoa_r+0x752>
 80085b2:	2230      	movs	r2, #48	; 0x30
 80085b4:	9906      	ldr	r1, [sp, #24]
 80085b6:	3601      	adds	r6, #1
 80085b8:	700a      	strb	r2, [r1, #0]
 80085ba:	781a      	ldrb	r2, [r3, #0]
 80085bc:	3201      	adds	r2, #1
 80085be:	701a      	strb	r2, [r3, #0]
 80085c0:	e784      	b.n	80084cc <_dtoa_r+0x67c>
 80085c2:	2200      	movs	r2, #0
 80085c4:	4baa      	ldr	r3, [pc, #680]	; (8008870 <_dtoa_r+0xa20>)
 80085c6:	f7f9 f881 	bl	80016cc <__aeabi_dmul>
 80085ca:	2200      	movs	r2, #0
 80085cc:	2300      	movs	r3, #0
 80085ce:	0004      	movs	r4, r0
 80085d0:	000d      	movs	r5, r1
 80085d2:	f7f7 ff39 	bl	8000448 <__aeabi_dcmpeq>
 80085d6:	2800      	cmp	r0, #0
 80085d8:	d09b      	beq.n	8008512 <_dtoa_r+0x6c2>
 80085da:	e7cf      	b.n	800857c <_dtoa_r+0x72c>
 80085dc:	9d0f      	ldr	r5, [sp, #60]	; 0x3c
 80085de:	9e0e      	ldr	r6, [sp, #56]	; 0x38
 80085e0:	9c0a      	ldr	r4, [sp, #40]	; 0x28
 80085e2:	2d00      	cmp	r5, #0
 80085e4:	d012      	beq.n	800860c <_dtoa_r+0x7bc>
 80085e6:	9a22      	ldr	r2, [sp, #136]	; 0x88
 80085e8:	2a01      	cmp	r2, #1
 80085ea:	dc66      	bgt.n	80086ba <_dtoa_r+0x86a>
 80085ec:	9a18      	ldr	r2, [sp, #96]	; 0x60
 80085ee:	2a00      	cmp	r2, #0
 80085f0:	d05d      	beq.n	80086ae <_dtoa_r+0x85e>
 80085f2:	4aa0      	ldr	r2, [pc, #640]	; (8008874 <_dtoa_r+0xa24>)
 80085f4:	189b      	adds	r3, r3, r2
 80085f6:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 80085f8:	2101      	movs	r1, #1
 80085fa:	18d2      	adds	r2, r2, r3
 80085fc:	920a      	str	r2, [sp, #40]	; 0x28
 80085fe:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 8008600:	0038      	movs	r0, r7
 8008602:	18d3      	adds	r3, r2, r3
 8008604:	930d      	str	r3, [sp, #52]	; 0x34
 8008606:	f000 fb53 	bl	8008cb0 <__i2b>
 800860a:	0005      	movs	r5, r0
 800860c:	2c00      	cmp	r4, #0
 800860e:	dd0e      	ble.n	800862e <_dtoa_r+0x7de>
 8008610:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8008612:	2b00      	cmp	r3, #0
 8008614:	dd0b      	ble.n	800862e <_dtoa_r+0x7de>
 8008616:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 8008618:	0023      	movs	r3, r4
 800861a:	4294      	cmp	r4, r2
 800861c:	dd00      	ble.n	8008620 <_dtoa_r+0x7d0>
 800861e:	0013      	movs	r3, r2
 8008620:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8008622:	1ae4      	subs	r4, r4, r3
 8008624:	1ad2      	subs	r2, r2, r3
 8008626:	920a      	str	r2, [sp, #40]	; 0x28
 8008628:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 800862a:	1ad3      	subs	r3, r2, r3
 800862c:	930d      	str	r3, [sp, #52]	; 0x34
 800862e:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8008630:	2b00      	cmp	r3, #0
 8008632:	d01f      	beq.n	8008674 <_dtoa_r+0x824>
 8008634:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8008636:	2b00      	cmp	r3, #0
 8008638:	d054      	beq.n	80086e4 <_dtoa_r+0x894>
 800863a:	2e00      	cmp	r6, #0
 800863c:	dd11      	ble.n	8008662 <_dtoa_r+0x812>
 800863e:	0029      	movs	r1, r5
 8008640:	0032      	movs	r2, r6
 8008642:	0038      	movs	r0, r7
 8008644:	f000 fbfa 	bl	8008e3c <__pow5mult>
 8008648:	9a05      	ldr	r2, [sp, #20]
 800864a:	0001      	movs	r1, r0
 800864c:	0005      	movs	r5, r0
 800864e:	0038      	movs	r0, r7
 8008650:	f000 fb44 	bl	8008cdc <__multiply>
 8008654:	9905      	ldr	r1, [sp, #20]
 8008656:	9014      	str	r0, [sp, #80]	; 0x50
 8008658:	0038      	movs	r0, r7
 800865a:	f000 fa79 	bl	8008b50 <_Bfree>
 800865e:	9b14      	ldr	r3, [sp, #80]	; 0x50
 8008660:	9305      	str	r3, [sp, #20]
 8008662:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8008664:	1b9a      	subs	r2, r3, r6
 8008666:	42b3      	cmp	r3, r6
 8008668:	d004      	beq.n	8008674 <_dtoa_r+0x824>
 800866a:	0038      	movs	r0, r7
 800866c:	9905      	ldr	r1, [sp, #20]
 800866e:	f000 fbe5 	bl	8008e3c <__pow5mult>
 8008672:	9005      	str	r0, [sp, #20]
 8008674:	2101      	movs	r1, #1
 8008676:	0038      	movs	r0, r7
 8008678:	f000 fb1a 	bl	8008cb0 <__i2b>
 800867c:	9b15      	ldr	r3, [sp, #84]	; 0x54
 800867e:	0006      	movs	r6, r0
 8008680:	2b00      	cmp	r3, #0
 8008682:	dd31      	ble.n	80086e8 <_dtoa_r+0x898>
 8008684:	001a      	movs	r2, r3
 8008686:	0001      	movs	r1, r0
 8008688:	0038      	movs	r0, r7
 800868a:	f000 fbd7 	bl	8008e3c <__pow5mult>
 800868e:	9b22      	ldr	r3, [sp, #136]	; 0x88
 8008690:	0006      	movs	r6, r0
 8008692:	2b01      	cmp	r3, #1
 8008694:	dd2d      	ble.n	80086f2 <_dtoa_r+0x8a2>
 8008696:	2300      	movs	r3, #0
 8008698:	930e      	str	r3, [sp, #56]	; 0x38
 800869a:	6933      	ldr	r3, [r6, #16]
 800869c:	3303      	adds	r3, #3
 800869e:	009b      	lsls	r3, r3, #2
 80086a0:	18f3      	adds	r3, r6, r3
 80086a2:	6858      	ldr	r0, [r3, #4]
 80086a4:	f000 fabc 	bl	8008c20 <__hi0bits>
 80086a8:	2320      	movs	r3, #32
 80086aa:	1a18      	subs	r0, r3, r0
 80086ac:	e039      	b.n	8008722 <_dtoa_r+0x8d2>
 80086ae:	2336      	movs	r3, #54	; 0x36
 80086b0:	9a1a      	ldr	r2, [sp, #104]	; 0x68
 80086b2:	9e0e      	ldr	r6, [sp, #56]	; 0x38
 80086b4:	9c0a      	ldr	r4, [sp, #40]	; 0x28
 80086b6:	1a9b      	subs	r3, r3, r2
 80086b8:	e79d      	b.n	80085f6 <_dtoa_r+0x7a6>
 80086ba:	9b07      	ldr	r3, [sp, #28]
 80086bc:	1e5e      	subs	r6, r3, #1
 80086be:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 80086c0:	42b3      	cmp	r3, r6
 80086c2:	db07      	blt.n	80086d4 <_dtoa_r+0x884>
 80086c4:	1b9e      	subs	r6, r3, r6
 80086c6:	9b07      	ldr	r3, [sp, #28]
 80086c8:	9c0a      	ldr	r4, [sp, #40]	; 0x28
 80086ca:	2b00      	cmp	r3, #0
 80086cc:	da93      	bge.n	80085f6 <_dtoa_r+0x7a6>
 80086ce:	1ae4      	subs	r4, r4, r3
 80086d0:	2300      	movs	r3, #0
 80086d2:	e790      	b.n	80085f6 <_dtoa_r+0x7a6>
 80086d4:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 80086d6:	9a15      	ldr	r2, [sp, #84]	; 0x54
 80086d8:	1af3      	subs	r3, r6, r3
 80086da:	18d3      	adds	r3, r2, r3
 80086dc:	960e      	str	r6, [sp, #56]	; 0x38
 80086de:	9315      	str	r3, [sp, #84]	; 0x54
 80086e0:	2600      	movs	r6, #0
 80086e2:	e7f0      	b.n	80086c6 <_dtoa_r+0x876>
 80086e4:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 80086e6:	e7c0      	b.n	800866a <_dtoa_r+0x81a>
 80086e8:	2300      	movs	r3, #0
 80086ea:	930e      	str	r3, [sp, #56]	; 0x38
 80086ec:	9b22      	ldr	r3, [sp, #136]	; 0x88
 80086ee:	2b01      	cmp	r3, #1
 80086f0:	dc13      	bgt.n	800871a <_dtoa_r+0x8ca>
 80086f2:	2300      	movs	r3, #0
 80086f4:	930e      	str	r3, [sp, #56]	; 0x38
 80086f6:	9b08      	ldr	r3, [sp, #32]
 80086f8:	2b00      	cmp	r3, #0
 80086fa:	d10e      	bne.n	800871a <_dtoa_r+0x8ca>
 80086fc:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80086fe:	031b      	lsls	r3, r3, #12
 8008700:	d10b      	bne.n	800871a <_dtoa_r+0x8ca>
 8008702:	4b5d      	ldr	r3, [pc, #372]	; (8008878 <_dtoa_r+0xa28>)
 8008704:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8008706:	4213      	tst	r3, r2
 8008708:	d007      	beq.n	800871a <_dtoa_r+0x8ca>
 800870a:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800870c:	3301      	adds	r3, #1
 800870e:	930a      	str	r3, [sp, #40]	; 0x28
 8008710:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8008712:	3301      	adds	r3, #1
 8008714:	930d      	str	r3, [sp, #52]	; 0x34
 8008716:	2301      	movs	r3, #1
 8008718:	930e      	str	r3, [sp, #56]	; 0x38
 800871a:	9b15      	ldr	r3, [sp, #84]	; 0x54
 800871c:	2001      	movs	r0, #1
 800871e:	2b00      	cmp	r3, #0
 8008720:	d1bb      	bne.n	800869a <_dtoa_r+0x84a>
 8008722:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8008724:	221f      	movs	r2, #31
 8008726:	1818      	adds	r0, r3, r0
 8008728:	0003      	movs	r3, r0
 800872a:	4013      	ands	r3, r2
 800872c:	4210      	tst	r0, r2
 800872e:	d046      	beq.n	80087be <_dtoa_r+0x96e>
 8008730:	3201      	adds	r2, #1
 8008732:	1ad2      	subs	r2, r2, r3
 8008734:	2a04      	cmp	r2, #4
 8008736:	dd3f      	ble.n	80087b8 <_dtoa_r+0x968>
 8008738:	221c      	movs	r2, #28
 800873a:	1ad3      	subs	r3, r2, r3
 800873c:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800873e:	18e4      	adds	r4, r4, r3
 8008740:	18d2      	adds	r2, r2, r3
 8008742:	920a      	str	r2, [sp, #40]	; 0x28
 8008744:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 8008746:	18d3      	adds	r3, r2, r3
 8008748:	930d      	str	r3, [sp, #52]	; 0x34
 800874a:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800874c:	2b00      	cmp	r3, #0
 800874e:	dd05      	ble.n	800875c <_dtoa_r+0x90c>
 8008750:	001a      	movs	r2, r3
 8008752:	0038      	movs	r0, r7
 8008754:	9905      	ldr	r1, [sp, #20]
 8008756:	f000 fbcd 	bl	8008ef4 <__lshift>
 800875a:	9005      	str	r0, [sp, #20]
 800875c:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800875e:	2b00      	cmp	r3, #0
 8008760:	dd05      	ble.n	800876e <_dtoa_r+0x91e>
 8008762:	0031      	movs	r1, r6
 8008764:	001a      	movs	r2, r3
 8008766:	0038      	movs	r0, r7
 8008768:	f000 fbc4 	bl	8008ef4 <__lshift>
 800876c:	0006      	movs	r6, r0
 800876e:	9b16      	ldr	r3, [sp, #88]	; 0x58
 8008770:	2b00      	cmp	r3, #0
 8008772:	d026      	beq.n	80087c2 <_dtoa_r+0x972>
 8008774:	0031      	movs	r1, r6
 8008776:	9805      	ldr	r0, [sp, #20]
 8008778:	f000 fc2a 	bl	8008fd0 <__mcmp>
 800877c:	2800      	cmp	r0, #0
 800877e:	da20      	bge.n	80087c2 <_dtoa_r+0x972>
 8008780:	9b02      	ldr	r3, [sp, #8]
 8008782:	220a      	movs	r2, #10
 8008784:	3b01      	subs	r3, #1
 8008786:	9302      	str	r3, [sp, #8]
 8008788:	0038      	movs	r0, r7
 800878a:	2300      	movs	r3, #0
 800878c:	9905      	ldr	r1, [sp, #20]
 800878e:	f000 fa03 	bl	8008b98 <__multadd>
 8008792:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8008794:	9005      	str	r0, [sp, #20]
 8008796:	2b00      	cmp	r3, #0
 8008798:	d100      	bne.n	800879c <_dtoa_r+0x94c>
 800879a:	e166      	b.n	8008a6a <_dtoa_r+0xc1a>
 800879c:	2300      	movs	r3, #0
 800879e:	0029      	movs	r1, r5
 80087a0:	220a      	movs	r2, #10
 80087a2:	0038      	movs	r0, r7
 80087a4:	f000 f9f8 	bl	8008b98 <__multadd>
 80087a8:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 80087aa:	0005      	movs	r5, r0
 80087ac:	2b00      	cmp	r3, #0
 80087ae:	dc47      	bgt.n	8008840 <_dtoa_r+0x9f0>
 80087b0:	9b22      	ldr	r3, [sp, #136]	; 0x88
 80087b2:	2b02      	cmp	r3, #2
 80087b4:	dc0d      	bgt.n	80087d2 <_dtoa_r+0x982>
 80087b6:	e043      	b.n	8008840 <_dtoa_r+0x9f0>
 80087b8:	2a04      	cmp	r2, #4
 80087ba:	d0c6      	beq.n	800874a <_dtoa_r+0x8fa>
 80087bc:	0013      	movs	r3, r2
 80087be:	331c      	adds	r3, #28
 80087c0:	e7bc      	b.n	800873c <_dtoa_r+0x8ec>
 80087c2:	9b07      	ldr	r3, [sp, #28]
 80087c4:	2b00      	cmp	r3, #0
 80087c6:	dc35      	bgt.n	8008834 <_dtoa_r+0x9e4>
 80087c8:	9b22      	ldr	r3, [sp, #136]	; 0x88
 80087ca:	2b02      	cmp	r3, #2
 80087cc:	dd32      	ble.n	8008834 <_dtoa_r+0x9e4>
 80087ce:	9b07      	ldr	r3, [sp, #28]
 80087d0:	930c      	str	r3, [sp, #48]	; 0x30
 80087d2:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 80087d4:	2b00      	cmp	r3, #0
 80087d6:	d10c      	bne.n	80087f2 <_dtoa_r+0x9a2>
 80087d8:	0031      	movs	r1, r6
 80087da:	2205      	movs	r2, #5
 80087dc:	0038      	movs	r0, r7
 80087de:	f000 f9db 	bl	8008b98 <__multadd>
 80087e2:	0006      	movs	r6, r0
 80087e4:	0001      	movs	r1, r0
 80087e6:	9805      	ldr	r0, [sp, #20]
 80087e8:	f000 fbf2 	bl	8008fd0 <__mcmp>
 80087ec:	2800      	cmp	r0, #0
 80087ee:	dd00      	ble.n	80087f2 <_dtoa_r+0x9a2>
 80087f0:	e5a5      	b.n	800833e <_dtoa_r+0x4ee>
 80087f2:	9b23      	ldr	r3, [sp, #140]	; 0x8c
 80087f4:	43db      	mvns	r3, r3
 80087f6:	9302      	str	r3, [sp, #8]
 80087f8:	9b06      	ldr	r3, [sp, #24]
 80087fa:	9308      	str	r3, [sp, #32]
 80087fc:	2400      	movs	r4, #0
 80087fe:	0031      	movs	r1, r6
 8008800:	0038      	movs	r0, r7
 8008802:	f000 f9a5 	bl	8008b50 <_Bfree>
 8008806:	2d00      	cmp	r5, #0
 8008808:	d100      	bne.n	800880c <_dtoa_r+0x9bc>
 800880a:	e6b7      	b.n	800857c <_dtoa_r+0x72c>
 800880c:	2c00      	cmp	r4, #0
 800880e:	d005      	beq.n	800881c <_dtoa_r+0x9cc>
 8008810:	42ac      	cmp	r4, r5
 8008812:	d003      	beq.n	800881c <_dtoa_r+0x9cc>
 8008814:	0021      	movs	r1, r4
 8008816:	0038      	movs	r0, r7
 8008818:	f000 f99a 	bl	8008b50 <_Bfree>
 800881c:	0029      	movs	r1, r5
 800881e:	0038      	movs	r0, r7
 8008820:	f000 f996 	bl	8008b50 <_Bfree>
 8008824:	e6aa      	b.n	800857c <_dtoa_r+0x72c>
 8008826:	2600      	movs	r6, #0
 8008828:	0035      	movs	r5, r6
 800882a:	e7e2      	b.n	80087f2 <_dtoa_r+0x9a2>
 800882c:	9602      	str	r6, [sp, #8]
 800882e:	9e14      	ldr	r6, [sp, #80]	; 0x50
 8008830:	0035      	movs	r5, r6
 8008832:	e584      	b.n	800833e <_dtoa_r+0x4ee>
 8008834:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8008836:	2b00      	cmp	r3, #0
 8008838:	d100      	bne.n	800883c <_dtoa_r+0x9ec>
 800883a:	e0ce      	b.n	80089da <_dtoa_r+0xb8a>
 800883c:	9b07      	ldr	r3, [sp, #28]
 800883e:	930c      	str	r3, [sp, #48]	; 0x30
 8008840:	2c00      	cmp	r4, #0
 8008842:	dd05      	ble.n	8008850 <_dtoa_r+0xa00>
 8008844:	0029      	movs	r1, r5
 8008846:	0022      	movs	r2, r4
 8008848:	0038      	movs	r0, r7
 800884a:	f000 fb53 	bl	8008ef4 <__lshift>
 800884e:	0005      	movs	r5, r0
 8008850:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8008852:	0028      	movs	r0, r5
 8008854:	2b00      	cmp	r3, #0
 8008856:	d022      	beq.n	800889e <_dtoa_r+0xa4e>
 8008858:	0038      	movs	r0, r7
 800885a:	6869      	ldr	r1, [r5, #4]
 800885c:	f000 f934 	bl	8008ac8 <_Balloc>
 8008860:	1e04      	subs	r4, r0, #0
 8008862:	d10f      	bne.n	8008884 <_dtoa_r+0xa34>
 8008864:	0002      	movs	r2, r0
 8008866:	4b05      	ldr	r3, [pc, #20]	; (800887c <_dtoa_r+0xa2c>)
 8008868:	4905      	ldr	r1, [pc, #20]	; (8008880 <_dtoa_r+0xa30>)
 800886a:	f7ff fb06 	bl	8007e7a <_dtoa_r+0x2a>
 800886e:	46c0      	nop			; (mov r8, r8)
 8008870:	40240000 	.word	0x40240000
 8008874:	00000433 	.word	0x00000433
 8008878:	7ff00000 	.word	0x7ff00000
 800887c:	0800a59b 	.word	0x0800a59b
 8008880:	000002ea 	.word	0x000002ea
 8008884:	0029      	movs	r1, r5
 8008886:	692b      	ldr	r3, [r5, #16]
 8008888:	310c      	adds	r1, #12
 800888a:	1c9a      	adds	r2, r3, #2
 800888c:	0092      	lsls	r2, r2, #2
 800888e:	300c      	adds	r0, #12
 8008890:	f000 f911 	bl	8008ab6 <memcpy>
 8008894:	2201      	movs	r2, #1
 8008896:	0021      	movs	r1, r4
 8008898:	0038      	movs	r0, r7
 800889a:	f000 fb2b 	bl	8008ef4 <__lshift>
 800889e:	9b06      	ldr	r3, [sp, #24]
 80088a0:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 80088a2:	930a      	str	r3, [sp, #40]	; 0x28
 80088a4:	3b01      	subs	r3, #1
 80088a6:	189b      	adds	r3, r3, r2
 80088a8:	2201      	movs	r2, #1
 80088aa:	002c      	movs	r4, r5
 80088ac:	0005      	movs	r5, r0
 80088ae:	9314      	str	r3, [sp, #80]	; 0x50
 80088b0:	9b08      	ldr	r3, [sp, #32]
 80088b2:	4013      	ands	r3, r2
 80088b4:	930f      	str	r3, [sp, #60]	; 0x3c
 80088b6:	0031      	movs	r1, r6
 80088b8:	9805      	ldr	r0, [sp, #20]
 80088ba:	f7ff fa3d 	bl	8007d38 <quorem>
 80088be:	0003      	movs	r3, r0
 80088c0:	0021      	movs	r1, r4
 80088c2:	3330      	adds	r3, #48	; 0x30
 80088c4:	900d      	str	r0, [sp, #52]	; 0x34
 80088c6:	9805      	ldr	r0, [sp, #20]
 80088c8:	9307      	str	r3, [sp, #28]
 80088ca:	f000 fb81 	bl	8008fd0 <__mcmp>
 80088ce:	002a      	movs	r2, r5
 80088d0:	900e      	str	r0, [sp, #56]	; 0x38
 80088d2:	0031      	movs	r1, r6
 80088d4:	0038      	movs	r0, r7
 80088d6:	f000 fb97 	bl	8009008 <__mdiff>
 80088da:	68c3      	ldr	r3, [r0, #12]
 80088dc:	9008      	str	r0, [sp, #32]
 80088de:	9310      	str	r3, [sp, #64]	; 0x40
 80088e0:	2301      	movs	r3, #1
 80088e2:	930c      	str	r3, [sp, #48]	; 0x30
 80088e4:	9b10      	ldr	r3, [sp, #64]	; 0x40
 80088e6:	2b00      	cmp	r3, #0
 80088e8:	d104      	bne.n	80088f4 <_dtoa_r+0xaa4>
 80088ea:	0001      	movs	r1, r0
 80088ec:	9805      	ldr	r0, [sp, #20]
 80088ee:	f000 fb6f 	bl	8008fd0 <__mcmp>
 80088f2:	900c      	str	r0, [sp, #48]	; 0x30
 80088f4:	0038      	movs	r0, r7
 80088f6:	9908      	ldr	r1, [sp, #32]
 80088f8:	f000 f92a 	bl	8008b50 <_Bfree>
 80088fc:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80088fe:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8008900:	3301      	adds	r3, #1
 8008902:	9308      	str	r3, [sp, #32]
 8008904:	9b22      	ldr	r3, [sp, #136]	; 0x88
 8008906:	4313      	orrs	r3, r2
 8008908:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 800890a:	4313      	orrs	r3, r2
 800890c:	d10c      	bne.n	8008928 <_dtoa_r+0xad8>
 800890e:	9b07      	ldr	r3, [sp, #28]
 8008910:	2b39      	cmp	r3, #57	; 0x39
 8008912:	d026      	beq.n	8008962 <_dtoa_r+0xb12>
 8008914:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8008916:	2b00      	cmp	r3, #0
 8008918:	dd02      	ble.n	8008920 <_dtoa_r+0xad0>
 800891a:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800891c:	3331      	adds	r3, #49	; 0x31
 800891e:	9307      	str	r3, [sp, #28]
 8008920:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8008922:	9a07      	ldr	r2, [sp, #28]
 8008924:	701a      	strb	r2, [r3, #0]
 8008926:	e76a      	b.n	80087fe <_dtoa_r+0x9ae>
 8008928:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 800892a:	2b00      	cmp	r3, #0
 800892c:	db04      	blt.n	8008938 <_dtoa_r+0xae8>
 800892e:	9a22      	ldr	r2, [sp, #136]	; 0x88
 8008930:	4313      	orrs	r3, r2
 8008932:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 8008934:	4313      	orrs	r3, r2
 8008936:	d11f      	bne.n	8008978 <_dtoa_r+0xb28>
 8008938:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 800893a:	2b00      	cmp	r3, #0
 800893c:	ddf0      	ble.n	8008920 <_dtoa_r+0xad0>
 800893e:	9905      	ldr	r1, [sp, #20]
 8008940:	2201      	movs	r2, #1
 8008942:	0038      	movs	r0, r7
 8008944:	f000 fad6 	bl	8008ef4 <__lshift>
 8008948:	0031      	movs	r1, r6
 800894a:	9005      	str	r0, [sp, #20]
 800894c:	f000 fb40 	bl	8008fd0 <__mcmp>
 8008950:	2800      	cmp	r0, #0
 8008952:	dc03      	bgt.n	800895c <_dtoa_r+0xb0c>
 8008954:	d1e4      	bne.n	8008920 <_dtoa_r+0xad0>
 8008956:	9b07      	ldr	r3, [sp, #28]
 8008958:	07db      	lsls	r3, r3, #31
 800895a:	d5e1      	bpl.n	8008920 <_dtoa_r+0xad0>
 800895c:	9b07      	ldr	r3, [sp, #28]
 800895e:	2b39      	cmp	r3, #57	; 0x39
 8008960:	d1db      	bne.n	800891a <_dtoa_r+0xaca>
 8008962:	2339      	movs	r3, #57	; 0x39
 8008964:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8008966:	7013      	strb	r3, [r2, #0]
 8008968:	9b08      	ldr	r3, [sp, #32]
 800896a:	9308      	str	r3, [sp, #32]
 800896c:	3b01      	subs	r3, #1
 800896e:	781a      	ldrb	r2, [r3, #0]
 8008970:	2a39      	cmp	r2, #57	; 0x39
 8008972:	d068      	beq.n	8008a46 <_dtoa_r+0xbf6>
 8008974:	3201      	adds	r2, #1
 8008976:	e7d5      	b.n	8008924 <_dtoa_r+0xad4>
 8008978:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 800897a:	2b00      	cmp	r3, #0
 800897c:	dd07      	ble.n	800898e <_dtoa_r+0xb3e>
 800897e:	9b07      	ldr	r3, [sp, #28]
 8008980:	2b39      	cmp	r3, #57	; 0x39
 8008982:	d0ee      	beq.n	8008962 <_dtoa_r+0xb12>
 8008984:	9b07      	ldr	r3, [sp, #28]
 8008986:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8008988:	3301      	adds	r3, #1
 800898a:	7013      	strb	r3, [r2, #0]
 800898c:	e737      	b.n	80087fe <_dtoa_r+0x9ae>
 800898e:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8008990:	9a07      	ldr	r2, [sp, #28]
 8008992:	701a      	strb	r2, [r3, #0]
 8008994:	9b14      	ldr	r3, [sp, #80]	; 0x50
 8008996:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8008998:	4293      	cmp	r3, r2
 800899a:	d03e      	beq.n	8008a1a <_dtoa_r+0xbca>
 800899c:	2300      	movs	r3, #0
 800899e:	220a      	movs	r2, #10
 80089a0:	9905      	ldr	r1, [sp, #20]
 80089a2:	0038      	movs	r0, r7
 80089a4:	f000 f8f8 	bl	8008b98 <__multadd>
 80089a8:	2300      	movs	r3, #0
 80089aa:	9005      	str	r0, [sp, #20]
 80089ac:	220a      	movs	r2, #10
 80089ae:	0021      	movs	r1, r4
 80089b0:	0038      	movs	r0, r7
 80089b2:	42ac      	cmp	r4, r5
 80089b4:	d106      	bne.n	80089c4 <_dtoa_r+0xb74>
 80089b6:	f000 f8ef 	bl	8008b98 <__multadd>
 80089ba:	0004      	movs	r4, r0
 80089bc:	0005      	movs	r5, r0
 80089be:	9b08      	ldr	r3, [sp, #32]
 80089c0:	930a      	str	r3, [sp, #40]	; 0x28
 80089c2:	e778      	b.n	80088b6 <_dtoa_r+0xa66>
 80089c4:	f000 f8e8 	bl	8008b98 <__multadd>
 80089c8:	0029      	movs	r1, r5
 80089ca:	0004      	movs	r4, r0
 80089cc:	2300      	movs	r3, #0
 80089ce:	220a      	movs	r2, #10
 80089d0:	0038      	movs	r0, r7
 80089d2:	f000 f8e1 	bl	8008b98 <__multadd>
 80089d6:	0005      	movs	r5, r0
 80089d8:	e7f1      	b.n	80089be <_dtoa_r+0xb6e>
 80089da:	9b07      	ldr	r3, [sp, #28]
 80089dc:	930c      	str	r3, [sp, #48]	; 0x30
 80089de:	2400      	movs	r4, #0
 80089e0:	0031      	movs	r1, r6
 80089e2:	9805      	ldr	r0, [sp, #20]
 80089e4:	f7ff f9a8 	bl	8007d38 <quorem>
 80089e8:	9b06      	ldr	r3, [sp, #24]
 80089ea:	3030      	adds	r0, #48	; 0x30
 80089ec:	5518      	strb	r0, [r3, r4]
 80089ee:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 80089f0:	3401      	adds	r4, #1
 80089f2:	9007      	str	r0, [sp, #28]
 80089f4:	42a3      	cmp	r3, r4
 80089f6:	dd07      	ble.n	8008a08 <_dtoa_r+0xbb8>
 80089f8:	2300      	movs	r3, #0
 80089fa:	220a      	movs	r2, #10
 80089fc:	0038      	movs	r0, r7
 80089fe:	9905      	ldr	r1, [sp, #20]
 8008a00:	f000 f8ca 	bl	8008b98 <__multadd>
 8008a04:	9005      	str	r0, [sp, #20]
 8008a06:	e7eb      	b.n	80089e0 <_dtoa_r+0xb90>
 8008a08:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8008a0a:	2001      	movs	r0, #1
 8008a0c:	2b00      	cmp	r3, #0
 8008a0e:	dd00      	ble.n	8008a12 <_dtoa_r+0xbc2>
 8008a10:	0018      	movs	r0, r3
 8008a12:	2400      	movs	r4, #0
 8008a14:	9b06      	ldr	r3, [sp, #24]
 8008a16:	181b      	adds	r3, r3, r0
 8008a18:	9308      	str	r3, [sp, #32]
 8008a1a:	9905      	ldr	r1, [sp, #20]
 8008a1c:	2201      	movs	r2, #1
 8008a1e:	0038      	movs	r0, r7
 8008a20:	f000 fa68 	bl	8008ef4 <__lshift>
 8008a24:	0031      	movs	r1, r6
 8008a26:	9005      	str	r0, [sp, #20]
 8008a28:	f000 fad2 	bl	8008fd0 <__mcmp>
 8008a2c:	2800      	cmp	r0, #0
 8008a2e:	dc9b      	bgt.n	8008968 <_dtoa_r+0xb18>
 8008a30:	d102      	bne.n	8008a38 <_dtoa_r+0xbe8>
 8008a32:	9b07      	ldr	r3, [sp, #28]
 8008a34:	07db      	lsls	r3, r3, #31
 8008a36:	d497      	bmi.n	8008968 <_dtoa_r+0xb18>
 8008a38:	9b08      	ldr	r3, [sp, #32]
 8008a3a:	9308      	str	r3, [sp, #32]
 8008a3c:	3b01      	subs	r3, #1
 8008a3e:	781a      	ldrb	r2, [r3, #0]
 8008a40:	2a30      	cmp	r2, #48	; 0x30
 8008a42:	d0fa      	beq.n	8008a3a <_dtoa_r+0xbea>
 8008a44:	e6db      	b.n	80087fe <_dtoa_r+0x9ae>
 8008a46:	9a06      	ldr	r2, [sp, #24]
 8008a48:	429a      	cmp	r2, r3
 8008a4a:	d18e      	bne.n	800896a <_dtoa_r+0xb1a>
 8008a4c:	9b02      	ldr	r3, [sp, #8]
 8008a4e:	3301      	adds	r3, #1
 8008a50:	9302      	str	r3, [sp, #8]
 8008a52:	2331      	movs	r3, #49	; 0x31
 8008a54:	e799      	b.n	800898a <_dtoa_r+0xb3a>
 8008a56:	4b09      	ldr	r3, [pc, #36]	; (8008a7c <_dtoa_r+0xc2c>)
 8008a58:	9a26      	ldr	r2, [sp, #152]	; 0x98
 8008a5a:	9306      	str	r3, [sp, #24]
 8008a5c:	4b08      	ldr	r3, [pc, #32]	; (8008a80 <_dtoa_r+0xc30>)
 8008a5e:	2a00      	cmp	r2, #0
 8008a60:	d001      	beq.n	8008a66 <_dtoa_r+0xc16>
 8008a62:	f7ff fa3f 	bl	8007ee4 <_dtoa_r+0x94>
 8008a66:	f7ff fa3f 	bl	8007ee8 <_dtoa_r+0x98>
 8008a6a:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8008a6c:	2b00      	cmp	r3, #0
 8008a6e:	dcb6      	bgt.n	80089de <_dtoa_r+0xb8e>
 8008a70:	9b22      	ldr	r3, [sp, #136]	; 0x88
 8008a72:	2b02      	cmp	r3, #2
 8008a74:	dd00      	ble.n	8008a78 <_dtoa_r+0xc28>
 8008a76:	e6ac      	b.n	80087d2 <_dtoa_r+0x982>
 8008a78:	e7b1      	b.n	80089de <_dtoa_r+0xb8e>
 8008a7a:	46c0      	nop			; (mov r8, r8)
 8008a7c:	0800a51c 	.word	0x0800a51c
 8008a80:	0800a524 	.word	0x0800a524

08008a84 <_localeconv_r>:
 8008a84:	4800      	ldr	r0, [pc, #0]	; (8008a88 <_localeconv_r+0x4>)
 8008a86:	4770      	bx	lr
 8008a88:	20000168 	.word	0x20000168

08008a8c <malloc>:
 8008a8c:	b510      	push	{r4, lr}
 8008a8e:	4b03      	ldr	r3, [pc, #12]	; (8008a9c <malloc+0x10>)
 8008a90:	0001      	movs	r1, r0
 8008a92:	6818      	ldr	r0, [r3, #0]
 8008a94:	f000 fc4c 	bl	8009330 <_malloc_r>
 8008a98:	bd10      	pop	{r4, pc}
 8008a9a:	46c0      	nop			; (mov r8, r8)
 8008a9c:	20000014 	.word	0x20000014

08008aa0 <memchr>:
 8008aa0:	b2c9      	uxtb	r1, r1
 8008aa2:	1882      	adds	r2, r0, r2
 8008aa4:	4290      	cmp	r0, r2
 8008aa6:	d101      	bne.n	8008aac <memchr+0xc>
 8008aa8:	2000      	movs	r0, #0
 8008aaa:	4770      	bx	lr
 8008aac:	7803      	ldrb	r3, [r0, #0]
 8008aae:	428b      	cmp	r3, r1
 8008ab0:	d0fb      	beq.n	8008aaa <memchr+0xa>
 8008ab2:	3001      	adds	r0, #1
 8008ab4:	e7f6      	b.n	8008aa4 <memchr+0x4>

08008ab6 <memcpy>:
 8008ab6:	2300      	movs	r3, #0
 8008ab8:	b510      	push	{r4, lr}
 8008aba:	429a      	cmp	r2, r3
 8008abc:	d100      	bne.n	8008ac0 <memcpy+0xa>
 8008abe:	bd10      	pop	{r4, pc}
 8008ac0:	5ccc      	ldrb	r4, [r1, r3]
 8008ac2:	54c4      	strb	r4, [r0, r3]
 8008ac4:	3301      	adds	r3, #1
 8008ac6:	e7f8      	b.n	8008aba <memcpy+0x4>

08008ac8 <_Balloc>:
 8008ac8:	b570      	push	{r4, r5, r6, lr}
 8008aca:	6a45      	ldr	r5, [r0, #36]	; 0x24
 8008acc:	0006      	movs	r6, r0
 8008ace:	000c      	movs	r4, r1
 8008ad0:	2d00      	cmp	r5, #0
 8008ad2:	d10e      	bne.n	8008af2 <_Balloc+0x2a>
 8008ad4:	2010      	movs	r0, #16
 8008ad6:	f7ff ffd9 	bl	8008a8c <malloc>
 8008ada:	1e02      	subs	r2, r0, #0
 8008adc:	6270      	str	r0, [r6, #36]	; 0x24
 8008ade:	d104      	bne.n	8008aea <_Balloc+0x22>
 8008ae0:	2166      	movs	r1, #102	; 0x66
 8008ae2:	4b19      	ldr	r3, [pc, #100]	; (8008b48 <_Balloc+0x80>)
 8008ae4:	4819      	ldr	r0, [pc, #100]	; (8008b4c <_Balloc+0x84>)
 8008ae6:	f000 fe0d 	bl	8009704 <__assert_func>
 8008aea:	6045      	str	r5, [r0, #4]
 8008aec:	6085      	str	r5, [r0, #8]
 8008aee:	6005      	str	r5, [r0, #0]
 8008af0:	60c5      	str	r5, [r0, #12]
 8008af2:	6a75      	ldr	r5, [r6, #36]	; 0x24
 8008af4:	68eb      	ldr	r3, [r5, #12]
 8008af6:	2b00      	cmp	r3, #0
 8008af8:	d013      	beq.n	8008b22 <_Balloc+0x5a>
 8008afa:	6a73      	ldr	r3, [r6, #36]	; 0x24
 8008afc:	00a2      	lsls	r2, r4, #2
 8008afe:	68db      	ldr	r3, [r3, #12]
 8008b00:	189b      	adds	r3, r3, r2
 8008b02:	6818      	ldr	r0, [r3, #0]
 8008b04:	2800      	cmp	r0, #0
 8008b06:	d118      	bne.n	8008b3a <_Balloc+0x72>
 8008b08:	2101      	movs	r1, #1
 8008b0a:	000d      	movs	r5, r1
 8008b0c:	40a5      	lsls	r5, r4
 8008b0e:	1d6a      	adds	r2, r5, #5
 8008b10:	0030      	movs	r0, r6
 8008b12:	0092      	lsls	r2, r2, #2
 8008b14:	f000 fb74 	bl	8009200 <_calloc_r>
 8008b18:	2800      	cmp	r0, #0
 8008b1a:	d00c      	beq.n	8008b36 <_Balloc+0x6e>
 8008b1c:	6044      	str	r4, [r0, #4]
 8008b1e:	6085      	str	r5, [r0, #8]
 8008b20:	e00d      	b.n	8008b3e <_Balloc+0x76>
 8008b22:	2221      	movs	r2, #33	; 0x21
 8008b24:	2104      	movs	r1, #4
 8008b26:	0030      	movs	r0, r6
 8008b28:	f000 fb6a 	bl	8009200 <_calloc_r>
 8008b2c:	6a73      	ldr	r3, [r6, #36]	; 0x24
 8008b2e:	60e8      	str	r0, [r5, #12]
 8008b30:	68db      	ldr	r3, [r3, #12]
 8008b32:	2b00      	cmp	r3, #0
 8008b34:	d1e1      	bne.n	8008afa <_Balloc+0x32>
 8008b36:	2000      	movs	r0, #0
 8008b38:	bd70      	pop	{r4, r5, r6, pc}
 8008b3a:	6802      	ldr	r2, [r0, #0]
 8008b3c:	601a      	str	r2, [r3, #0]
 8008b3e:	2300      	movs	r3, #0
 8008b40:	6103      	str	r3, [r0, #16]
 8008b42:	60c3      	str	r3, [r0, #12]
 8008b44:	e7f8      	b.n	8008b38 <_Balloc+0x70>
 8008b46:	46c0      	nop			; (mov r8, r8)
 8008b48:	0800a529 	.word	0x0800a529
 8008b4c:	0800a5ac 	.word	0x0800a5ac

08008b50 <_Bfree>:
 8008b50:	b570      	push	{r4, r5, r6, lr}
 8008b52:	6a46      	ldr	r6, [r0, #36]	; 0x24
 8008b54:	0005      	movs	r5, r0
 8008b56:	000c      	movs	r4, r1
 8008b58:	2e00      	cmp	r6, #0
 8008b5a:	d10e      	bne.n	8008b7a <_Bfree+0x2a>
 8008b5c:	2010      	movs	r0, #16
 8008b5e:	f7ff ff95 	bl	8008a8c <malloc>
 8008b62:	1e02      	subs	r2, r0, #0
 8008b64:	6268      	str	r0, [r5, #36]	; 0x24
 8008b66:	d104      	bne.n	8008b72 <_Bfree+0x22>
 8008b68:	218a      	movs	r1, #138	; 0x8a
 8008b6a:	4b09      	ldr	r3, [pc, #36]	; (8008b90 <_Bfree+0x40>)
 8008b6c:	4809      	ldr	r0, [pc, #36]	; (8008b94 <_Bfree+0x44>)
 8008b6e:	f000 fdc9 	bl	8009704 <__assert_func>
 8008b72:	6046      	str	r6, [r0, #4]
 8008b74:	6086      	str	r6, [r0, #8]
 8008b76:	6006      	str	r6, [r0, #0]
 8008b78:	60c6      	str	r6, [r0, #12]
 8008b7a:	2c00      	cmp	r4, #0
 8008b7c:	d007      	beq.n	8008b8e <_Bfree+0x3e>
 8008b7e:	6a6b      	ldr	r3, [r5, #36]	; 0x24
 8008b80:	6862      	ldr	r2, [r4, #4]
 8008b82:	68db      	ldr	r3, [r3, #12]
 8008b84:	0092      	lsls	r2, r2, #2
 8008b86:	189b      	adds	r3, r3, r2
 8008b88:	681a      	ldr	r2, [r3, #0]
 8008b8a:	6022      	str	r2, [r4, #0]
 8008b8c:	601c      	str	r4, [r3, #0]
 8008b8e:	bd70      	pop	{r4, r5, r6, pc}
 8008b90:	0800a529 	.word	0x0800a529
 8008b94:	0800a5ac 	.word	0x0800a5ac

08008b98 <__multadd>:
 8008b98:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8008b9a:	000e      	movs	r6, r1
 8008b9c:	9001      	str	r0, [sp, #4]
 8008b9e:	000c      	movs	r4, r1
 8008ba0:	001d      	movs	r5, r3
 8008ba2:	2000      	movs	r0, #0
 8008ba4:	690f      	ldr	r7, [r1, #16]
 8008ba6:	3614      	adds	r6, #20
 8008ba8:	6833      	ldr	r3, [r6, #0]
 8008baa:	3001      	adds	r0, #1
 8008bac:	b299      	uxth	r1, r3
 8008bae:	4351      	muls	r1, r2
 8008bb0:	0c1b      	lsrs	r3, r3, #16
 8008bb2:	4353      	muls	r3, r2
 8008bb4:	1949      	adds	r1, r1, r5
 8008bb6:	0c0d      	lsrs	r5, r1, #16
 8008bb8:	195b      	adds	r3, r3, r5
 8008bba:	0c1d      	lsrs	r5, r3, #16
 8008bbc:	b289      	uxth	r1, r1
 8008bbe:	041b      	lsls	r3, r3, #16
 8008bc0:	185b      	adds	r3, r3, r1
 8008bc2:	c608      	stmia	r6!, {r3}
 8008bc4:	4287      	cmp	r7, r0
 8008bc6:	dcef      	bgt.n	8008ba8 <__multadd+0x10>
 8008bc8:	2d00      	cmp	r5, #0
 8008bca:	d022      	beq.n	8008c12 <__multadd+0x7a>
 8008bcc:	68a3      	ldr	r3, [r4, #8]
 8008bce:	42bb      	cmp	r3, r7
 8008bd0:	dc19      	bgt.n	8008c06 <__multadd+0x6e>
 8008bd2:	6863      	ldr	r3, [r4, #4]
 8008bd4:	9801      	ldr	r0, [sp, #4]
 8008bd6:	1c59      	adds	r1, r3, #1
 8008bd8:	f7ff ff76 	bl	8008ac8 <_Balloc>
 8008bdc:	1e06      	subs	r6, r0, #0
 8008bde:	d105      	bne.n	8008bec <__multadd+0x54>
 8008be0:	0002      	movs	r2, r0
 8008be2:	21b5      	movs	r1, #181	; 0xb5
 8008be4:	4b0c      	ldr	r3, [pc, #48]	; (8008c18 <__multadd+0x80>)
 8008be6:	480d      	ldr	r0, [pc, #52]	; (8008c1c <__multadd+0x84>)
 8008be8:	f000 fd8c 	bl	8009704 <__assert_func>
 8008bec:	0021      	movs	r1, r4
 8008bee:	6923      	ldr	r3, [r4, #16]
 8008bf0:	310c      	adds	r1, #12
 8008bf2:	1c9a      	adds	r2, r3, #2
 8008bf4:	0092      	lsls	r2, r2, #2
 8008bf6:	300c      	adds	r0, #12
 8008bf8:	f7ff ff5d 	bl	8008ab6 <memcpy>
 8008bfc:	0021      	movs	r1, r4
 8008bfe:	9801      	ldr	r0, [sp, #4]
 8008c00:	f7ff ffa6 	bl	8008b50 <_Bfree>
 8008c04:	0034      	movs	r4, r6
 8008c06:	1d3b      	adds	r3, r7, #4
 8008c08:	009b      	lsls	r3, r3, #2
 8008c0a:	18e3      	adds	r3, r4, r3
 8008c0c:	605d      	str	r5, [r3, #4]
 8008c0e:	1c7b      	adds	r3, r7, #1
 8008c10:	6123      	str	r3, [r4, #16]
 8008c12:	0020      	movs	r0, r4
 8008c14:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 8008c16:	46c0      	nop			; (mov r8, r8)
 8008c18:	0800a59b 	.word	0x0800a59b
 8008c1c:	0800a5ac 	.word	0x0800a5ac

08008c20 <__hi0bits>:
 8008c20:	0003      	movs	r3, r0
 8008c22:	0c02      	lsrs	r2, r0, #16
 8008c24:	2000      	movs	r0, #0
 8008c26:	4282      	cmp	r2, r0
 8008c28:	d101      	bne.n	8008c2e <__hi0bits+0xe>
 8008c2a:	041b      	lsls	r3, r3, #16
 8008c2c:	3010      	adds	r0, #16
 8008c2e:	0e1a      	lsrs	r2, r3, #24
 8008c30:	d101      	bne.n	8008c36 <__hi0bits+0x16>
 8008c32:	3008      	adds	r0, #8
 8008c34:	021b      	lsls	r3, r3, #8
 8008c36:	0f1a      	lsrs	r2, r3, #28
 8008c38:	d101      	bne.n	8008c3e <__hi0bits+0x1e>
 8008c3a:	3004      	adds	r0, #4
 8008c3c:	011b      	lsls	r3, r3, #4
 8008c3e:	0f9a      	lsrs	r2, r3, #30
 8008c40:	d101      	bne.n	8008c46 <__hi0bits+0x26>
 8008c42:	3002      	adds	r0, #2
 8008c44:	009b      	lsls	r3, r3, #2
 8008c46:	2b00      	cmp	r3, #0
 8008c48:	db03      	blt.n	8008c52 <__hi0bits+0x32>
 8008c4a:	3001      	adds	r0, #1
 8008c4c:	005b      	lsls	r3, r3, #1
 8008c4e:	d400      	bmi.n	8008c52 <__hi0bits+0x32>
 8008c50:	2020      	movs	r0, #32
 8008c52:	4770      	bx	lr

08008c54 <__lo0bits>:
 8008c54:	6803      	ldr	r3, [r0, #0]
 8008c56:	0002      	movs	r2, r0
 8008c58:	2107      	movs	r1, #7
 8008c5a:	0018      	movs	r0, r3
 8008c5c:	4008      	ands	r0, r1
 8008c5e:	420b      	tst	r3, r1
 8008c60:	d00d      	beq.n	8008c7e <__lo0bits+0x2a>
 8008c62:	3906      	subs	r1, #6
 8008c64:	2000      	movs	r0, #0
 8008c66:	420b      	tst	r3, r1
 8008c68:	d105      	bne.n	8008c76 <__lo0bits+0x22>
 8008c6a:	3002      	adds	r0, #2
 8008c6c:	4203      	tst	r3, r0
 8008c6e:	d003      	beq.n	8008c78 <__lo0bits+0x24>
 8008c70:	40cb      	lsrs	r3, r1
 8008c72:	0008      	movs	r0, r1
 8008c74:	6013      	str	r3, [r2, #0]
 8008c76:	4770      	bx	lr
 8008c78:	089b      	lsrs	r3, r3, #2
 8008c7a:	6013      	str	r3, [r2, #0]
 8008c7c:	e7fb      	b.n	8008c76 <__lo0bits+0x22>
 8008c7e:	b299      	uxth	r1, r3
 8008c80:	2900      	cmp	r1, #0
 8008c82:	d101      	bne.n	8008c88 <__lo0bits+0x34>
 8008c84:	2010      	movs	r0, #16
 8008c86:	0c1b      	lsrs	r3, r3, #16
 8008c88:	b2d9      	uxtb	r1, r3
 8008c8a:	2900      	cmp	r1, #0
 8008c8c:	d101      	bne.n	8008c92 <__lo0bits+0x3e>
 8008c8e:	3008      	adds	r0, #8
 8008c90:	0a1b      	lsrs	r3, r3, #8
 8008c92:	0719      	lsls	r1, r3, #28
 8008c94:	d101      	bne.n	8008c9a <__lo0bits+0x46>
 8008c96:	3004      	adds	r0, #4
 8008c98:	091b      	lsrs	r3, r3, #4
 8008c9a:	0799      	lsls	r1, r3, #30
 8008c9c:	d101      	bne.n	8008ca2 <__lo0bits+0x4e>
 8008c9e:	3002      	adds	r0, #2
 8008ca0:	089b      	lsrs	r3, r3, #2
 8008ca2:	07d9      	lsls	r1, r3, #31
 8008ca4:	d4e9      	bmi.n	8008c7a <__lo0bits+0x26>
 8008ca6:	3001      	adds	r0, #1
 8008ca8:	085b      	lsrs	r3, r3, #1
 8008caa:	d1e6      	bne.n	8008c7a <__lo0bits+0x26>
 8008cac:	2020      	movs	r0, #32
 8008cae:	e7e2      	b.n	8008c76 <__lo0bits+0x22>

08008cb0 <__i2b>:
 8008cb0:	b510      	push	{r4, lr}
 8008cb2:	000c      	movs	r4, r1
 8008cb4:	2101      	movs	r1, #1
 8008cb6:	f7ff ff07 	bl	8008ac8 <_Balloc>
 8008cba:	2800      	cmp	r0, #0
 8008cbc:	d106      	bne.n	8008ccc <__i2b+0x1c>
 8008cbe:	21a0      	movs	r1, #160	; 0xa0
 8008cc0:	0002      	movs	r2, r0
 8008cc2:	4b04      	ldr	r3, [pc, #16]	; (8008cd4 <__i2b+0x24>)
 8008cc4:	4804      	ldr	r0, [pc, #16]	; (8008cd8 <__i2b+0x28>)
 8008cc6:	0049      	lsls	r1, r1, #1
 8008cc8:	f000 fd1c 	bl	8009704 <__assert_func>
 8008ccc:	2301      	movs	r3, #1
 8008cce:	6144      	str	r4, [r0, #20]
 8008cd0:	6103      	str	r3, [r0, #16]
 8008cd2:	bd10      	pop	{r4, pc}
 8008cd4:	0800a59b 	.word	0x0800a59b
 8008cd8:	0800a5ac 	.word	0x0800a5ac

08008cdc <__multiply>:
 8008cdc:	b5f0      	push	{r4, r5, r6, r7, lr}
 8008cde:	690b      	ldr	r3, [r1, #16]
 8008ce0:	0014      	movs	r4, r2
 8008ce2:	6912      	ldr	r2, [r2, #16]
 8008ce4:	000d      	movs	r5, r1
 8008ce6:	b089      	sub	sp, #36	; 0x24
 8008ce8:	4293      	cmp	r3, r2
 8008cea:	da01      	bge.n	8008cf0 <__multiply+0x14>
 8008cec:	0025      	movs	r5, r4
 8008cee:	000c      	movs	r4, r1
 8008cf0:	692f      	ldr	r7, [r5, #16]
 8008cf2:	6926      	ldr	r6, [r4, #16]
 8008cf4:	6869      	ldr	r1, [r5, #4]
 8008cf6:	19bb      	adds	r3, r7, r6
 8008cf8:	9302      	str	r3, [sp, #8]
 8008cfa:	68ab      	ldr	r3, [r5, #8]
 8008cfc:	19ba      	adds	r2, r7, r6
 8008cfe:	4293      	cmp	r3, r2
 8008d00:	da00      	bge.n	8008d04 <__multiply+0x28>
 8008d02:	3101      	adds	r1, #1
 8008d04:	f7ff fee0 	bl	8008ac8 <_Balloc>
 8008d08:	9001      	str	r0, [sp, #4]
 8008d0a:	2800      	cmp	r0, #0
 8008d0c:	d106      	bne.n	8008d1c <__multiply+0x40>
 8008d0e:	215e      	movs	r1, #94	; 0x5e
 8008d10:	0002      	movs	r2, r0
 8008d12:	4b48      	ldr	r3, [pc, #288]	; (8008e34 <__multiply+0x158>)
 8008d14:	4848      	ldr	r0, [pc, #288]	; (8008e38 <__multiply+0x15c>)
 8008d16:	31ff      	adds	r1, #255	; 0xff
 8008d18:	f000 fcf4 	bl	8009704 <__assert_func>
 8008d1c:	9b01      	ldr	r3, [sp, #4]
 8008d1e:	2200      	movs	r2, #0
 8008d20:	3314      	adds	r3, #20
 8008d22:	469c      	mov	ip, r3
 8008d24:	19bb      	adds	r3, r7, r6
 8008d26:	009b      	lsls	r3, r3, #2
 8008d28:	4463      	add	r3, ip
 8008d2a:	9303      	str	r3, [sp, #12]
 8008d2c:	4663      	mov	r3, ip
 8008d2e:	9903      	ldr	r1, [sp, #12]
 8008d30:	428b      	cmp	r3, r1
 8008d32:	d32c      	bcc.n	8008d8e <__multiply+0xb2>
 8008d34:	002b      	movs	r3, r5
 8008d36:	0022      	movs	r2, r4
 8008d38:	3314      	adds	r3, #20
 8008d3a:	00bf      	lsls	r7, r7, #2
 8008d3c:	3214      	adds	r2, #20
 8008d3e:	9306      	str	r3, [sp, #24]
 8008d40:	00b6      	lsls	r6, r6, #2
 8008d42:	19db      	adds	r3, r3, r7
 8008d44:	9304      	str	r3, [sp, #16]
 8008d46:	1993      	adds	r3, r2, r6
 8008d48:	9307      	str	r3, [sp, #28]
 8008d4a:	2304      	movs	r3, #4
 8008d4c:	9305      	str	r3, [sp, #20]
 8008d4e:	002b      	movs	r3, r5
 8008d50:	9904      	ldr	r1, [sp, #16]
 8008d52:	3315      	adds	r3, #21
 8008d54:	9200      	str	r2, [sp, #0]
 8008d56:	4299      	cmp	r1, r3
 8008d58:	d305      	bcc.n	8008d66 <__multiply+0x8a>
 8008d5a:	1b4b      	subs	r3, r1, r5
 8008d5c:	3b15      	subs	r3, #21
 8008d5e:	089b      	lsrs	r3, r3, #2
 8008d60:	3301      	adds	r3, #1
 8008d62:	009b      	lsls	r3, r3, #2
 8008d64:	9305      	str	r3, [sp, #20]
 8008d66:	9b07      	ldr	r3, [sp, #28]
 8008d68:	9a00      	ldr	r2, [sp, #0]
 8008d6a:	429a      	cmp	r2, r3
 8008d6c:	d311      	bcc.n	8008d92 <__multiply+0xb6>
 8008d6e:	9b02      	ldr	r3, [sp, #8]
 8008d70:	2b00      	cmp	r3, #0
 8008d72:	dd06      	ble.n	8008d82 <__multiply+0xa6>
 8008d74:	9b03      	ldr	r3, [sp, #12]
 8008d76:	3b04      	subs	r3, #4
 8008d78:	9303      	str	r3, [sp, #12]
 8008d7a:	681b      	ldr	r3, [r3, #0]
 8008d7c:	9300      	str	r3, [sp, #0]
 8008d7e:	2b00      	cmp	r3, #0
 8008d80:	d053      	beq.n	8008e2a <__multiply+0x14e>
 8008d82:	9b01      	ldr	r3, [sp, #4]
 8008d84:	9a02      	ldr	r2, [sp, #8]
 8008d86:	0018      	movs	r0, r3
 8008d88:	611a      	str	r2, [r3, #16]
 8008d8a:	b009      	add	sp, #36	; 0x24
 8008d8c:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8008d8e:	c304      	stmia	r3!, {r2}
 8008d90:	e7cd      	b.n	8008d2e <__multiply+0x52>
 8008d92:	9b00      	ldr	r3, [sp, #0]
 8008d94:	681b      	ldr	r3, [r3, #0]
 8008d96:	b298      	uxth	r0, r3
 8008d98:	2800      	cmp	r0, #0
 8008d9a:	d01b      	beq.n	8008dd4 <__multiply+0xf8>
 8008d9c:	4667      	mov	r7, ip
 8008d9e:	2400      	movs	r4, #0
 8008da0:	9e06      	ldr	r6, [sp, #24]
 8008da2:	ce02      	ldmia	r6!, {r1}
 8008da4:	683a      	ldr	r2, [r7, #0]
 8008da6:	b28b      	uxth	r3, r1
 8008da8:	4343      	muls	r3, r0
 8008daa:	b292      	uxth	r2, r2
 8008dac:	189b      	adds	r3, r3, r2
 8008dae:	191b      	adds	r3, r3, r4
 8008db0:	0c0c      	lsrs	r4, r1, #16
 8008db2:	4344      	muls	r4, r0
 8008db4:	683a      	ldr	r2, [r7, #0]
 8008db6:	0c11      	lsrs	r1, r2, #16
 8008db8:	1861      	adds	r1, r4, r1
 8008dba:	0c1c      	lsrs	r4, r3, #16
 8008dbc:	1909      	adds	r1, r1, r4
 8008dbe:	0c0c      	lsrs	r4, r1, #16
 8008dc0:	b29b      	uxth	r3, r3
 8008dc2:	0409      	lsls	r1, r1, #16
 8008dc4:	430b      	orrs	r3, r1
 8008dc6:	c708      	stmia	r7!, {r3}
 8008dc8:	9b04      	ldr	r3, [sp, #16]
 8008dca:	42b3      	cmp	r3, r6
 8008dcc:	d8e9      	bhi.n	8008da2 <__multiply+0xc6>
 8008dce:	4663      	mov	r3, ip
 8008dd0:	9a05      	ldr	r2, [sp, #20]
 8008dd2:	509c      	str	r4, [r3, r2]
 8008dd4:	9b00      	ldr	r3, [sp, #0]
 8008dd6:	681b      	ldr	r3, [r3, #0]
 8008dd8:	0c1e      	lsrs	r6, r3, #16
 8008dda:	d020      	beq.n	8008e1e <__multiply+0x142>
 8008ddc:	4663      	mov	r3, ip
 8008dde:	002c      	movs	r4, r5
 8008de0:	4660      	mov	r0, ip
 8008de2:	2700      	movs	r7, #0
 8008de4:	681b      	ldr	r3, [r3, #0]
 8008de6:	3414      	adds	r4, #20
 8008de8:	6822      	ldr	r2, [r4, #0]
 8008dea:	b29b      	uxth	r3, r3
 8008dec:	b291      	uxth	r1, r2
 8008dee:	4371      	muls	r1, r6
 8008df0:	6802      	ldr	r2, [r0, #0]
 8008df2:	0c12      	lsrs	r2, r2, #16
 8008df4:	1889      	adds	r1, r1, r2
 8008df6:	19cf      	adds	r7, r1, r7
 8008df8:	0439      	lsls	r1, r7, #16
 8008dfa:	430b      	orrs	r3, r1
 8008dfc:	6003      	str	r3, [r0, #0]
 8008dfe:	cc02      	ldmia	r4!, {r1}
 8008e00:	6843      	ldr	r3, [r0, #4]
 8008e02:	0c09      	lsrs	r1, r1, #16
 8008e04:	4371      	muls	r1, r6
 8008e06:	b29b      	uxth	r3, r3
 8008e08:	0c3f      	lsrs	r7, r7, #16
 8008e0a:	18cb      	adds	r3, r1, r3
 8008e0c:	9a04      	ldr	r2, [sp, #16]
 8008e0e:	19db      	adds	r3, r3, r7
 8008e10:	0c1f      	lsrs	r7, r3, #16
 8008e12:	3004      	adds	r0, #4
 8008e14:	42a2      	cmp	r2, r4
 8008e16:	d8e7      	bhi.n	8008de8 <__multiply+0x10c>
 8008e18:	4662      	mov	r2, ip
 8008e1a:	9905      	ldr	r1, [sp, #20]
 8008e1c:	5053      	str	r3, [r2, r1]
 8008e1e:	9b00      	ldr	r3, [sp, #0]
 8008e20:	3304      	adds	r3, #4
 8008e22:	9300      	str	r3, [sp, #0]
 8008e24:	2304      	movs	r3, #4
 8008e26:	449c      	add	ip, r3
 8008e28:	e79d      	b.n	8008d66 <__multiply+0x8a>
 8008e2a:	9b02      	ldr	r3, [sp, #8]
 8008e2c:	3b01      	subs	r3, #1
 8008e2e:	9302      	str	r3, [sp, #8]
 8008e30:	e79d      	b.n	8008d6e <__multiply+0x92>
 8008e32:	46c0      	nop			; (mov r8, r8)
 8008e34:	0800a59b 	.word	0x0800a59b
 8008e38:	0800a5ac 	.word	0x0800a5ac

08008e3c <__pow5mult>:
 8008e3c:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8008e3e:	2303      	movs	r3, #3
 8008e40:	0015      	movs	r5, r2
 8008e42:	0007      	movs	r7, r0
 8008e44:	000e      	movs	r6, r1
 8008e46:	401a      	ands	r2, r3
 8008e48:	421d      	tst	r5, r3
 8008e4a:	d008      	beq.n	8008e5e <__pow5mult+0x22>
 8008e4c:	4925      	ldr	r1, [pc, #148]	; (8008ee4 <__pow5mult+0xa8>)
 8008e4e:	3a01      	subs	r2, #1
 8008e50:	0092      	lsls	r2, r2, #2
 8008e52:	5852      	ldr	r2, [r2, r1]
 8008e54:	2300      	movs	r3, #0
 8008e56:	0031      	movs	r1, r6
 8008e58:	f7ff fe9e 	bl	8008b98 <__multadd>
 8008e5c:	0006      	movs	r6, r0
 8008e5e:	10ad      	asrs	r5, r5, #2
 8008e60:	d03d      	beq.n	8008ede <__pow5mult+0xa2>
 8008e62:	6a7c      	ldr	r4, [r7, #36]	; 0x24
 8008e64:	2c00      	cmp	r4, #0
 8008e66:	d10f      	bne.n	8008e88 <__pow5mult+0x4c>
 8008e68:	2010      	movs	r0, #16
 8008e6a:	f7ff fe0f 	bl	8008a8c <malloc>
 8008e6e:	1e02      	subs	r2, r0, #0
 8008e70:	6278      	str	r0, [r7, #36]	; 0x24
 8008e72:	d105      	bne.n	8008e80 <__pow5mult+0x44>
 8008e74:	21d7      	movs	r1, #215	; 0xd7
 8008e76:	4b1c      	ldr	r3, [pc, #112]	; (8008ee8 <__pow5mult+0xac>)
 8008e78:	481c      	ldr	r0, [pc, #112]	; (8008eec <__pow5mult+0xb0>)
 8008e7a:	0049      	lsls	r1, r1, #1
 8008e7c:	f000 fc42 	bl	8009704 <__assert_func>
 8008e80:	6044      	str	r4, [r0, #4]
 8008e82:	6084      	str	r4, [r0, #8]
 8008e84:	6004      	str	r4, [r0, #0]
 8008e86:	60c4      	str	r4, [r0, #12]
 8008e88:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008e8a:	689c      	ldr	r4, [r3, #8]
 8008e8c:	9301      	str	r3, [sp, #4]
 8008e8e:	2c00      	cmp	r4, #0
 8008e90:	d108      	bne.n	8008ea4 <__pow5mult+0x68>
 8008e92:	0038      	movs	r0, r7
 8008e94:	4916      	ldr	r1, [pc, #88]	; (8008ef0 <__pow5mult+0xb4>)
 8008e96:	f7ff ff0b 	bl	8008cb0 <__i2b>
 8008e9a:	9b01      	ldr	r3, [sp, #4]
 8008e9c:	0004      	movs	r4, r0
 8008e9e:	6098      	str	r0, [r3, #8]
 8008ea0:	2300      	movs	r3, #0
 8008ea2:	6003      	str	r3, [r0, #0]
 8008ea4:	2301      	movs	r3, #1
 8008ea6:	421d      	tst	r5, r3
 8008ea8:	d00a      	beq.n	8008ec0 <__pow5mult+0x84>
 8008eaa:	0031      	movs	r1, r6
 8008eac:	0022      	movs	r2, r4
 8008eae:	0038      	movs	r0, r7
 8008eb0:	f7ff ff14 	bl	8008cdc <__multiply>
 8008eb4:	0031      	movs	r1, r6
 8008eb6:	9001      	str	r0, [sp, #4]
 8008eb8:	0038      	movs	r0, r7
 8008eba:	f7ff fe49 	bl	8008b50 <_Bfree>
 8008ebe:	9e01      	ldr	r6, [sp, #4]
 8008ec0:	106d      	asrs	r5, r5, #1
 8008ec2:	d00c      	beq.n	8008ede <__pow5mult+0xa2>
 8008ec4:	6820      	ldr	r0, [r4, #0]
 8008ec6:	2800      	cmp	r0, #0
 8008ec8:	d107      	bne.n	8008eda <__pow5mult+0x9e>
 8008eca:	0022      	movs	r2, r4
 8008ecc:	0021      	movs	r1, r4
 8008ece:	0038      	movs	r0, r7
 8008ed0:	f7ff ff04 	bl	8008cdc <__multiply>
 8008ed4:	2300      	movs	r3, #0
 8008ed6:	6020      	str	r0, [r4, #0]
 8008ed8:	6003      	str	r3, [r0, #0]
 8008eda:	0004      	movs	r4, r0
 8008edc:	e7e2      	b.n	8008ea4 <__pow5mult+0x68>
 8008ede:	0030      	movs	r0, r6
 8008ee0:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 8008ee2:	46c0      	nop			; (mov r8, r8)
 8008ee4:	0800a6f8 	.word	0x0800a6f8
 8008ee8:	0800a529 	.word	0x0800a529
 8008eec:	0800a5ac 	.word	0x0800a5ac
 8008ef0:	00000271 	.word	0x00000271

08008ef4 <__lshift>:
 8008ef4:	b5f0      	push	{r4, r5, r6, r7, lr}
 8008ef6:	000c      	movs	r4, r1
 8008ef8:	0017      	movs	r7, r2
 8008efa:	6923      	ldr	r3, [r4, #16]
 8008efc:	1155      	asrs	r5, r2, #5
 8008efe:	b087      	sub	sp, #28
 8008f00:	18eb      	adds	r3, r5, r3
 8008f02:	9302      	str	r3, [sp, #8]
 8008f04:	3301      	adds	r3, #1
 8008f06:	9301      	str	r3, [sp, #4]
 8008f08:	6849      	ldr	r1, [r1, #4]
 8008f0a:	68a3      	ldr	r3, [r4, #8]
 8008f0c:	9004      	str	r0, [sp, #16]
 8008f0e:	9a01      	ldr	r2, [sp, #4]
 8008f10:	4293      	cmp	r3, r2
 8008f12:	db10      	blt.n	8008f36 <__lshift+0x42>
 8008f14:	9804      	ldr	r0, [sp, #16]
 8008f16:	f7ff fdd7 	bl	8008ac8 <_Balloc>
 8008f1a:	2300      	movs	r3, #0
 8008f1c:	0002      	movs	r2, r0
 8008f1e:	0006      	movs	r6, r0
 8008f20:	0019      	movs	r1, r3
 8008f22:	3214      	adds	r2, #20
 8008f24:	4298      	cmp	r0, r3
 8008f26:	d10c      	bne.n	8008f42 <__lshift+0x4e>
 8008f28:	21da      	movs	r1, #218	; 0xda
 8008f2a:	0002      	movs	r2, r0
 8008f2c:	4b26      	ldr	r3, [pc, #152]	; (8008fc8 <__lshift+0xd4>)
 8008f2e:	4827      	ldr	r0, [pc, #156]	; (8008fcc <__lshift+0xd8>)
 8008f30:	31ff      	adds	r1, #255	; 0xff
 8008f32:	f000 fbe7 	bl	8009704 <__assert_func>
 8008f36:	3101      	adds	r1, #1
 8008f38:	005b      	lsls	r3, r3, #1
 8008f3a:	e7e8      	b.n	8008f0e <__lshift+0x1a>
 8008f3c:	0098      	lsls	r0, r3, #2
 8008f3e:	5011      	str	r1, [r2, r0]
 8008f40:	3301      	adds	r3, #1
 8008f42:	42ab      	cmp	r3, r5
 8008f44:	dbfa      	blt.n	8008f3c <__lshift+0x48>
 8008f46:	43eb      	mvns	r3, r5
 8008f48:	17db      	asrs	r3, r3, #31
 8008f4a:	401d      	ands	r5, r3
 8008f4c:	211f      	movs	r1, #31
 8008f4e:	0023      	movs	r3, r4
 8008f50:	0038      	movs	r0, r7
 8008f52:	00ad      	lsls	r5, r5, #2
 8008f54:	1955      	adds	r5, r2, r5
 8008f56:	6922      	ldr	r2, [r4, #16]
 8008f58:	3314      	adds	r3, #20
 8008f5a:	0092      	lsls	r2, r2, #2
 8008f5c:	4008      	ands	r0, r1
 8008f5e:	4684      	mov	ip, r0
 8008f60:	189a      	adds	r2, r3, r2
 8008f62:	420f      	tst	r7, r1
 8008f64:	d02a      	beq.n	8008fbc <__lshift+0xc8>
 8008f66:	3101      	adds	r1, #1
 8008f68:	1a09      	subs	r1, r1, r0
 8008f6a:	9105      	str	r1, [sp, #20]
 8008f6c:	2100      	movs	r1, #0
 8008f6e:	9503      	str	r5, [sp, #12]
 8008f70:	4667      	mov	r7, ip
 8008f72:	6818      	ldr	r0, [r3, #0]
 8008f74:	40b8      	lsls	r0, r7
 8008f76:	4301      	orrs	r1, r0
 8008f78:	9803      	ldr	r0, [sp, #12]
 8008f7a:	c002      	stmia	r0!, {r1}
 8008f7c:	cb02      	ldmia	r3!, {r1}
 8008f7e:	9003      	str	r0, [sp, #12]
 8008f80:	9805      	ldr	r0, [sp, #20]
 8008f82:	40c1      	lsrs	r1, r0
 8008f84:	429a      	cmp	r2, r3
 8008f86:	d8f3      	bhi.n	8008f70 <__lshift+0x7c>
 8008f88:	0020      	movs	r0, r4
 8008f8a:	3015      	adds	r0, #21
 8008f8c:	2304      	movs	r3, #4
 8008f8e:	4282      	cmp	r2, r0
 8008f90:	d304      	bcc.n	8008f9c <__lshift+0xa8>
 8008f92:	1b13      	subs	r3, r2, r4
 8008f94:	3b15      	subs	r3, #21
 8008f96:	089b      	lsrs	r3, r3, #2
 8008f98:	3301      	adds	r3, #1
 8008f9a:	009b      	lsls	r3, r3, #2
 8008f9c:	50e9      	str	r1, [r5, r3]
 8008f9e:	2900      	cmp	r1, #0
 8008fa0:	d002      	beq.n	8008fa8 <__lshift+0xb4>
 8008fa2:	9b02      	ldr	r3, [sp, #8]
 8008fa4:	3302      	adds	r3, #2
 8008fa6:	9301      	str	r3, [sp, #4]
 8008fa8:	9b01      	ldr	r3, [sp, #4]
 8008faa:	9804      	ldr	r0, [sp, #16]
 8008fac:	3b01      	subs	r3, #1
 8008fae:	0021      	movs	r1, r4
 8008fb0:	6133      	str	r3, [r6, #16]
 8008fb2:	f7ff fdcd 	bl	8008b50 <_Bfree>
 8008fb6:	0030      	movs	r0, r6
 8008fb8:	b007      	add	sp, #28
 8008fba:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8008fbc:	cb02      	ldmia	r3!, {r1}
 8008fbe:	c502      	stmia	r5!, {r1}
 8008fc0:	429a      	cmp	r2, r3
 8008fc2:	d8fb      	bhi.n	8008fbc <__lshift+0xc8>
 8008fc4:	e7f0      	b.n	8008fa8 <__lshift+0xb4>
 8008fc6:	46c0      	nop			; (mov r8, r8)
 8008fc8:	0800a59b 	.word	0x0800a59b
 8008fcc:	0800a5ac 	.word	0x0800a5ac

08008fd0 <__mcmp>:
 8008fd0:	6902      	ldr	r2, [r0, #16]
 8008fd2:	690b      	ldr	r3, [r1, #16]
 8008fd4:	b530      	push	{r4, r5, lr}
 8008fd6:	0004      	movs	r4, r0
 8008fd8:	1ad0      	subs	r0, r2, r3
 8008fda:	429a      	cmp	r2, r3
 8008fdc:	d10d      	bne.n	8008ffa <__mcmp+0x2a>
 8008fde:	009b      	lsls	r3, r3, #2
 8008fe0:	3414      	adds	r4, #20
 8008fe2:	3114      	adds	r1, #20
 8008fe4:	18e2      	adds	r2, r4, r3
 8008fe6:	18c9      	adds	r1, r1, r3
 8008fe8:	3a04      	subs	r2, #4
 8008fea:	3904      	subs	r1, #4
 8008fec:	6815      	ldr	r5, [r2, #0]
 8008fee:	680b      	ldr	r3, [r1, #0]
 8008ff0:	429d      	cmp	r5, r3
 8008ff2:	d003      	beq.n	8008ffc <__mcmp+0x2c>
 8008ff4:	2001      	movs	r0, #1
 8008ff6:	429d      	cmp	r5, r3
 8008ff8:	d303      	bcc.n	8009002 <__mcmp+0x32>
 8008ffa:	bd30      	pop	{r4, r5, pc}
 8008ffc:	4294      	cmp	r4, r2
 8008ffe:	d3f3      	bcc.n	8008fe8 <__mcmp+0x18>
 8009000:	e7fb      	b.n	8008ffa <__mcmp+0x2a>
 8009002:	4240      	negs	r0, r0
 8009004:	e7f9      	b.n	8008ffa <__mcmp+0x2a>
	...

08009008 <__mdiff>:
 8009008:	b5f0      	push	{r4, r5, r6, r7, lr}
 800900a:	000e      	movs	r6, r1
 800900c:	0007      	movs	r7, r0
 800900e:	0011      	movs	r1, r2
 8009010:	0030      	movs	r0, r6
 8009012:	b087      	sub	sp, #28
 8009014:	0014      	movs	r4, r2
 8009016:	f7ff ffdb 	bl	8008fd0 <__mcmp>
 800901a:	1e05      	subs	r5, r0, #0
 800901c:	d110      	bne.n	8009040 <__mdiff+0x38>
 800901e:	0001      	movs	r1, r0
 8009020:	0038      	movs	r0, r7
 8009022:	f7ff fd51 	bl	8008ac8 <_Balloc>
 8009026:	1e02      	subs	r2, r0, #0
 8009028:	d104      	bne.n	8009034 <__mdiff+0x2c>
 800902a:	4b40      	ldr	r3, [pc, #256]	; (800912c <__mdiff+0x124>)
 800902c:	4940      	ldr	r1, [pc, #256]	; (8009130 <__mdiff+0x128>)
 800902e:	4841      	ldr	r0, [pc, #260]	; (8009134 <__mdiff+0x12c>)
 8009030:	f000 fb68 	bl	8009704 <__assert_func>
 8009034:	2301      	movs	r3, #1
 8009036:	6145      	str	r5, [r0, #20]
 8009038:	6103      	str	r3, [r0, #16]
 800903a:	0010      	movs	r0, r2
 800903c:	b007      	add	sp, #28
 800903e:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8009040:	2301      	movs	r3, #1
 8009042:	9301      	str	r3, [sp, #4]
 8009044:	2800      	cmp	r0, #0
 8009046:	db04      	blt.n	8009052 <__mdiff+0x4a>
 8009048:	0023      	movs	r3, r4
 800904a:	0034      	movs	r4, r6
 800904c:	001e      	movs	r6, r3
 800904e:	2300      	movs	r3, #0
 8009050:	9301      	str	r3, [sp, #4]
 8009052:	0038      	movs	r0, r7
 8009054:	6861      	ldr	r1, [r4, #4]
 8009056:	f7ff fd37 	bl	8008ac8 <_Balloc>
 800905a:	1e02      	subs	r2, r0, #0
 800905c:	d103      	bne.n	8009066 <__mdiff+0x5e>
 800905e:	2190      	movs	r1, #144	; 0x90
 8009060:	4b32      	ldr	r3, [pc, #200]	; (800912c <__mdiff+0x124>)
 8009062:	0089      	lsls	r1, r1, #2
 8009064:	e7e3      	b.n	800902e <__mdiff+0x26>
 8009066:	9b01      	ldr	r3, [sp, #4]
 8009068:	2700      	movs	r7, #0
 800906a:	60c3      	str	r3, [r0, #12]
 800906c:	6920      	ldr	r0, [r4, #16]
 800906e:	3414      	adds	r4, #20
 8009070:	9401      	str	r4, [sp, #4]
 8009072:	9b01      	ldr	r3, [sp, #4]
 8009074:	0084      	lsls	r4, r0, #2
 8009076:	191b      	adds	r3, r3, r4
 8009078:	0034      	movs	r4, r6
 800907a:	9302      	str	r3, [sp, #8]
 800907c:	6933      	ldr	r3, [r6, #16]
 800907e:	3414      	adds	r4, #20
 8009080:	0099      	lsls	r1, r3, #2
 8009082:	1863      	adds	r3, r4, r1
 8009084:	9303      	str	r3, [sp, #12]
 8009086:	0013      	movs	r3, r2
 8009088:	3314      	adds	r3, #20
 800908a:	469c      	mov	ip, r3
 800908c:	9305      	str	r3, [sp, #20]
 800908e:	9b01      	ldr	r3, [sp, #4]
 8009090:	9304      	str	r3, [sp, #16]
 8009092:	9b04      	ldr	r3, [sp, #16]
 8009094:	cc02      	ldmia	r4!, {r1}
 8009096:	cb20      	ldmia	r3!, {r5}
 8009098:	9304      	str	r3, [sp, #16]
 800909a:	b2ab      	uxth	r3, r5
 800909c:	19df      	adds	r7, r3, r7
 800909e:	b28b      	uxth	r3, r1
 80090a0:	1afb      	subs	r3, r7, r3
 80090a2:	0c09      	lsrs	r1, r1, #16
 80090a4:	0c2d      	lsrs	r5, r5, #16
 80090a6:	1a6d      	subs	r5, r5, r1
 80090a8:	1419      	asrs	r1, r3, #16
 80090aa:	186d      	adds	r5, r5, r1
 80090ac:	4661      	mov	r1, ip
 80090ae:	142f      	asrs	r7, r5, #16
 80090b0:	b29b      	uxth	r3, r3
 80090b2:	042d      	lsls	r5, r5, #16
 80090b4:	432b      	orrs	r3, r5
 80090b6:	c108      	stmia	r1!, {r3}
 80090b8:	9b03      	ldr	r3, [sp, #12]
 80090ba:	468c      	mov	ip, r1
 80090bc:	42a3      	cmp	r3, r4
 80090be:	d8e8      	bhi.n	8009092 <__mdiff+0x8a>
 80090c0:	0031      	movs	r1, r6
 80090c2:	9c03      	ldr	r4, [sp, #12]
 80090c4:	3115      	adds	r1, #21
 80090c6:	2304      	movs	r3, #4
 80090c8:	428c      	cmp	r4, r1
 80090ca:	d304      	bcc.n	80090d6 <__mdiff+0xce>
 80090cc:	1ba3      	subs	r3, r4, r6
 80090ce:	3b15      	subs	r3, #21
 80090d0:	089b      	lsrs	r3, r3, #2
 80090d2:	3301      	adds	r3, #1
 80090d4:	009b      	lsls	r3, r3, #2
 80090d6:	9901      	ldr	r1, [sp, #4]
 80090d8:	18cc      	adds	r4, r1, r3
 80090da:	9905      	ldr	r1, [sp, #20]
 80090dc:	0026      	movs	r6, r4
 80090de:	18cb      	adds	r3, r1, r3
 80090e0:	469c      	mov	ip, r3
 80090e2:	9902      	ldr	r1, [sp, #8]
 80090e4:	428e      	cmp	r6, r1
 80090e6:	d310      	bcc.n	800910a <__mdiff+0x102>
 80090e8:	9e02      	ldr	r6, [sp, #8]
 80090ea:	1ee1      	subs	r1, r4, #3
 80090ec:	2500      	movs	r5, #0
 80090ee:	428e      	cmp	r6, r1
 80090f0:	d304      	bcc.n	80090fc <__mdiff+0xf4>
 80090f2:	0031      	movs	r1, r6
 80090f4:	3103      	adds	r1, #3
 80090f6:	1b0c      	subs	r4, r1, r4
 80090f8:	08a4      	lsrs	r4, r4, #2
 80090fa:	00a5      	lsls	r5, r4, #2
 80090fc:	195b      	adds	r3, r3, r5
 80090fe:	3b04      	subs	r3, #4
 8009100:	6819      	ldr	r1, [r3, #0]
 8009102:	2900      	cmp	r1, #0
 8009104:	d00f      	beq.n	8009126 <__mdiff+0x11e>
 8009106:	6110      	str	r0, [r2, #16]
 8009108:	e797      	b.n	800903a <__mdiff+0x32>
 800910a:	ce02      	ldmia	r6!, {r1}
 800910c:	b28d      	uxth	r5, r1
 800910e:	19ed      	adds	r5, r5, r7
 8009110:	0c0f      	lsrs	r7, r1, #16
 8009112:	1429      	asrs	r1, r5, #16
 8009114:	1879      	adds	r1, r7, r1
 8009116:	140f      	asrs	r7, r1, #16
 8009118:	b2ad      	uxth	r5, r5
 800911a:	0409      	lsls	r1, r1, #16
 800911c:	430d      	orrs	r5, r1
 800911e:	4661      	mov	r1, ip
 8009120:	c120      	stmia	r1!, {r5}
 8009122:	468c      	mov	ip, r1
 8009124:	e7dd      	b.n	80090e2 <__mdiff+0xda>
 8009126:	3801      	subs	r0, #1
 8009128:	e7e9      	b.n	80090fe <__mdiff+0xf6>
 800912a:	46c0      	nop			; (mov r8, r8)
 800912c:	0800a59b 	.word	0x0800a59b
 8009130:	00000232 	.word	0x00000232
 8009134:	0800a5ac 	.word	0x0800a5ac

08009138 <__d2b>:
 8009138:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800913a:	2101      	movs	r1, #1
 800913c:	0014      	movs	r4, r2
 800913e:	001e      	movs	r6, r3
 8009140:	9f08      	ldr	r7, [sp, #32]
 8009142:	f7ff fcc1 	bl	8008ac8 <_Balloc>
 8009146:	1e05      	subs	r5, r0, #0
 8009148:	d105      	bne.n	8009156 <__d2b+0x1e>
 800914a:	0002      	movs	r2, r0
 800914c:	4b26      	ldr	r3, [pc, #152]	; (80091e8 <__d2b+0xb0>)
 800914e:	4927      	ldr	r1, [pc, #156]	; (80091ec <__d2b+0xb4>)
 8009150:	4827      	ldr	r0, [pc, #156]	; (80091f0 <__d2b+0xb8>)
 8009152:	f000 fad7 	bl	8009704 <__assert_func>
 8009156:	0333      	lsls	r3, r6, #12
 8009158:	0076      	lsls	r6, r6, #1
 800915a:	0b1b      	lsrs	r3, r3, #12
 800915c:	0d76      	lsrs	r6, r6, #21
 800915e:	d124      	bne.n	80091aa <__d2b+0x72>
 8009160:	9301      	str	r3, [sp, #4]
 8009162:	2c00      	cmp	r4, #0
 8009164:	d027      	beq.n	80091b6 <__d2b+0x7e>
 8009166:	4668      	mov	r0, sp
 8009168:	9400      	str	r4, [sp, #0]
 800916a:	f7ff fd73 	bl	8008c54 <__lo0bits>
 800916e:	9c00      	ldr	r4, [sp, #0]
 8009170:	2800      	cmp	r0, #0
 8009172:	d01e      	beq.n	80091b2 <__d2b+0x7a>
 8009174:	9b01      	ldr	r3, [sp, #4]
 8009176:	2120      	movs	r1, #32
 8009178:	001a      	movs	r2, r3
 800917a:	1a09      	subs	r1, r1, r0
 800917c:	408a      	lsls	r2, r1
 800917e:	40c3      	lsrs	r3, r0
 8009180:	4322      	orrs	r2, r4
 8009182:	616a      	str	r2, [r5, #20]
 8009184:	9301      	str	r3, [sp, #4]
 8009186:	9c01      	ldr	r4, [sp, #4]
 8009188:	61ac      	str	r4, [r5, #24]
 800918a:	1e63      	subs	r3, r4, #1
 800918c:	419c      	sbcs	r4, r3
 800918e:	3401      	adds	r4, #1
 8009190:	612c      	str	r4, [r5, #16]
 8009192:	2e00      	cmp	r6, #0
 8009194:	d018      	beq.n	80091c8 <__d2b+0x90>
 8009196:	4b17      	ldr	r3, [pc, #92]	; (80091f4 <__d2b+0xbc>)
 8009198:	18f6      	adds	r6, r6, r3
 800919a:	2335      	movs	r3, #53	; 0x35
 800919c:	1836      	adds	r6, r6, r0
 800919e:	1a18      	subs	r0, r3, r0
 80091a0:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80091a2:	603e      	str	r6, [r7, #0]
 80091a4:	6018      	str	r0, [r3, #0]
 80091a6:	0028      	movs	r0, r5
 80091a8:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 80091aa:	2280      	movs	r2, #128	; 0x80
 80091ac:	0352      	lsls	r2, r2, #13
 80091ae:	4313      	orrs	r3, r2
 80091b0:	e7d6      	b.n	8009160 <__d2b+0x28>
 80091b2:	616c      	str	r4, [r5, #20]
 80091b4:	e7e7      	b.n	8009186 <__d2b+0x4e>
 80091b6:	a801      	add	r0, sp, #4
 80091b8:	f7ff fd4c 	bl	8008c54 <__lo0bits>
 80091bc:	2401      	movs	r4, #1
 80091be:	9b01      	ldr	r3, [sp, #4]
 80091c0:	612c      	str	r4, [r5, #16]
 80091c2:	616b      	str	r3, [r5, #20]
 80091c4:	3020      	adds	r0, #32
 80091c6:	e7e4      	b.n	8009192 <__d2b+0x5a>
 80091c8:	4b0b      	ldr	r3, [pc, #44]	; (80091f8 <__d2b+0xc0>)
 80091ca:	18c0      	adds	r0, r0, r3
 80091cc:	4b0b      	ldr	r3, [pc, #44]	; (80091fc <__d2b+0xc4>)
 80091ce:	6038      	str	r0, [r7, #0]
 80091d0:	18e3      	adds	r3, r4, r3
 80091d2:	009b      	lsls	r3, r3, #2
 80091d4:	18eb      	adds	r3, r5, r3
 80091d6:	6958      	ldr	r0, [r3, #20]
 80091d8:	f7ff fd22 	bl	8008c20 <__hi0bits>
 80091dc:	0164      	lsls	r4, r4, #5
 80091de:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80091e0:	1a24      	subs	r4, r4, r0
 80091e2:	601c      	str	r4, [r3, #0]
 80091e4:	e7df      	b.n	80091a6 <__d2b+0x6e>
 80091e6:	46c0      	nop			; (mov r8, r8)
 80091e8:	0800a59b 	.word	0x0800a59b
 80091ec:	0000030a 	.word	0x0000030a
 80091f0:	0800a5ac 	.word	0x0800a5ac
 80091f4:	fffffbcd 	.word	0xfffffbcd
 80091f8:	fffffbce 	.word	0xfffffbce
 80091fc:	3fffffff 	.word	0x3fffffff

08009200 <_calloc_r>:
 8009200:	b570      	push	{r4, r5, r6, lr}
 8009202:	0c13      	lsrs	r3, r2, #16
 8009204:	0c0d      	lsrs	r5, r1, #16
 8009206:	d11e      	bne.n	8009246 <_calloc_r+0x46>
 8009208:	2b00      	cmp	r3, #0
 800920a:	d10c      	bne.n	8009226 <_calloc_r+0x26>
 800920c:	b289      	uxth	r1, r1
 800920e:	b294      	uxth	r4, r2
 8009210:	434c      	muls	r4, r1
 8009212:	0021      	movs	r1, r4
 8009214:	f000 f88c 	bl	8009330 <_malloc_r>
 8009218:	1e05      	subs	r5, r0, #0
 800921a:	d01b      	beq.n	8009254 <_calloc_r+0x54>
 800921c:	0022      	movs	r2, r4
 800921e:	2100      	movs	r1, #0
 8009220:	f7fe f8f4 	bl	800740c <memset>
 8009224:	e016      	b.n	8009254 <_calloc_r+0x54>
 8009226:	1c1d      	adds	r5, r3, #0
 8009228:	1c0b      	adds	r3, r1, #0
 800922a:	b292      	uxth	r2, r2
 800922c:	b289      	uxth	r1, r1
 800922e:	b29c      	uxth	r4, r3
 8009230:	4351      	muls	r1, r2
 8009232:	b2ab      	uxth	r3, r5
 8009234:	4363      	muls	r3, r4
 8009236:	0c0c      	lsrs	r4, r1, #16
 8009238:	191c      	adds	r4, r3, r4
 800923a:	0c22      	lsrs	r2, r4, #16
 800923c:	d107      	bne.n	800924e <_calloc_r+0x4e>
 800923e:	0424      	lsls	r4, r4, #16
 8009240:	b289      	uxth	r1, r1
 8009242:	430c      	orrs	r4, r1
 8009244:	e7e5      	b.n	8009212 <_calloc_r+0x12>
 8009246:	2b00      	cmp	r3, #0
 8009248:	d101      	bne.n	800924e <_calloc_r+0x4e>
 800924a:	1c13      	adds	r3, r2, #0
 800924c:	e7ed      	b.n	800922a <_calloc_r+0x2a>
 800924e:	230c      	movs	r3, #12
 8009250:	2500      	movs	r5, #0
 8009252:	6003      	str	r3, [r0, #0]
 8009254:	0028      	movs	r0, r5
 8009256:	bd70      	pop	{r4, r5, r6, pc}

08009258 <_free_r>:
 8009258:	b570      	push	{r4, r5, r6, lr}
 800925a:	0005      	movs	r5, r0
 800925c:	2900      	cmp	r1, #0
 800925e:	d010      	beq.n	8009282 <_free_r+0x2a>
 8009260:	1f0c      	subs	r4, r1, #4
 8009262:	6823      	ldr	r3, [r4, #0]
 8009264:	2b00      	cmp	r3, #0
 8009266:	da00      	bge.n	800926a <_free_r+0x12>
 8009268:	18e4      	adds	r4, r4, r3
 800926a:	0028      	movs	r0, r5
 800926c:	f000 fa9e 	bl	80097ac <__malloc_lock>
 8009270:	4a1d      	ldr	r2, [pc, #116]	; (80092e8 <_free_r+0x90>)
 8009272:	6813      	ldr	r3, [r2, #0]
 8009274:	2b00      	cmp	r3, #0
 8009276:	d105      	bne.n	8009284 <_free_r+0x2c>
 8009278:	6063      	str	r3, [r4, #4]
 800927a:	6014      	str	r4, [r2, #0]
 800927c:	0028      	movs	r0, r5
 800927e:	f000 fa9d 	bl	80097bc <__malloc_unlock>
 8009282:	bd70      	pop	{r4, r5, r6, pc}
 8009284:	42a3      	cmp	r3, r4
 8009286:	d908      	bls.n	800929a <_free_r+0x42>
 8009288:	6821      	ldr	r1, [r4, #0]
 800928a:	1860      	adds	r0, r4, r1
 800928c:	4283      	cmp	r3, r0
 800928e:	d1f3      	bne.n	8009278 <_free_r+0x20>
 8009290:	6818      	ldr	r0, [r3, #0]
 8009292:	685b      	ldr	r3, [r3, #4]
 8009294:	1841      	adds	r1, r0, r1
 8009296:	6021      	str	r1, [r4, #0]
 8009298:	e7ee      	b.n	8009278 <_free_r+0x20>
 800929a:	001a      	movs	r2, r3
 800929c:	685b      	ldr	r3, [r3, #4]
 800929e:	2b00      	cmp	r3, #0
 80092a0:	d001      	beq.n	80092a6 <_free_r+0x4e>
 80092a2:	42a3      	cmp	r3, r4
 80092a4:	d9f9      	bls.n	800929a <_free_r+0x42>
 80092a6:	6811      	ldr	r1, [r2, #0]
 80092a8:	1850      	adds	r0, r2, r1
 80092aa:	42a0      	cmp	r0, r4
 80092ac:	d10b      	bne.n	80092c6 <_free_r+0x6e>
 80092ae:	6820      	ldr	r0, [r4, #0]
 80092b0:	1809      	adds	r1, r1, r0
 80092b2:	1850      	adds	r0, r2, r1
 80092b4:	6011      	str	r1, [r2, #0]
 80092b6:	4283      	cmp	r3, r0
 80092b8:	d1e0      	bne.n	800927c <_free_r+0x24>
 80092ba:	6818      	ldr	r0, [r3, #0]
 80092bc:	685b      	ldr	r3, [r3, #4]
 80092be:	1841      	adds	r1, r0, r1
 80092c0:	6011      	str	r1, [r2, #0]
 80092c2:	6053      	str	r3, [r2, #4]
 80092c4:	e7da      	b.n	800927c <_free_r+0x24>
 80092c6:	42a0      	cmp	r0, r4
 80092c8:	d902      	bls.n	80092d0 <_free_r+0x78>
 80092ca:	230c      	movs	r3, #12
 80092cc:	602b      	str	r3, [r5, #0]
 80092ce:	e7d5      	b.n	800927c <_free_r+0x24>
 80092d0:	6821      	ldr	r1, [r4, #0]
 80092d2:	1860      	adds	r0, r4, r1
 80092d4:	4283      	cmp	r3, r0
 80092d6:	d103      	bne.n	80092e0 <_free_r+0x88>
 80092d8:	6818      	ldr	r0, [r3, #0]
 80092da:	685b      	ldr	r3, [r3, #4]
 80092dc:	1841      	adds	r1, r0, r1
 80092de:	6021      	str	r1, [r4, #0]
 80092e0:	6063      	str	r3, [r4, #4]
 80092e2:	6054      	str	r4, [r2, #4]
 80092e4:	e7ca      	b.n	800927c <_free_r+0x24>
 80092e6:	46c0      	nop			; (mov r8, r8)
 80092e8:	200003a8 	.word	0x200003a8

080092ec <sbrk_aligned>:
 80092ec:	b570      	push	{r4, r5, r6, lr}
 80092ee:	4e0f      	ldr	r6, [pc, #60]	; (800932c <sbrk_aligned+0x40>)
 80092f0:	000d      	movs	r5, r1
 80092f2:	6831      	ldr	r1, [r6, #0]
 80092f4:	0004      	movs	r4, r0
 80092f6:	2900      	cmp	r1, #0
 80092f8:	d102      	bne.n	8009300 <sbrk_aligned+0x14>
 80092fa:	f000 f9f1 	bl	80096e0 <_sbrk_r>
 80092fe:	6030      	str	r0, [r6, #0]
 8009300:	0029      	movs	r1, r5
 8009302:	0020      	movs	r0, r4
 8009304:	f000 f9ec 	bl	80096e0 <_sbrk_r>
 8009308:	1c43      	adds	r3, r0, #1
 800930a:	d00a      	beq.n	8009322 <sbrk_aligned+0x36>
 800930c:	2303      	movs	r3, #3
 800930e:	1cc5      	adds	r5, r0, #3
 8009310:	439d      	bics	r5, r3
 8009312:	42a8      	cmp	r0, r5
 8009314:	d007      	beq.n	8009326 <sbrk_aligned+0x3a>
 8009316:	1a29      	subs	r1, r5, r0
 8009318:	0020      	movs	r0, r4
 800931a:	f000 f9e1 	bl	80096e0 <_sbrk_r>
 800931e:	1c43      	adds	r3, r0, #1
 8009320:	d101      	bne.n	8009326 <sbrk_aligned+0x3a>
 8009322:	2501      	movs	r5, #1
 8009324:	426d      	negs	r5, r5
 8009326:	0028      	movs	r0, r5
 8009328:	bd70      	pop	{r4, r5, r6, pc}
 800932a:	46c0      	nop			; (mov r8, r8)
 800932c:	200003ac 	.word	0x200003ac

08009330 <_malloc_r>:
 8009330:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8009332:	2203      	movs	r2, #3
 8009334:	1ccb      	adds	r3, r1, #3
 8009336:	4393      	bics	r3, r2
 8009338:	3308      	adds	r3, #8
 800933a:	0006      	movs	r6, r0
 800933c:	001f      	movs	r7, r3
 800933e:	2b0c      	cmp	r3, #12
 8009340:	d232      	bcs.n	80093a8 <_malloc_r+0x78>
 8009342:	270c      	movs	r7, #12
 8009344:	42b9      	cmp	r1, r7
 8009346:	d831      	bhi.n	80093ac <_malloc_r+0x7c>
 8009348:	0030      	movs	r0, r6
 800934a:	f000 fa2f 	bl	80097ac <__malloc_lock>
 800934e:	4d32      	ldr	r5, [pc, #200]	; (8009418 <_malloc_r+0xe8>)
 8009350:	682b      	ldr	r3, [r5, #0]
 8009352:	001c      	movs	r4, r3
 8009354:	2c00      	cmp	r4, #0
 8009356:	d12e      	bne.n	80093b6 <_malloc_r+0x86>
 8009358:	0039      	movs	r1, r7
 800935a:	0030      	movs	r0, r6
 800935c:	f7ff ffc6 	bl	80092ec <sbrk_aligned>
 8009360:	0004      	movs	r4, r0
 8009362:	1c43      	adds	r3, r0, #1
 8009364:	d11e      	bne.n	80093a4 <_malloc_r+0x74>
 8009366:	682c      	ldr	r4, [r5, #0]
 8009368:	0025      	movs	r5, r4
 800936a:	2d00      	cmp	r5, #0
 800936c:	d14a      	bne.n	8009404 <_malloc_r+0xd4>
 800936e:	6823      	ldr	r3, [r4, #0]
 8009370:	0029      	movs	r1, r5
 8009372:	18e3      	adds	r3, r4, r3
 8009374:	0030      	movs	r0, r6
 8009376:	9301      	str	r3, [sp, #4]
 8009378:	f000 f9b2 	bl	80096e0 <_sbrk_r>
 800937c:	9b01      	ldr	r3, [sp, #4]
 800937e:	4283      	cmp	r3, r0
 8009380:	d143      	bne.n	800940a <_malloc_r+0xda>
 8009382:	6823      	ldr	r3, [r4, #0]
 8009384:	3703      	adds	r7, #3
 8009386:	1aff      	subs	r7, r7, r3
 8009388:	2303      	movs	r3, #3
 800938a:	439f      	bics	r7, r3
 800938c:	3708      	adds	r7, #8
 800938e:	2f0c      	cmp	r7, #12
 8009390:	d200      	bcs.n	8009394 <_malloc_r+0x64>
 8009392:	270c      	movs	r7, #12
 8009394:	0039      	movs	r1, r7
 8009396:	0030      	movs	r0, r6
 8009398:	f7ff ffa8 	bl	80092ec <sbrk_aligned>
 800939c:	1c43      	adds	r3, r0, #1
 800939e:	d034      	beq.n	800940a <_malloc_r+0xda>
 80093a0:	6823      	ldr	r3, [r4, #0]
 80093a2:	19df      	adds	r7, r3, r7
 80093a4:	6027      	str	r7, [r4, #0]
 80093a6:	e013      	b.n	80093d0 <_malloc_r+0xa0>
 80093a8:	2b00      	cmp	r3, #0
 80093aa:	dacb      	bge.n	8009344 <_malloc_r+0x14>
 80093ac:	230c      	movs	r3, #12
 80093ae:	2500      	movs	r5, #0
 80093b0:	6033      	str	r3, [r6, #0]
 80093b2:	0028      	movs	r0, r5
 80093b4:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 80093b6:	6822      	ldr	r2, [r4, #0]
 80093b8:	1bd1      	subs	r1, r2, r7
 80093ba:	d420      	bmi.n	80093fe <_malloc_r+0xce>
 80093bc:	290b      	cmp	r1, #11
 80093be:	d917      	bls.n	80093f0 <_malloc_r+0xc0>
 80093c0:	19e2      	adds	r2, r4, r7
 80093c2:	6027      	str	r7, [r4, #0]
 80093c4:	42a3      	cmp	r3, r4
 80093c6:	d111      	bne.n	80093ec <_malloc_r+0xbc>
 80093c8:	602a      	str	r2, [r5, #0]
 80093ca:	6863      	ldr	r3, [r4, #4]
 80093cc:	6011      	str	r1, [r2, #0]
 80093ce:	6053      	str	r3, [r2, #4]
 80093d0:	0030      	movs	r0, r6
 80093d2:	0025      	movs	r5, r4
 80093d4:	f000 f9f2 	bl	80097bc <__malloc_unlock>
 80093d8:	2207      	movs	r2, #7
 80093da:	350b      	adds	r5, #11
 80093dc:	1d23      	adds	r3, r4, #4
 80093de:	4395      	bics	r5, r2
 80093e0:	1aea      	subs	r2, r5, r3
 80093e2:	429d      	cmp	r5, r3
 80093e4:	d0e5      	beq.n	80093b2 <_malloc_r+0x82>
 80093e6:	1b5b      	subs	r3, r3, r5
 80093e8:	50a3      	str	r3, [r4, r2]
 80093ea:	e7e2      	b.n	80093b2 <_malloc_r+0x82>
 80093ec:	605a      	str	r2, [r3, #4]
 80093ee:	e7ec      	b.n	80093ca <_malloc_r+0x9a>
 80093f0:	6862      	ldr	r2, [r4, #4]
 80093f2:	42a3      	cmp	r3, r4
 80093f4:	d101      	bne.n	80093fa <_malloc_r+0xca>
 80093f6:	602a      	str	r2, [r5, #0]
 80093f8:	e7ea      	b.n	80093d0 <_malloc_r+0xa0>
 80093fa:	605a      	str	r2, [r3, #4]
 80093fc:	e7e8      	b.n	80093d0 <_malloc_r+0xa0>
 80093fe:	0023      	movs	r3, r4
 8009400:	6864      	ldr	r4, [r4, #4]
 8009402:	e7a7      	b.n	8009354 <_malloc_r+0x24>
 8009404:	002c      	movs	r4, r5
 8009406:	686d      	ldr	r5, [r5, #4]
 8009408:	e7af      	b.n	800936a <_malloc_r+0x3a>
 800940a:	230c      	movs	r3, #12
 800940c:	0030      	movs	r0, r6
 800940e:	6033      	str	r3, [r6, #0]
 8009410:	f000 f9d4 	bl	80097bc <__malloc_unlock>
 8009414:	e7cd      	b.n	80093b2 <_malloc_r+0x82>
 8009416:	46c0      	nop			; (mov r8, r8)
 8009418:	200003a8 	.word	0x200003a8

0800941c <__ssputs_r>:
 800941c:	b5f0      	push	{r4, r5, r6, r7, lr}
 800941e:	688e      	ldr	r6, [r1, #8]
 8009420:	b085      	sub	sp, #20
 8009422:	0007      	movs	r7, r0
 8009424:	000c      	movs	r4, r1
 8009426:	9203      	str	r2, [sp, #12]
 8009428:	9301      	str	r3, [sp, #4]
 800942a:	429e      	cmp	r6, r3
 800942c:	d83c      	bhi.n	80094a8 <__ssputs_r+0x8c>
 800942e:	2390      	movs	r3, #144	; 0x90
 8009430:	898a      	ldrh	r2, [r1, #12]
 8009432:	00db      	lsls	r3, r3, #3
 8009434:	421a      	tst	r2, r3
 8009436:	d034      	beq.n	80094a2 <__ssputs_r+0x86>
 8009438:	6909      	ldr	r1, [r1, #16]
 800943a:	6823      	ldr	r3, [r4, #0]
 800943c:	6960      	ldr	r0, [r4, #20]
 800943e:	1a5b      	subs	r3, r3, r1
 8009440:	9302      	str	r3, [sp, #8]
 8009442:	2303      	movs	r3, #3
 8009444:	4343      	muls	r3, r0
 8009446:	0fdd      	lsrs	r5, r3, #31
 8009448:	18ed      	adds	r5, r5, r3
 800944a:	9b01      	ldr	r3, [sp, #4]
 800944c:	9802      	ldr	r0, [sp, #8]
 800944e:	3301      	adds	r3, #1
 8009450:	181b      	adds	r3, r3, r0
 8009452:	106d      	asrs	r5, r5, #1
 8009454:	42ab      	cmp	r3, r5
 8009456:	d900      	bls.n	800945a <__ssputs_r+0x3e>
 8009458:	001d      	movs	r5, r3
 800945a:	0553      	lsls	r3, r2, #21
 800945c:	d532      	bpl.n	80094c4 <__ssputs_r+0xa8>
 800945e:	0029      	movs	r1, r5
 8009460:	0038      	movs	r0, r7
 8009462:	f7ff ff65 	bl	8009330 <_malloc_r>
 8009466:	1e06      	subs	r6, r0, #0
 8009468:	d109      	bne.n	800947e <__ssputs_r+0x62>
 800946a:	230c      	movs	r3, #12
 800946c:	603b      	str	r3, [r7, #0]
 800946e:	2340      	movs	r3, #64	; 0x40
 8009470:	2001      	movs	r0, #1
 8009472:	89a2      	ldrh	r2, [r4, #12]
 8009474:	4240      	negs	r0, r0
 8009476:	4313      	orrs	r3, r2
 8009478:	81a3      	strh	r3, [r4, #12]
 800947a:	b005      	add	sp, #20
 800947c:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800947e:	9a02      	ldr	r2, [sp, #8]
 8009480:	6921      	ldr	r1, [r4, #16]
 8009482:	f7ff fb18 	bl	8008ab6 <memcpy>
 8009486:	89a3      	ldrh	r3, [r4, #12]
 8009488:	4a14      	ldr	r2, [pc, #80]	; (80094dc <__ssputs_r+0xc0>)
 800948a:	401a      	ands	r2, r3
 800948c:	2380      	movs	r3, #128	; 0x80
 800948e:	4313      	orrs	r3, r2
 8009490:	81a3      	strh	r3, [r4, #12]
 8009492:	9b02      	ldr	r3, [sp, #8]
 8009494:	6126      	str	r6, [r4, #16]
 8009496:	18f6      	adds	r6, r6, r3
 8009498:	6026      	str	r6, [r4, #0]
 800949a:	6165      	str	r5, [r4, #20]
 800949c:	9e01      	ldr	r6, [sp, #4]
 800949e:	1aed      	subs	r5, r5, r3
 80094a0:	60a5      	str	r5, [r4, #8]
 80094a2:	9b01      	ldr	r3, [sp, #4]
 80094a4:	429e      	cmp	r6, r3
 80094a6:	d900      	bls.n	80094aa <__ssputs_r+0x8e>
 80094a8:	9e01      	ldr	r6, [sp, #4]
 80094aa:	0032      	movs	r2, r6
 80094ac:	9903      	ldr	r1, [sp, #12]
 80094ae:	6820      	ldr	r0, [r4, #0]
 80094b0:	f000 f968 	bl	8009784 <memmove>
 80094b4:	68a3      	ldr	r3, [r4, #8]
 80094b6:	2000      	movs	r0, #0
 80094b8:	1b9b      	subs	r3, r3, r6
 80094ba:	60a3      	str	r3, [r4, #8]
 80094bc:	6823      	ldr	r3, [r4, #0]
 80094be:	199e      	adds	r6, r3, r6
 80094c0:	6026      	str	r6, [r4, #0]
 80094c2:	e7da      	b.n	800947a <__ssputs_r+0x5e>
 80094c4:	002a      	movs	r2, r5
 80094c6:	0038      	movs	r0, r7
 80094c8:	f000 f980 	bl	80097cc <_realloc_r>
 80094cc:	1e06      	subs	r6, r0, #0
 80094ce:	d1e0      	bne.n	8009492 <__ssputs_r+0x76>
 80094d0:	0038      	movs	r0, r7
 80094d2:	6921      	ldr	r1, [r4, #16]
 80094d4:	f7ff fec0 	bl	8009258 <_free_r>
 80094d8:	e7c7      	b.n	800946a <__ssputs_r+0x4e>
 80094da:	46c0      	nop			; (mov r8, r8)
 80094dc:	fffffb7f 	.word	0xfffffb7f

080094e0 <_svfiprintf_r>:
 80094e0:	b5f0      	push	{r4, r5, r6, r7, lr}
 80094e2:	b0a1      	sub	sp, #132	; 0x84
 80094e4:	9003      	str	r0, [sp, #12]
 80094e6:	001d      	movs	r5, r3
 80094e8:	898b      	ldrh	r3, [r1, #12]
 80094ea:	000f      	movs	r7, r1
 80094ec:	0016      	movs	r6, r2
 80094ee:	061b      	lsls	r3, r3, #24
 80094f0:	d511      	bpl.n	8009516 <_svfiprintf_r+0x36>
 80094f2:	690b      	ldr	r3, [r1, #16]
 80094f4:	2b00      	cmp	r3, #0
 80094f6:	d10e      	bne.n	8009516 <_svfiprintf_r+0x36>
 80094f8:	2140      	movs	r1, #64	; 0x40
 80094fa:	f7ff ff19 	bl	8009330 <_malloc_r>
 80094fe:	6038      	str	r0, [r7, #0]
 8009500:	6138      	str	r0, [r7, #16]
 8009502:	2800      	cmp	r0, #0
 8009504:	d105      	bne.n	8009512 <_svfiprintf_r+0x32>
 8009506:	230c      	movs	r3, #12
 8009508:	9a03      	ldr	r2, [sp, #12]
 800950a:	3801      	subs	r0, #1
 800950c:	6013      	str	r3, [r2, #0]
 800950e:	b021      	add	sp, #132	; 0x84
 8009510:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8009512:	2340      	movs	r3, #64	; 0x40
 8009514:	617b      	str	r3, [r7, #20]
 8009516:	2300      	movs	r3, #0
 8009518:	ac08      	add	r4, sp, #32
 800951a:	6163      	str	r3, [r4, #20]
 800951c:	3320      	adds	r3, #32
 800951e:	7663      	strb	r3, [r4, #25]
 8009520:	3310      	adds	r3, #16
 8009522:	76a3      	strb	r3, [r4, #26]
 8009524:	9507      	str	r5, [sp, #28]
 8009526:	0035      	movs	r5, r6
 8009528:	782b      	ldrb	r3, [r5, #0]
 800952a:	2b00      	cmp	r3, #0
 800952c:	d001      	beq.n	8009532 <_svfiprintf_r+0x52>
 800952e:	2b25      	cmp	r3, #37	; 0x25
 8009530:	d147      	bne.n	80095c2 <_svfiprintf_r+0xe2>
 8009532:	1bab      	subs	r3, r5, r6
 8009534:	9305      	str	r3, [sp, #20]
 8009536:	42b5      	cmp	r5, r6
 8009538:	d00c      	beq.n	8009554 <_svfiprintf_r+0x74>
 800953a:	0032      	movs	r2, r6
 800953c:	0039      	movs	r1, r7
 800953e:	9803      	ldr	r0, [sp, #12]
 8009540:	f7ff ff6c 	bl	800941c <__ssputs_r>
 8009544:	1c43      	adds	r3, r0, #1
 8009546:	d100      	bne.n	800954a <_svfiprintf_r+0x6a>
 8009548:	e0ae      	b.n	80096a8 <_svfiprintf_r+0x1c8>
 800954a:	6962      	ldr	r2, [r4, #20]
 800954c:	9b05      	ldr	r3, [sp, #20]
 800954e:	4694      	mov	ip, r2
 8009550:	4463      	add	r3, ip
 8009552:	6163      	str	r3, [r4, #20]
 8009554:	782b      	ldrb	r3, [r5, #0]
 8009556:	2b00      	cmp	r3, #0
 8009558:	d100      	bne.n	800955c <_svfiprintf_r+0x7c>
 800955a:	e0a5      	b.n	80096a8 <_svfiprintf_r+0x1c8>
 800955c:	2201      	movs	r2, #1
 800955e:	2300      	movs	r3, #0
 8009560:	4252      	negs	r2, r2
 8009562:	6062      	str	r2, [r4, #4]
 8009564:	a904      	add	r1, sp, #16
 8009566:	3254      	adds	r2, #84	; 0x54
 8009568:	1852      	adds	r2, r2, r1
 800956a:	1c6e      	adds	r6, r5, #1
 800956c:	6023      	str	r3, [r4, #0]
 800956e:	60e3      	str	r3, [r4, #12]
 8009570:	60a3      	str	r3, [r4, #8]
 8009572:	7013      	strb	r3, [r2, #0]
 8009574:	65a3      	str	r3, [r4, #88]	; 0x58
 8009576:	2205      	movs	r2, #5
 8009578:	7831      	ldrb	r1, [r6, #0]
 800957a:	4854      	ldr	r0, [pc, #336]	; (80096cc <_svfiprintf_r+0x1ec>)
 800957c:	f7ff fa90 	bl	8008aa0 <memchr>
 8009580:	1c75      	adds	r5, r6, #1
 8009582:	2800      	cmp	r0, #0
 8009584:	d11f      	bne.n	80095c6 <_svfiprintf_r+0xe6>
 8009586:	6822      	ldr	r2, [r4, #0]
 8009588:	06d3      	lsls	r3, r2, #27
 800958a:	d504      	bpl.n	8009596 <_svfiprintf_r+0xb6>
 800958c:	2353      	movs	r3, #83	; 0x53
 800958e:	a904      	add	r1, sp, #16
 8009590:	185b      	adds	r3, r3, r1
 8009592:	2120      	movs	r1, #32
 8009594:	7019      	strb	r1, [r3, #0]
 8009596:	0713      	lsls	r3, r2, #28
 8009598:	d504      	bpl.n	80095a4 <_svfiprintf_r+0xc4>
 800959a:	2353      	movs	r3, #83	; 0x53
 800959c:	a904      	add	r1, sp, #16
 800959e:	185b      	adds	r3, r3, r1
 80095a0:	212b      	movs	r1, #43	; 0x2b
 80095a2:	7019      	strb	r1, [r3, #0]
 80095a4:	7833      	ldrb	r3, [r6, #0]
 80095a6:	2b2a      	cmp	r3, #42	; 0x2a
 80095a8:	d016      	beq.n	80095d8 <_svfiprintf_r+0xf8>
 80095aa:	0035      	movs	r5, r6
 80095ac:	2100      	movs	r1, #0
 80095ae:	200a      	movs	r0, #10
 80095b0:	68e3      	ldr	r3, [r4, #12]
 80095b2:	782a      	ldrb	r2, [r5, #0]
 80095b4:	1c6e      	adds	r6, r5, #1
 80095b6:	3a30      	subs	r2, #48	; 0x30
 80095b8:	2a09      	cmp	r2, #9
 80095ba:	d94e      	bls.n	800965a <_svfiprintf_r+0x17a>
 80095bc:	2900      	cmp	r1, #0
 80095be:	d111      	bne.n	80095e4 <_svfiprintf_r+0x104>
 80095c0:	e017      	b.n	80095f2 <_svfiprintf_r+0x112>
 80095c2:	3501      	adds	r5, #1
 80095c4:	e7b0      	b.n	8009528 <_svfiprintf_r+0x48>
 80095c6:	4b41      	ldr	r3, [pc, #260]	; (80096cc <_svfiprintf_r+0x1ec>)
 80095c8:	6822      	ldr	r2, [r4, #0]
 80095ca:	1ac0      	subs	r0, r0, r3
 80095cc:	2301      	movs	r3, #1
 80095ce:	4083      	lsls	r3, r0
 80095d0:	4313      	orrs	r3, r2
 80095d2:	002e      	movs	r6, r5
 80095d4:	6023      	str	r3, [r4, #0]
 80095d6:	e7ce      	b.n	8009576 <_svfiprintf_r+0x96>
 80095d8:	9b07      	ldr	r3, [sp, #28]
 80095da:	1d19      	adds	r1, r3, #4
 80095dc:	681b      	ldr	r3, [r3, #0]
 80095de:	9107      	str	r1, [sp, #28]
 80095e0:	2b00      	cmp	r3, #0
 80095e2:	db01      	blt.n	80095e8 <_svfiprintf_r+0x108>
 80095e4:	930b      	str	r3, [sp, #44]	; 0x2c
 80095e6:	e004      	b.n	80095f2 <_svfiprintf_r+0x112>
 80095e8:	425b      	negs	r3, r3
 80095ea:	60e3      	str	r3, [r4, #12]
 80095ec:	2302      	movs	r3, #2
 80095ee:	4313      	orrs	r3, r2
 80095f0:	6023      	str	r3, [r4, #0]
 80095f2:	782b      	ldrb	r3, [r5, #0]
 80095f4:	2b2e      	cmp	r3, #46	; 0x2e
 80095f6:	d10a      	bne.n	800960e <_svfiprintf_r+0x12e>
 80095f8:	786b      	ldrb	r3, [r5, #1]
 80095fa:	2b2a      	cmp	r3, #42	; 0x2a
 80095fc:	d135      	bne.n	800966a <_svfiprintf_r+0x18a>
 80095fe:	9b07      	ldr	r3, [sp, #28]
 8009600:	3502      	adds	r5, #2
 8009602:	1d1a      	adds	r2, r3, #4
 8009604:	681b      	ldr	r3, [r3, #0]
 8009606:	9207      	str	r2, [sp, #28]
 8009608:	2b00      	cmp	r3, #0
 800960a:	db2b      	blt.n	8009664 <_svfiprintf_r+0x184>
 800960c:	9309      	str	r3, [sp, #36]	; 0x24
 800960e:	4e30      	ldr	r6, [pc, #192]	; (80096d0 <_svfiprintf_r+0x1f0>)
 8009610:	2203      	movs	r2, #3
 8009612:	0030      	movs	r0, r6
 8009614:	7829      	ldrb	r1, [r5, #0]
 8009616:	f7ff fa43 	bl	8008aa0 <memchr>
 800961a:	2800      	cmp	r0, #0
 800961c:	d006      	beq.n	800962c <_svfiprintf_r+0x14c>
 800961e:	2340      	movs	r3, #64	; 0x40
 8009620:	1b80      	subs	r0, r0, r6
 8009622:	4083      	lsls	r3, r0
 8009624:	6822      	ldr	r2, [r4, #0]
 8009626:	3501      	adds	r5, #1
 8009628:	4313      	orrs	r3, r2
 800962a:	6023      	str	r3, [r4, #0]
 800962c:	7829      	ldrb	r1, [r5, #0]
 800962e:	2206      	movs	r2, #6
 8009630:	4828      	ldr	r0, [pc, #160]	; (80096d4 <_svfiprintf_r+0x1f4>)
 8009632:	1c6e      	adds	r6, r5, #1
 8009634:	7621      	strb	r1, [r4, #24]
 8009636:	f7ff fa33 	bl	8008aa0 <memchr>
 800963a:	2800      	cmp	r0, #0
 800963c:	d03c      	beq.n	80096b8 <_svfiprintf_r+0x1d8>
 800963e:	4b26      	ldr	r3, [pc, #152]	; (80096d8 <_svfiprintf_r+0x1f8>)
 8009640:	2b00      	cmp	r3, #0
 8009642:	d125      	bne.n	8009690 <_svfiprintf_r+0x1b0>
 8009644:	2207      	movs	r2, #7
 8009646:	9b07      	ldr	r3, [sp, #28]
 8009648:	3307      	adds	r3, #7
 800964a:	4393      	bics	r3, r2
 800964c:	3308      	adds	r3, #8
 800964e:	9307      	str	r3, [sp, #28]
 8009650:	6963      	ldr	r3, [r4, #20]
 8009652:	9a04      	ldr	r2, [sp, #16]
 8009654:	189b      	adds	r3, r3, r2
 8009656:	6163      	str	r3, [r4, #20]
 8009658:	e765      	b.n	8009526 <_svfiprintf_r+0x46>
 800965a:	4343      	muls	r3, r0
 800965c:	0035      	movs	r5, r6
 800965e:	2101      	movs	r1, #1
 8009660:	189b      	adds	r3, r3, r2
 8009662:	e7a6      	b.n	80095b2 <_svfiprintf_r+0xd2>
 8009664:	2301      	movs	r3, #1
 8009666:	425b      	negs	r3, r3
 8009668:	e7d0      	b.n	800960c <_svfiprintf_r+0x12c>
 800966a:	2300      	movs	r3, #0
 800966c:	200a      	movs	r0, #10
 800966e:	001a      	movs	r2, r3
 8009670:	3501      	adds	r5, #1
 8009672:	6063      	str	r3, [r4, #4]
 8009674:	7829      	ldrb	r1, [r5, #0]
 8009676:	1c6e      	adds	r6, r5, #1
 8009678:	3930      	subs	r1, #48	; 0x30
 800967a:	2909      	cmp	r1, #9
 800967c:	d903      	bls.n	8009686 <_svfiprintf_r+0x1a6>
 800967e:	2b00      	cmp	r3, #0
 8009680:	d0c5      	beq.n	800960e <_svfiprintf_r+0x12e>
 8009682:	9209      	str	r2, [sp, #36]	; 0x24
 8009684:	e7c3      	b.n	800960e <_svfiprintf_r+0x12e>
 8009686:	4342      	muls	r2, r0
 8009688:	0035      	movs	r5, r6
 800968a:	2301      	movs	r3, #1
 800968c:	1852      	adds	r2, r2, r1
 800968e:	e7f1      	b.n	8009674 <_svfiprintf_r+0x194>
 8009690:	ab07      	add	r3, sp, #28
 8009692:	9300      	str	r3, [sp, #0]
 8009694:	003a      	movs	r2, r7
 8009696:	0021      	movs	r1, r4
 8009698:	4b10      	ldr	r3, [pc, #64]	; (80096dc <_svfiprintf_r+0x1fc>)
 800969a:	9803      	ldr	r0, [sp, #12]
 800969c:	f7fd ff68 	bl	8007570 <_printf_float>
 80096a0:	9004      	str	r0, [sp, #16]
 80096a2:	9b04      	ldr	r3, [sp, #16]
 80096a4:	3301      	adds	r3, #1
 80096a6:	d1d3      	bne.n	8009650 <_svfiprintf_r+0x170>
 80096a8:	89bb      	ldrh	r3, [r7, #12]
 80096aa:	980d      	ldr	r0, [sp, #52]	; 0x34
 80096ac:	065b      	lsls	r3, r3, #25
 80096ae:	d400      	bmi.n	80096b2 <_svfiprintf_r+0x1d2>
 80096b0:	e72d      	b.n	800950e <_svfiprintf_r+0x2e>
 80096b2:	2001      	movs	r0, #1
 80096b4:	4240      	negs	r0, r0
 80096b6:	e72a      	b.n	800950e <_svfiprintf_r+0x2e>
 80096b8:	ab07      	add	r3, sp, #28
 80096ba:	9300      	str	r3, [sp, #0]
 80096bc:	003a      	movs	r2, r7
 80096be:	0021      	movs	r1, r4
 80096c0:	4b06      	ldr	r3, [pc, #24]	; (80096dc <_svfiprintf_r+0x1fc>)
 80096c2:	9803      	ldr	r0, [sp, #12]
 80096c4:	f7fe fa06 	bl	8007ad4 <_printf_i>
 80096c8:	e7ea      	b.n	80096a0 <_svfiprintf_r+0x1c0>
 80096ca:	46c0      	nop			; (mov r8, r8)
 80096cc:	0800a704 	.word	0x0800a704
 80096d0:	0800a70a 	.word	0x0800a70a
 80096d4:	0800a70e 	.word	0x0800a70e
 80096d8:	08007571 	.word	0x08007571
 80096dc:	0800941d 	.word	0x0800941d

080096e0 <_sbrk_r>:
 80096e0:	2300      	movs	r3, #0
 80096e2:	b570      	push	{r4, r5, r6, lr}
 80096e4:	4d06      	ldr	r5, [pc, #24]	; (8009700 <_sbrk_r+0x20>)
 80096e6:	0004      	movs	r4, r0
 80096e8:	0008      	movs	r0, r1
 80096ea:	602b      	str	r3, [r5, #0]
 80096ec:	f7f9 ff0c 	bl	8003508 <_sbrk>
 80096f0:	1c43      	adds	r3, r0, #1
 80096f2:	d103      	bne.n	80096fc <_sbrk_r+0x1c>
 80096f4:	682b      	ldr	r3, [r5, #0]
 80096f6:	2b00      	cmp	r3, #0
 80096f8:	d000      	beq.n	80096fc <_sbrk_r+0x1c>
 80096fa:	6023      	str	r3, [r4, #0]
 80096fc:	bd70      	pop	{r4, r5, r6, pc}
 80096fe:	46c0      	nop			; (mov r8, r8)
 8009700:	200003b0 	.word	0x200003b0

08009704 <__assert_func>:
 8009704:	b530      	push	{r4, r5, lr}
 8009706:	0014      	movs	r4, r2
 8009708:	001a      	movs	r2, r3
 800970a:	4b09      	ldr	r3, [pc, #36]	; (8009730 <__assert_func+0x2c>)
 800970c:	0005      	movs	r5, r0
 800970e:	681b      	ldr	r3, [r3, #0]
 8009710:	b085      	sub	sp, #20
 8009712:	68d8      	ldr	r0, [r3, #12]
 8009714:	4b07      	ldr	r3, [pc, #28]	; (8009734 <__assert_func+0x30>)
 8009716:	2c00      	cmp	r4, #0
 8009718:	d101      	bne.n	800971e <__assert_func+0x1a>
 800971a:	4b07      	ldr	r3, [pc, #28]	; (8009738 <__assert_func+0x34>)
 800971c:	001c      	movs	r4, r3
 800971e:	9301      	str	r3, [sp, #4]
 8009720:	9100      	str	r1, [sp, #0]
 8009722:	002b      	movs	r3, r5
 8009724:	4905      	ldr	r1, [pc, #20]	; (800973c <__assert_func+0x38>)
 8009726:	9402      	str	r4, [sp, #8]
 8009728:	f000 f80a 	bl	8009740 <fiprintf>
 800972c:	f000 faba 	bl	8009ca4 <abort>
 8009730:	20000014 	.word	0x20000014
 8009734:	0800a715 	.word	0x0800a715
 8009738:	0800a750 	.word	0x0800a750
 800973c:	0800a722 	.word	0x0800a722

08009740 <fiprintf>:
 8009740:	b40e      	push	{r1, r2, r3}
 8009742:	b503      	push	{r0, r1, lr}
 8009744:	0001      	movs	r1, r0
 8009746:	ab03      	add	r3, sp, #12
 8009748:	4804      	ldr	r0, [pc, #16]	; (800975c <fiprintf+0x1c>)
 800974a:	cb04      	ldmia	r3!, {r2}
 800974c:	6800      	ldr	r0, [r0, #0]
 800974e:	9301      	str	r3, [sp, #4]
 8009750:	f000 f892 	bl	8009878 <_vfiprintf_r>
 8009754:	b002      	add	sp, #8
 8009756:	bc08      	pop	{r3}
 8009758:	b003      	add	sp, #12
 800975a:	4718      	bx	r3
 800975c:	20000014 	.word	0x20000014

08009760 <__ascii_mbtowc>:
 8009760:	b082      	sub	sp, #8
 8009762:	2900      	cmp	r1, #0
 8009764:	d100      	bne.n	8009768 <__ascii_mbtowc+0x8>
 8009766:	a901      	add	r1, sp, #4
 8009768:	1e10      	subs	r0, r2, #0
 800976a:	d006      	beq.n	800977a <__ascii_mbtowc+0x1a>
 800976c:	2b00      	cmp	r3, #0
 800976e:	d006      	beq.n	800977e <__ascii_mbtowc+0x1e>
 8009770:	7813      	ldrb	r3, [r2, #0]
 8009772:	600b      	str	r3, [r1, #0]
 8009774:	7810      	ldrb	r0, [r2, #0]
 8009776:	1e43      	subs	r3, r0, #1
 8009778:	4198      	sbcs	r0, r3
 800977a:	b002      	add	sp, #8
 800977c:	4770      	bx	lr
 800977e:	2002      	movs	r0, #2
 8009780:	4240      	negs	r0, r0
 8009782:	e7fa      	b.n	800977a <__ascii_mbtowc+0x1a>

08009784 <memmove>:
 8009784:	b510      	push	{r4, lr}
 8009786:	4288      	cmp	r0, r1
 8009788:	d902      	bls.n	8009790 <memmove+0xc>
 800978a:	188b      	adds	r3, r1, r2
 800978c:	4298      	cmp	r0, r3
 800978e:	d303      	bcc.n	8009798 <memmove+0x14>
 8009790:	2300      	movs	r3, #0
 8009792:	e007      	b.n	80097a4 <memmove+0x20>
 8009794:	5c8b      	ldrb	r3, [r1, r2]
 8009796:	5483      	strb	r3, [r0, r2]
 8009798:	3a01      	subs	r2, #1
 800979a:	d2fb      	bcs.n	8009794 <memmove+0x10>
 800979c:	bd10      	pop	{r4, pc}
 800979e:	5ccc      	ldrb	r4, [r1, r3]
 80097a0:	54c4      	strb	r4, [r0, r3]
 80097a2:	3301      	adds	r3, #1
 80097a4:	429a      	cmp	r2, r3
 80097a6:	d1fa      	bne.n	800979e <memmove+0x1a>
 80097a8:	e7f8      	b.n	800979c <memmove+0x18>
	...

080097ac <__malloc_lock>:
 80097ac:	b510      	push	{r4, lr}
 80097ae:	4802      	ldr	r0, [pc, #8]	; (80097b8 <__malloc_lock+0xc>)
 80097b0:	f000 fc4f 	bl	800a052 <__retarget_lock_acquire_recursive>
 80097b4:	bd10      	pop	{r4, pc}
 80097b6:	46c0      	nop			; (mov r8, r8)
 80097b8:	200003b4 	.word	0x200003b4

080097bc <__malloc_unlock>:
 80097bc:	b510      	push	{r4, lr}
 80097be:	4802      	ldr	r0, [pc, #8]	; (80097c8 <__malloc_unlock+0xc>)
 80097c0:	f000 fc48 	bl	800a054 <__retarget_lock_release_recursive>
 80097c4:	bd10      	pop	{r4, pc}
 80097c6:	46c0      	nop			; (mov r8, r8)
 80097c8:	200003b4 	.word	0x200003b4

080097cc <_realloc_r>:
 80097cc:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 80097ce:	0007      	movs	r7, r0
 80097d0:	000e      	movs	r6, r1
 80097d2:	0014      	movs	r4, r2
 80097d4:	2900      	cmp	r1, #0
 80097d6:	d105      	bne.n	80097e4 <_realloc_r+0x18>
 80097d8:	0011      	movs	r1, r2
 80097da:	f7ff fda9 	bl	8009330 <_malloc_r>
 80097de:	0005      	movs	r5, r0
 80097e0:	0028      	movs	r0, r5
 80097e2:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 80097e4:	2a00      	cmp	r2, #0
 80097e6:	d103      	bne.n	80097f0 <_realloc_r+0x24>
 80097e8:	f7ff fd36 	bl	8009258 <_free_r>
 80097ec:	0025      	movs	r5, r4
 80097ee:	e7f7      	b.n	80097e0 <_realloc_r+0x14>
 80097f0:	f000 fc9e 	bl	800a130 <_malloc_usable_size_r>
 80097f4:	9001      	str	r0, [sp, #4]
 80097f6:	4284      	cmp	r4, r0
 80097f8:	d803      	bhi.n	8009802 <_realloc_r+0x36>
 80097fa:	0035      	movs	r5, r6
 80097fc:	0843      	lsrs	r3, r0, #1
 80097fe:	42a3      	cmp	r3, r4
 8009800:	d3ee      	bcc.n	80097e0 <_realloc_r+0x14>
 8009802:	0021      	movs	r1, r4
 8009804:	0038      	movs	r0, r7
 8009806:	f7ff fd93 	bl	8009330 <_malloc_r>
 800980a:	1e05      	subs	r5, r0, #0
 800980c:	d0e8      	beq.n	80097e0 <_realloc_r+0x14>
 800980e:	9b01      	ldr	r3, [sp, #4]
 8009810:	0022      	movs	r2, r4
 8009812:	429c      	cmp	r4, r3
 8009814:	d900      	bls.n	8009818 <_realloc_r+0x4c>
 8009816:	001a      	movs	r2, r3
 8009818:	0031      	movs	r1, r6
 800981a:	0028      	movs	r0, r5
 800981c:	f7ff f94b 	bl	8008ab6 <memcpy>
 8009820:	0031      	movs	r1, r6
 8009822:	0038      	movs	r0, r7
 8009824:	f7ff fd18 	bl	8009258 <_free_r>
 8009828:	e7da      	b.n	80097e0 <_realloc_r+0x14>

0800982a <__sfputc_r>:
 800982a:	6893      	ldr	r3, [r2, #8]
 800982c:	b510      	push	{r4, lr}
 800982e:	3b01      	subs	r3, #1
 8009830:	6093      	str	r3, [r2, #8]
 8009832:	2b00      	cmp	r3, #0
 8009834:	da04      	bge.n	8009840 <__sfputc_r+0x16>
 8009836:	6994      	ldr	r4, [r2, #24]
 8009838:	42a3      	cmp	r3, r4
 800983a:	db07      	blt.n	800984c <__sfputc_r+0x22>
 800983c:	290a      	cmp	r1, #10
 800983e:	d005      	beq.n	800984c <__sfputc_r+0x22>
 8009840:	6813      	ldr	r3, [r2, #0]
 8009842:	1c58      	adds	r0, r3, #1
 8009844:	6010      	str	r0, [r2, #0]
 8009846:	7019      	strb	r1, [r3, #0]
 8009848:	0008      	movs	r0, r1
 800984a:	bd10      	pop	{r4, pc}
 800984c:	f000 f94e 	bl	8009aec <__swbuf_r>
 8009850:	0001      	movs	r1, r0
 8009852:	e7f9      	b.n	8009848 <__sfputc_r+0x1e>

08009854 <__sfputs_r>:
 8009854:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8009856:	0006      	movs	r6, r0
 8009858:	000f      	movs	r7, r1
 800985a:	0014      	movs	r4, r2
 800985c:	18d5      	adds	r5, r2, r3
 800985e:	42ac      	cmp	r4, r5
 8009860:	d101      	bne.n	8009866 <__sfputs_r+0x12>
 8009862:	2000      	movs	r0, #0
 8009864:	e007      	b.n	8009876 <__sfputs_r+0x22>
 8009866:	7821      	ldrb	r1, [r4, #0]
 8009868:	003a      	movs	r2, r7
 800986a:	0030      	movs	r0, r6
 800986c:	f7ff ffdd 	bl	800982a <__sfputc_r>
 8009870:	3401      	adds	r4, #1
 8009872:	1c43      	adds	r3, r0, #1
 8009874:	d1f3      	bne.n	800985e <__sfputs_r+0xa>
 8009876:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

08009878 <_vfiprintf_r>:
 8009878:	b5f0      	push	{r4, r5, r6, r7, lr}
 800987a:	b0a1      	sub	sp, #132	; 0x84
 800987c:	0006      	movs	r6, r0
 800987e:	000c      	movs	r4, r1
 8009880:	001f      	movs	r7, r3
 8009882:	9203      	str	r2, [sp, #12]
 8009884:	2800      	cmp	r0, #0
 8009886:	d004      	beq.n	8009892 <_vfiprintf_r+0x1a>
 8009888:	6983      	ldr	r3, [r0, #24]
 800988a:	2b00      	cmp	r3, #0
 800988c:	d101      	bne.n	8009892 <_vfiprintf_r+0x1a>
 800988e:	f000 fb3f 	bl	8009f10 <__sinit>
 8009892:	4b8e      	ldr	r3, [pc, #568]	; (8009acc <_vfiprintf_r+0x254>)
 8009894:	429c      	cmp	r4, r3
 8009896:	d11c      	bne.n	80098d2 <_vfiprintf_r+0x5a>
 8009898:	6874      	ldr	r4, [r6, #4]
 800989a:	6e63      	ldr	r3, [r4, #100]	; 0x64
 800989c:	07db      	lsls	r3, r3, #31
 800989e:	d405      	bmi.n	80098ac <_vfiprintf_r+0x34>
 80098a0:	89a3      	ldrh	r3, [r4, #12]
 80098a2:	059b      	lsls	r3, r3, #22
 80098a4:	d402      	bmi.n	80098ac <_vfiprintf_r+0x34>
 80098a6:	6da0      	ldr	r0, [r4, #88]	; 0x58
 80098a8:	f000 fbd3 	bl	800a052 <__retarget_lock_acquire_recursive>
 80098ac:	89a3      	ldrh	r3, [r4, #12]
 80098ae:	071b      	lsls	r3, r3, #28
 80098b0:	d502      	bpl.n	80098b8 <_vfiprintf_r+0x40>
 80098b2:	6923      	ldr	r3, [r4, #16]
 80098b4:	2b00      	cmp	r3, #0
 80098b6:	d11d      	bne.n	80098f4 <_vfiprintf_r+0x7c>
 80098b8:	0021      	movs	r1, r4
 80098ba:	0030      	movs	r0, r6
 80098bc:	f000 f97a 	bl	8009bb4 <__swsetup_r>
 80098c0:	2800      	cmp	r0, #0
 80098c2:	d017      	beq.n	80098f4 <_vfiprintf_r+0x7c>
 80098c4:	6e63      	ldr	r3, [r4, #100]	; 0x64
 80098c6:	07db      	lsls	r3, r3, #31
 80098c8:	d50d      	bpl.n	80098e6 <_vfiprintf_r+0x6e>
 80098ca:	2001      	movs	r0, #1
 80098cc:	4240      	negs	r0, r0
 80098ce:	b021      	add	sp, #132	; 0x84
 80098d0:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80098d2:	4b7f      	ldr	r3, [pc, #508]	; (8009ad0 <_vfiprintf_r+0x258>)
 80098d4:	429c      	cmp	r4, r3
 80098d6:	d101      	bne.n	80098dc <_vfiprintf_r+0x64>
 80098d8:	68b4      	ldr	r4, [r6, #8]
 80098da:	e7de      	b.n	800989a <_vfiprintf_r+0x22>
 80098dc:	4b7d      	ldr	r3, [pc, #500]	; (8009ad4 <_vfiprintf_r+0x25c>)
 80098de:	429c      	cmp	r4, r3
 80098e0:	d1db      	bne.n	800989a <_vfiprintf_r+0x22>
 80098e2:	68f4      	ldr	r4, [r6, #12]
 80098e4:	e7d9      	b.n	800989a <_vfiprintf_r+0x22>
 80098e6:	89a3      	ldrh	r3, [r4, #12]
 80098e8:	059b      	lsls	r3, r3, #22
 80098ea:	d4ee      	bmi.n	80098ca <_vfiprintf_r+0x52>
 80098ec:	6da0      	ldr	r0, [r4, #88]	; 0x58
 80098ee:	f000 fbb1 	bl	800a054 <__retarget_lock_release_recursive>
 80098f2:	e7ea      	b.n	80098ca <_vfiprintf_r+0x52>
 80098f4:	2300      	movs	r3, #0
 80098f6:	ad08      	add	r5, sp, #32
 80098f8:	616b      	str	r3, [r5, #20]
 80098fa:	3320      	adds	r3, #32
 80098fc:	766b      	strb	r3, [r5, #25]
 80098fe:	3310      	adds	r3, #16
 8009900:	76ab      	strb	r3, [r5, #26]
 8009902:	9707      	str	r7, [sp, #28]
 8009904:	9f03      	ldr	r7, [sp, #12]
 8009906:	783b      	ldrb	r3, [r7, #0]
 8009908:	2b00      	cmp	r3, #0
 800990a:	d001      	beq.n	8009910 <_vfiprintf_r+0x98>
 800990c:	2b25      	cmp	r3, #37	; 0x25
 800990e:	d14e      	bne.n	80099ae <_vfiprintf_r+0x136>
 8009910:	9b03      	ldr	r3, [sp, #12]
 8009912:	1afb      	subs	r3, r7, r3
 8009914:	9305      	str	r3, [sp, #20]
 8009916:	9b03      	ldr	r3, [sp, #12]
 8009918:	429f      	cmp	r7, r3
 800991a:	d00d      	beq.n	8009938 <_vfiprintf_r+0xc0>
 800991c:	9b05      	ldr	r3, [sp, #20]
 800991e:	0021      	movs	r1, r4
 8009920:	0030      	movs	r0, r6
 8009922:	9a03      	ldr	r2, [sp, #12]
 8009924:	f7ff ff96 	bl	8009854 <__sfputs_r>
 8009928:	1c43      	adds	r3, r0, #1
 800992a:	d100      	bne.n	800992e <_vfiprintf_r+0xb6>
 800992c:	e0b5      	b.n	8009a9a <_vfiprintf_r+0x222>
 800992e:	696a      	ldr	r2, [r5, #20]
 8009930:	9b05      	ldr	r3, [sp, #20]
 8009932:	4694      	mov	ip, r2
 8009934:	4463      	add	r3, ip
 8009936:	616b      	str	r3, [r5, #20]
 8009938:	783b      	ldrb	r3, [r7, #0]
 800993a:	2b00      	cmp	r3, #0
 800993c:	d100      	bne.n	8009940 <_vfiprintf_r+0xc8>
 800993e:	e0ac      	b.n	8009a9a <_vfiprintf_r+0x222>
 8009940:	2201      	movs	r2, #1
 8009942:	1c7b      	adds	r3, r7, #1
 8009944:	9303      	str	r3, [sp, #12]
 8009946:	2300      	movs	r3, #0
 8009948:	4252      	negs	r2, r2
 800994a:	606a      	str	r2, [r5, #4]
 800994c:	a904      	add	r1, sp, #16
 800994e:	3254      	adds	r2, #84	; 0x54
 8009950:	1852      	adds	r2, r2, r1
 8009952:	602b      	str	r3, [r5, #0]
 8009954:	60eb      	str	r3, [r5, #12]
 8009956:	60ab      	str	r3, [r5, #8]
 8009958:	7013      	strb	r3, [r2, #0]
 800995a:	65ab      	str	r3, [r5, #88]	; 0x58
 800995c:	9b03      	ldr	r3, [sp, #12]
 800995e:	2205      	movs	r2, #5
 8009960:	7819      	ldrb	r1, [r3, #0]
 8009962:	485d      	ldr	r0, [pc, #372]	; (8009ad8 <_vfiprintf_r+0x260>)
 8009964:	f7ff f89c 	bl	8008aa0 <memchr>
 8009968:	9b03      	ldr	r3, [sp, #12]
 800996a:	1c5f      	adds	r7, r3, #1
 800996c:	2800      	cmp	r0, #0
 800996e:	d120      	bne.n	80099b2 <_vfiprintf_r+0x13a>
 8009970:	682a      	ldr	r2, [r5, #0]
 8009972:	06d3      	lsls	r3, r2, #27
 8009974:	d504      	bpl.n	8009980 <_vfiprintf_r+0x108>
 8009976:	2353      	movs	r3, #83	; 0x53
 8009978:	a904      	add	r1, sp, #16
 800997a:	185b      	adds	r3, r3, r1
 800997c:	2120      	movs	r1, #32
 800997e:	7019      	strb	r1, [r3, #0]
 8009980:	0713      	lsls	r3, r2, #28
 8009982:	d504      	bpl.n	800998e <_vfiprintf_r+0x116>
 8009984:	2353      	movs	r3, #83	; 0x53
 8009986:	a904      	add	r1, sp, #16
 8009988:	185b      	adds	r3, r3, r1
 800998a:	212b      	movs	r1, #43	; 0x2b
 800998c:	7019      	strb	r1, [r3, #0]
 800998e:	9b03      	ldr	r3, [sp, #12]
 8009990:	781b      	ldrb	r3, [r3, #0]
 8009992:	2b2a      	cmp	r3, #42	; 0x2a
 8009994:	d016      	beq.n	80099c4 <_vfiprintf_r+0x14c>
 8009996:	2100      	movs	r1, #0
 8009998:	68eb      	ldr	r3, [r5, #12]
 800999a:	9f03      	ldr	r7, [sp, #12]
 800999c:	783a      	ldrb	r2, [r7, #0]
 800999e:	1c78      	adds	r0, r7, #1
 80099a0:	3a30      	subs	r2, #48	; 0x30
 80099a2:	4684      	mov	ip, r0
 80099a4:	2a09      	cmp	r2, #9
 80099a6:	d94f      	bls.n	8009a48 <_vfiprintf_r+0x1d0>
 80099a8:	2900      	cmp	r1, #0
 80099aa:	d111      	bne.n	80099d0 <_vfiprintf_r+0x158>
 80099ac:	e017      	b.n	80099de <_vfiprintf_r+0x166>
 80099ae:	3701      	adds	r7, #1
 80099b0:	e7a9      	b.n	8009906 <_vfiprintf_r+0x8e>
 80099b2:	4b49      	ldr	r3, [pc, #292]	; (8009ad8 <_vfiprintf_r+0x260>)
 80099b4:	682a      	ldr	r2, [r5, #0]
 80099b6:	1ac0      	subs	r0, r0, r3
 80099b8:	2301      	movs	r3, #1
 80099ba:	4083      	lsls	r3, r0
 80099bc:	4313      	orrs	r3, r2
 80099be:	602b      	str	r3, [r5, #0]
 80099c0:	9703      	str	r7, [sp, #12]
 80099c2:	e7cb      	b.n	800995c <_vfiprintf_r+0xe4>
 80099c4:	9b07      	ldr	r3, [sp, #28]
 80099c6:	1d19      	adds	r1, r3, #4
 80099c8:	681b      	ldr	r3, [r3, #0]
 80099ca:	9107      	str	r1, [sp, #28]
 80099cc:	2b00      	cmp	r3, #0
 80099ce:	db01      	blt.n	80099d4 <_vfiprintf_r+0x15c>
 80099d0:	930b      	str	r3, [sp, #44]	; 0x2c
 80099d2:	e004      	b.n	80099de <_vfiprintf_r+0x166>
 80099d4:	425b      	negs	r3, r3
 80099d6:	60eb      	str	r3, [r5, #12]
 80099d8:	2302      	movs	r3, #2
 80099da:	4313      	orrs	r3, r2
 80099dc:	602b      	str	r3, [r5, #0]
 80099de:	783b      	ldrb	r3, [r7, #0]
 80099e0:	2b2e      	cmp	r3, #46	; 0x2e
 80099e2:	d10a      	bne.n	80099fa <_vfiprintf_r+0x182>
 80099e4:	787b      	ldrb	r3, [r7, #1]
 80099e6:	2b2a      	cmp	r3, #42	; 0x2a
 80099e8:	d137      	bne.n	8009a5a <_vfiprintf_r+0x1e2>
 80099ea:	9b07      	ldr	r3, [sp, #28]
 80099ec:	3702      	adds	r7, #2
 80099ee:	1d1a      	adds	r2, r3, #4
 80099f0:	681b      	ldr	r3, [r3, #0]
 80099f2:	9207      	str	r2, [sp, #28]
 80099f4:	2b00      	cmp	r3, #0
 80099f6:	db2d      	blt.n	8009a54 <_vfiprintf_r+0x1dc>
 80099f8:	9309      	str	r3, [sp, #36]	; 0x24
 80099fa:	2203      	movs	r2, #3
 80099fc:	7839      	ldrb	r1, [r7, #0]
 80099fe:	4837      	ldr	r0, [pc, #220]	; (8009adc <_vfiprintf_r+0x264>)
 8009a00:	f7ff f84e 	bl	8008aa0 <memchr>
 8009a04:	2800      	cmp	r0, #0
 8009a06:	d007      	beq.n	8009a18 <_vfiprintf_r+0x1a0>
 8009a08:	4b34      	ldr	r3, [pc, #208]	; (8009adc <_vfiprintf_r+0x264>)
 8009a0a:	682a      	ldr	r2, [r5, #0]
 8009a0c:	1ac0      	subs	r0, r0, r3
 8009a0e:	2340      	movs	r3, #64	; 0x40
 8009a10:	4083      	lsls	r3, r0
 8009a12:	4313      	orrs	r3, r2
 8009a14:	3701      	adds	r7, #1
 8009a16:	602b      	str	r3, [r5, #0]
 8009a18:	7839      	ldrb	r1, [r7, #0]
 8009a1a:	1c7b      	adds	r3, r7, #1
 8009a1c:	2206      	movs	r2, #6
 8009a1e:	4830      	ldr	r0, [pc, #192]	; (8009ae0 <_vfiprintf_r+0x268>)
 8009a20:	9303      	str	r3, [sp, #12]
 8009a22:	7629      	strb	r1, [r5, #24]
 8009a24:	f7ff f83c 	bl	8008aa0 <memchr>
 8009a28:	2800      	cmp	r0, #0
 8009a2a:	d045      	beq.n	8009ab8 <_vfiprintf_r+0x240>
 8009a2c:	4b2d      	ldr	r3, [pc, #180]	; (8009ae4 <_vfiprintf_r+0x26c>)
 8009a2e:	2b00      	cmp	r3, #0
 8009a30:	d127      	bne.n	8009a82 <_vfiprintf_r+0x20a>
 8009a32:	2207      	movs	r2, #7
 8009a34:	9b07      	ldr	r3, [sp, #28]
 8009a36:	3307      	adds	r3, #7
 8009a38:	4393      	bics	r3, r2
 8009a3a:	3308      	adds	r3, #8
 8009a3c:	9307      	str	r3, [sp, #28]
 8009a3e:	696b      	ldr	r3, [r5, #20]
 8009a40:	9a04      	ldr	r2, [sp, #16]
 8009a42:	189b      	adds	r3, r3, r2
 8009a44:	616b      	str	r3, [r5, #20]
 8009a46:	e75d      	b.n	8009904 <_vfiprintf_r+0x8c>
 8009a48:	210a      	movs	r1, #10
 8009a4a:	434b      	muls	r3, r1
 8009a4c:	4667      	mov	r7, ip
 8009a4e:	189b      	adds	r3, r3, r2
 8009a50:	3909      	subs	r1, #9
 8009a52:	e7a3      	b.n	800999c <_vfiprintf_r+0x124>
 8009a54:	2301      	movs	r3, #1
 8009a56:	425b      	negs	r3, r3
 8009a58:	e7ce      	b.n	80099f8 <_vfiprintf_r+0x180>
 8009a5a:	2300      	movs	r3, #0
 8009a5c:	001a      	movs	r2, r3
 8009a5e:	3701      	adds	r7, #1
 8009a60:	606b      	str	r3, [r5, #4]
 8009a62:	7839      	ldrb	r1, [r7, #0]
 8009a64:	1c78      	adds	r0, r7, #1
 8009a66:	3930      	subs	r1, #48	; 0x30
 8009a68:	4684      	mov	ip, r0
 8009a6a:	2909      	cmp	r1, #9
 8009a6c:	d903      	bls.n	8009a76 <_vfiprintf_r+0x1fe>
 8009a6e:	2b00      	cmp	r3, #0
 8009a70:	d0c3      	beq.n	80099fa <_vfiprintf_r+0x182>
 8009a72:	9209      	str	r2, [sp, #36]	; 0x24
 8009a74:	e7c1      	b.n	80099fa <_vfiprintf_r+0x182>
 8009a76:	230a      	movs	r3, #10
 8009a78:	435a      	muls	r2, r3
 8009a7a:	4667      	mov	r7, ip
 8009a7c:	1852      	adds	r2, r2, r1
 8009a7e:	3b09      	subs	r3, #9
 8009a80:	e7ef      	b.n	8009a62 <_vfiprintf_r+0x1ea>
 8009a82:	ab07      	add	r3, sp, #28
 8009a84:	9300      	str	r3, [sp, #0]
 8009a86:	0022      	movs	r2, r4
 8009a88:	0029      	movs	r1, r5
 8009a8a:	0030      	movs	r0, r6
 8009a8c:	4b16      	ldr	r3, [pc, #88]	; (8009ae8 <_vfiprintf_r+0x270>)
 8009a8e:	f7fd fd6f 	bl	8007570 <_printf_float>
 8009a92:	9004      	str	r0, [sp, #16]
 8009a94:	9b04      	ldr	r3, [sp, #16]
 8009a96:	3301      	adds	r3, #1
 8009a98:	d1d1      	bne.n	8009a3e <_vfiprintf_r+0x1c6>
 8009a9a:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8009a9c:	07db      	lsls	r3, r3, #31
 8009a9e:	d405      	bmi.n	8009aac <_vfiprintf_r+0x234>
 8009aa0:	89a3      	ldrh	r3, [r4, #12]
 8009aa2:	059b      	lsls	r3, r3, #22
 8009aa4:	d402      	bmi.n	8009aac <_vfiprintf_r+0x234>
 8009aa6:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8009aa8:	f000 fad4 	bl	800a054 <__retarget_lock_release_recursive>
 8009aac:	89a3      	ldrh	r3, [r4, #12]
 8009aae:	065b      	lsls	r3, r3, #25
 8009ab0:	d500      	bpl.n	8009ab4 <_vfiprintf_r+0x23c>
 8009ab2:	e70a      	b.n	80098ca <_vfiprintf_r+0x52>
 8009ab4:	980d      	ldr	r0, [sp, #52]	; 0x34
 8009ab6:	e70a      	b.n	80098ce <_vfiprintf_r+0x56>
 8009ab8:	ab07      	add	r3, sp, #28
 8009aba:	9300      	str	r3, [sp, #0]
 8009abc:	0022      	movs	r2, r4
 8009abe:	0029      	movs	r1, r5
 8009ac0:	0030      	movs	r0, r6
 8009ac2:	4b09      	ldr	r3, [pc, #36]	; (8009ae8 <_vfiprintf_r+0x270>)
 8009ac4:	f7fe f806 	bl	8007ad4 <_printf_i>
 8009ac8:	e7e3      	b.n	8009a92 <_vfiprintf_r+0x21a>
 8009aca:	46c0      	nop			; (mov r8, r8)
 8009acc:	0800a87c 	.word	0x0800a87c
 8009ad0:	0800a89c 	.word	0x0800a89c
 8009ad4:	0800a85c 	.word	0x0800a85c
 8009ad8:	0800a704 	.word	0x0800a704
 8009adc:	0800a70a 	.word	0x0800a70a
 8009ae0:	0800a70e 	.word	0x0800a70e
 8009ae4:	08007571 	.word	0x08007571
 8009ae8:	08009855 	.word	0x08009855

08009aec <__swbuf_r>:
 8009aec:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8009aee:	0005      	movs	r5, r0
 8009af0:	000e      	movs	r6, r1
 8009af2:	0014      	movs	r4, r2
 8009af4:	2800      	cmp	r0, #0
 8009af6:	d004      	beq.n	8009b02 <__swbuf_r+0x16>
 8009af8:	6983      	ldr	r3, [r0, #24]
 8009afa:	2b00      	cmp	r3, #0
 8009afc:	d101      	bne.n	8009b02 <__swbuf_r+0x16>
 8009afe:	f000 fa07 	bl	8009f10 <__sinit>
 8009b02:	4b22      	ldr	r3, [pc, #136]	; (8009b8c <__swbuf_r+0xa0>)
 8009b04:	429c      	cmp	r4, r3
 8009b06:	d12e      	bne.n	8009b66 <__swbuf_r+0x7a>
 8009b08:	686c      	ldr	r4, [r5, #4]
 8009b0a:	69a3      	ldr	r3, [r4, #24]
 8009b0c:	60a3      	str	r3, [r4, #8]
 8009b0e:	89a3      	ldrh	r3, [r4, #12]
 8009b10:	071b      	lsls	r3, r3, #28
 8009b12:	d532      	bpl.n	8009b7a <__swbuf_r+0x8e>
 8009b14:	6923      	ldr	r3, [r4, #16]
 8009b16:	2b00      	cmp	r3, #0
 8009b18:	d02f      	beq.n	8009b7a <__swbuf_r+0x8e>
 8009b1a:	6823      	ldr	r3, [r4, #0]
 8009b1c:	6922      	ldr	r2, [r4, #16]
 8009b1e:	b2f7      	uxtb	r7, r6
 8009b20:	1a98      	subs	r0, r3, r2
 8009b22:	6963      	ldr	r3, [r4, #20]
 8009b24:	b2f6      	uxtb	r6, r6
 8009b26:	4283      	cmp	r3, r0
 8009b28:	dc05      	bgt.n	8009b36 <__swbuf_r+0x4a>
 8009b2a:	0021      	movs	r1, r4
 8009b2c:	0028      	movs	r0, r5
 8009b2e:	f000 f94d 	bl	8009dcc <_fflush_r>
 8009b32:	2800      	cmp	r0, #0
 8009b34:	d127      	bne.n	8009b86 <__swbuf_r+0x9a>
 8009b36:	68a3      	ldr	r3, [r4, #8]
 8009b38:	3001      	adds	r0, #1
 8009b3a:	3b01      	subs	r3, #1
 8009b3c:	60a3      	str	r3, [r4, #8]
 8009b3e:	6823      	ldr	r3, [r4, #0]
 8009b40:	1c5a      	adds	r2, r3, #1
 8009b42:	6022      	str	r2, [r4, #0]
 8009b44:	701f      	strb	r7, [r3, #0]
 8009b46:	6963      	ldr	r3, [r4, #20]
 8009b48:	4283      	cmp	r3, r0
 8009b4a:	d004      	beq.n	8009b56 <__swbuf_r+0x6a>
 8009b4c:	89a3      	ldrh	r3, [r4, #12]
 8009b4e:	07db      	lsls	r3, r3, #31
 8009b50:	d507      	bpl.n	8009b62 <__swbuf_r+0x76>
 8009b52:	2e0a      	cmp	r6, #10
 8009b54:	d105      	bne.n	8009b62 <__swbuf_r+0x76>
 8009b56:	0021      	movs	r1, r4
 8009b58:	0028      	movs	r0, r5
 8009b5a:	f000 f937 	bl	8009dcc <_fflush_r>
 8009b5e:	2800      	cmp	r0, #0
 8009b60:	d111      	bne.n	8009b86 <__swbuf_r+0x9a>
 8009b62:	0030      	movs	r0, r6
 8009b64:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8009b66:	4b0a      	ldr	r3, [pc, #40]	; (8009b90 <__swbuf_r+0xa4>)
 8009b68:	429c      	cmp	r4, r3
 8009b6a:	d101      	bne.n	8009b70 <__swbuf_r+0x84>
 8009b6c:	68ac      	ldr	r4, [r5, #8]
 8009b6e:	e7cc      	b.n	8009b0a <__swbuf_r+0x1e>
 8009b70:	4b08      	ldr	r3, [pc, #32]	; (8009b94 <__swbuf_r+0xa8>)
 8009b72:	429c      	cmp	r4, r3
 8009b74:	d1c9      	bne.n	8009b0a <__swbuf_r+0x1e>
 8009b76:	68ec      	ldr	r4, [r5, #12]
 8009b78:	e7c7      	b.n	8009b0a <__swbuf_r+0x1e>
 8009b7a:	0021      	movs	r1, r4
 8009b7c:	0028      	movs	r0, r5
 8009b7e:	f000 f819 	bl	8009bb4 <__swsetup_r>
 8009b82:	2800      	cmp	r0, #0
 8009b84:	d0c9      	beq.n	8009b1a <__swbuf_r+0x2e>
 8009b86:	2601      	movs	r6, #1
 8009b88:	4276      	negs	r6, r6
 8009b8a:	e7ea      	b.n	8009b62 <__swbuf_r+0x76>
 8009b8c:	0800a87c 	.word	0x0800a87c
 8009b90:	0800a89c 	.word	0x0800a89c
 8009b94:	0800a85c 	.word	0x0800a85c

08009b98 <__ascii_wctomb>:
 8009b98:	0003      	movs	r3, r0
 8009b9a:	1e08      	subs	r0, r1, #0
 8009b9c:	d005      	beq.n	8009baa <__ascii_wctomb+0x12>
 8009b9e:	2aff      	cmp	r2, #255	; 0xff
 8009ba0:	d904      	bls.n	8009bac <__ascii_wctomb+0x14>
 8009ba2:	228a      	movs	r2, #138	; 0x8a
 8009ba4:	2001      	movs	r0, #1
 8009ba6:	601a      	str	r2, [r3, #0]
 8009ba8:	4240      	negs	r0, r0
 8009baa:	4770      	bx	lr
 8009bac:	2001      	movs	r0, #1
 8009bae:	700a      	strb	r2, [r1, #0]
 8009bb0:	e7fb      	b.n	8009baa <__ascii_wctomb+0x12>
	...

08009bb4 <__swsetup_r>:
 8009bb4:	4b37      	ldr	r3, [pc, #220]	; (8009c94 <__swsetup_r+0xe0>)
 8009bb6:	b570      	push	{r4, r5, r6, lr}
 8009bb8:	681d      	ldr	r5, [r3, #0]
 8009bba:	0006      	movs	r6, r0
 8009bbc:	000c      	movs	r4, r1
 8009bbe:	2d00      	cmp	r5, #0
 8009bc0:	d005      	beq.n	8009bce <__swsetup_r+0x1a>
 8009bc2:	69ab      	ldr	r3, [r5, #24]
 8009bc4:	2b00      	cmp	r3, #0
 8009bc6:	d102      	bne.n	8009bce <__swsetup_r+0x1a>
 8009bc8:	0028      	movs	r0, r5
 8009bca:	f000 f9a1 	bl	8009f10 <__sinit>
 8009bce:	4b32      	ldr	r3, [pc, #200]	; (8009c98 <__swsetup_r+0xe4>)
 8009bd0:	429c      	cmp	r4, r3
 8009bd2:	d10f      	bne.n	8009bf4 <__swsetup_r+0x40>
 8009bd4:	686c      	ldr	r4, [r5, #4]
 8009bd6:	230c      	movs	r3, #12
 8009bd8:	5ee2      	ldrsh	r2, [r4, r3]
 8009bda:	b293      	uxth	r3, r2
 8009bdc:	0711      	lsls	r1, r2, #28
 8009bde:	d42d      	bmi.n	8009c3c <__swsetup_r+0x88>
 8009be0:	06d9      	lsls	r1, r3, #27
 8009be2:	d411      	bmi.n	8009c08 <__swsetup_r+0x54>
 8009be4:	2309      	movs	r3, #9
 8009be6:	2001      	movs	r0, #1
 8009be8:	6033      	str	r3, [r6, #0]
 8009bea:	3337      	adds	r3, #55	; 0x37
 8009bec:	4313      	orrs	r3, r2
 8009bee:	81a3      	strh	r3, [r4, #12]
 8009bf0:	4240      	negs	r0, r0
 8009bf2:	bd70      	pop	{r4, r5, r6, pc}
 8009bf4:	4b29      	ldr	r3, [pc, #164]	; (8009c9c <__swsetup_r+0xe8>)
 8009bf6:	429c      	cmp	r4, r3
 8009bf8:	d101      	bne.n	8009bfe <__swsetup_r+0x4a>
 8009bfa:	68ac      	ldr	r4, [r5, #8]
 8009bfc:	e7eb      	b.n	8009bd6 <__swsetup_r+0x22>
 8009bfe:	4b28      	ldr	r3, [pc, #160]	; (8009ca0 <__swsetup_r+0xec>)
 8009c00:	429c      	cmp	r4, r3
 8009c02:	d1e8      	bne.n	8009bd6 <__swsetup_r+0x22>
 8009c04:	68ec      	ldr	r4, [r5, #12]
 8009c06:	e7e6      	b.n	8009bd6 <__swsetup_r+0x22>
 8009c08:	075b      	lsls	r3, r3, #29
 8009c0a:	d513      	bpl.n	8009c34 <__swsetup_r+0x80>
 8009c0c:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8009c0e:	2900      	cmp	r1, #0
 8009c10:	d008      	beq.n	8009c24 <__swsetup_r+0x70>
 8009c12:	0023      	movs	r3, r4
 8009c14:	3344      	adds	r3, #68	; 0x44
 8009c16:	4299      	cmp	r1, r3
 8009c18:	d002      	beq.n	8009c20 <__swsetup_r+0x6c>
 8009c1a:	0030      	movs	r0, r6
 8009c1c:	f7ff fb1c 	bl	8009258 <_free_r>
 8009c20:	2300      	movs	r3, #0
 8009c22:	6363      	str	r3, [r4, #52]	; 0x34
 8009c24:	2224      	movs	r2, #36	; 0x24
 8009c26:	89a3      	ldrh	r3, [r4, #12]
 8009c28:	4393      	bics	r3, r2
 8009c2a:	81a3      	strh	r3, [r4, #12]
 8009c2c:	2300      	movs	r3, #0
 8009c2e:	6063      	str	r3, [r4, #4]
 8009c30:	6923      	ldr	r3, [r4, #16]
 8009c32:	6023      	str	r3, [r4, #0]
 8009c34:	2308      	movs	r3, #8
 8009c36:	89a2      	ldrh	r2, [r4, #12]
 8009c38:	4313      	orrs	r3, r2
 8009c3a:	81a3      	strh	r3, [r4, #12]
 8009c3c:	6923      	ldr	r3, [r4, #16]
 8009c3e:	2b00      	cmp	r3, #0
 8009c40:	d10b      	bne.n	8009c5a <__swsetup_r+0xa6>
 8009c42:	21a0      	movs	r1, #160	; 0xa0
 8009c44:	2280      	movs	r2, #128	; 0x80
 8009c46:	89a3      	ldrh	r3, [r4, #12]
 8009c48:	0089      	lsls	r1, r1, #2
 8009c4a:	0092      	lsls	r2, r2, #2
 8009c4c:	400b      	ands	r3, r1
 8009c4e:	4293      	cmp	r3, r2
 8009c50:	d003      	beq.n	8009c5a <__swsetup_r+0xa6>
 8009c52:	0021      	movs	r1, r4
 8009c54:	0030      	movs	r0, r6
 8009c56:	f000 fa27 	bl	800a0a8 <__smakebuf_r>
 8009c5a:	220c      	movs	r2, #12
 8009c5c:	5ea3      	ldrsh	r3, [r4, r2]
 8009c5e:	2001      	movs	r0, #1
 8009c60:	001a      	movs	r2, r3
 8009c62:	b299      	uxth	r1, r3
 8009c64:	4002      	ands	r2, r0
 8009c66:	4203      	tst	r3, r0
 8009c68:	d00f      	beq.n	8009c8a <__swsetup_r+0xd6>
 8009c6a:	2200      	movs	r2, #0
 8009c6c:	60a2      	str	r2, [r4, #8]
 8009c6e:	6962      	ldr	r2, [r4, #20]
 8009c70:	4252      	negs	r2, r2
 8009c72:	61a2      	str	r2, [r4, #24]
 8009c74:	2000      	movs	r0, #0
 8009c76:	6922      	ldr	r2, [r4, #16]
 8009c78:	4282      	cmp	r2, r0
 8009c7a:	d1ba      	bne.n	8009bf2 <__swsetup_r+0x3e>
 8009c7c:	060a      	lsls	r2, r1, #24
 8009c7e:	d5b8      	bpl.n	8009bf2 <__swsetup_r+0x3e>
 8009c80:	2240      	movs	r2, #64	; 0x40
 8009c82:	4313      	orrs	r3, r2
 8009c84:	81a3      	strh	r3, [r4, #12]
 8009c86:	3801      	subs	r0, #1
 8009c88:	e7b3      	b.n	8009bf2 <__swsetup_r+0x3e>
 8009c8a:	0788      	lsls	r0, r1, #30
 8009c8c:	d400      	bmi.n	8009c90 <__swsetup_r+0xdc>
 8009c8e:	6962      	ldr	r2, [r4, #20]
 8009c90:	60a2      	str	r2, [r4, #8]
 8009c92:	e7ef      	b.n	8009c74 <__swsetup_r+0xc0>
 8009c94:	20000014 	.word	0x20000014
 8009c98:	0800a87c 	.word	0x0800a87c
 8009c9c:	0800a89c 	.word	0x0800a89c
 8009ca0:	0800a85c 	.word	0x0800a85c

08009ca4 <abort>:
 8009ca4:	2006      	movs	r0, #6
 8009ca6:	b510      	push	{r4, lr}
 8009ca8:	f000 fa74 	bl	800a194 <raise>
 8009cac:	2001      	movs	r0, #1
 8009cae:	f7f9 fbba 	bl	8003426 <_exit>
	...

08009cb4 <__sflush_r>:
 8009cb4:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8009cb6:	898b      	ldrh	r3, [r1, #12]
 8009cb8:	0005      	movs	r5, r0
 8009cba:	000c      	movs	r4, r1
 8009cbc:	071a      	lsls	r2, r3, #28
 8009cbe:	d45f      	bmi.n	8009d80 <__sflush_r+0xcc>
 8009cc0:	684a      	ldr	r2, [r1, #4]
 8009cc2:	2a00      	cmp	r2, #0
 8009cc4:	dc04      	bgt.n	8009cd0 <__sflush_r+0x1c>
 8009cc6:	6c0a      	ldr	r2, [r1, #64]	; 0x40
 8009cc8:	2a00      	cmp	r2, #0
 8009cca:	dc01      	bgt.n	8009cd0 <__sflush_r+0x1c>
 8009ccc:	2000      	movs	r0, #0
 8009cce:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 8009cd0:	6ae7      	ldr	r7, [r4, #44]	; 0x2c
 8009cd2:	2f00      	cmp	r7, #0
 8009cd4:	d0fa      	beq.n	8009ccc <__sflush_r+0x18>
 8009cd6:	2200      	movs	r2, #0
 8009cd8:	2180      	movs	r1, #128	; 0x80
 8009cda:	682e      	ldr	r6, [r5, #0]
 8009cdc:	602a      	str	r2, [r5, #0]
 8009cde:	001a      	movs	r2, r3
 8009ce0:	0149      	lsls	r1, r1, #5
 8009ce2:	400a      	ands	r2, r1
 8009ce4:	420b      	tst	r3, r1
 8009ce6:	d034      	beq.n	8009d52 <__sflush_r+0x9e>
 8009ce8:	6d60      	ldr	r0, [r4, #84]	; 0x54
 8009cea:	89a3      	ldrh	r3, [r4, #12]
 8009cec:	075b      	lsls	r3, r3, #29
 8009cee:	d506      	bpl.n	8009cfe <__sflush_r+0x4a>
 8009cf0:	6863      	ldr	r3, [r4, #4]
 8009cf2:	1ac0      	subs	r0, r0, r3
 8009cf4:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8009cf6:	2b00      	cmp	r3, #0
 8009cf8:	d001      	beq.n	8009cfe <__sflush_r+0x4a>
 8009cfa:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8009cfc:	1ac0      	subs	r0, r0, r3
 8009cfe:	0002      	movs	r2, r0
 8009d00:	6a21      	ldr	r1, [r4, #32]
 8009d02:	2300      	movs	r3, #0
 8009d04:	0028      	movs	r0, r5
 8009d06:	6ae7      	ldr	r7, [r4, #44]	; 0x2c
 8009d08:	47b8      	blx	r7
 8009d0a:	89a1      	ldrh	r1, [r4, #12]
 8009d0c:	1c43      	adds	r3, r0, #1
 8009d0e:	d106      	bne.n	8009d1e <__sflush_r+0x6a>
 8009d10:	682b      	ldr	r3, [r5, #0]
 8009d12:	2b1d      	cmp	r3, #29
 8009d14:	d831      	bhi.n	8009d7a <__sflush_r+0xc6>
 8009d16:	4a2c      	ldr	r2, [pc, #176]	; (8009dc8 <__sflush_r+0x114>)
 8009d18:	40da      	lsrs	r2, r3
 8009d1a:	07d3      	lsls	r3, r2, #31
 8009d1c:	d52d      	bpl.n	8009d7a <__sflush_r+0xc6>
 8009d1e:	2300      	movs	r3, #0
 8009d20:	6063      	str	r3, [r4, #4]
 8009d22:	6923      	ldr	r3, [r4, #16]
 8009d24:	6023      	str	r3, [r4, #0]
 8009d26:	04cb      	lsls	r3, r1, #19
 8009d28:	d505      	bpl.n	8009d36 <__sflush_r+0x82>
 8009d2a:	1c43      	adds	r3, r0, #1
 8009d2c:	d102      	bne.n	8009d34 <__sflush_r+0x80>
 8009d2e:	682b      	ldr	r3, [r5, #0]
 8009d30:	2b00      	cmp	r3, #0
 8009d32:	d100      	bne.n	8009d36 <__sflush_r+0x82>
 8009d34:	6560      	str	r0, [r4, #84]	; 0x54
 8009d36:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8009d38:	602e      	str	r6, [r5, #0]
 8009d3a:	2900      	cmp	r1, #0
 8009d3c:	d0c6      	beq.n	8009ccc <__sflush_r+0x18>
 8009d3e:	0023      	movs	r3, r4
 8009d40:	3344      	adds	r3, #68	; 0x44
 8009d42:	4299      	cmp	r1, r3
 8009d44:	d002      	beq.n	8009d4c <__sflush_r+0x98>
 8009d46:	0028      	movs	r0, r5
 8009d48:	f7ff fa86 	bl	8009258 <_free_r>
 8009d4c:	2000      	movs	r0, #0
 8009d4e:	6360      	str	r0, [r4, #52]	; 0x34
 8009d50:	e7bd      	b.n	8009cce <__sflush_r+0x1a>
 8009d52:	2301      	movs	r3, #1
 8009d54:	0028      	movs	r0, r5
 8009d56:	6a21      	ldr	r1, [r4, #32]
 8009d58:	47b8      	blx	r7
 8009d5a:	1c43      	adds	r3, r0, #1
 8009d5c:	d1c5      	bne.n	8009cea <__sflush_r+0x36>
 8009d5e:	682b      	ldr	r3, [r5, #0]
 8009d60:	2b00      	cmp	r3, #0
 8009d62:	d0c2      	beq.n	8009cea <__sflush_r+0x36>
 8009d64:	2b1d      	cmp	r3, #29
 8009d66:	d001      	beq.n	8009d6c <__sflush_r+0xb8>
 8009d68:	2b16      	cmp	r3, #22
 8009d6a:	d101      	bne.n	8009d70 <__sflush_r+0xbc>
 8009d6c:	602e      	str	r6, [r5, #0]
 8009d6e:	e7ad      	b.n	8009ccc <__sflush_r+0x18>
 8009d70:	2340      	movs	r3, #64	; 0x40
 8009d72:	89a2      	ldrh	r2, [r4, #12]
 8009d74:	4313      	orrs	r3, r2
 8009d76:	81a3      	strh	r3, [r4, #12]
 8009d78:	e7a9      	b.n	8009cce <__sflush_r+0x1a>
 8009d7a:	2340      	movs	r3, #64	; 0x40
 8009d7c:	430b      	orrs	r3, r1
 8009d7e:	e7fa      	b.n	8009d76 <__sflush_r+0xc2>
 8009d80:	690f      	ldr	r7, [r1, #16]
 8009d82:	2f00      	cmp	r7, #0
 8009d84:	d0a2      	beq.n	8009ccc <__sflush_r+0x18>
 8009d86:	680a      	ldr	r2, [r1, #0]
 8009d88:	600f      	str	r7, [r1, #0]
 8009d8a:	1bd2      	subs	r2, r2, r7
 8009d8c:	9201      	str	r2, [sp, #4]
 8009d8e:	2200      	movs	r2, #0
 8009d90:	079b      	lsls	r3, r3, #30
 8009d92:	d100      	bne.n	8009d96 <__sflush_r+0xe2>
 8009d94:	694a      	ldr	r2, [r1, #20]
 8009d96:	60a2      	str	r2, [r4, #8]
 8009d98:	9b01      	ldr	r3, [sp, #4]
 8009d9a:	2b00      	cmp	r3, #0
 8009d9c:	dc00      	bgt.n	8009da0 <__sflush_r+0xec>
 8009d9e:	e795      	b.n	8009ccc <__sflush_r+0x18>
 8009da0:	003a      	movs	r2, r7
 8009da2:	0028      	movs	r0, r5
 8009da4:	9b01      	ldr	r3, [sp, #4]
 8009da6:	6a21      	ldr	r1, [r4, #32]
 8009da8:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 8009daa:	47b0      	blx	r6
 8009dac:	2800      	cmp	r0, #0
 8009dae:	dc06      	bgt.n	8009dbe <__sflush_r+0x10a>
 8009db0:	2340      	movs	r3, #64	; 0x40
 8009db2:	2001      	movs	r0, #1
 8009db4:	89a2      	ldrh	r2, [r4, #12]
 8009db6:	4240      	negs	r0, r0
 8009db8:	4313      	orrs	r3, r2
 8009dba:	81a3      	strh	r3, [r4, #12]
 8009dbc:	e787      	b.n	8009cce <__sflush_r+0x1a>
 8009dbe:	9b01      	ldr	r3, [sp, #4]
 8009dc0:	183f      	adds	r7, r7, r0
 8009dc2:	1a1b      	subs	r3, r3, r0
 8009dc4:	9301      	str	r3, [sp, #4]
 8009dc6:	e7e7      	b.n	8009d98 <__sflush_r+0xe4>
 8009dc8:	20400001 	.word	0x20400001

08009dcc <_fflush_r>:
 8009dcc:	690b      	ldr	r3, [r1, #16]
 8009dce:	b570      	push	{r4, r5, r6, lr}
 8009dd0:	0005      	movs	r5, r0
 8009dd2:	000c      	movs	r4, r1
 8009dd4:	2b00      	cmp	r3, #0
 8009dd6:	d102      	bne.n	8009dde <_fflush_r+0x12>
 8009dd8:	2500      	movs	r5, #0
 8009dda:	0028      	movs	r0, r5
 8009ddc:	bd70      	pop	{r4, r5, r6, pc}
 8009dde:	2800      	cmp	r0, #0
 8009de0:	d004      	beq.n	8009dec <_fflush_r+0x20>
 8009de2:	6983      	ldr	r3, [r0, #24]
 8009de4:	2b00      	cmp	r3, #0
 8009de6:	d101      	bne.n	8009dec <_fflush_r+0x20>
 8009de8:	f000 f892 	bl	8009f10 <__sinit>
 8009dec:	4b14      	ldr	r3, [pc, #80]	; (8009e40 <_fflush_r+0x74>)
 8009dee:	429c      	cmp	r4, r3
 8009df0:	d11b      	bne.n	8009e2a <_fflush_r+0x5e>
 8009df2:	686c      	ldr	r4, [r5, #4]
 8009df4:	220c      	movs	r2, #12
 8009df6:	5ea3      	ldrsh	r3, [r4, r2]
 8009df8:	2b00      	cmp	r3, #0
 8009dfa:	d0ed      	beq.n	8009dd8 <_fflush_r+0xc>
 8009dfc:	6e62      	ldr	r2, [r4, #100]	; 0x64
 8009dfe:	07d2      	lsls	r2, r2, #31
 8009e00:	d404      	bmi.n	8009e0c <_fflush_r+0x40>
 8009e02:	059b      	lsls	r3, r3, #22
 8009e04:	d402      	bmi.n	8009e0c <_fflush_r+0x40>
 8009e06:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8009e08:	f000 f923 	bl	800a052 <__retarget_lock_acquire_recursive>
 8009e0c:	0028      	movs	r0, r5
 8009e0e:	0021      	movs	r1, r4
 8009e10:	f7ff ff50 	bl	8009cb4 <__sflush_r>
 8009e14:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8009e16:	0005      	movs	r5, r0
 8009e18:	07db      	lsls	r3, r3, #31
 8009e1a:	d4de      	bmi.n	8009dda <_fflush_r+0xe>
 8009e1c:	89a3      	ldrh	r3, [r4, #12]
 8009e1e:	059b      	lsls	r3, r3, #22
 8009e20:	d4db      	bmi.n	8009dda <_fflush_r+0xe>
 8009e22:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8009e24:	f000 f916 	bl	800a054 <__retarget_lock_release_recursive>
 8009e28:	e7d7      	b.n	8009dda <_fflush_r+0xe>
 8009e2a:	4b06      	ldr	r3, [pc, #24]	; (8009e44 <_fflush_r+0x78>)
 8009e2c:	429c      	cmp	r4, r3
 8009e2e:	d101      	bne.n	8009e34 <_fflush_r+0x68>
 8009e30:	68ac      	ldr	r4, [r5, #8]
 8009e32:	e7df      	b.n	8009df4 <_fflush_r+0x28>
 8009e34:	4b04      	ldr	r3, [pc, #16]	; (8009e48 <_fflush_r+0x7c>)
 8009e36:	429c      	cmp	r4, r3
 8009e38:	d1dc      	bne.n	8009df4 <_fflush_r+0x28>
 8009e3a:	68ec      	ldr	r4, [r5, #12]
 8009e3c:	e7da      	b.n	8009df4 <_fflush_r+0x28>
 8009e3e:	46c0      	nop			; (mov r8, r8)
 8009e40:	0800a87c 	.word	0x0800a87c
 8009e44:	0800a89c 	.word	0x0800a89c
 8009e48:	0800a85c 	.word	0x0800a85c

08009e4c <std>:
 8009e4c:	2300      	movs	r3, #0
 8009e4e:	b510      	push	{r4, lr}
 8009e50:	0004      	movs	r4, r0
 8009e52:	6003      	str	r3, [r0, #0]
 8009e54:	6043      	str	r3, [r0, #4]
 8009e56:	6083      	str	r3, [r0, #8]
 8009e58:	8181      	strh	r1, [r0, #12]
 8009e5a:	6643      	str	r3, [r0, #100]	; 0x64
 8009e5c:	0019      	movs	r1, r3
 8009e5e:	81c2      	strh	r2, [r0, #14]
 8009e60:	6103      	str	r3, [r0, #16]
 8009e62:	6143      	str	r3, [r0, #20]
 8009e64:	6183      	str	r3, [r0, #24]
 8009e66:	2208      	movs	r2, #8
 8009e68:	305c      	adds	r0, #92	; 0x5c
 8009e6a:	f7fd facf 	bl	800740c <memset>
 8009e6e:	4b05      	ldr	r3, [pc, #20]	; (8009e84 <std+0x38>)
 8009e70:	6224      	str	r4, [r4, #32]
 8009e72:	6263      	str	r3, [r4, #36]	; 0x24
 8009e74:	4b04      	ldr	r3, [pc, #16]	; (8009e88 <std+0x3c>)
 8009e76:	62a3      	str	r3, [r4, #40]	; 0x28
 8009e78:	4b04      	ldr	r3, [pc, #16]	; (8009e8c <std+0x40>)
 8009e7a:	62e3      	str	r3, [r4, #44]	; 0x2c
 8009e7c:	4b04      	ldr	r3, [pc, #16]	; (8009e90 <std+0x44>)
 8009e7e:	6323      	str	r3, [r4, #48]	; 0x30
 8009e80:	bd10      	pop	{r4, pc}
 8009e82:	46c0      	nop			; (mov r8, r8)
 8009e84:	0800a1d5 	.word	0x0800a1d5
 8009e88:	0800a1fd 	.word	0x0800a1fd
 8009e8c:	0800a235 	.word	0x0800a235
 8009e90:	0800a261 	.word	0x0800a261

08009e94 <_cleanup_r>:
 8009e94:	b510      	push	{r4, lr}
 8009e96:	4902      	ldr	r1, [pc, #8]	; (8009ea0 <_cleanup_r+0xc>)
 8009e98:	f000 f8ba 	bl	800a010 <_fwalk_reent>
 8009e9c:	bd10      	pop	{r4, pc}
 8009e9e:	46c0      	nop			; (mov r8, r8)
 8009ea0:	08009dcd 	.word	0x08009dcd

08009ea4 <__sfmoreglue>:
 8009ea4:	b570      	push	{r4, r5, r6, lr}
 8009ea6:	2568      	movs	r5, #104	; 0x68
 8009ea8:	1e4a      	subs	r2, r1, #1
 8009eaa:	4355      	muls	r5, r2
 8009eac:	000e      	movs	r6, r1
 8009eae:	0029      	movs	r1, r5
 8009eb0:	3174      	adds	r1, #116	; 0x74
 8009eb2:	f7ff fa3d 	bl	8009330 <_malloc_r>
 8009eb6:	1e04      	subs	r4, r0, #0
 8009eb8:	d008      	beq.n	8009ecc <__sfmoreglue+0x28>
 8009eba:	2100      	movs	r1, #0
 8009ebc:	002a      	movs	r2, r5
 8009ebe:	6001      	str	r1, [r0, #0]
 8009ec0:	6046      	str	r6, [r0, #4]
 8009ec2:	300c      	adds	r0, #12
 8009ec4:	60a0      	str	r0, [r4, #8]
 8009ec6:	3268      	adds	r2, #104	; 0x68
 8009ec8:	f7fd faa0 	bl	800740c <memset>
 8009ecc:	0020      	movs	r0, r4
 8009ece:	bd70      	pop	{r4, r5, r6, pc}

08009ed0 <__sfp_lock_acquire>:
 8009ed0:	b510      	push	{r4, lr}
 8009ed2:	4802      	ldr	r0, [pc, #8]	; (8009edc <__sfp_lock_acquire+0xc>)
 8009ed4:	f000 f8bd 	bl	800a052 <__retarget_lock_acquire_recursive>
 8009ed8:	bd10      	pop	{r4, pc}
 8009eda:	46c0      	nop			; (mov r8, r8)
 8009edc:	200003b5 	.word	0x200003b5

08009ee0 <__sfp_lock_release>:
 8009ee0:	b510      	push	{r4, lr}
 8009ee2:	4802      	ldr	r0, [pc, #8]	; (8009eec <__sfp_lock_release+0xc>)
 8009ee4:	f000 f8b6 	bl	800a054 <__retarget_lock_release_recursive>
 8009ee8:	bd10      	pop	{r4, pc}
 8009eea:	46c0      	nop			; (mov r8, r8)
 8009eec:	200003b5 	.word	0x200003b5

08009ef0 <__sinit_lock_acquire>:
 8009ef0:	b510      	push	{r4, lr}
 8009ef2:	4802      	ldr	r0, [pc, #8]	; (8009efc <__sinit_lock_acquire+0xc>)
 8009ef4:	f000 f8ad 	bl	800a052 <__retarget_lock_acquire_recursive>
 8009ef8:	bd10      	pop	{r4, pc}
 8009efa:	46c0      	nop			; (mov r8, r8)
 8009efc:	200003b6 	.word	0x200003b6

08009f00 <__sinit_lock_release>:
 8009f00:	b510      	push	{r4, lr}
 8009f02:	4802      	ldr	r0, [pc, #8]	; (8009f0c <__sinit_lock_release+0xc>)
 8009f04:	f000 f8a6 	bl	800a054 <__retarget_lock_release_recursive>
 8009f08:	bd10      	pop	{r4, pc}
 8009f0a:	46c0      	nop			; (mov r8, r8)
 8009f0c:	200003b6 	.word	0x200003b6

08009f10 <__sinit>:
 8009f10:	b513      	push	{r0, r1, r4, lr}
 8009f12:	0004      	movs	r4, r0
 8009f14:	f7ff ffec 	bl	8009ef0 <__sinit_lock_acquire>
 8009f18:	69a3      	ldr	r3, [r4, #24]
 8009f1a:	2b00      	cmp	r3, #0
 8009f1c:	d002      	beq.n	8009f24 <__sinit+0x14>
 8009f1e:	f7ff ffef 	bl	8009f00 <__sinit_lock_release>
 8009f22:	bd13      	pop	{r0, r1, r4, pc}
 8009f24:	64a3      	str	r3, [r4, #72]	; 0x48
 8009f26:	64e3      	str	r3, [r4, #76]	; 0x4c
 8009f28:	6523      	str	r3, [r4, #80]	; 0x50
 8009f2a:	4b13      	ldr	r3, [pc, #76]	; (8009f78 <__sinit+0x68>)
 8009f2c:	4a13      	ldr	r2, [pc, #76]	; (8009f7c <__sinit+0x6c>)
 8009f2e:	681b      	ldr	r3, [r3, #0]
 8009f30:	62a2      	str	r2, [r4, #40]	; 0x28
 8009f32:	9301      	str	r3, [sp, #4]
 8009f34:	42a3      	cmp	r3, r4
 8009f36:	d101      	bne.n	8009f3c <__sinit+0x2c>
 8009f38:	2301      	movs	r3, #1
 8009f3a:	61a3      	str	r3, [r4, #24]
 8009f3c:	0020      	movs	r0, r4
 8009f3e:	f000 f81f 	bl	8009f80 <__sfp>
 8009f42:	6060      	str	r0, [r4, #4]
 8009f44:	0020      	movs	r0, r4
 8009f46:	f000 f81b 	bl	8009f80 <__sfp>
 8009f4a:	60a0      	str	r0, [r4, #8]
 8009f4c:	0020      	movs	r0, r4
 8009f4e:	f000 f817 	bl	8009f80 <__sfp>
 8009f52:	2200      	movs	r2, #0
 8009f54:	2104      	movs	r1, #4
 8009f56:	60e0      	str	r0, [r4, #12]
 8009f58:	6860      	ldr	r0, [r4, #4]
 8009f5a:	f7ff ff77 	bl	8009e4c <std>
 8009f5e:	2201      	movs	r2, #1
 8009f60:	2109      	movs	r1, #9
 8009f62:	68a0      	ldr	r0, [r4, #8]
 8009f64:	f7ff ff72 	bl	8009e4c <std>
 8009f68:	2202      	movs	r2, #2
 8009f6a:	2112      	movs	r1, #18
 8009f6c:	68e0      	ldr	r0, [r4, #12]
 8009f6e:	f7ff ff6d 	bl	8009e4c <std>
 8009f72:	2301      	movs	r3, #1
 8009f74:	61a3      	str	r3, [r4, #24]
 8009f76:	e7d2      	b.n	8009f1e <__sinit+0xe>
 8009f78:	0800a4e4 	.word	0x0800a4e4
 8009f7c:	08009e95 	.word	0x08009e95

08009f80 <__sfp>:
 8009f80:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8009f82:	0007      	movs	r7, r0
 8009f84:	f7ff ffa4 	bl	8009ed0 <__sfp_lock_acquire>
 8009f88:	4b1f      	ldr	r3, [pc, #124]	; (800a008 <__sfp+0x88>)
 8009f8a:	681e      	ldr	r6, [r3, #0]
 8009f8c:	69b3      	ldr	r3, [r6, #24]
 8009f8e:	2b00      	cmp	r3, #0
 8009f90:	d102      	bne.n	8009f98 <__sfp+0x18>
 8009f92:	0030      	movs	r0, r6
 8009f94:	f7ff ffbc 	bl	8009f10 <__sinit>
 8009f98:	3648      	adds	r6, #72	; 0x48
 8009f9a:	68b4      	ldr	r4, [r6, #8]
 8009f9c:	6873      	ldr	r3, [r6, #4]
 8009f9e:	3b01      	subs	r3, #1
 8009fa0:	d504      	bpl.n	8009fac <__sfp+0x2c>
 8009fa2:	6833      	ldr	r3, [r6, #0]
 8009fa4:	2b00      	cmp	r3, #0
 8009fa6:	d022      	beq.n	8009fee <__sfp+0x6e>
 8009fa8:	6836      	ldr	r6, [r6, #0]
 8009faa:	e7f6      	b.n	8009f9a <__sfp+0x1a>
 8009fac:	220c      	movs	r2, #12
 8009fae:	5ea5      	ldrsh	r5, [r4, r2]
 8009fb0:	2d00      	cmp	r5, #0
 8009fb2:	d11a      	bne.n	8009fea <__sfp+0x6a>
 8009fb4:	0020      	movs	r0, r4
 8009fb6:	4b15      	ldr	r3, [pc, #84]	; (800a00c <__sfp+0x8c>)
 8009fb8:	3058      	adds	r0, #88	; 0x58
 8009fba:	60e3      	str	r3, [r4, #12]
 8009fbc:	6665      	str	r5, [r4, #100]	; 0x64
 8009fbe:	f000 f847 	bl	800a050 <__retarget_lock_init_recursive>
 8009fc2:	f7ff ff8d 	bl	8009ee0 <__sfp_lock_release>
 8009fc6:	0020      	movs	r0, r4
 8009fc8:	2208      	movs	r2, #8
 8009fca:	0029      	movs	r1, r5
 8009fcc:	6025      	str	r5, [r4, #0]
 8009fce:	60a5      	str	r5, [r4, #8]
 8009fd0:	6065      	str	r5, [r4, #4]
 8009fd2:	6125      	str	r5, [r4, #16]
 8009fd4:	6165      	str	r5, [r4, #20]
 8009fd6:	61a5      	str	r5, [r4, #24]
 8009fd8:	305c      	adds	r0, #92	; 0x5c
 8009fda:	f7fd fa17 	bl	800740c <memset>
 8009fde:	6365      	str	r5, [r4, #52]	; 0x34
 8009fe0:	63a5      	str	r5, [r4, #56]	; 0x38
 8009fe2:	64a5      	str	r5, [r4, #72]	; 0x48
 8009fe4:	64e5      	str	r5, [r4, #76]	; 0x4c
 8009fe6:	0020      	movs	r0, r4
 8009fe8:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8009fea:	3468      	adds	r4, #104	; 0x68
 8009fec:	e7d7      	b.n	8009f9e <__sfp+0x1e>
 8009fee:	2104      	movs	r1, #4
 8009ff0:	0038      	movs	r0, r7
 8009ff2:	f7ff ff57 	bl	8009ea4 <__sfmoreglue>
 8009ff6:	1e04      	subs	r4, r0, #0
 8009ff8:	6030      	str	r0, [r6, #0]
 8009ffa:	d1d5      	bne.n	8009fa8 <__sfp+0x28>
 8009ffc:	f7ff ff70 	bl	8009ee0 <__sfp_lock_release>
 800a000:	230c      	movs	r3, #12
 800a002:	603b      	str	r3, [r7, #0]
 800a004:	e7ef      	b.n	8009fe6 <__sfp+0x66>
 800a006:	46c0      	nop			; (mov r8, r8)
 800a008:	0800a4e4 	.word	0x0800a4e4
 800a00c:	ffff0001 	.word	0xffff0001

0800a010 <_fwalk_reent>:
 800a010:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800a012:	0004      	movs	r4, r0
 800a014:	0006      	movs	r6, r0
 800a016:	2700      	movs	r7, #0
 800a018:	9101      	str	r1, [sp, #4]
 800a01a:	3448      	adds	r4, #72	; 0x48
 800a01c:	6863      	ldr	r3, [r4, #4]
 800a01e:	68a5      	ldr	r5, [r4, #8]
 800a020:	9300      	str	r3, [sp, #0]
 800a022:	9b00      	ldr	r3, [sp, #0]
 800a024:	3b01      	subs	r3, #1
 800a026:	9300      	str	r3, [sp, #0]
 800a028:	d504      	bpl.n	800a034 <_fwalk_reent+0x24>
 800a02a:	6824      	ldr	r4, [r4, #0]
 800a02c:	2c00      	cmp	r4, #0
 800a02e:	d1f5      	bne.n	800a01c <_fwalk_reent+0xc>
 800a030:	0038      	movs	r0, r7
 800a032:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 800a034:	89ab      	ldrh	r3, [r5, #12]
 800a036:	2b01      	cmp	r3, #1
 800a038:	d908      	bls.n	800a04c <_fwalk_reent+0x3c>
 800a03a:	220e      	movs	r2, #14
 800a03c:	5eab      	ldrsh	r3, [r5, r2]
 800a03e:	3301      	adds	r3, #1
 800a040:	d004      	beq.n	800a04c <_fwalk_reent+0x3c>
 800a042:	0029      	movs	r1, r5
 800a044:	0030      	movs	r0, r6
 800a046:	9b01      	ldr	r3, [sp, #4]
 800a048:	4798      	blx	r3
 800a04a:	4307      	orrs	r7, r0
 800a04c:	3568      	adds	r5, #104	; 0x68
 800a04e:	e7e8      	b.n	800a022 <_fwalk_reent+0x12>

0800a050 <__retarget_lock_init_recursive>:
 800a050:	4770      	bx	lr

0800a052 <__retarget_lock_acquire_recursive>:
 800a052:	4770      	bx	lr

0800a054 <__retarget_lock_release_recursive>:
 800a054:	4770      	bx	lr
	...

0800a058 <__swhatbuf_r>:
 800a058:	b570      	push	{r4, r5, r6, lr}
 800a05a:	000e      	movs	r6, r1
 800a05c:	001d      	movs	r5, r3
 800a05e:	230e      	movs	r3, #14
 800a060:	5ec9      	ldrsh	r1, [r1, r3]
 800a062:	0014      	movs	r4, r2
 800a064:	b096      	sub	sp, #88	; 0x58
 800a066:	2900      	cmp	r1, #0
 800a068:	da08      	bge.n	800a07c <__swhatbuf_r+0x24>
 800a06a:	220c      	movs	r2, #12
 800a06c:	5eb3      	ldrsh	r3, [r6, r2]
 800a06e:	2200      	movs	r2, #0
 800a070:	602a      	str	r2, [r5, #0]
 800a072:	061b      	lsls	r3, r3, #24
 800a074:	d411      	bmi.n	800a09a <__swhatbuf_r+0x42>
 800a076:	2380      	movs	r3, #128	; 0x80
 800a078:	00db      	lsls	r3, r3, #3
 800a07a:	e00f      	b.n	800a09c <__swhatbuf_r+0x44>
 800a07c:	466a      	mov	r2, sp
 800a07e:	f000 f91b 	bl	800a2b8 <_fstat_r>
 800a082:	2800      	cmp	r0, #0
 800a084:	dbf1      	blt.n	800a06a <__swhatbuf_r+0x12>
 800a086:	23f0      	movs	r3, #240	; 0xf0
 800a088:	9901      	ldr	r1, [sp, #4]
 800a08a:	021b      	lsls	r3, r3, #8
 800a08c:	4019      	ands	r1, r3
 800a08e:	4b05      	ldr	r3, [pc, #20]	; (800a0a4 <__swhatbuf_r+0x4c>)
 800a090:	18c9      	adds	r1, r1, r3
 800a092:	424b      	negs	r3, r1
 800a094:	4159      	adcs	r1, r3
 800a096:	6029      	str	r1, [r5, #0]
 800a098:	e7ed      	b.n	800a076 <__swhatbuf_r+0x1e>
 800a09a:	2340      	movs	r3, #64	; 0x40
 800a09c:	2000      	movs	r0, #0
 800a09e:	6023      	str	r3, [r4, #0]
 800a0a0:	b016      	add	sp, #88	; 0x58
 800a0a2:	bd70      	pop	{r4, r5, r6, pc}
 800a0a4:	ffffe000 	.word	0xffffe000

0800a0a8 <__smakebuf_r>:
 800a0a8:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800a0aa:	2602      	movs	r6, #2
 800a0ac:	898b      	ldrh	r3, [r1, #12]
 800a0ae:	0005      	movs	r5, r0
 800a0b0:	000c      	movs	r4, r1
 800a0b2:	4233      	tst	r3, r6
 800a0b4:	d006      	beq.n	800a0c4 <__smakebuf_r+0x1c>
 800a0b6:	0023      	movs	r3, r4
 800a0b8:	3347      	adds	r3, #71	; 0x47
 800a0ba:	6023      	str	r3, [r4, #0]
 800a0bc:	6123      	str	r3, [r4, #16]
 800a0be:	2301      	movs	r3, #1
 800a0c0:	6163      	str	r3, [r4, #20]
 800a0c2:	bdf7      	pop	{r0, r1, r2, r4, r5, r6, r7, pc}
 800a0c4:	466a      	mov	r2, sp
 800a0c6:	ab01      	add	r3, sp, #4
 800a0c8:	f7ff ffc6 	bl	800a058 <__swhatbuf_r>
 800a0cc:	9900      	ldr	r1, [sp, #0]
 800a0ce:	0007      	movs	r7, r0
 800a0d0:	0028      	movs	r0, r5
 800a0d2:	f7ff f92d 	bl	8009330 <_malloc_r>
 800a0d6:	2800      	cmp	r0, #0
 800a0d8:	d108      	bne.n	800a0ec <__smakebuf_r+0x44>
 800a0da:	220c      	movs	r2, #12
 800a0dc:	5ea3      	ldrsh	r3, [r4, r2]
 800a0de:	059a      	lsls	r2, r3, #22
 800a0e0:	d4ef      	bmi.n	800a0c2 <__smakebuf_r+0x1a>
 800a0e2:	2203      	movs	r2, #3
 800a0e4:	4393      	bics	r3, r2
 800a0e6:	431e      	orrs	r6, r3
 800a0e8:	81a6      	strh	r6, [r4, #12]
 800a0ea:	e7e4      	b.n	800a0b6 <__smakebuf_r+0xe>
 800a0ec:	4b0f      	ldr	r3, [pc, #60]	; (800a12c <__smakebuf_r+0x84>)
 800a0ee:	62ab      	str	r3, [r5, #40]	; 0x28
 800a0f0:	2380      	movs	r3, #128	; 0x80
 800a0f2:	89a2      	ldrh	r2, [r4, #12]
 800a0f4:	6020      	str	r0, [r4, #0]
 800a0f6:	4313      	orrs	r3, r2
 800a0f8:	81a3      	strh	r3, [r4, #12]
 800a0fa:	9b00      	ldr	r3, [sp, #0]
 800a0fc:	6120      	str	r0, [r4, #16]
 800a0fe:	6163      	str	r3, [r4, #20]
 800a100:	9b01      	ldr	r3, [sp, #4]
 800a102:	2b00      	cmp	r3, #0
 800a104:	d00d      	beq.n	800a122 <__smakebuf_r+0x7a>
 800a106:	0028      	movs	r0, r5
 800a108:	230e      	movs	r3, #14
 800a10a:	5ee1      	ldrsh	r1, [r4, r3]
 800a10c:	f000 f8e6 	bl	800a2dc <_isatty_r>
 800a110:	2800      	cmp	r0, #0
 800a112:	d006      	beq.n	800a122 <__smakebuf_r+0x7a>
 800a114:	2203      	movs	r2, #3
 800a116:	89a3      	ldrh	r3, [r4, #12]
 800a118:	4393      	bics	r3, r2
 800a11a:	001a      	movs	r2, r3
 800a11c:	2301      	movs	r3, #1
 800a11e:	4313      	orrs	r3, r2
 800a120:	81a3      	strh	r3, [r4, #12]
 800a122:	89a0      	ldrh	r0, [r4, #12]
 800a124:	4307      	orrs	r7, r0
 800a126:	81a7      	strh	r7, [r4, #12]
 800a128:	e7cb      	b.n	800a0c2 <__smakebuf_r+0x1a>
 800a12a:	46c0      	nop			; (mov r8, r8)
 800a12c:	08009e95 	.word	0x08009e95

0800a130 <_malloc_usable_size_r>:
 800a130:	1f0b      	subs	r3, r1, #4
 800a132:	681b      	ldr	r3, [r3, #0]
 800a134:	1f18      	subs	r0, r3, #4
 800a136:	2b00      	cmp	r3, #0
 800a138:	da01      	bge.n	800a13e <_malloc_usable_size_r+0xe>
 800a13a:	580b      	ldr	r3, [r1, r0]
 800a13c:	18c0      	adds	r0, r0, r3
 800a13e:	4770      	bx	lr

0800a140 <_raise_r>:
 800a140:	b570      	push	{r4, r5, r6, lr}
 800a142:	0004      	movs	r4, r0
 800a144:	000d      	movs	r5, r1
 800a146:	291f      	cmp	r1, #31
 800a148:	d904      	bls.n	800a154 <_raise_r+0x14>
 800a14a:	2316      	movs	r3, #22
 800a14c:	6003      	str	r3, [r0, #0]
 800a14e:	2001      	movs	r0, #1
 800a150:	4240      	negs	r0, r0
 800a152:	bd70      	pop	{r4, r5, r6, pc}
 800a154:	6c43      	ldr	r3, [r0, #68]	; 0x44
 800a156:	2b00      	cmp	r3, #0
 800a158:	d004      	beq.n	800a164 <_raise_r+0x24>
 800a15a:	008a      	lsls	r2, r1, #2
 800a15c:	189b      	adds	r3, r3, r2
 800a15e:	681a      	ldr	r2, [r3, #0]
 800a160:	2a00      	cmp	r2, #0
 800a162:	d108      	bne.n	800a176 <_raise_r+0x36>
 800a164:	0020      	movs	r0, r4
 800a166:	f000 f831 	bl	800a1cc <_getpid_r>
 800a16a:	002a      	movs	r2, r5
 800a16c:	0001      	movs	r1, r0
 800a16e:	0020      	movs	r0, r4
 800a170:	f000 f81a 	bl	800a1a8 <_kill_r>
 800a174:	e7ed      	b.n	800a152 <_raise_r+0x12>
 800a176:	2000      	movs	r0, #0
 800a178:	2a01      	cmp	r2, #1
 800a17a:	d0ea      	beq.n	800a152 <_raise_r+0x12>
 800a17c:	1c51      	adds	r1, r2, #1
 800a17e:	d103      	bne.n	800a188 <_raise_r+0x48>
 800a180:	2316      	movs	r3, #22
 800a182:	3001      	adds	r0, #1
 800a184:	6023      	str	r3, [r4, #0]
 800a186:	e7e4      	b.n	800a152 <_raise_r+0x12>
 800a188:	2400      	movs	r4, #0
 800a18a:	0028      	movs	r0, r5
 800a18c:	601c      	str	r4, [r3, #0]
 800a18e:	4790      	blx	r2
 800a190:	0020      	movs	r0, r4
 800a192:	e7de      	b.n	800a152 <_raise_r+0x12>

0800a194 <raise>:
 800a194:	b510      	push	{r4, lr}
 800a196:	4b03      	ldr	r3, [pc, #12]	; (800a1a4 <raise+0x10>)
 800a198:	0001      	movs	r1, r0
 800a19a:	6818      	ldr	r0, [r3, #0]
 800a19c:	f7ff ffd0 	bl	800a140 <_raise_r>
 800a1a0:	bd10      	pop	{r4, pc}
 800a1a2:	46c0      	nop			; (mov r8, r8)
 800a1a4:	20000014 	.word	0x20000014

0800a1a8 <_kill_r>:
 800a1a8:	2300      	movs	r3, #0
 800a1aa:	b570      	push	{r4, r5, r6, lr}
 800a1ac:	4d06      	ldr	r5, [pc, #24]	; (800a1c8 <_kill_r+0x20>)
 800a1ae:	0004      	movs	r4, r0
 800a1b0:	0008      	movs	r0, r1
 800a1b2:	0011      	movs	r1, r2
 800a1b4:	602b      	str	r3, [r5, #0]
 800a1b6:	f7f9 f926 	bl	8003406 <_kill>
 800a1ba:	1c43      	adds	r3, r0, #1
 800a1bc:	d103      	bne.n	800a1c6 <_kill_r+0x1e>
 800a1be:	682b      	ldr	r3, [r5, #0]
 800a1c0:	2b00      	cmp	r3, #0
 800a1c2:	d000      	beq.n	800a1c6 <_kill_r+0x1e>
 800a1c4:	6023      	str	r3, [r4, #0]
 800a1c6:	bd70      	pop	{r4, r5, r6, pc}
 800a1c8:	200003b0 	.word	0x200003b0

0800a1cc <_getpid_r>:
 800a1cc:	b510      	push	{r4, lr}
 800a1ce:	f7f9 f914 	bl	80033fa <_getpid>
 800a1d2:	bd10      	pop	{r4, pc}

0800a1d4 <__sread>:
 800a1d4:	b570      	push	{r4, r5, r6, lr}
 800a1d6:	000c      	movs	r4, r1
 800a1d8:	250e      	movs	r5, #14
 800a1da:	5f49      	ldrsh	r1, [r1, r5]
 800a1dc:	f000 f8a4 	bl	800a328 <_read_r>
 800a1e0:	2800      	cmp	r0, #0
 800a1e2:	db03      	blt.n	800a1ec <__sread+0x18>
 800a1e4:	6d63      	ldr	r3, [r4, #84]	; 0x54
 800a1e6:	181b      	adds	r3, r3, r0
 800a1e8:	6563      	str	r3, [r4, #84]	; 0x54
 800a1ea:	bd70      	pop	{r4, r5, r6, pc}
 800a1ec:	89a3      	ldrh	r3, [r4, #12]
 800a1ee:	4a02      	ldr	r2, [pc, #8]	; (800a1f8 <__sread+0x24>)
 800a1f0:	4013      	ands	r3, r2
 800a1f2:	81a3      	strh	r3, [r4, #12]
 800a1f4:	e7f9      	b.n	800a1ea <__sread+0x16>
 800a1f6:	46c0      	nop			; (mov r8, r8)
 800a1f8:	ffffefff 	.word	0xffffefff

0800a1fc <__swrite>:
 800a1fc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800a1fe:	001f      	movs	r7, r3
 800a200:	898b      	ldrh	r3, [r1, #12]
 800a202:	0005      	movs	r5, r0
 800a204:	000c      	movs	r4, r1
 800a206:	0016      	movs	r6, r2
 800a208:	05db      	lsls	r3, r3, #23
 800a20a:	d505      	bpl.n	800a218 <__swrite+0x1c>
 800a20c:	230e      	movs	r3, #14
 800a20e:	5ec9      	ldrsh	r1, [r1, r3]
 800a210:	2200      	movs	r2, #0
 800a212:	2302      	movs	r3, #2
 800a214:	f000 f874 	bl	800a300 <_lseek_r>
 800a218:	89a3      	ldrh	r3, [r4, #12]
 800a21a:	4a05      	ldr	r2, [pc, #20]	; (800a230 <__swrite+0x34>)
 800a21c:	0028      	movs	r0, r5
 800a21e:	4013      	ands	r3, r2
 800a220:	81a3      	strh	r3, [r4, #12]
 800a222:	0032      	movs	r2, r6
 800a224:	230e      	movs	r3, #14
 800a226:	5ee1      	ldrsh	r1, [r4, r3]
 800a228:	003b      	movs	r3, r7
 800a22a:	f000 f81f 	bl	800a26c <_write_r>
 800a22e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800a230:	ffffefff 	.word	0xffffefff

0800a234 <__sseek>:
 800a234:	b570      	push	{r4, r5, r6, lr}
 800a236:	000c      	movs	r4, r1
 800a238:	250e      	movs	r5, #14
 800a23a:	5f49      	ldrsh	r1, [r1, r5]
 800a23c:	f000 f860 	bl	800a300 <_lseek_r>
 800a240:	89a3      	ldrh	r3, [r4, #12]
 800a242:	1c42      	adds	r2, r0, #1
 800a244:	d103      	bne.n	800a24e <__sseek+0x1a>
 800a246:	4a05      	ldr	r2, [pc, #20]	; (800a25c <__sseek+0x28>)
 800a248:	4013      	ands	r3, r2
 800a24a:	81a3      	strh	r3, [r4, #12]
 800a24c:	bd70      	pop	{r4, r5, r6, pc}
 800a24e:	2280      	movs	r2, #128	; 0x80
 800a250:	0152      	lsls	r2, r2, #5
 800a252:	4313      	orrs	r3, r2
 800a254:	81a3      	strh	r3, [r4, #12]
 800a256:	6560      	str	r0, [r4, #84]	; 0x54
 800a258:	e7f8      	b.n	800a24c <__sseek+0x18>
 800a25a:	46c0      	nop			; (mov r8, r8)
 800a25c:	ffffefff 	.word	0xffffefff

0800a260 <__sclose>:
 800a260:	b510      	push	{r4, lr}
 800a262:	230e      	movs	r3, #14
 800a264:	5ec9      	ldrsh	r1, [r1, r3]
 800a266:	f000 f815 	bl	800a294 <_close_r>
 800a26a:	bd10      	pop	{r4, pc}

0800a26c <_write_r>:
 800a26c:	b570      	push	{r4, r5, r6, lr}
 800a26e:	0004      	movs	r4, r0
 800a270:	0008      	movs	r0, r1
 800a272:	0011      	movs	r1, r2
 800a274:	001a      	movs	r2, r3
 800a276:	2300      	movs	r3, #0
 800a278:	4d05      	ldr	r5, [pc, #20]	; (800a290 <_write_r+0x24>)
 800a27a:	602b      	str	r3, [r5, #0]
 800a27c:	f7f9 f8fc 	bl	8003478 <_write>
 800a280:	1c43      	adds	r3, r0, #1
 800a282:	d103      	bne.n	800a28c <_write_r+0x20>
 800a284:	682b      	ldr	r3, [r5, #0]
 800a286:	2b00      	cmp	r3, #0
 800a288:	d000      	beq.n	800a28c <_write_r+0x20>
 800a28a:	6023      	str	r3, [r4, #0]
 800a28c:	bd70      	pop	{r4, r5, r6, pc}
 800a28e:	46c0      	nop			; (mov r8, r8)
 800a290:	200003b0 	.word	0x200003b0

0800a294 <_close_r>:
 800a294:	2300      	movs	r3, #0
 800a296:	b570      	push	{r4, r5, r6, lr}
 800a298:	4d06      	ldr	r5, [pc, #24]	; (800a2b4 <_close_r+0x20>)
 800a29a:	0004      	movs	r4, r0
 800a29c:	0008      	movs	r0, r1
 800a29e:	602b      	str	r3, [r5, #0]
 800a2a0:	f7f9 f906 	bl	80034b0 <_close>
 800a2a4:	1c43      	adds	r3, r0, #1
 800a2a6:	d103      	bne.n	800a2b0 <_close_r+0x1c>
 800a2a8:	682b      	ldr	r3, [r5, #0]
 800a2aa:	2b00      	cmp	r3, #0
 800a2ac:	d000      	beq.n	800a2b0 <_close_r+0x1c>
 800a2ae:	6023      	str	r3, [r4, #0]
 800a2b0:	bd70      	pop	{r4, r5, r6, pc}
 800a2b2:	46c0      	nop			; (mov r8, r8)
 800a2b4:	200003b0 	.word	0x200003b0

0800a2b8 <_fstat_r>:
 800a2b8:	2300      	movs	r3, #0
 800a2ba:	b570      	push	{r4, r5, r6, lr}
 800a2bc:	4d06      	ldr	r5, [pc, #24]	; (800a2d8 <_fstat_r+0x20>)
 800a2be:	0004      	movs	r4, r0
 800a2c0:	0008      	movs	r0, r1
 800a2c2:	0011      	movs	r1, r2
 800a2c4:	602b      	str	r3, [r5, #0]
 800a2c6:	f7f9 f8fd 	bl	80034c4 <_fstat>
 800a2ca:	1c43      	adds	r3, r0, #1
 800a2cc:	d103      	bne.n	800a2d6 <_fstat_r+0x1e>
 800a2ce:	682b      	ldr	r3, [r5, #0]
 800a2d0:	2b00      	cmp	r3, #0
 800a2d2:	d000      	beq.n	800a2d6 <_fstat_r+0x1e>
 800a2d4:	6023      	str	r3, [r4, #0]
 800a2d6:	bd70      	pop	{r4, r5, r6, pc}
 800a2d8:	200003b0 	.word	0x200003b0

0800a2dc <_isatty_r>:
 800a2dc:	2300      	movs	r3, #0
 800a2de:	b570      	push	{r4, r5, r6, lr}
 800a2e0:	4d06      	ldr	r5, [pc, #24]	; (800a2fc <_isatty_r+0x20>)
 800a2e2:	0004      	movs	r4, r0
 800a2e4:	0008      	movs	r0, r1
 800a2e6:	602b      	str	r3, [r5, #0]
 800a2e8:	f7f9 f8fa 	bl	80034e0 <_isatty>
 800a2ec:	1c43      	adds	r3, r0, #1
 800a2ee:	d103      	bne.n	800a2f8 <_isatty_r+0x1c>
 800a2f0:	682b      	ldr	r3, [r5, #0]
 800a2f2:	2b00      	cmp	r3, #0
 800a2f4:	d000      	beq.n	800a2f8 <_isatty_r+0x1c>
 800a2f6:	6023      	str	r3, [r4, #0]
 800a2f8:	bd70      	pop	{r4, r5, r6, pc}
 800a2fa:	46c0      	nop			; (mov r8, r8)
 800a2fc:	200003b0 	.word	0x200003b0

0800a300 <_lseek_r>:
 800a300:	b570      	push	{r4, r5, r6, lr}
 800a302:	0004      	movs	r4, r0
 800a304:	0008      	movs	r0, r1
 800a306:	0011      	movs	r1, r2
 800a308:	001a      	movs	r2, r3
 800a30a:	2300      	movs	r3, #0
 800a30c:	4d05      	ldr	r5, [pc, #20]	; (800a324 <_lseek_r+0x24>)
 800a30e:	602b      	str	r3, [r5, #0]
 800a310:	f7f9 f8ef 	bl	80034f2 <_lseek>
 800a314:	1c43      	adds	r3, r0, #1
 800a316:	d103      	bne.n	800a320 <_lseek_r+0x20>
 800a318:	682b      	ldr	r3, [r5, #0]
 800a31a:	2b00      	cmp	r3, #0
 800a31c:	d000      	beq.n	800a320 <_lseek_r+0x20>
 800a31e:	6023      	str	r3, [r4, #0]
 800a320:	bd70      	pop	{r4, r5, r6, pc}
 800a322:	46c0      	nop			; (mov r8, r8)
 800a324:	200003b0 	.word	0x200003b0

0800a328 <_read_r>:
 800a328:	b570      	push	{r4, r5, r6, lr}
 800a32a:	0004      	movs	r4, r0
 800a32c:	0008      	movs	r0, r1
 800a32e:	0011      	movs	r1, r2
 800a330:	001a      	movs	r2, r3
 800a332:	2300      	movs	r3, #0
 800a334:	4d05      	ldr	r5, [pc, #20]	; (800a34c <_read_r+0x24>)
 800a336:	602b      	str	r3, [r5, #0]
 800a338:	f7f9 f881 	bl	800343e <_read>
 800a33c:	1c43      	adds	r3, r0, #1
 800a33e:	d103      	bne.n	800a348 <_read_r+0x20>
 800a340:	682b      	ldr	r3, [r5, #0]
 800a342:	2b00      	cmp	r3, #0
 800a344:	d000      	beq.n	800a348 <_read_r+0x20>
 800a346:	6023      	str	r3, [r4, #0]
 800a348:	bd70      	pop	{r4, r5, r6, pc}
 800a34a:	46c0      	nop			; (mov r8, r8)
 800a34c:	200003b0 	.word	0x200003b0

0800a350 <_init>:
 800a350:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800a352:	46c0      	nop			; (mov r8, r8)
 800a354:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800a356:	bc08      	pop	{r3}
 800a358:	469e      	mov	lr, r3
 800a35a:	4770      	bx	lr

0800a35c <_fini>:
 800a35c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800a35e:	46c0      	nop			; (mov r8, r8)
 800a360:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800a362:	bc08      	pop	{r3}
 800a364:	469e      	mov	lr, r3
 800a366:	4770      	bx	lr
